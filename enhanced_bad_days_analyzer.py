#!/usr/bin/env python3
"""
üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–õ–û–•–ò–• –î–ù–ï–ô –ü–†–û–î–ê–ñ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –£—á–∏—Ç—ã–≤–∞–µ—Ç –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ML-–∞–Ω–∞–ª–∏–∑–∞
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—á—Ç–æ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å)
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–Ω–∏—è
"""

import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta
from statistics import mean, median
import json
import time

class EnhancedBadDaysAnalyzer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        self.holidays_data = self._load_holidays_data()
        
    def analyze_bad_days(self, restaurant_name=None, days_to_analyze=30):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –ø—Ä–æ–¥–∞–∂ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ—Ç—Ä–∏–∫"""
        
        print("üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–õ–û–•–ò–• –î–ù–ï–ô –ü–†–û–î–ê–ñ")
        print("=" * 80)
        print("üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –í–°–ï –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
        print("=" * 80)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        daily_data = self._load_enhanced_daily_data(restaurant_name, days_to_analyze)
        bad_days = self._categorize_days(daily_data)
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å
        analyzed_days = []
        for _, bad_day in bad_days.iterrows():
            analysis = self._analyze_single_bad_day_enhanced(bad_day)
            analyzed_days.append(analysis)
            
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._generate_enhanced_summary_report(analyzed_days)
        
        return analyzed_days
        
    def _load_enhanced_daily_data(self, restaurant_name, days_count):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        
        print(f"\nüìä –ó–ê–ì–†–£–ó–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–´–• –î–ê–ù–ù–´–• –ó–ê {days_count} –î–ù–ï–ô")
        print("-" * 60)
        
        conn = sqlite3.connect(self.db_path)
        
        restaurant_filter = ""
        if restaurant_name:
            restaurant_filter = f"AND r.name = '{restaurant_name}'"
            
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            r.id as restaurant_id,
            
            -- –ü–†–û–î–ê–ñ–ò –ò –ó–ê–ö–ê–ó–´
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã!)
            COALESCE(g.store_is_closed, 0) as grab_store_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_store_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.store_is_busy, 0) as grab_store_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_store_busy,
            
            -- –û–¢–ú–ï–ù–´ –ò –ü–†–û–ë–õ–ï–ú–´ –î–û–°–¢–ê–í–ö–ò
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            COALESCE(g.close_time_minutes, 0) as close_time_minutes,
            
            -- –í–†–ï–ú–Ø –ì–û–¢–û–í–ö–ò –ò –î–û–°–¢–ê–í–ö–ò
            COALESCE(g.preparation_time, 0) as grab_prep_time,
            COALESCE(gj.preparation_time, 0) as gojek_prep_time,
            COALESCE(g.delivery_time, 0) as grab_delivery_time,
            COALESCE(gj.delivery_time, 0) as gojek_delivery_time,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì
            COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0) as total_ad_spend,
            CASE WHEN COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0) > 0 
                 THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0))
                 ELSE 0 END as roas,
                 
            -- –†–ï–ô–¢–ò–ù–ì –ò –ö–ê–ß–ï–°–¢–í–û
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            
            -- –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE g.stat_date >= date('now', '-{days_count} days')
        AND r.name IS NOT NULL
        {restaurant_filter}
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        if restaurant_name:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}'")
        else:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –ø–æ {df['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º")
            
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print("   ‚Ä¢ Store Closed (—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç)")
        print("   ‚Ä¢ Out of Stock (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞)")
        print("   ‚Ä¢ Store Busy (—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–Ω—è—Ç)")
        print("   ‚Ä¢ Cancelled Orders (–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤)")
        print("   ‚Ä¢ Preparation Time (–≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏)")
        print("   ‚Ä¢ Delivery Time (–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏)")
            
        return df
        
    def _categorize_days(self, daily_data):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –¥–Ω–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–¥–∞–∂"""
        
        print(f"\nüîç –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –î–ù–ï–ô –ü–û –ü–†–û–î–ê–ñ–ê–ú")
        print("-" * 40)
        
        mean_sales = daily_data['total_sales'].mean()
        std_sales = daily_data['total_sales'].std()
        
        p5 = daily_data['total_sales'].quantile(0.05)
        p10 = daily_data['total_sales'].quantile(0.10)
        p25 = daily_data['total_sales'].quantile(0.25)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–û–†–û–ì–ò:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mean_sales:,.0f} IDR")
        print(f"   ‚Ä¢ 5% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p5:,.0f} IDR")
        print(f"   ‚Ä¢ 10% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p10:,.0f} IDR")
        
        critical_days = daily_data[daily_data['total_sales'] < p5]
        very_bad_days = daily_data[(daily_data['total_sales'] >= p5) & 
                                  (daily_data['total_sales'] < p10)]
        
        print(f"\nüìÖ –ö–ê–¢–ï–ì–û–†–ò–ò:")
        print(f"   üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï: {len(critical_days)}")
        print(f"   üü† –û–ß–ï–ù–¨ –ü–õ–û–•–ò–ï: {len(very_bad_days)}")
        
        problem_days = pd.concat([critical_days, very_bad_days])
        print(f"\nüéØ –í–´–ë–†–ê–ù–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: {len(problem_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
        
        return problem_days.sort_values('stat_date', ascending=False)
        
    def _analyze_single_bad_day_enhanced(self, day_data):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø–ª–æ—Ö–æ–≥–æ –¥–Ω—è"""
        
        date = day_data['stat_date']
        sales = day_data['total_sales']
        restaurant = day_data['restaurant_name']
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {date} - {restaurant}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR")
        print("-" * 60)
        
        analysis = {
            'date': date,
            'restaurant': restaurant,
            'sales': sales,
            'reasons': [],
            'severity': 'unknown',
            'recommendations': [],
            'operational_details': {}
        }
        
        baseline = self._get_baseline_sales(restaurant, date)
        if baseline > 0:
            drop_percent = ((sales - baseline) / baseline) * 100
            analysis['drop_percent'] = drop_percent
            analysis['baseline'] = baseline
            
            if drop_percent < -50:
                analysis['severity'] = 'critical'
            elif drop_percent < -30:
                analysis['severity'] = 'serious'
            elif drop_percent < -15:
                analysis['severity'] = 'noticeable'
            else:
                analysis['severity'] = 'minor'
                
        # –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        
        # 1. –ü–†–ê–ó–î–ù–ò–ö–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
        holiday_impact = self._check_holiday_impact(date)
        if holiday_impact:
            analysis['reasons'].append(holiday_impact)
            print(f"üéâ {holiday_impact['description']}")
            
        # 2. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
        critical_ops = self._check_critical_operational_issues(day_data)
        if critical_ops:
            analysis['reasons'].extend(critical_ops)
            analysis['operational_details'] = self._get_operational_details(day_data)
            for issue in critical_ops:
                print(f"üö® {issue['description']}")
                
        # 3. –ü–†–û–ë–õ–ï–ú–´ –° –¢–û–í–ê–†–û–ú –ò –î–û–°–¢–£–ü–ù–û–°–¢–¨–Æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        stock_issues = self._check_stock_and_availability(day_data)
        if stock_issues:
            analysis['reasons'].extend(stock_issues)
            for issue in stock_issues:
                print(f"üì¶ {issue['description']}")
                
        # 4. –ü–†–û–ë–õ–ï–ú–´ –°–û –í–†–ï–ú–ï–ù–ï–ú –ì–û–¢–û–í–ö–ò/–î–û–°–¢–ê–í–ö–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        timing_issues = self._check_timing_issues(day_data)
        if timing_issues:
            analysis['reasons'].extend(timing_issues)
            for issue in timing_issues:
                print(f"‚è±Ô∏è {issue['description']}")
                
        # 5. –ú–ê–†–ö–ï–¢–ò–ù–ì (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)
        marketing_impact = self._check_marketing_issues_enhanced(day_data, baseline)
        if marketing_impact:
            analysis['reasons'].append(marketing_impact)
            print(f"üì± {marketing_impact['description']}")
            
        # 6. –†–ï–ô–¢–ò–ù–ì (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6)
        rating_impact = self._check_rating_issues(day_data)
        if rating_impact:
            analysis['reasons'].append(rating_impact)
            print(f"‚≠ê {rating_impact['description']}")
            
        # 7. –î–ï–ù–¨ –ù–ï–î–ï–õ–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 7)
        weekday_impact = self._check_weekday_patterns(day_data)
        if weekday_impact:
            analysis['reasons'].append(weekday_impact)
            print(f"üìÖ {weekday_impact['description']}")
            
        # 8. –ü–û–ì–û–î–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 8)
        weather_impact = self._check_weather_impact(date)
        if weather_impact:
            analysis['reasons'].append(weather_impact)
            print(f"üåßÔ∏è {weather_impact['description']}")
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis['recommendations'] = self._generate_actionable_recommendations(analysis)
        
        if not analysis['reasons']:
            print("‚ùì –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
        return analysis
        
    def _check_critical_operational_issues(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        
        issues = []
        
        # 1. –†–ï–°–¢–û–†–ê–ù –ó–ê–ö–†–´–¢
        grab_closed = day_data.get('grab_store_closed', 0)
        gojek_closed = day_data.get('gojek_store_closed', 0)
        
        if grab_closed > 0 or gojek_closed > 0:
            platforms_affected = []
            if grab_closed > 0:
                platforms_affected.append("Grab")
            if gojek_closed > 0:
                platforms_affected.append("Gojek")
                
            impact = -60 if len(platforms_affected) == 2 else -30
            issues.append({
                'factor': 'store_closed',
                'impact_percent': impact,
                'description': f"–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç –Ω–∞ {'/'.join(platforms_affected)} ({impact}%)",
                'priority': 2,
                'actionable': True
            })
            
        # 2. –†–ï–°–¢–û–†–ê–ù –ó–ê–ù–Ø–¢/–ü–ï–†–ï–ì–†–£–ñ–ï–ù
        grab_busy = day_data.get('grab_store_busy', 0)
        gojek_busy = day_data.get('gojek_store_busy', 0)
        
        if grab_busy > 0 or gojek_busy > 0:
            platforms_affected = []
            if grab_busy > 0:
                platforms_affected.append("Grab")
            if gojek_busy > 0:
                platforms_affected.append("Gojek")
                
            impact = -40 if len(platforms_affected) == 2 else -20
            issues.append({
                'factor': 'store_busy',
                'impact_percent': impact,
                'description': f"–†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ {'/'.join(platforms_affected)} ({impact}%)",
                'priority': 2,
                'actionable': True
            })
            
        # 3. –í–†–ï–ú–Ø –ó–ê–ö–†–´–¢–ò–Ø
        close_time = day_data.get('close_time_minutes', 0)
        if close_time > 240:  # –ë–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤
            impact = min(-70, -(close_time / 720 * 100))
            issues.append({
                'factor': 'close_time',
                'impact_percent': impact,
                'description': f"–ó–∞–∫—Ä—ã—Ç {close_time//60}—á {close_time%60}–º–∏–Ω ({impact:.0f}%)",
                'priority': 2,
                'actionable': True
            })
            
        return issues
        
    def _check_stock_and_availability(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º"""
        
        issues = []
        
        # –î–ï–§–ò–¶–ò–¢ –¢–û–í–ê–†–ê
        grab_out_of_stock = day_data.get('grab_out_of_stock', 0)
        gojek_out_of_stock = day_data.get('gojek_out_of_stock', 0)
        
        if grab_out_of_stock > 0 or gojek_out_of_stock > 0:
            platforms_affected = []
            if grab_out_of_stock > 0:
                platforms_affected.append("Grab")
            if gojek_out_of_stock > 0:
                platforms_affected.append("Gojek")
                
            impact = -50 if len(platforms_affected) == 2 else -25
            issues.append({
                'factor': 'out_of_stock',
                'impact_percent': impact,
                'description': f"–î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ {'/'.join(platforms_affected)} ({impact}%)",
                'priority': 3,
                'actionable': True
            })
            
        return issues
        
    def _check_timing_issues(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        
        issues = []
        
        # –í–†–ï–ú–Ø –ì–û–¢–û–í–ö–ò
        grab_prep = day_data.get('grab_prep_time', 0)
        gojek_prep = day_data.get('gojek_prep_time', 0)
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ - –¥–æ 30 –º–∏–Ω—É—Ç
        if grab_prep > 30 or gojek_prep > 30:
            max_prep_time = max(grab_prep, gojek_prep)
            impact = -min(30, (max_prep_time - 30) * 2)  # –ó–∞ –∫–∞–∂–¥—É—é –ª–∏—à–Ω—é—é –º–∏–Ω—É—Ç—É -2%
            issues.append({
                'factor': 'prep_time',
                'impact_percent': impact,
                'description': f"–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {max_prep_time:.0f} –º–∏–Ω ({impact}%)",
                'priority': 4,
                'actionable': True
            })
            
        # –í–†–ï–ú–Ø –î–û–°–¢–ê–í–ö–ò  
        grab_delivery = day_data.get('grab_delivery_time', 0)
        gojek_delivery = day_data.get('gojek_delivery_time', 0)
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ - –¥–æ 45 –º–∏–Ω—É—Ç
        if grab_delivery > 45 or gojek_delivery > 45:
            max_delivery_time = max(grab_delivery, gojek_delivery)
            impact = -min(20, (max_delivery_time - 45))  # –ó–∞ –∫–∞–∂–¥—É—é –ª–∏—à–Ω—é—é –º–∏–Ω—É—Ç—É -1%
            issues.append({
                'factor': 'delivery_time',
                'impact_percent': impact,
                'description': f"–î–æ–ª–≥–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {max_delivery_time:.0f} –º–∏–Ω ({impact}%)",
                'priority': 4,
                'actionable': False  # –ù–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
            })
            
        return issues
        
    def _check_marketing_issues_enhanced(self, day_data, baseline):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        ad_spend = day_data.get('total_ad_spend', 0)
        roas = day_data.get('roas', 0)
        
        avg_ad_spend = baseline * 0.05 if baseline > 0 else 100000
        
        issues = []
        
        if ad_spend < avg_ad_spend * 0.3:  # –°–Ω–∏–∂–µ–Ω –±–æ–ª–µ–µ —á–µ–º –≤ 3 —Ä–∞–∑–∞
            reduction = ((avg_ad_spend - ad_spend) / avg_ad_spend) * 100
            impact = -min(50, reduction * 0.6)
            issues.append(f"–ë—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã —Å–Ω–∏–∂–µ–Ω –Ω–∞ {reduction:.0f}% ({impact:.0f}%)")
            
        if roas > 0 and roas < 1.0:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π ROAS
            impact = -35
            issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS: {roas:.1f} ({impact}%)")
        elif roas > 0 and roas < 1.5:
            impact = -20
            issues.append(f"–ù–∏–∑–∫–∏–π ROAS: {roas:.1f} ({impact}%)")
            
        if issues:
            return {
                'factor': 'marketing',
                'impact_percent': -30,
                'description': "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º: " + "; ".join(issues),
                'priority': 5,
                'actionable': True
            }
        return None
        
    def _get_operational_details(self, day_data):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        return {
            'grab_closed': day_data.get('grab_store_closed', 0),
            'gojek_closed': day_data.get('gojek_store_closed', 0),
            'grab_busy': day_data.get('grab_store_busy', 0),
            'gojek_busy': day_data.get('gojek_store_busy', 0),
            'grab_out_of_stock': day_data.get('grab_out_of_stock', 0),
            'gojek_out_of_stock': day_data.get('gojek_out_of_stock', 0),
            'grab_cancelled': day_data.get('grab_cancelled', 0),
            'gojek_cancelled': day_data.get('gojek_cancelled', 0),
            'close_time_minutes': day_data.get('close_time_minutes', 0),
            'grab_prep_time': day_data.get('grab_prep_time', 0),
            'gojek_prep_time': day_data.get('gojek_prep_time', 0)
        }
        
    def _generate_actionable_recommendations(self, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        recommendations = []
        
        for reason in analysis['reasons']:
            factor = reason['factor']
            actionable = reason.get('actionable', True)
            
            if not actionable:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ, —á—Ç–æ –Ω–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å
                
            if factor == 'holiday':
                recommendations.extend([
                    "üìÖ –ó–∞—Ä–∞–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
                    "üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤",
                    "üéØ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
                ])
            elif factor == 'store_closed':
                recommendations.extend([
                    "üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                    "üë• –û–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                    "üìã –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏–π"
                ])
            elif factor == 'store_busy':
                recommendations.extend([
                    "üë®‚Äçüç≥ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–∞—Ä–æ–≤ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã",
                    "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∫—É—Ö–Ω–µ",
                    "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª"
                ])
            elif factor == 'out_of_stock':
                recommendations.extend([
                    "üì¶ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏",
                    "üöö –ù–∞–ª–∞–¥–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "üìã –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤"
                ])
            elif factor == 'prep_time':
                recommendations.extend([
                    "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –≥–æ—Ç–æ–≤–∫–∏",
                    "üë®‚Äçüç≥ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∫—É—Ö–Ω–∏",
                    "üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                ])
            elif factor == 'marketing':
                recommendations.extend([
                    "üí∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è",
                    "üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏",
                    "üìä –£–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∏ –∫—Ä–µ–∞—Ç–∏–≤—ã"
                ])
            elif factor == 'rating':
                recommendations.extend([
                    "‚≠ê –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞",
                    "üí¨ –ê–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "üë• –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
                ])
                
        return list(set(recommendations))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
    def _generate_enhanced_summary_report(self, analyzed_days):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        
        print(f"\nüìã –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)
        
        if not analyzed_days:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º
        factor_counts = {}
        actionable_issues = 0
        non_actionable_issues = 0
        
        for day in analyzed_days:
            for reason in day['reasons']:
                factor = reason['factor']
                factor_counts[factor] = factor_counts.get(factor, 0) + 1
                
                if reason.get('actionable', True):
                    actionable_issues += 1
                else:
                    non_actionable_issues += 1
                    
        print(f"üìä –û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ:")
        factor_names = {
            'holiday': 'üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏',
            'store_closed': 'üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç',
            'store_busy': 'üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
            'out_of_stock': 'üì¶ –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞',
            'prep_time': '‚è±Ô∏è –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏',
            'delivery_time': 'üöö –î–æ–ª–≥–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
            'marketing': 'üì± –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º',
            'rating': '‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
            'weekday': 'üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            'weather': 'üåßÔ∏è –ü–æ–≥–æ–¥–∞'
        }
        
        for factor, count in sorted(factor_counts.items(), key=lambda x: x[1], reverse=True):
            factor_name = factor_names.get(factor, factor)
            percentage = (count / len(analyzed_days)) * 100
            print(f"   {factor_name}: {count} –¥–Ω–µ–π ({percentage:.1f}%)")
            
        print(f"\nüéØ –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–û–°–¢–¨ –ü–†–û–ë–õ–ï–ú:")
        total_issues = actionable_issues + non_actionable_issues
        if total_issues > 0:
            actionable_pct = (actionable_issues / total_issues) * 100
            print(f"   ‚úÖ –ú–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å: {actionable_issues} ({actionable_pct:.1f}%)")
            print(f"   ‚ùå –ù–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å: {non_actionable_issues} ({100-actionable_pct:.1f}%)")
            
        # –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recommendations = []
        for day in analyzed_days:
            all_recommendations.extend(day['recommendations'])
            
        unique_recommendations = list(set(all_recommendations))
        
        print(f"\nüí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–ß–¢–û –ú–û–ñ–ï–ú –ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–¢–¨):")
        for i, rec in enumerate(unique_recommendations[:12], 1):
            print(f"   {i}. {rec}")
            
        print(f"\nüéØ –ò–¢–û–ì–û:")
        print(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {len(analyzed_days)}")
        print(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º: {actionable_issues}")
        print(f"   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(unique_recommendations)}")
        
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def _check_holiday_impact(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        
        if date in self.holidays_data:
            holiday = self.holidays_data[date]
            impact_percent = holiday.get('expected_impact', 0)
            
            if abs(impact_percent) > 15:
                return {
                    'factor': 'holiday',
                    'impact_percent': impact_percent,
                    'description': f"–ü—Ä–∞–∑–¥–Ω–∏–∫ '{holiday['name']}' - {holiday['impact']}",
                    'priority': 1,
                    'actionable': False  # –ù–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
                }
        return None
        
    def _check_rating_issues(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        
        rating = day_data.get('rating', 4.0)
        
        if rating < 3.5:
            impact = -30
            return {
                'factor': 'rating',
                'impact_percent': impact,
                'description': f"–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.1f} ({impact}%)",
                'priority': 6,
                'actionable': True
            }
        elif rating < 4.0:
            impact = -15
            return {
                'factor': 'rating',
                'impact_percent': impact,
                'description': f"–†–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: {rating:.1f} ({impact}%)",
                'priority': 6,
                'actionable': True
            }
        return None
        
    def _check_weekday_patterns(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        
        day_of_week = day_data.get('day_of_week', 0)
        weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        weekday_impacts = {
            0: -15,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            1: -5,   # –í—Ç–æ—Ä–Ω–∏–∫
            2: 0,    # –°—Ä–µ–¥–∞
            3: 0,    # –ß–µ—Ç–≤–µ—Ä–≥
            4: 5,    # –ü—è—Ç–Ω–∏—Ü–∞
            5: 10,   # –°—É–±–±–æ—Ç–∞
            6: 5     # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        }
        
        impact = weekday_impacts.get(day_of_week, 0)
        if abs(impact) > 10:
            return {
                'factor': 'weekday',
                'impact_percent': impact,
                'description': f"{weekdays[day_of_week]} - –æ–±—ã—á–Ω–æ {impact:+}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ",
                'priority': 7,
                'actionable': False  # –ù–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            }
        return None
        
    def _check_weather_impact(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        
        weather = self._get_weather_for_date(-8.6705, 115.2126, date)
        rain = weather['rain']
        
        if rain > 25:
            return {
                'factor': 'weather',
                'impact_percent': -10,
                'description': f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (-10%)",
                'priority': 8,
                'actionable': False  # –ù–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≥–æ–¥—É
            }
        elif rain > 15:
            return {
                'factor': 'weather',
                'impact_percent': -7,
                'description': f"–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (-7%)",
                'priority': 8,
                'actionable': False
            }
        return None
        
    def _get_baseline_sales(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = f"""
        SELECT AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date BETWEEN date('{date}', '-30 days') AND date('{date}', '-1 day')
        AND (g.sales > 0 OR gj.sales > 0)
        """
        
        result = pd.read_sql_query(query, conn)
        conn.close()
        
        return result['avg_sales'].iloc[0] if len(result) > 0 else 0
        
    def _load_holidays_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        
        holidays = {
            '2024-01-01': {'name': 'New Year', 'expected_impact': 50, 'impact': '–õ—é–¥–∏ –ø—Ä–∞–∑–¥–Ω—É—é—Ç –¥–æ–º–∞'},
            '2024-02-10': {'name': 'Chinese New Year', 'expected_impact': 40, 'impact': '–ö–∏—Ç–∞–π—Å–∫–∞—è –æ–±—â–∏–Ω–∞ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç'},
            '2024-03-11': {'name': 'Nyepi', 'expected_impact': -95, 'impact': '–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã - –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'},
            '2024-04-10': {'name': 'Eid al-Fitr', 'expected_impact': -45, 'impact': '–ö—É—Ä—å–µ—Ä—ã-–º—É—Å—É–ª—å–º–∞–Ω–µ –ø—Ä–∞–∑–¥–Ω—É—é—Ç'},
            '2024-12-25': {'name': 'Christmas', 'expected_impact': -40, 'impact': '–ö—É—Ä—å–µ—Ä—ã-—Ö—Ä–∏—Å—Ç–∏–∞–Ω–µ —Å —Å–µ–º—å—è–º–∏'},
        }
        
        return holidays
        
    def _get_weather_for_date(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –¥–∞—Ç—ã"""
        
        cache_key = f"{lat}_{lon}_{date}"
        
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
            
        default_weather = {'temp': 28.0, 'rain': 0.0, 'wind': 5.0}
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    wind_speed = hourly.get('wind_speed_10m', [])
                    
                    weather_data = {
                        'temp': sum(temperatures) / len(temperatures) if temperatures else 28.0,
                        'rain': sum(precipitation) if precipitation else 0.0,
                        'wind': sum(wind_speed) / len(wind_speed) if wind_speed else 5.0
                    }
                    
                    self.weather_cache[cache_key] = weather_data
                    return weather_data
                    
        except Exception:
            pass
            
        self.weather_cache[cache_key] = default_weather
        return default_weather

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = EnhancedBadDaysAnalyzer()
    results = analyzer.analyze_bad_days(days_to_analyze=30)
    
    print(f"\nüéâ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –í–°–ï –ø—Ä–∏—á–∏–Ω—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã!")

if __name__ == "__main__":
    main()