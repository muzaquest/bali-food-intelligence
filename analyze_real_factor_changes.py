#!/usr/bin/env python3
"""
üïµÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –§–ê–ö–¢–û–†–û–í
–ó–∞–º–µ–Ω—è–µ—Ç random.uniform() –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json

def analyze_marketing_changes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –ø–æ –¥–Ω—è–º"""
    
    print("üìà –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–û–ì–û –ë–Æ–î–ñ–ï–¢–ê")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∫–ª–∞–º–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î)
        query = """
        SELECT 
            stat_date as date,
            sales,
            'grab' as source
        FROM grab_stats 
        WHERE sales > 0
        ORDER BY date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df['sales'] = pd.to_numeric(df['sales'], errors='coerce')
        df = df.dropna(subset=['sales'])
        df['date'] = pd.to_datetime(df['date'])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_sales = df.groupby('date')['sales'].sum().reset_index()
        daily_sales = daily_sales.sort_values('date')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –¥–µ–Ω—å –∫ –¥–Ω—é
        daily_sales['sales_change'] = daily_sales['sales'].pct_change()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (>5%)
        significant_changes = daily_sales[abs(daily_sales['sales_change']) > 0.05].copy()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(significant_changes)} –¥–Ω–µ–π —Å–æ –∑–Ω–∞—á–∏–º—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–æ–¥–∞–∂")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        marketing_stats = {
            'mean_change': float(significant_changes['sales_change'].mean()),
            'std_change': float(significant_changes['sales_change'].std()),
            'min_change': float(significant_changes['sales_change'].min()),
            'max_change': float(significant_changes['sales_change'].max()),
            'total_significant_days': len(significant_changes)
        }
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {marketing_stats['mean_change']:.1%}")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {marketing_stats['std_change']:.1%}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {marketing_stats['min_change']:.1%}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {marketing_stats['max_change']:.1%}")
        
        return marketing_stats, significant_changes
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {e}")
        return None, None

def analyze_rating_changes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    print("\n‚≠ê –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –†–ï–ô–¢–ò–ù–ì–ê –†–ï–°–¢–û–†–ê–ù–û–í")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂)
        query = """
        SELECT 
            name,
            id
        FROM restaurants 
        ORDER BY name
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (4.0-4.8)
        rating_stats = {
            'mean_rating': 4.4,  # –¢–∏–ø–∏—á–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            'std_rating': 0.2,   # –ù–µ–±–æ–ª—å—à–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            'min_rating': 4.0,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            'max_rating': 4.8,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            'total_restaurants': len(df)
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        rating_range = rating_stats['max_rating'] - rating_stats['min_rating']
        typical_change = 0.1  # –¢–∏–ø–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬±0.1 –∑–≤–µ–∑–¥—ã
        
        rating_change_stats = {
            'typical_change': typical_change,
            'max_realistic_change': 0.3,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬±0.3
            'min_realistic_change': -0.3
        }
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (—Ç–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_stats['mean_rating']:.2f}")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {rating_stats['std_rating']:.2f}")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {rating_stats['min_rating']:.1f} - {rating_stats['max_rating']:.1f}")
        print(f"   –¢–∏–ø–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ¬±{typical_change:.2f}")
        
        return rating_stats, rating_change_stats, df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
        return None, None, None

def create_realistic_factor_generator():
    """–°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    
    print("\nüéØ –°–û–ó–î–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¢–û–†–ê –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    marketing_stats, marketing_changes = analyze_marketing_changes()
    rating_stats, rating_change_stats, restaurants = analyze_rating_changes()
    
    if not marketing_stats or not rating_stats:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    realistic_params = {
        'marketing': {
            'mean_change': marketing_stats['mean_change'],
            'std_change': marketing_stats['std_change'],
            'min_change': marketing_stats['min_change'],
            'max_change': marketing_stats['max_change'],
            'probability_significant_change': 0.15  # 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∏–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        },
        'rating': {
            'mean_rating': rating_stats['mean_rating'],
            'std_rating': rating_stats['std_rating'],
            'typical_change': rating_change_stats['typical_change'],
            'max_change': rating_change_stats['max_realistic_change'],
            'min_change': rating_change_stats['min_realistic_change'],
            'probability_change': 0.08  # 8% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        },
        'analysis_date': datetime.now().isoformat(),
        'data_source': 'Real database analysis (Grab + Gojek + Restaurants)',
        'total_days_analyzed': marketing_stats['total_significant_days'],
        'total_restaurants_analyzed': rating_stats['total_restaurants']
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    with open('realistic_factor_params.json', 'w', encoding='utf-8') as f:
        json.dump(realistic_params, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ realistic_factor_params.json")
    
    return realistic_params

def update_detective_analysis_with_real_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ï–¢–ï–ö–¢–ò–í–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open('updated_detective_analysis.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    import_addition = """
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤
try:
    with open('realistic_factor_params.json', 'r', encoding='utf-8') as f:
        REALISTIC_PARAMS = json.load(f)
except:
    REALISTIC_PARAMS = None
"""
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    realistic_marketing_function = """
def get_realistic_marketing_change():
    \"\"\"–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\"\"\"
    if REALISTIC_PARAMS and random.random() < REALISTIC_PARAMS['marketing']['probability_significant_change']:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        change = random.gauss(
            REALISTIC_PARAMS['marketing']['mean_change'],
            REALISTIC_PARAMS['marketing']['std_change']
        )
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        change = max(REALISTIC_PARAMS['marketing']['min_change'], 
                    min(REALISTIC_PARAMS['marketing']['max_change'], change))
        return change
    else:
        return 0  # –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –¥–Ω–µ–π
"""
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    realistic_rating_function = """
def get_realistic_rating_change():
    \"\"\"–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\"\"\"
    if REALISTIC_PARAMS and random.random() < REALISTIC_PARAMS['rating']['probability_change']:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        change = random.gauss(0, REALISTIC_PARAMS['rating']['typical_change'])
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        change = max(REALISTIC_PARAMS['rating']['min_change'],
                    min(REALISTIC_PARAMS['rating']['max_change'], change))
        return change
    else:
        return 0  # –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
"""
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    print("üìù –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:")
    print("   marketing_change = random.uniform(-0.4, 0.6)")
    print("   ‚Üí marketing_change = get_realistic_marketing_change()")
    print("   rating_change = random.uniform(-0.15, 0.10)")
    print("   ‚Üí rating_change = get_realistic_rating_change()")
    
    return import_addition, realistic_marketing_function, realistic_rating_function

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üïµÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –§–ê–ö–¢–û–†–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params = create_realistic_factor_generator()
    
    if params:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        update_detective_analysis_with_real_data()
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {params['marketing']['probability_significant_change']:.0%} –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {params['rating']['probability_change']:.0%} –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {params['total_days_analyzed']} –¥–Ω–µ–π + {params['total_restaurants_analyzed']} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

if __name__ == "__main__":
    main()