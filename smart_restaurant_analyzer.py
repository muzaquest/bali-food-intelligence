#!/usr/bin/env python3
"""
üß† –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –†–ï–°–¢–û–†–ê–ù–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
‚úÖ –î–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
"""

import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta

class SmartRestaurantAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        
    def analyze_restaurant_detailed(self, restaurant_name, days=60):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        
        print(f"üß† –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–ê '{restaurant_name}'")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self._load_comprehensive_data(restaurant_name, days)
        
        if data.empty:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        analysis = self._comprehensive_analysis(data, restaurant_name)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        return self._generate_executive_report(analysis, restaurant_name)
        
    def _load_comprehensive_data(self, restaurant_name, days):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = f"""
        SELECT 
            g.stat_date,
            
            -- –ü–†–û–î–ê–ñ–ò –ò –ó–ê–ö–ê–ó–´
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as total_ads,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as ads_sales,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.store_is_busy, 0) as grab_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_busy,
            
            -- –û–¢–ú–ï–ù–´ –ò –ö–ê–ß–ï–°–¢–í–û
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            
            -- –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ö–¢–û–†–´
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day_of_month,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            
            -- –í–†–ï–ú–Ø –î–û–°–¢–ê–í–ö–ò (—Ç–æ–ª—å–∫–æ Gojek)
            COALESCE(gj.preparation_time, '00:00:00') as prep_time,
            COALESCE(gj.delivery_time, '00:00:00') as delivery_time
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date >= date('now', '-{days} days')
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        df['avg_order_value'] = df['total_sales'] / df['total_orders'].replace(0, 1)
        df['cancel_rate'] = (df['grab_cancelled'] + df['gojek_cancelled']) / df['total_orders'].replace(0, 1) * 100
        df['roas'] = df['ads_sales'] / df['total_ads'].replace(0, 1)
        df['operational_issues'] = (df['grab_closed'] + df['gojek_closed'] + 
                                   df['grab_out_of_stock'] + df['gojek_out_of_stock'] + 
                                   df['grab_busy'] + df['gojek_busy'])
        
        return df
        
    def _comprehensive_analysis(self, data, restaurant_name):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        
        analysis = {
            'restaurant_name': restaurant_name,
            'total_days': len(data),
            'date_range': f"{data['stat_date'].min()} - {data['stat_date'].max()}",
            'problems': [],
            'opportunities': [],
            'recommendations': [],
            'key_insights': []
        }
        
        # 1. –û–ë–©–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
        avg_sales = data['total_sales'].mean()
        avg_orders = data['total_orders'].mean()
        avg_aov = data['avg_order_value'].mean()
        
        analysis['avg_daily_sales'] = avg_sales
        analysis['avg_daily_orders'] = avg_orders
        analysis['avg_order_value'] = avg_aov
        
        print(f"üìä –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {avg_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑—ã –≤ –¥–µ–Ω—å: {avg_orders:.0f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_aov:,.0f} IDR")
        
        # 2. –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í
        recent_data = data.head(7)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        older_data = data.tail(7)   # –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –∏–∑ –ø–µ—Ä–∏–æ–¥–∞
        
        recent_avg = recent_data['total_sales'].mean()
        older_avg = older_data['total_sales'].mean()
        
        if recent_avg < older_avg * 0.9:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
            trend_change = ((recent_avg - older_avg) / older_avg) * 100
            analysis['problems'].append(f"üìâ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥: –ø—Ä–æ–¥–∞–∂–∏ —É–ø–∞–ª–∏ –Ω–∞ {abs(trend_change):.1f}%")
            analysis['recommendations'].append("üîç –°—Ä–æ—á–Ω–æ –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
            
        elif recent_avg > older_avg * 1.1:  # –†–æ—Å—Ç –±–æ–ª—å—à–µ 10%
            trend_change = ((recent_avg - older_avg) / older_avg) * 100
            analysis['opportunities'].append(f"üìà –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥: —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ {trend_change:.1f}%")
            
        # 3. –ê–ù–ê–õ–ò–ó –î–ù–Ø –ù–ï–î–ï–õ–ò
        weekday_performance = data.groupby('day_of_week')['total_sales'].mean()
        weekdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        
        best_day = weekday_performance.idxmax()
        worst_day = weekday_performance.idxmin()
        
        best_sales = weekday_performance[best_day]
        worst_sales = weekday_performance[worst_day]
        
        analysis['key_insights'].append(f"üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: {weekdays[best_day]} ({best_sales:,.0f} IDR)")
        analysis['key_insights'].append(f"üìâ –°–ª–∞–±—ã–π –¥–µ–Ω—å: {weekdays[worst_day]} ({worst_sales:,.0f} IDR)")
        
        if (best_sales - worst_sales) / best_sales > 0.3:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 30%
            analysis['recommendations'].append(f"üìÖ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤ {weekdays[worst_day]}")
            
        # 4. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        problem_days = data[data['operational_issues'] > 0]
        
        if len(problem_days) > 0:
            problem_rate = (len(problem_days) / len(data)) * 100
            analysis['problems'].append(f"üö® –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ {problem_rate:.0f}% –¥–Ω–µ–π")
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            if problem_days['grab_closed'].sum() > 0:
                analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è –Ω–∞ Grab")
                analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Grab")
                
            if problem_days['gojek_closed'].sum() > 0:
                analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è –Ω–∞ Gojek")
                analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gojek")
                
            if problem_days['grab_out_of_stock'].sum() > 0 or problem_days['gojek_out_of_stock'].sum() > 0:
                analysis['problems'].append("üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–æ–≤–∞—Ä–∞")
                analysis['recommendations'].append("üì¶ –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤")
                
        # 5. –ê–ù–ê–õ–ò–ó –ú–ê–†–ö–ï–¢–ò–ù–ì–ê
        marketing_data = data[data['total_ads'] > 0]
        
        if len(marketing_data) > 0:
            avg_roas = marketing_data['roas'].mean()
            analysis['avg_roas'] = avg_roas
            
            if avg_roas < 2.0:
                analysis['problems'].append(f"üì± –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: ROAS {avg_roas:.1f}")
                analysis['recommendations'].append("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
            elif avg_roas > 4.0:
                analysis['opportunities'].append(f"üì± –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞: ROAS {avg_roas:.1f}")
                analysis['recommendations'].append("üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
                
        else:
            analysis['problems'].append("üì± –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–ª–∞–º–∞")
            analysis['recommendations'].append("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
            
        # 6. –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê
        avg_rating = data['rating'].mean()
        analysis['avg_rating'] = avg_rating
        
        if avg_rating < 4.0:
            analysis['problems'].append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}")
            analysis['recommendations'].append("‚≠ê –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞")
        elif avg_rating > 4.5:
            analysis['opportunities'].append(f"‚≠ê –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}")
            
        # 7. –ê–ù–ê–õ–ò–ó –û–¢–ú–ï–ù
        avg_cancel_rate = data['cancel_rate'].mean()
        
        if avg_cancel_rate > 10:
            analysis['problems'].append(f"‚ùå –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {avg_cancel_rate:.1f}%")
            analysis['recommendations'].append("‚ö° –£–ª—É—á—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
            
        # 8. –ü–û–ò–°–ö –•–£–î–®–ò–• –î–ù–ï–ô
        worst_days = data.nsmallest(3, 'total_sales')
        analysis['worst_days'] = []
        
        for _, day in worst_days.iterrows():
            day_analysis = self._analyze_specific_day(day, data)
            analysis['worst_days'].append(day_analysis)
            
        return analysis
        
    def _analyze_specific_day(self, day_data, all_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        
        date = day_data['stat_date']
        sales = day_data['total_sales']
        avg_sales = all_data['total_sales'].mean()
        
        day_analysis = {
            'date': date,
            'sales': sales,
            'drop_percent': ((sales - avg_sales) / avg_sales) * 100,
            'reasons': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
        if day_data['operational_issues'] > 0:
            if day_data['grab_closed'] > 0:
                day_analysis['reasons'].append("–†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Grab")
            if day_data['gojek_closed'] > 0:
                day_analysis['reasons'].append("–†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Gojek")
            if day_data['grab_out_of_stock'] > 0:
                day_analysis['reasons'].append("–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Grab")
            if day_data['gojek_out_of_stock'] > 0:
                day_analysis['reasons'].append("–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Gojek")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
        avg_ads = all_data['total_ads'].mean()
        if day_data['total_ads'] < avg_ads * 0.5:
            day_analysis['reasons'].append("–ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        day_name = weekdays[day_data['day_of_week']]
        
        if day_data['day_of_week'] in [0, 1]:  # –í—Å, –ü–Ω
            day_analysis['reasons'].append(f"–°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({day_name})")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—ã
        if day_data['cancel_rate'] > 15:
            day_analysis['reasons'].append(f"–ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω ({day_data['cancel_rate']:.1f}%)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if day_data['rating'] < 4.0:
            day_analysis['reasons'].append(f"–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ({day_data['rating']:.1f})")
            
        if not day_analysis['reasons']:
            day_analysis['reasons'].append("–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–ø–æ–≥–æ–¥–∞, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, —Å–æ–±—ã—Ç–∏—è)")
            
        return day_analysis
        
    def _generate_executive_report(self, analysis, restaurant_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        
        report = []
        
        # –ó–ê–ì–û–õ–û–í–û–ö
        report.append(f"üìä –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢: '{restaurant_name}'")
        report.append("=" * 70)
        report.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {analysis['date_range']} ({analysis['total_days']} –¥–Ω–µ–π)")
        report.append("")
        
        # –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
        report.append("üí∞ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {analysis['avg_daily_sales']:,.0f} IDR")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analysis['avg_order_value']:,.0f} IDR")
        report.append(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {analysis['avg_daily_orders']:.0f}")
        
        if 'avg_roas' in analysis:
            report.append(f"   ‚Ä¢ ROAS (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã): {analysis['avg_roas']:.1f}")
        if 'avg_rating' in analysis:
            report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analysis['avg_rating']:.1f}/5.0")
        report.append("")
        
        # –ü–†–û–ë–õ–ï–ú–´
        if analysis['problems']:
            report.append("üö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, problem in enumerate(analysis['problems'], 1):
                report.append(f"   {i}. {problem}")
            report.append("")
            
        # –í–û–ó–ú–û–ñ–ù–û–°–¢–ò
        if analysis['opportunities']:
            report.append("üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –†–û–°–¢–ê:")
            for i, opportunity in enumerate(analysis['opportunities'], 1):
                report.append(f"   {i}. {opportunity}")
            report.append("")
            
        # –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´
        if analysis['key_insights']:
            report.append("üí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
            for insight in analysis['key_insights']:
                report.append(f"   ‚Ä¢ {insight}")
            report.append("")
            
        # –•–£–î–®–ò–ï –î–ù–ò
        if analysis['worst_days']:
            report.append("üìâ –ê–ù–ê–õ–ò–ó –•–£–î–®–ò–• –î–ù–ï–ô:")
            for day in analysis['worst_days']:
                report.append(f"   {day['date']}: {day['sales']:,.0f} IDR ({day['drop_percent']:+.1f}%)")
                for reason in day['reasons'][:2]:  # –¢–æ–ø-2 –ø—Ä–∏—á–∏–Ω—ã
                    report.append(f"      ‚Ä¢ {reason}")
            report.append("")
            
        # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        if analysis['recommendations']:
            report.append("üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            unique_recommendations = list(set(analysis['recommendations']))
            for i, rec in enumerate(unique_recommendations[:8], 1):
                report.append(f"   {i}. {rec}")
            report.append("")
            
        # –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
        problem_count = len(analysis['problems'])
        opportunity_count = len(analysis['opportunities'])
        
        if problem_count > opportunity_count:
            status = "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
            color = "üî¥"
        elif opportunity_count > problem_count:
            status = "–•–û–†–û–®–ò–ï –ü–ï–†–°–ü–ï–ö–¢–ò–í–´"  
            color = "üü¢"
        else:
            status = "–°–¢–ê–ë–ò–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï"
            color = "üü°"
            
        report.append(f"{color} –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {status}")
        report.append(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {problem_count}")
        report.append(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {opportunity_count}")
        
        return "\n".join(report)

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = SmartRestaurantAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Only Eggs
    result = analyzer.analyze_restaurant_detailed("Only Eggs", 60)
    
    print("\n" + "="*80)
    print("üìã –ì–û–¢–û–í–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:")
    print("="*80)
    print(result)
    print("="*80)

if __name__ == "__main__":
    main()