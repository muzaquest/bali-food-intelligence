#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã
"""

import sqlite3
import pandas as pd
import os
from datetime import datetime, timedelta
import json

def analyze_database_structure(db_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    """
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        for table_name in tables:
            table_name = table_name[0]
            print(f"\nüóÇÔ∏è  –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            print("-" * 30)
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            print("üìã –ö–æ–ª–æ–Ω–∫–∏:")
            for col in columns:
                col_name, col_type, not_null, default, pk = col[1], col[2], col[3], col[4], col[5]
                pk_mark = " (PK)" if pk else ""
                null_mark = " NOT NULL" if not_null else ""
                print(f"  - {col_name}: {col_type}{pk_mark}{null_mark}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"üìä –ó–∞–ø–∏—Å–µ–π: {count:,}")
            
            # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏)
            if count > 0:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                sample_data = cursor.fetchall()
                column_names = [desc[0] for desc in cursor.description]
                
                print("üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                for i, row in enumerate(sample_data, 1):
                    print(f"  –°—Ç—Ä–æ–∫–∞ {i}:")
                    for col_name, value in zip(column_names, row):
                        print(f"    {col_name}: {value}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã: {e}")
        return False

def analyze_data_quality(db_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
    """
    print("\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –î–õ–Ø ML")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        print("üè™ –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–û–í:")
        restaurants_df = pd.read_sql_query("SELECT * FROM restaurants", conn)
        print(f"  –í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants_df)}")
        
        if 'name' in restaurants_df.columns:
            print("  –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
            for name in restaurants_df['name'].head(10):
                print(f"    - {name}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Grab –¥–∞–Ω–Ω—ã–µ
        print("\nüü¢ –ê–ù–ê–õ–ò–ó GRAB –î–ê–ù–ù–´–•:")
        try:
            grab_df = pd.read_sql_query("SELECT * FROM grab_stats", conn)
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(grab_df):,}")
            
            if len(grab_df) > 0:
                print("  –ö–æ–ª–æ–Ω–∫–∏:")
                for col in grab_df.columns:
                    non_null_count = grab_df[col].notna().sum()
                    print(f"    - {col}: {non_null_count:,} –Ω–µ-NULL ({non_null_count/len(grab_df)*100:.1f}%)")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
                if 'date' in grab_df.columns:
                    grab_df['date'] = pd.to_datetime(grab_df['date'])
                    date_range = f"{grab_df['date'].min()} - {grab_df['date'].max()}"
                    print(f"  –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_range}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
                    days_total = (grab_df['date'].max() - grab_df['date'].min()).days + 1
                    days_with_data = grab_df['date'].nunique()
                    print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –¥–Ω—è–º: {days_with_data}/{days_total} ({days_with_data/days_total*100:.1f}%)")
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Grab: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Gojek –¥–∞–Ω–Ω—ã–µ
        print("\nüîµ –ê–ù–ê–õ–ò–ó GOJEK –î–ê–ù–ù–´–•:")
        try:
            gojek_df = pd.read_sql_query("SELECT * FROM gojek_stats", conn)
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(gojek_df):,}")
            
            if len(gojek_df) > 0:
                print("  –ö–æ–ª–æ–Ω–∫–∏:")
                for col in gojek_df.columns:
                    non_null_count = gojek_df[col].notna().sum()
                    print(f"    - {col}: {non_null_count:,} –Ω–µ-NULL ({non_null_count/len(gojek_df)*100:.1f}%)")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
                if 'date' in gojek_df.columns:
                    gojek_df['date'] = pd.to_datetime(gojek_df['date'])
                    date_range = f"{gojek_df['date'].min()} - {gojek_df['date'].max()}"
                    print(f"  –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_range}")
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gojek: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

def create_ml_data_adapter(db_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∫ ML —Å–∏—Å—Ç–µ–º–µ
    """
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ê–î–ê–ü–¢–ï–†–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    adapter_code = '''#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ ML —Å–∏—Å—Ç–µ–º–µ
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import numpy as np

class ClientDataAdapter:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)
    
    def load_restaurants(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        query = """
        SELECT 
            id,
            name,
            COALESCE(region, 'Unknown') as region,
            grab_restaurant_id,
            gojek_restaurant_id,
            connected_date
        FROM restaurants
        """
        return pd.read_sql_query(query, self.conn)
    
    def load_combined_sales_data(self, start_date=None, end_date=None):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ Grab –∏ Gojek –≤ –µ–¥–∏–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        """
        date_filter = ""
        if start_date and end_date:
            date_filter = f"WHERE date BETWEEN '{start_date}' AND '{end_date}'"
        
        # Grab –¥–∞–Ω–Ω—ã–µ
        grab_query = f"""
        SELECT 
            restaurant_id,
            date,
            COALESCE(total_sales, sales, 0) as sales,
            COALESCE(total_orders, orders, 0) as orders,
            COALESCE(ads_spend, 0) as ads_spend,
            COALESCE(avg_rating, rating, 0) as rating,
            COALESCE(cancellation_rate, 0) as cancellation_rate,
            COALESCE(avg_preparation_time, 0) as prep_time,
            'grab' as platform
        FROM grab_stats
        {date_filter}
        """
        
        # Gojek –¥–∞–Ω–Ω—ã–µ
        gojek_query = f"""
        SELECT 
            restaurant_id,
            date,
            COALESCE(total_sales, sales, 0) as sales,
            COALESCE(total_orders, orders, 0) as orders,
            COALESCE(ads_spend, 0) as ads_spend,
            COALESCE(avg_rating, rating, 0) as rating,
            COALESCE(cancellation_rate, 0) as cancellation_rate,
            COALESCE(avg_preparation_time, 0) as prep_time,
            'gojek' as platform
        FROM gojek_stats
        {date_filter}
        """
        
        try:
            grab_df = pd.read_sql_query(grab_query, self.conn)
            gojek_df = pd.read_sql_query(gojek_query, self.conn)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_df = pd.concat([grab_df, gojek_df], ignore_index=True)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
            combined_df['date'] = pd.to_datetime(combined_df['date'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
            restaurants_df = self.load_restaurants()
            combined_df = combined_df.merge(
                restaurants_df[['id', 'name', 'region']], 
                left_on='restaurant_id', 
                right_on='id', 
                how='left'
            )
            
            return combined_df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def prepare_for_ml(self, df):
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã
        """
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∏ –¥–∞—Ç–µ (—Å—É–º–º–∏—Ä—É–µ–º Grab + Gojek)
        ml_df = df.groupby(['restaurant_id', 'name', 'region', 'date']).agg({
            'sales': 'sum',
            'orders': 'sum',
            'ads_spend': 'sum',
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'prep_time': 'mean'
        }).reset_index()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ml_df['avg_order_value'] = ml_df['sales'] / ml_df['orders'].replace(0, 1)
        ml_df['ads_enabled'] = ml_df['ads_spend'] > 0
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ML —Å–∏—Å—Ç–µ–º–æ–π
        ml_df = ml_df.rename(columns={
            'name': 'restaurant_name',
            'prep_time': 'delivery_time'
        })
        
        return ml_df
    
    def get_weekly_report(self, restaurant_id, weeks_back=1):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        """
        end_date = datetime.now().date()
        start_date = end_date - timedelta(weeks=weeks_back)
        
        df = self.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
        restaurant_data['week'] = restaurant_data['date'].dt.isocalendar().week
        weekly_stats = restaurant_data.groupby('week').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean'
        }).round(2)
        
        return weekly_stats
    
    def get_monthly_report(self, restaurant_id, months_back=1):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        """
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30*months_back)
        
        df = self.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        restaurant_data['month'] = restaurant_data['date'].dt.to_period('M')
        monthly_stats = restaurant_data.groupby('month').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'ads_spend': 'sum'
        }).round(2)
        
        return monthly_stats
    
    def get_quarterly_report(self, restaurant_id, quarters_back=1):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        """
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=90*quarters_back)
        
        df = self.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
        restaurant_data['quarter'] = restaurant_data['date'].dt.to_period('Q')
        quarterly_stats = restaurant_data.groupby('quarter').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'ads_spend': 'sum'
        }).round(2)
        
        return quarterly_stats
    
    def export_for_ml_training(self, output_path='client_data_for_ml.csv'):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML
        """
        df = self.load_combined_sales_data()
        ml_df = self.prepare_for_ml(df)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        ml_df.to_csv(output_path, index=False)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(ml_df):,}")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {ml_df['restaurant_name'].nunique()}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {ml_df['date'].min()} - {ml_df['date'].max()}")
        
        return output_path
    
    def close(self):
        self.conn.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    adapter = ClientDataAdapter("path_to_your_database.db")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
    csv_file = adapter.export_for_ml_training()
    
    # –ü—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–æ–≤
    restaurant_id = 1
    
    print("\\nüìä –ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    weekly = adapter.get_weekly_report(restaurant_id)
    if weekly is not None:
        print(weekly)
    
    print("\\nüìä –ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢:")
    monthly = adapter.get_monthly_report(restaurant_id)
    if monthly is not None:
        print(monthly)
    
    print("\\nüìä –ö–í–ê–†–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    quarterly = adapter.get_quarterly_report(restaurant_id)
    if quarterly is not None:
        print(quarterly)
    
    adapter.close()
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    with open('client_data_adapter.py', 'w', encoding='utf-8') as f:
        f.write(adapter_code)
    
    print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: client_data_adapter.py")
    
    return True

def main():
    print("üöÄ –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = input("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ SQL —Ñ–∞–π–ª—É/–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ").strip()
    
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if analyze_database_structure(db_path):
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        analyze_data_quality(db_path)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        create_ml_data_adapter(db_path)
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 60)
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—à–µ")
        print("2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ client_data_adapter.py –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 client_data_adapter.py")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π CSV –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()