#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è data leakage
"""

import logging
import sys
from datetime import datetime
from model import train_sales_model

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    
    print("üöÄ –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø DATA LEAKAGE")
    print("=" * 60)
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        predictor = train_sales_model(
            start_date=None,
            end_date=None,
            model_type='random_forest',
            optimize_hyperparams=True,
            save_model=True
        )
        
        if predictor and predictor.is_trained:
            print("\n‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–û–ë–£–ß–ï–ù–ê!")
            print("=" * 40)
            
            # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = predictor.training_metrics
            print(f"üìä R¬≤ Score: {metrics.get('test_r2', 'N/A'):.4f}")
            print(f"üìä MAE: {metrics.get('test_mae', 'N/A'):.2f}")
            print(f"üìä RMSE: {metrics.get('test_rmse', 'N/A'):.2f}")
            print(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {metrics.get('feature_count', 'N/A')}")
            print(f"üìà Cross-validation R¬≤: {metrics.get('cv_r2_mean', 'N/A'):.4f} ¬± {metrics.get('cv_r2_std', 'N/A'):.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫
            r2_score = metrics.get('test_r2', 0)
            if r2_score > 0.95:
                print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: R¬≤ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π - –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            elif r2_score > 0.8:
                print("\n‚úÖ –û–¢–õ–ò–ß–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–∞—è, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è")
            elif r2_score > 0.5:
                print("\n‚úÖ –•–û–†–û–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –º–æ–¥–µ–ª—å –ø–æ–ª–µ–∑–Ω–∞—è –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è")
            elif r2_score > 0.3:
                print("\n‚úÖ –ü–†–ò–ï–ú–õ–ï–ú–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –º–æ–¥–µ–ª—å –≤—ã—è–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            else:
                print("\n‚ö†Ô∏è  –ù–ò–ó–ö–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print("\nüîç –¢–û–ü-10 –í–ê–ñ–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
            print("-" * 40)
            importance_df = predictor.get_feature_importance(top_n=10)
            for idx, row in importance_df.iterrows():
                print(f"  {idx+1:2d}. {row['feature']:20s} {row['importance']:.4f}")
            
            print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: models/client_sales_model.joblib")
            print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: models/client_model_metadata.json")
            
            print("\nüéâ –ì–û–¢–û–í–û! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
            
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
            logger.error("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É–¥–∞—á–Ω–æ")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)