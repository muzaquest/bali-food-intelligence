import sqlite3
import pandas as pd
import json
from datetime import datetime, timedelta
import numpy as np

class RealHolidayAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑ –†–ï–ê–õ–¨–ù–û–ì–û –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    –û—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ database.sqlite
    """
    
    def __init__(self):
        self.db_path = 'database.sqlite'
        
    def get_holiday_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∞–ª–∏–π—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥"""
        # –û—Å–Ω–æ–≤—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–∏–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
        conn = sqlite3.connect(self.db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –±–∞–∑—ã
        date_range_query = """
            SELECT MIN(stat_date) as min_date, MAX(stat_date) as max_date 
            FROM grab_stats
            UNION ALL
            SELECT MIN(stat_date) as min_date, MAX(stat_date) as max_date 
            FROM gojek_stats
        """
        date_ranges = pd.read_sql_query(date_range_query, conn)
        
        min_date = date_ranges['min_date'].min()
        max_date = date_ranges['max_date'].max()
        
        conn.close()
        
        print(f"üìÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {min_date} ‚Üí {max_date}")
        
        # –†–ï–ê–õ–¨–ù–´–ï –±–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ë–∞–ª–∏ 2025
        holidays = {
            # –û–±—â–µ–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏
            '2025-01-01': {'name': 'New Year Day', 'type': 'national', 'category': '–ù–æ–≤—ã–π –≥–æ–¥'},
            '2025-01-29': {'name': 'Chinese New Year', 'type': 'national', 'category': '–ö–∏—Ç–∞–π—Å–∫–∏–π –ù–ì'},
            '2025-03-29': {'name': 'Nyepi (Day of Silence)', 'type': 'balinese', 'category': '–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã'},
            '2025-03-31': {'name': 'Eid al-Fitr', 'type': 'national', 'category': '–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º'},
            '2025-04-01': {'name': 'Eid al-Fitr Holiday', 'type': 'national', 'category': '–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º'},
            '2025-04-18': {'name': 'Good Friday', 'type': 'national', 'category': '–°—Ç—Ä–∞—Å—Ç–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞'},
            '2025-05-01': {'name': 'Labor Day', 'type': 'national', 'category': '–î–µ–Ω—å —Ç—Ä—É–¥–∞'},
            '2025-05-12': {'name': 'Vesak Day', 'type': 'national', 'category': '–î–µ–Ω—å –ë—É–¥–¥—ã'},
            '2025-05-29': {'name': 'Ascension Day', 'type': 'national', 'category': '–í–æ–∑–Ω–µ—Å–µ–Ω–∏–µ'},
            '2025-06-01': {'name': 'Pancasila Day', 'type': 'national', 'category': '–î–µ–Ω—å –ü–∞–Ω—á–∞—Å–∏–ª–∞'},
            '2025-06-06': {'name': 'Eid al-Adha', 'type': 'national', 'category': '–ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º'},
            '2025-08-17': {'name': 'Independence Day', 'type': 'national', 'category': '–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'},
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏ –±–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            '2025-04-16': {'name': 'Galungan', 'type': 'balinese', 'category': 'Galungan'},
            '2025-04-26': {'name': 'Kuningan', 'type': 'balinese', 'category': 'Kuningan'},
            
            # –ü–æ–ª–Ω–æ–ª—É–Ω–∏—è (Purnama) - —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –¥–Ω–∏
            '2025-01-13': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            '2025-02-12': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            '2025-03-14': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            '2025-04-13': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            '2025-05-12': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            '2025-06-11': {'name': 'Purnama (Full Moon)', 'type': 'balinese', 'category': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'},
            
            # –ù–æ–≤–æ–ª—É–Ω–∏—è (Tilem) - –¥–Ω–∏ –æ—á–∏—â–µ–Ω–∏—è
            '2025-01-29': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
            '2025-02-28': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
            '2025-03-29': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
            '2025-04-27': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
            '2025-05-27': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
            '2025-06-25': {'name': 'Tilem (New Moon)', 'type': 'balinese', 'category': '–ù–æ–≤–æ–ª—É–Ω–∏–µ'},
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞–Ω–Ω—ã—Ö
        filtered_holidays = {}
        for date, info in holidays.items():
            if min_date <= date <= max_date:
                filtered_holidays[date] = info
        
        print(f"üéâ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(filtered_holidays)}")
        
        return filtered_holidays, min_date, max_date
    
    def analyze_holiday_impact(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        print("üîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –í–õ–ò–Ø–ù–ò–Ø –ü–†–ê–ó–î–ù–ò–ö–û–í")
        print("=" * 50)
        
        holidays, min_date, max_date = self.get_holiday_list()
        
        if not holidays:
            print("‚ùå –ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–∏–æ–¥–µ")
            return
        
        conn = sqlite3.connect(self.db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        query = """
            SELECT 
                g.stat_date as date,
                r.name as restaurant_name,
                g.sales as grab_sales,
                0 as gojek_sales
            FROM grab_stats g
            JOIN restaurants r ON g.restaurant_id = r.id
            WHERE g.stat_date BETWEEN ? AND ?
            UNION ALL
            SELECT 
                gj.stat_date as date,
                r.name as restaurant_name,
                0 as grab_sales,
                gj.sales as gojek_sales
            FROM gojek_stats gj
            JOIN restaurants r ON gj.restaurant_id = r.id
            WHERE gj.stat_date BETWEEN ? AND ?
        """
        
        sales_data = pd.read_sql_query(query, conn, params=[min_date, max_date, min_date, max_date])
        conn.close()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É, —Å—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
        sales_data['grab_sales'] = pd.to_numeric(sales_data['grab_sales'], errors='coerce').fillna(0)
        sales_data['gojek_sales'] = pd.to_numeric(sales_data['gojek_sales'], errors='coerce').fillna(0)
        sales_data['total_sales'] = sales_data['grab_sales'] + sales_data['gojek_sales']
        daily_sales = sales_data.groupby(['date', 'restaurant_name'])['total_sales'].sum().reset_index()
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        market_daily = daily_sales.groupby('date')['total_sales'].sum().reset_index()
        
        print(f"üìä –î–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º: {len(market_daily)}")
        print(f"üìä –í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {daily_sales['restaurant_name'].nunique()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫
        results = {}
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ (–±–µ–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
        holiday_dates = list(holidays.keys())
        regular_days = market_daily[~market_daily['date'].isin(holiday_dates)]
        baseline_avg = regular_days['total_sales'].mean() if len(regular_days) > 0 else 0
        
        print(f"\nüìà –ë–∞–∑–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ (–æ–±—ã—á–Ω—ã–µ –¥–Ω–∏): {baseline_avg:,.0f} IDR")
        
        categories_impact = {}
        
        for holiday_date, holiday_info in holidays.items():
            # –ü—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å
            holiday_sales = market_daily[market_daily['date'] == holiday_date]['total_sales']
            
            if len(holiday_sales) > 0:
                holiday_total = holiday_sales.iloc[0]
                impact_percent = ((holiday_total - baseline_avg) / baseline_avg * 100) if baseline_avg > 0 else 0
                
                results[holiday_date] = {
                    'name': holiday_info['name'],
                    'type': holiday_info['type'],
                    'category': holiday_info['category'],
                    'sales': holiday_total,
                    'impact_percent': impact_percent
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category = holiday_info['category']
                if category not in categories_impact:
                    categories_impact[category] = []
                categories_impact[category].append(impact_percent)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                if impact_percent > 10:
                    emoji = "üî•"
                elif impact_percent > 0:
                    emoji = "üìà"
                elif impact_percent > -10:
                    emoji = "üìâ"
                else:
                    emoji = "üí•"
                
                print(f"  {emoji} {holiday_date}: {holiday_info['name']}")
                print(f"     –ü—Ä–æ–¥–∞–∂–∏: {holiday_total:,.0f} IDR ({impact_percent:+.1f}%)")
                print(f"     –¢–∏–ø: {holiday_info['type']} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {holiday_info['category']}")
                print()
            else:
                print(f"  ‚ùå {holiday_date}: {holiday_info['name']} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                results[holiday_date] = {
                    'name': holiday_info['name'],
                    'type': holiday_info['type'],
                    'category': holiday_info['category'],
                    'sales': 0,
                    'impact_percent': 0
                }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ü–†–ê–ó–î–ù–ò–ö–û–í:")
        print("=" * 40)
        
        for category, impacts in categories_impact.items():
            if impacts:
                avg_impact = np.mean(impacts)
                count = len(impacts)
                
                if avg_impact > 5:
                    trend = "üìà –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï"
                elif avg_impact < -5:
                    trend = "üìâ –ù–ï–ì–ê–¢–ò–í–ù–û–ï"
                else:
                    trend = "‚û°Ô∏è –ù–ï–ô–¢–†–ê–õ–¨–ù–û–ï"
                
                print(f"üè∑Ô∏è {category}:")
                print(f"   {trend} –≤–ª–∏—è–Ω–∏–µ: {avg_impact:+.1f}% (—Å—Ä–µ–¥–Ω–µ–µ)")
                print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {count}")
                print(f"   üìà –î–∏–∞–ø–∞–∑–æ–Ω: {min(impacts):+.1f}% ‚Üí {max(impacts):+.1f}%")
                print()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        print("\nüáÆüá© –°–†–ê–í–ù–ï–ù–ò–ï: –ù–ê–¶–ò–û–ù–ê–õ–¨–ù–´–ï vs –ë–ê–õ–ò–ô–°–ö–ò–ï")
        print("=" * 45)
        
        national_impacts = [r['impact_percent'] for r in results.values() if r['type'] == 'national' and r['impact_percent'] != 0]
        balinese_impacts = [r['impact_percent'] for r in results.values() if r['type'] == 'balinese' and r['impact_percent'] != 0]
        
        if national_impacts:
            national_avg = np.mean(national_impacts)
            print(f"üáÆüá© –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {national_avg:+.1f}% (—Å—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ)")
            print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(national_impacts)} –¥–Ω–µ–π")
        
        if balinese_impacts:
            balinese_avg = np.mean(balinese_impacts)
            print(f"üèùÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {balinese_avg:+.1f}% (—Å—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ)")
            print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(balinese_impacts)} –¥–Ω–µ–π")
        
        # –¢–æ–ø/—Ö—É–¥—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        print("\nüèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –ü–†–ê–ó–î–ù–ò–ö–û–í –î–õ–Ø –ü–†–û–î–ê–ñ:")
        print("=" * 35)
        
        sorted_results = sorted(results.items(), key=lambda x: x[1]['impact_percent'], reverse=True)
        
        for i, (date, data) in enumerate(sorted_results[:5], 1):
            if data['impact_percent'] != 0:
                print(f"{i}. {data['name']} ({date})")
                print(f"   üí∞ –ü—Ä–æ–¥–∞–∂–∏: {data['sales']:,.0f} IDR ({data['impact_percent']:+.1f}%)")
        
        print("\nüí• –¢–û–ü-5 –•–£–î–®–ò–• –ü–†–ê–ó–î–ù–ò–ö–û–í –î–õ–Ø –ü–†–û–î–ê–ñ:")
        print("=" * 35)
        
        for i, (date, data) in enumerate(sorted_results[-5:], 1):
            if data['impact_percent'] != 0:
                print(f"{i}. {data['name']} ({date})")
                print(f"   üí∏ –ü—Ä–æ–¥–∞–∂–∏: {data['sales']:,.0f} IDR ({data['impact_percent']:+.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = 'data/real_holiday_impact_analysis.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                'analysis_period': {'start': min_date, 'end': max_date},
                'baseline_average': baseline_avg,
                'total_holidays': len(holidays),
                'holidays_with_data': len([r for r in results.values() if r['impact_percent'] != 0]),
                'results': results,
                'category_averages': {cat: np.mean(impacts) for cat, impacts in categories_impact.items()},
                'type_averages': {
                    'national': np.mean(national_impacts) if national_impacts else 0,
                    'balinese': np.mean(balinese_impacts) if balinese_impacts else 0
                }
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        
        return results
    
    def check_nyepi_specifically(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Nyepi - —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –±–∞–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
        print("\nüîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: NYEPI (–î–ï–ù–¨ –¢–ò–®–ò–ù–´)")
        print("=" * 50)
        
        conn = sqlite3.connect(self.db_path)
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ Nyepi (29 –º–∞—Ä—Ç–∞ 2025)
        nyepi_date = '2025-03-29'
        
        # –ü—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å Nyepi
        nyepi_query = """
            SELECT 
                g.stat_date,
                r.name as restaurant_name,
                SUM(g.sales + COALESCE(gj.sales, 0)) as total_sales
            FROM grab_stats g
            JOIN restaurants r ON g.restaurant_id = r.id
            LEFT JOIN gojek_stats gj ON gj.restaurant_id = r.id AND gj.stat_date = g.stat_date
            WHERE g.stat_date = ?
            GROUP BY g.stat_date, r.name
        """
        
        nyepi_data = pd.read_sql_query(nyepi_query, conn, params=[nyepi_date])
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –∏ –ø–æ—Å–ª–µ Nyepi
        before_after_query = """
            SELECT 
                g.stat_date,
                SUM(g.sales + COALESCE(gj.sales, 0)) as daily_total
            FROM grab_stats g
            JOIN restaurants r ON g.restaurant_id = r.id
            LEFT JOIN gojek_stats gj ON gj.restaurant_id = r.id AND gj.stat_date = g.stat_date
            WHERE g.stat_date BETWEEN ? AND ? AND g.stat_date != ?
            GROUP BY g.stat_date
        """
        
        week_before = '2025-03-22'
        week_after = '2025-04-05'
        
        normal_data = pd.read_sql_query(before_after_query, conn, 
                                       params=[week_before, week_after, nyepi_date])
        
        conn.close()
        
        if len(nyepi_data) > 0:
            nyepi_total = nyepi_data['total_sales'].sum()
            print(f"üìä –ü—Ä–æ–¥–∞–∂–∏ –≤ Nyepi ({nyepi_date}): {nyepi_total:,.0f} IDR")
            print(f"üìä –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(nyepi_data)}")
            
            if len(normal_data) > 0:
                normal_avg = normal_data['daily_total'].mean()
                impact = ((nyepi_total - normal_avg) / normal_avg * 100) if normal_avg > 0 else 0
                
                print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏: {normal_avg:,.0f} IDR")
                print(f"üìä –†–µ–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ Nyepi: {impact:+.1f}%")
                
                if impact < -30:
                    print("‚úÖ –õ–û–ì–ò–ß–ù–û: –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ (–≤—Å–µ –∑–∞–∫—Ä—ã—Ç–æ)")
                elif impact < -10:
                    print("‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–û–ï: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
                elif impact > 0:
                    print("‚ùì –°–¢–†–ê–ù–ù–û: –†–æ—Å—Ç –≤ –¥–µ–Ω—å —Ç–∏—à–∏–Ω—ã")
                else:
                    print("‚û°Ô∏è –ù–ï–ô–¢–†–ê–õ–¨–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
                
                return impact
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ Nyepi –≤ –±–∞–∑–µ")
            
        return None

def main():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    analyzer = RealHolidayAnalyzer()
    
    print("üéâ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –í–õ–ò–Ø–ù–ò–Ø –ü–†–ê–ó–î–ù–ò–ö–û–í –ù–ê –ü–†–û–î–ê–ñ–ò")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ü–æ–ª—É—á–∏—Ç—å —á–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ database.sqlite")
    print("‚ùå –ë–ï–ó –≠–ú–ü–ò–†–ò–ß–ï–°–ö–ò–• –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ô!")
    print()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    results = analyzer.analyze_holiday_impact()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Nyepi
    nyepi_impact = analyzer.check_nyepi_specifically()
    
    print("\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´:")
    print("=" * 25)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ database.sqlite")
    print("‚úÖ –£—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏")
    print("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω—ã —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è")
    print()
    print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ AI –ø–æ–º–æ—â–Ω–∏–∫–µ!")

if __name__ == "__main__":
    main()