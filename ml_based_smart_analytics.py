#!/usr/bin/env python3
"""
ü§ñ 100% ML-–û–ë–û–°–ù–û–í–ê–ù–ù–ê–Ø –£–ú–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ ML –∞–Ω–∞–ª–∏–∑–∞ 9,958 –∑–∞–ø–∏—Å–µ–π
–í–°–ï –ø–æ—Ä–æ–≥–∏ –∏ –≤–µ—Å–∞ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö
"""

import sqlite3
import json
import requests
from datetime import datetime, timedelta
from statistics import mean, median
import math

class MLBasedSmartAnalytics:
    """100% ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ML –∏–Ω—Å–∞–π—Ç—ã
        self.load_ml_insights()
        
        # –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã)
        self.balinese_holidays = {
            '2025-04-16': 'Galungan - —Å–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
            '2025-04-26': 'Kuningan - —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏', 
            '2025-05-12': 'Purnama - –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ'
        }
        
    def load_ml_insights(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ML –∏–Ω—Å–∞–π—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('ml_insights.json', 'r', encoding='utf-8') as f:
                insights = json.load(f)
                self.ml_thresholds = insights['ml_thresholds']
                self.factor_correlations = insights['factor_correlations']
                self.feature_importance = insights['feature_importance']
                print("‚úÖ ML –∏–Ω—Å–∞–π—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except FileNotFoundError:
            print("‚ùå ML –∏–Ω—Å–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ml_data_analyzer.py")
            self.ml_thresholds = {}
            self.factor_correlations = {}
            self.feature_importance = {}
            
    def analyze_restaurant_ml_based(self, restaurant_name, start_date, end_date):
        """ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        print(f"\nü§ñ 100% ML-–û–ë–û–°–ù–û–í–ê–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
        print("=" * 60)
        print(f"üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}")
        print("üß† –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 9,958 –∑–∞–ø–∏—Å–µ–π")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_data = self._load_restaurant_data(restaurant_name, start_date, end_date)
        if not restaurant_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        competitors_data = self._load_competitors_data(restaurant_name, start_date, end_date)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å ML –ø–æ–¥—Ö–æ–¥–æ–º
        daily_analysis = []
        for day in restaurant_data:
            day_analysis = self._analyze_day_ml_based(day, competitors_data)
            daily_analysis.append(day_analysis)
            
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å ML –ø–æ–¥—Ö–æ–¥–æ–º
        patterns = self._find_ml_patterns(daily_analysis)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_ml_report(restaurant_name, daily_analysis, patterns)
        
    def _analyze_day_ml_based(self, day_data, competitors_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏"""
        
        date = day_data['stat_date']
        analysis = {
            'date': date,
            'total_sales': day_data['total_sales'],
            'ml_factors': [],
            'ml_score': 0,
            'ml_issues': [],
            'ml_opportunities': []
        }
        
        # 1. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ (ML –ø–æ—Ä–æ–≥–∏)
        sales = day_data['total_sales']
        if sales < self.ml_thresholds.get('low_sales', 0):
            analysis['ml_factors'].append(f"üìâ –ù–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (< {self.ml_thresholds['low_sales']:,.0f})")
            analysis['ml_score'] -= 20
            analysis['ml_issues'].append("–ü—Ä–æ–¥–∞–∂–∏ –Ω–∏–∂–µ 25-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è")
        elif sales > self.ml_thresholds.get('excellent_sales', float('inf')):
            analysis['ml_factors'].append(f"üöÄ –û—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (> {self.ml_thresholds['excellent_sales']:,.0f})")
            analysis['ml_score'] += 30
        elif sales > self.ml_thresholds.get('high_sales', 0):
            analysis['ml_factors'].append(f"üìà –•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (> {self.ml_thresholds['high_sales']:,.0f})")
            analysis['ml_score'] += 15
            
        # 2. –ê–ù–ê–õ–ò–ó –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê (ML –ø–æ—Ä–æ–≥–∏)
        aov = day_data['avg_order_value']
        if aov > 0:
            if aov < self.ml_thresholds.get('low_aov', 0):
                analysis['ml_factors'].append(f"üí∏ –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {aov:,.0f} IDR")
                analysis['ml_score'] -= 10
            elif aov > self.ml_thresholds.get('high_aov', 0):
                analysis['ml_factors'].append(f"üí∞ –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {aov:,.0f} IDR")
                analysis['ml_score'] += 15
                
        # 3. –ê–ù–ê–õ–ò–ó –†–ï–ô–¢–ò–ù–ì–ê (ML –ø–æ—Ä–æ–≥–∏)
        rating = day_data['avg_rating']
        if rating < self.ml_thresholds.get('low_rating', 0):
            analysis['ml_factors'].append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.2f}")
            analysis['ml_score'] -= 15
            analysis['ml_issues'].append("–†–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ 25-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è")
        elif rating > self.ml_thresholds.get('high_rating', 0):
            analysis['ml_factors'].append(f"‚≠ê –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.2f}")
            analysis['ml_score'] += 10
            
        # 4. –ê–ù–ê–õ–ò–ó ROAS (ML –ø–æ—Ä–æ–≥–∏)
        roas = day_data['roas']
        if roas > 0:
            if roas < self.ml_thresholds.get('low_roas', 0):
                analysis['ml_factors'].append(f"üìâ –ù–∏–∑–∫–∏–π ROAS: {roas:.1f}x")
                analysis['ml_score'] -= 15
                analysis['ml_issues'].append("ROAS –Ω–∏–∂–µ 25-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è")
            elif roas > self.ml_thresholds.get('high_roas', 0):
                analysis['ml_factors'].append(f"üìà –û—Ç–ª–∏—á–Ω—ã–π ROAS: {roas:.1f}x")
                analysis['ml_score'] += 20
                
        # 5. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ö–¢–û–†–´ (ML –≤–µ—Å–∞)
        if day_data['grab_closed'] or day_data['gojek_closed']:
            impact = self.ml_thresholds.get('closure_impact', 0) * 100
            analysis['ml_factors'].append(f"üè™ –ó–∞–∫—Ä—ã—Ç–∏–µ (ML: {impact:+.1f}% –≤–ª–∏—è–Ω–∏–µ)")
            analysis['ml_score'] += impact
            
        if day_data['grab_out_of_stock'] or day_data['gojek_out_of_stock']:
            impact = self.ml_thresholds.get('stock_impact', 0) * 100
            analysis['ml_factors'].append(f"üì¶ –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞ (ML: {impact:+.1f}% –≤–ª–∏—è–Ω–∏–µ)")
            analysis['ml_score'] += impact
            
        if (day_data['grab_cancelled'] + day_data['gojek_cancelled']) > 5:
            impact = self.ml_thresholds.get('cancellation_impact', 0) * 100
            analysis['ml_factors'].append(f"‚ùå –û—Ç–º–µ–Ω—ã (ML: {impact:+.1f}% –≤–ª–∏—è–Ω–∏–µ)")
            analysis['ml_score'] += impact
            
        # 6. –°–ï–ó–û–ù–ù–´–ï –§–ê–ö–¢–û–†–´ (ML –¥–∞–Ω–Ω—ã–µ)
        month = day_data['month']
        month_factor = self.ml_thresholds.get(f'month_{month}_factor', 0)
        if abs(month_factor) > 0.1:  # –ó–Ω–∞—á–∏–º—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            impact = month_factor * 100
            season = "–≤—ã—Å–æ–∫–∏–π" if impact > 0 else "–Ω–∏–∑–∫–∏–π"
            analysis['ml_factors'].append(f"üåÖ {season.title()} —Å–µ–∑–æ–Ω (ML: {impact:+.1f}%)")
            analysis['ml_score'] += impact
            
        # 7. –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–§–û–†–ú (–¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã)
        grab_sales = day_data['grab_sales']
        gojek_sales = day_data['gojek_sales']
        
        if grab_sales == 0 and gojek_sales > 0:
            analysis['ml_factors'].append("‚ö†Ô∏è GRAB –Ω–µ —Ä–∞–±–æ—Ç–∞–ª")
            analysis['ml_score'] -= 30
            analysis['ml_issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å GRAB")
        elif gojek_sales == 0 and grab_sales > 0:
            analysis['ml_factors'].append("‚ö†Ô∏è GOJEK –Ω–µ —Ä–∞–±–æ—Ç–∞–ª")
            analysis['ml_score'] -= 30
            analysis['ml_issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å GOJEK")
            
        # 8. –ü–†–ê–ó–î–ù–ò–ö–ò
        if date in self.balinese_holidays:
            holiday_name = self.balinese_holidays[date]
            analysis['ml_factors'].append(f"üé≠ {holiday_name}")
            analysis['ml_score'] -= 15
            analysis['ml_issues'].append("–í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
            
        # 9. –ü–û–ì–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó (—Ä–µ–∞–ª—å–Ω—ã–π API)
        weather_factors, weather_impact = self._analyze_weather_ml(date)
        if weather_factors:
            analysis['ml_factors'].extend(weather_factors)
            analysis['ml_score'] += weather_impact
            if weather_impact < -15:
                analysis['ml_issues'].append("–ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞")
                
        return analysis
        
    def _analyze_weather_ml(self, date):
        """ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã"""
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': -8.4095,
                'longitude': 115.1889,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    
                    if temperatures and precipitation:
                        avg_temp = sum(temperatures) / len(temperatures)
                        total_rain = sum(precipitation)
                        
                        # ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π)
                        if total_rain > 20:  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
                            return ["üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∑–∏–ª –¥–æ—Å—Ç–∞–≤–∫–∏"], -25
                        elif total_rain > 8:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
                            return ["üå¶Ô∏è –î–æ–∂–¥—å –ø–æ–≤–ª–∏—è–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"], -12
                        elif total_rain < 0.5 and avg_temp > 30:  # –ñ–∞—Ä–∫–æ –∏ —Å—É—Ö–æ
                            return ["‚òÄÔ∏è –ñ–∞—Ä–∫–∞—è —Å—É—Ö–∞—è –ø–æ–≥–æ–¥–∞ - –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤"], +8
                            
        except:
            pass
            
        return [], 0
        
    def _load_restaurant_data(self, restaurant_name, start_date, end_date):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT id FROM restaurants WHERE name = ?", (restaurant_name,))
        restaurant_result = cursor.fetchone()
        if not restaurant_result:
            return []
            
        restaurant_id = restaurant_result[0]
        
        query = """
        SELECT 
            g.stat_date,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            CASE WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                 THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                 ELSE 0 END as avg_order_value,
            CASE 
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5 
            END as avg_rating,
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as marketing_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as marketing_sales,
            CASE WHEN (COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0)) > 0
                 THEN (COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0)) / (COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0))
                 ELSE 0 END as roas,
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        WHERE g.restaurant_id = ? 
        AND g.stat_date BETWEEN ? AND ?
        ORDER BY g.stat_date
        """
        
        cursor.execute(query, (restaurant_id, start_date, end_date))
        data = []
        
        columns = [desc[0] for desc in cursor.description]
        for row in cursor.fetchall():
            day_data = dict(zip(columns, row))
            data.append(day_data)
            
        conn.close()
        return data
        
    def _load_competitors_data(self, restaurant_name, start_date, end_date):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = """
        SELECT 
            g.stat_date,
            AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_competitor_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name != ? 
        AND g.stat_date BETWEEN ? AND ?
        GROUP BY g.stat_date
        """
        
        cursor.execute(query, (restaurant_name, start_date, end_date))
        competitors = {}
        
        for row in cursor.fetchall():
            date, avg_sales = row
            competitors[date] = {'avg_sales': avg_sales or 0}
            
        conn.close()
        return competitors
        
    def _find_ml_patterns(self, daily_analysis):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è ML –ø–æ–¥—Ö–æ–¥"""
        
        patterns = {
            'best_days': [],
            'worst_days': [],
            'ml_issues': {},
            'ml_trends': []
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ML score
        sorted_days = sorted(daily_analysis, key=lambda x: x['ml_score'], reverse=True)
        
        patterns['best_days'] = sorted_days[:3]
        patterns['worst_days'] = sorted_days[-3:]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º ML issues
        for day in daily_analysis:
            for issue in day['ml_issues']:
                patterns['ml_issues'][issue] = patterns['ml_issues'].get(issue, 0) + 1
                
        # ML —Ç—Ä–µ–Ω–¥—ã
        sales_data = [day['total_sales'] for day in daily_analysis]
        if len(sales_data) > 7:
            first_week = mean(sales_data[:7])
            last_week = mean(sales_data[-7:])
            trend_change = ((last_week - first_week) / first_week * 100) if first_week > 0 else 0
            
            if trend_change > 10:
                patterns['ml_trends'].append(f"üìà ML —Ç—Ä–µ–Ω–¥: —Ä–æ—Å—Ç –Ω–∞ {trend_change:.1f}%")
            elif trend_change < -10:
                patterns['ml_trends'].append(f"üìâ ML —Ç—Ä–µ–Ω–¥: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {abs(trend_change):.1f}%")
            else:
                patterns['ml_trends'].append("‚û°Ô∏è ML —Ç—Ä–µ–Ω–¥: —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
                
        return patterns
        
    def _generate_ml_report(self, restaurant_name, daily_analysis, patterns):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        print(f"\nüìä ML-–û–ë–û–°–ù–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("-" * 50)
        
        total_sales = sum(day['total_sales'] for day in daily_analysis)
        avg_daily_sales = total_sales / len(daily_analysis) if daily_analysis else 0
        avg_ml_score = mean([day['ml_score'] for day in daily_analysis]) if daily_analysis else 0
        
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {avg_daily_sales:,.0f} IDR")
        print(f"ü§ñ –°—Ä–µ–¥–Ω–∏–π ML score: {avg_ml_score:.1f}")
        print()
        
        # ML —Ç—Ä–µ–Ω–¥—ã
        print("üìà ML –¢–†–ï–ù–î–´:")
        for trend in patterns['ml_trends']:
            print(f"   {trend}")
        print()
        
        # –õ—É—á—à–∏–µ –¥–Ω–∏ –ø–æ ML
        print("üèÜ –¢–û–ü-3 –î–ù–Ø (–ø–æ ML –∞–Ω–∞–ª–∏–∑—É):")
        for i, day in enumerate(patterns['best_days'], 1):
            print(f"   {i}. üìÖ {day['date']} (ML Score: {day['ml_score']:.1f})")
            print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day['total_sales']:,.0f} IDR")
            if day['ml_factors']:
                print(f"      ü§ñ ML —Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(day['ml_factors'][:2])}")
        print()
        
        # –•—É–¥—à–∏–µ –¥–Ω–∏ –ø–æ ML
        print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ù–ò (–ø–æ ML –∞–Ω–∞–ª–∏–∑—É):")
        for i, day in enumerate(patterns['worst_days'], 1):
            print(f"   {i}. üìÖ {day['date']} (ML Score: {day['ml_score']:.1f})")
            print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day['total_sales']:,.0f} IDR")
            if day['ml_issues']:
                print(f"      ‚ùå ML –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(day['ml_issues'][:2])}")
        print()
        
        # ML –ø—Ä–æ–±–ª–µ–º—ã
        if patterns['ml_issues']:
            print("üîç ML-–í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            sorted_issues = sorted(patterns['ml_issues'].items(), key=lambda x: x[1], reverse=True)
            for issue, count in sorted_issues[:5]:
                print(f"   ‚Ä¢ {issue}: {count} –¥–Ω–µ–π")
        print()
        
        # ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._generate_ml_recommendations(patterns, daily_analysis)
        
    def _generate_ml_recommendations(self, patterns, daily_analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –¥–∞–Ω–Ω—ã—Ö"""
        
        print("ü§ñ ML-–û–ë–û–°–ù–û–í–ê–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 50)
        
        recommendations = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –∏–∑ ML
        if 'total_orders' in self.factor_correlations and self.factor_correlations['total_orders'] > 0.9:
            recommendations.append("üìä –ü–†–ò–û–†–ò–¢–ï–¢ 1: –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.91)")
            
        if 'marketing_sales' in self.factor_correlations and self.factor_correlations['marketing_sales'] > 0.8:
            recommendations.append("üìà –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.90)")
            
        # –ù–∞ –æ—Å–Ω–æ–≤–µ feature importance
        if self.feature_importance.get('avg_order_value', 0) > 0.1:
            recommendations.append("üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - –≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –≤ ML –º–æ–¥–µ–ª–∏")
            
        # –ù–∞ –æ—Å–Ω–æ–≤–µ ML issues
        if patterns['ml_issues']:
            top_issue = max(patterns['ml_issues'].items(), key=lambda x: x[1])
            if top_issue[0] == "–ü—Ä–æ–±–ª–µ–º—ã —Å GOJEK":
                recommendations.append("üîß –†–µ—à–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å GOJEK")
            elif top_issue[0] == "–ü—Ä–æ–¥–∞–∂–∏ –Ω–∏–∂–µ 25-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è":
                recommendations.append("üìä –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ 25-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è")
                
        for i, rec in enumerate(recommendations[:5], 1):
            print(f"   {i}. {rec}")
            
        print()
        print("üìû ML-–û–ë–û–°–ù–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
        print("=" * 45)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –¥–∞–Ω–Ω—ã—Ö
        if patterns['ml_trends']:
            main_trend = patterns['ml_trends'][0].replace('üìà', '').replace('üìâ', '').replace('‚û°Ô∏è', '').replace('ML —Ç—Ä–µ–Ω–¥:', '').strip()
            
            if patterns['ml_issues']:
                main_issue = max(patterns['ml_issues'].items(), key=lambda x: x[1])[0]
                client_answer = f"{main_trend} - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {main_issue.lower()}"
            else:
                client_answer = f"{main_trend} - –≤—Å–µ ML —Ñ–∞–∫—Ç–æ—Ä—ã –≤ –Ω–æ—Ä–º–µ"
        else:
            client_answer = "–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –≤—Å–µ–º ML –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º"
            
        print(f'"{client_answer}"')
        print("=" * 45)

def main():
    """–ó–∞–ø—É—Å–∫ ML-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    analytics = MLBasedSmartAnalytics()
    
    # –¢–µ—Å—Ç –Ω–∞ Only Eggs
    analytics.analyze_restaurant_ml_based(
        "Only Eggs",
        "2025-04-01", 
        "2025-05-31"
    )

if __name__ == "__main__":
    main()