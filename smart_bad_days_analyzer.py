#!/usr/bin/env python3
"""
üîç –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–õ–û–•–ò–• –î–ù–ï–ô –ü–†–û–î–ê–ñ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –†–µ–∞–ª–∏–∑—É–µ—Ç —á–µ—Ç–∫—É—é –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–Ω–∏—è
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Ä–¥–∏–∫—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π
"""

import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta
from statistics import mean, median
import json
import time

class SmartBadDaysAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        self.holidays_data = self._load_holidays_data()
        
    def analyze_bad_days(self, restaurant_name=None, days_to_analyze=30):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –ø—Ä–æ–¥–∞–∂"""
        
        print("üîç –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–õ–û–•–ò–• –î–ù–ï–ô –ü–†–û–î–ê–ñ")
        print("=" * 80)
        print("üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("=" * 80)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏
        daily_data = self._load_daily_sales_data(restaurant_name, days_to_analyze)
        bad_days = self._categorize_days(daily_data)
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å
        analyzed_days = []
        for _, bad_day in bad_days.iterrows():
            analysis = self._analyze_single_bad_day(bad_day)
            analyzed_days.append(analysis)
            
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._generate_summary_report(analyzed_days)
        
        return analyzed_days
        
    def _load_daily_sales_data(self, restaurant_name, days_count):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"""
        
        print(f"\nüìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï {days_count} –î–ù–ï–ô")
        print("-" * 60)
        
        conn = sqlite3.connect(self.db_path)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        restaurant_filter = ""
        if restaurant_name:
            restaurant_filter = f"AND r.name = '{restaurant_name}'"
            
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            r.id as restaurant_id,
            
            -- –ü—Ä–æ–¥–∞–∂–∏ –∏ –∑–∞–∫–∞–∑—ã
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            
            -- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as cancelled_orders,
            COALESCE(g.close_time_minutes, 0) as close_time_minutes,
            
            -- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
            COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0) as total_ad_spend,
            CASE WHEN COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0) > 0 
                 THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.ad_spend, 0) + COALESCE(gj.ad_spend, 0))
                 ELSE 0 END as roas,
                 
            -- –†–µ–π—Ç–∏–Ω–≥
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            
            -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE g.stat_date >= date('now', '-{days_count} days')
        AND r.name IS NOT NULL
        {restaurant_filter}
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        if restaurant_name:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}'")
        else:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –ø–æ {df['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º")
            
        return df
        
    def _categorize_days(self, daily_data):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –¥–Ω–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–¥–∞–∂"""
        
        print(f"\nüîç –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –î–ù–ï–ô –ü–û –ü–†–û–î–ê–ñ–ê–ú")
        print("-" * 40)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        mean_sales = daily_data['total_sales'].mean()
        std_sales = daily_data['total_sales'].std()
        
        # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
        p5 = daily_data['total_sales'].quantile(0.05)
        p10 = daily_data['total_sales'].quantile(0.10)
        p25 = daily_data['total_sales'].quantile(0.25)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–û–†–û–ì–ò:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mean_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_sales:,.0f} IDR")
        print(f"   ‚Ä¢ 5% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p5:,.0f} IDR")
        print(f"   ‚Ä¢ 10% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p10:,.0f} IDR")
        print(f"   ‚Ä¢ 25% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p25:,.0f} IDR")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏
        critical_days = daily_data[daily_data['total_sales'] < p5]
        very_bad_days = daily_data[(daily_data['total_sales'] >= p5) & 
                                  (daily_data['total_sales'] < p10)]
        bad_days = daily_data[(daily_data['total_sales'] >= p10) & 
                             (daily_data['total_sales'] < p25)]
        
        print(f"\nüìÖ –ö–ê–¢–ï–ì–û–†–ò–ò –î–ù–ï–ô:")
        print(f"   üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¥–Ω–∏ (< 5%): {len(critical_days)}")
        print(f"   üü† –û–ß–ï–ù–¨ –ü–õ–û–•–ò–ï –¥–Ω–∏ (5-10%): {len(very_bad_days)}")
        print(f"   üü° –ü–õ–û–•–ò–ï –¥–Ω–∏ (10-25%): {len(bad_days)}")
        
        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ä–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –æ—á–µ–Ω—å –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
        problem_days = pd.concat([critical_days, very_bad_days])
        
        print(f"\nüéØ –í–´–ë–†–ê–ù–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: {len(problem_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
        
        return problem_days.sort_values('stat_date', ascending=False)
        
    def _analyze_single_bad_day(self, day_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ"""
        
        date = day_data['stat_date']
        sales = day_data['total_sales']
        restaurant = day_data['restaurant_name']
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –î–ù–Ø: {date} - {restaurant}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR")
        print("-" * 50)
        
        analysis = {
            'date': date,
            'restaurant': restaurant,
            'sales': sales,
            'reasons': [],
            'severity': 'unknown',
            'recommendations': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è - –≤–æ–∑—å–º–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        baseline = self._get_baseline_sales(restaurant, date)
        if baseline > 0:
            drop_percent = ((sales - baseline) / baseline) * 100
            analysis['drop_percent'] = drop_percent
            analysis['baseline'] = baseline
            
            if drop_percent < -50:
                analysis['severity'] = 'critical'
            elif drop_percent < -30:
                analysis['severity'] = 'serious'
            elif drop_percent < -15:
                analysis['severity'] = 'noticeable'
            else:
                analysis['severity'] = 'minor'
                
        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–û–†–û–í
        
        # 1. –ü–†–ê–ó–î–ù–ò–ö–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
        holiday_impact = self._check_holiday_impact(date)
        if holiday_impact:
            analysis['reasons'].append(holiday_impact)
            print(f"üéâ {holiday_impact['description']}")
            
        # 2. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 - –º–æ–≥—É—Ç –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏)
        operational_impact = self._check_operational_issues(day_data)
        if operational_impact:
            analysis['reasons'].append(operational_impact)
            print(f"üöö {operational_impact['description']}")
            
        # 3. –ú–ê–†–ö–ï–¢–ò–ù–ì (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
        marketing_impact = self._check_marketing_issues(day_data, baseline)
        if marketing_impact:
            analysis['reasons'].append(marketing_impact)
            print(f"üì± {marketing_impact['description']}")
            
        # 4. –†–ï–ô–¢–ò–ù–ì (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
        rating_impact = self._check_rating_issues(day_data)
        if rating_impact:
            analysis['reasons'].append(rating_impact)
            print(f"‚≠ê {rating_impact['description']}")
            
        # 5. –î–ï–ù–¨ –ù–ï–î–ï–õ–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)
        weekday_impact = self._check_weekday_patterns(day_data)
        if weekday_impact:
            analysis['reasons'].append(weekday_impact)
            print(f"üìÖ {weekday_impact['description']}")
            
        # 6. –ü–û–ì–û–î–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6)
        weather_impact = self._check_weather_impact(date)
        if weather_impact:
            analysis['reasons'].append(weather_impact)
            print(f"üåßÔ∏è {weather_impact['description']}")
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis['recommendations'] = self._generate_recommendations(analysis)
        
        if not analysis['reasons']:
            print("‚ùì –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
        return analysis
        
    def _check_holiday_impact(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        
        if date in self.holidays_data:
            holiday = self.holidays_data[date]
            impact_percent = holiday.get('expected_impact', 0)
            
            if abs(impact_percent) > 15:  # –ü–æ—Ä–æ–≥ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                return {
                    'factor': 'holiday',
                    'impact_percent': impact_percent,
                    'description': f"–ü—Ä–∞–∑–¥–Ω–∏–∫ '{holiday['name']}' - {holiday['impact']}",
                    'priority': 1
                }
        return None
        
    def _check_operational_issues(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_time = day_data.get('close_time_minutes', 0)
        if close_time > 240:  # –ë–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç
            impact = min(-80, -(close_time / 720 * 100))  # –ú–∞–∫—Å–∏–º—É–º -80%
            issues.append(f"–ó–∞–∫—Ä—ã—Ç {close_time//60}—á {close_time%60}–º–∏–Ω ({impact:.0f}%)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—ã
        cancelled = day_data.get('cancelled_orders', 0)
        total_orders = day_data.get('total_orders', 1)
        if cancelled > 0 and total_orders > 0:
            cancel_rate = (cancelled / (total_orders + cancelled)) * 100
            if cancel_rate > 30:  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω
                impact = -min(50, cancel_rate)
                issues.append(f"–í—ã—Å–æ–∫–∏–π % –æ—Ç–º–µ–Ω: {cancel_rate:.1f}% ({impact:.0f}%)")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        grab_sales = day_data.get('grab_sales', 0)
        gojek_sales = day_data.get('gojek_sales', 0)
        
        if grab_sales == 0 and gojek_sales > 0:
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å Grab (-30%)")
        elif gojek_sales == 0 and grab_sales > 0:
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å Gojek (-25%)")
            
        if issues:
            return {
                'factor': 'operational',
                'impact_percent': -50,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                'description': "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: " + "; ".join(issues),
                'priority': 2
            }
        return None
        
    def _check_marketing_issues(self, day_data, baseline):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º"""
        
        ad_spend = day_data.get('total_ad_spend', 0)
        roas = day_data.get('roas', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        avg_ad_spend = baseline * 0.05 if baseline > 0 else 100000  # 5% –æ—Ç –ø—Ä–æ–¥–∞–∂
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã
        if ad_spend < avg_ad_spend * 0.5:  # –°–Ω–∏–∂–µ–Ω –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
            reduction = ((avg_ad_spend - ad_spend) / avg_ad_spend) * 100
            impact = -min(40, reduction * 0.5)  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            issues.append(f"–ë—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã —Å–Ω–∏–∂–µ–Ω –Ω–∞ {reduction:.0f}% ({impact:.0f}%)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ROAS
        if roas > 0 and roas < 1.5:  # –ù–∏–∑–∫–∏–π ROAS
            impact = -20
            issues.append(f"–ù–∏–∑–∫–∏–π ROAS: {roas:.1f} ({impact}%)")
            
        if issues:
            return {
                'factor': 'marketing',
                'impact_percent': -25,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                'description': "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º: " + "; ".join(issues),
                'priority': 3
            }
        return None
        
    def _check_rating_issues(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        
        rating = day_data.get('rating', 4.0)
        
        if rating < 3.5:  # –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            impact = -30
            return {
                'factor': 'rating',
                'impact_percent': impact,
                'description': f"–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.1f} ({impact}%)",
                'priority': 4
            }
        elif rating < 4.0:  # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            impact = -15
            return {
                'factor': 'rating',
                'impact_percent': impact,
                'description': f"–†–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: {rating:.1f} ({impact}%)",
                'priority': 4
            }
        return None
        
    def _check_weekday_patterns(self, day_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        
        day_of_week = day_data.get('day_of_week', 0)
        weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        # –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        weekday_impacts = {
            0: -15,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            1: -5,   # –í—Ç–æ—Ä–Ω–∏–∫
            2: 0,    # –°—Ä–µ–¥–∞
            3: 0,    # –ß–µ—Ç–≤–µ—Ä–≥
            4: 5,    # –ü—è—Ç–Ω–∏—Ü–∞
            5: 10,   # –°—É–±–±–æ—Ç–∞
            6: 5     # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        }
        
        impact = weekday_impacts.get(day_of_week, 0)
        if abs(impact) > 10:
            return {
                'factor': 'weekday',
                'impact_percent': impact,
                'description': f"{weekdays[day_of_week]} - –æ–±—ã—á–Ω–æ {impact:+}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ",
                'priority': 5
            }
        return None
        
    def _check_weather_impact(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –î–µ–Ω–ø–∞—Å–∞—Ä–∞)
        weather = self._get_weather_for_date(-8.6705, 115.2126, date)
        
        rain = weather['rain']
        
        if rain > 25:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å
            return {
                'factor': 'weather',
                'impact_percent': -10,
                'description': f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (-10%)",
                'priority': 6
            }
        elif rain > 15:  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
            return {
                'factor': 'weather',
                'impact_percent': -7,
                'description': f"–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (-7%)",
                'priority': 6
            }
        return None
        
    def _generate_recommendations(self, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        recommendations = []
        
        for reason in analysis['reasons']:
            factor = reason['factor']
            
            if factor == 'holiday':
                recommendations.extend([
                    "–ó–∞—Ä–∞–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
                    "–£–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∫—É—Ä—å–µ—Ä–∞–º –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏",
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö"
                ])
            elif factor == 'operational':
                recommendations.extend([
                    "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫—É—Ö–Ω–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                    "–ù–∞–ª–∞–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
                ])
            elif factor == 'marketing':
                recommendations.extend([
                    "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏",
                    "–£–ª—É—á—à–∏—Ç—å ROAS"
                ])
            elif factor == 'rating':
                recommendations.extend([
                    "–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞",
                    "–ê–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç–∑—ã–≤–∞–º–∏",
                    "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
                ])
            elif factor == 'weather':
                recommendations.extend([
                    "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø–æ–≥–æ–¥—ã"
                ])
                
        return list(set(recommendations))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
    def _get_baseline_sales(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = f"""
        SELECT AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date BETWEEN date('{date}', '-30 days') AND date('{date}', '-1 day')
        AND (g.sales > 0 OR gj.sales > 0)
        """
        
        result = pd.read_sql_query(query, conn)
        conn.close()
        
        return result['avg_sales'].iloc[0] if len(result) > 0 else 0
        
    def _load_holidays_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ JSON)
        holidays = {
            '2024-01-01': {'name': 'New Year', 'expected_impact': 50, 'impact': '–õ—é–¥–∏ –ø—Ä–∞–∑–¥–Ω—É—é—Ç –¥–æ–º–∞'},
            '2024-02-10': {'name': 'Chinese New Year', 'expected_impact': 40, 'impact': '–ö–∏—Ç–∞–π—Å–∫–∞—è –æ–±—â–∏–Ω–∞ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç'},
            '2024-03-11': {'name': 'Nyepi', 'expected_impact': -95, 'impact': '–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã - –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'},
            '2024-04-10': {'name': 'Eid al-Fitr', 'expected_impact': -45, 'impact': '–ö—É—Ä—å–µ—Ä—ã-–º—É—Å—É–ª—å–º–∞–Ω–µ –ø—Ä–∞–∑–¥–Ω—É—é—Ç'},
            '2024-12-25': {'name': 'Christmas', 'expected_impact': -40, 'impact': '–ö—É—Ä—å–µ—Ä—ã-—Ö—Ä–∏—Å—Ç–∏–∞–Ω–µ —Å —Å–µ–º—å—è–º–∏'},
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞...
        }
        
        return holidays
        
    def _get_weather_for_date(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –¥–∞—Ç—ã"""
        
        cache_key = f"{lat}_{lon}_{date}"
        
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
            
        default_weather = {'temp': 28.0, 'rain': 0.0, 'wind': 5.0}
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    wind_speed = hourly.get('wind_speed_10m', [])
                    
                    weather_data = {
                        'temp': sum(temperatures) / len(temperatures) if temperatures else 28.0,
                        'rain': sum(precipitation) if precipitation else 0.0,
                        'wind': sum(wind_speed) / len(wind_speed) if wind_speed else 5.0
                    }
                    
                    self.weather_cache[cache_key] = weather_data
                    return weather_data
                    
        except Exception:
            pass
            
        self.weather_cache[cache_key] = default_weather
        return default_weather
        
    def _generate_summary_report(self, analyzed_days):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        
        print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ü–õ–û–•–ò–ú –î–ù–Ø–ú")
        print("=" * 80)
        
        if not analyzed_days:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º
        factor_counts = {}
        for day in analyzed_days:
            for reason in day['reasons']:
                factor = reason['factor']
                factor_counts[factor] = factor_counts.get(factor, 0) + 1
                
        print(f"üìä –û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ:")
        factor_names = {
            'holiday': 'üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏',
            'operational': 'üöö –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'marketing': 'üì± –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            'rating': '‚≠ê –†–µ–π—Ç–∏–Ω–≥',
            'weekday': 'üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            'weather': 'üåßÔ∏è –ü–æ–≥–æ–¥–∞'
        }
        
        for factor, count in sorted(factor_counts.items(), key=lambda x: x[1], reverse=True):
            factor_name = factor_names.get(factor, factor)
            percentage = (count / len(analyzed_days)) * 100
            print(f"   {factor_name}: {count} –¥–Ω–µ–π ({percentage:.1f}%)")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recommendations = []
        for day in analyzed_days:
            all_recommendations.extend(day['recommendations'])
            
        unique_recommendations = list(set(all_recommendations))
        
        print(f"\nüí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(unique_recommendations[:10], 1):
            print(f"   {i}. {rec}")
            
        print(f"\nüéØ –ò–¢–û–ì–û –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–û: {len(analyzed_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = SmartBadDaysAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    results = analyzer.analyze_bad_days(days_to_analyze=30)
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏—á–∏–Ω—ã –ø–ª–æ—Ö–∏—Ö –ø—Ä–æ–¥–∞–∂ –∏ –¥–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()