#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π ML –º–æ–¥–µ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
"""

import pandas as pd
import numpy as np
import sqlite3
import joblib
import json
from datetime import datetime, timedelta

def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    print("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    
    model = joblib.load('models/client_sales_model.joblib')
    
    with open('models/client_model_metadata.json', 'r') as f:
        metadata = json.load(f)
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {metadata['model_type']}")
    print(f"üìÖ –û–±—É—á–µ–Ω–∞: {metadata['trained_at']}")
    print(f"üéØ R¬≤ –Ω–∞ —Ç–µ—Å—Ç–µ: {metadata['metrics']['test_r2']:.4f}")
    
    return model, metadata

def prepare_prediction_data(restaurant_id, date, db_path='client_data.db'):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant_id} –Ω–∞ {date}")
    
    conn = sqlite3.connect(db_path)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    query = """
    SELECT 
        g.restaurant_id,
        g.date,
        g.sales,
        g.orders,
        g.avg_order_value,
        g.ads_enabled,
        g.rating,
        g.delivery_time,
        r.name as restaurant_name,
        r.region
    FROM grab_stats g
    LEFT JOIN restaurants r ON g.restaurant_id = r.id
    WHERE g.restaurant_id = ? AND DATE(g.date) <= ?
    ORDER BY g.date DESC
    LIMIT 30
    """
    
    df = pd.read_sql_query(query, conn, params=(restaurant_id, date))
    conn.close()
    
    if len(df) == 0:
        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant_id}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
    df['date'] = pd.to_datetime(df['date'])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
    target_date = pd.to_datetime(date)
    df['date'] = pd.to_datetime(df['date'])
    target_row = df[df['date'].dt.date == target_date.date()]
    
    if len(target_row) == 0:
        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—É {date}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
    target_data = target_row.iloc[0].copy()
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    target_data['year'] = target_date.year
    target_data['month'] = target_date.month
    target_data['day'] = target_date.day
    target_data['day_of_week'] = target_date.dayofweek
    target_data['week_of_year'] = target_date.isocalendar().week
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    target_data['is_weekend'] = int(target_date.dayofweek in [5, 6])
    target_data['is_high_season'] = int(target_date.month in [6, 7, 8])
    target_data['is_low_season'] = int(target_date.month in [3, 4, 5, 9, 10])
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    all_regions = ['Seminyak', 'Ubud', 'Canggu', 'Denpasar', 'Sanur']
    all_restaurants = ['Warung Bali Asli', 'Ubud Organic Cafe', 'Canggu Surf Cafe', 
                      'Denpasar Local', 'Sanur Beach Resto', 'Nusa Dua Fine Dining',
                      'Jimbaran Seafood', 'Kuta Night Market']
    
    target_data['region_encoded'] = all_regions.index(target_data['region']) if target_data['region'] in all_regions else 0
    target_data['restaurant_encoded'] = all_restaurants.index(target_data['restaurant_name']) if target_data['restaurant_name'] in all_restaurants else 0
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
    target_data['rating_normalized'] = (target_data['rating'] - 4.0) / 0.5
    target_data['delivery_time_normalized'] = (target_data['delivery_time'] - 30) / 10
    
    # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df_sorted = df.sort_values('date')
    target_idx = df_sorted[df_sorted['date'] == target_date].index[0]
    
    for lag in [1, 2, 3, 7]:
        lag_idx = target_idx - lag
        if lag_idx >= 0 and lag_idx < len(df_sorted):
            target_data[f'sales_lag_{lag}'] = df_sorted.iloc[lag_idx]['sales']
        else:
            target_data[f'sales_lag_{lag}'] = 0
    
    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    for window in [3, 7, 14]:
        if len(df_sorted) >= window:
            recent_sales = df_sorted.iloc[-window:]['sales']
            target_data[f'sales_ma_{window}'] = recent_sales.mean()
        else:
            target_data[f'sales_ma_{window}'] = df_sorted['sales'].mean()
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if len(df_sorted) >= 2:
        target_data['sales_change_1d'] = (df_sorted.iloc[-1]['sales'] - df_sorted.iloc[-2]['sales']) / df_sorted.iloc[-2]['sales']
    else:
        target_data['sales_change_1d'] = 0
    
    if len(df_sorted) >= 8:
        target_data['sales_change_7d'] = (df_sorted.iloc[-1]['sales'] - df_sorted.iloc[-8]['sales']) / df_sorted.iloc[-8]['sales']
    else:
        target_data['sales_change_7d'] = 0
    
    # –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–∑–Ω–∞–∫–∏
    target_data['ads_enabled'] = int(target_data['ads_enabled'])
    
    return target_data

def predict_sales(model, metadata, target_data):
    """–î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"""
    feature_names = metadata['feature_names']
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    X = []
    for feature in feature_names:
        if feature in target_data:
            X.append(target_data[feature])
        else:
            X.append(0)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    X = np.array(X).reshape(1, -1)
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predicted_sales = model.predict(X)[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    feature_importance = {
        feature: importance 
        for feature, importance in zip(feature_names, model.feature_importances_)
    }
    
    return predicted_sales, feature_importance

def analyze_restaurant_day(restaurant_id, date, db_path='client_data.db'):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    print(f"üéØ –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–ê {restaurant_id} –ù–ê –î–ê–¢–£ {date}")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model, metadata = load_model()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    target_data = prepare_prediction_data(restaurant_id, date, db_path)
    if target_data is None:
        return None
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predicted_sales, feature_importance = predict_sales(model, metadata, target_data)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    actual_sales = target_data['sales']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    sales_diff = actual_sales - predicted_sales
    sales_diff_percent = (sales_diff / predicted_sales) * 100
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        'restaurant_id': restaurant_id,
        'restaurant_name': target_data['restaurant_name'],
        'region': target_data['region'],
        'date': date,
        'actual_sales': float(actual_sales),
        'predicted_sales': float(predicted_sales),
        'sales_difference': float(sales_diff),
        'sales_difference_percent': float(sales_diff_percent),
        'analysis': {
            'orders': int(target_data['orders']),
            'avg_order_value': float(target_data['avg_order_value']),
            'ads_enabled': bool(target_data['ads_enabled']),
            'rating': float(target_data['rating']),
            'delivery_time': int(target_data['delivery_time']),
            'is_weekend': bool(target_data['is_weekend']),
            'is_high_season': bool(target_data['is_high_season'])
        },
        'feature_importance': {k: float(v) for k, v in sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:10]},
        'generated_at': datetime.now().isoformat()
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {target_data['restaurant_name']}")
    print(f"üìç –†–µ–≥–∏–æ–Ω: {target_data['region']}")
    print(f"üìÖ –î–∞—Ç–∞: {date}")
    print(f"üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {actual_sales:,.0f} IDR")
    print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {predicted_sales:,.0f} IDR")
    print(f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {sales_diff:+,.0f} IDR ({sales_diff_percent:+.1f}%)")
    
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í:")
    print(f"  üì¶ –ó–∞–∫–∞–∑–æ–≤: {target_data['orders']}")
    print(f"  üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {target_data['avg_order_value']:,.0f} IDR")
    print(f"  üì± –†–µ–∫–ª–∞–º–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if target_data['ads_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–∞'}")
    print(f"  ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {target_data['rating']:.1f}")
    print(f"  üöö –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {target_data['delivery_time']} –º–∏–Ω")
    print(f"  üìÖ –í—ã—Ö–æ–¥–Ω–æ–π: {'–î–∞' if target_data['is_weekend'] else '–ù–µ—Ç'}")
    print(f"  üèñÔ∏è –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω: {'–î–∞' if target_data['is_high_season'] else '–ù–µ—Ç'}")
    
    print(f"\nüîù –¢–û–ü-5 –í–ê–ñ–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
    for i, (feature, importance) in enumerate(list(feature_importance.items())[:5], 1):
        print(f"  {i}. {feature}: {importance:.4f}")
    
    return report

def test_multiple_restaurants():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò –ù–ê –ù–ï–°–ö–û–õ–¨–ö–ò–• –†–ï–°–¢–û–†–ê–ù–ê–•")
    print("=" * 60)
    
    test_cases = [
        (1, '2023-06-15'),  # Warung Bali Asli, –≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω
        (2, '2023-03-10'),  # Ubud Organic Cafe, –Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω
        (3, '2023-12-25'),  # Canggu Surf Cafe, –ø—Ä–∞–∑–¥–Ω–∏–∫
        (6, '2023-07-01'),  # Nusa Dua Fine Dining, –ø–∏–∫ —Å–µ–∑–æ–Ω–∞
        (8, '2023-04-15'),  # Kuta Night Market, –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å
    ]
    
    results = []
    
    for restaurant_id, date in test_cases:
        print(f"\n{'='*40}")
        result = analyze_restaurant_day(restaurant_id, date)
        if result:
            results.append(result)
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    
    if results:
        avg_error = np.mean([abs(r['sales_difference_percent']) for r in results])
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error:.1f}%")
        
        accurate_predictions = sum(1 for r in results if abs(r['sales_difference_percent']) < 10)
        print(f"üéØ –¢–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (¬±10%): {accurate_predictions}/{len(results)} ({accurate_predictions/len(results)*100:.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
    
    return results

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –ú–û–î–ï–õ–ò –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
    results = test_multiple_restaurants()
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ test_results.json")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ generate_client_reports.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")
    print("3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å –≤ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É")

if __name__ == "__main__":
    main()