#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ë–∞–ª–∏
"""

import json
import pandas as pd
from datetime import datetime, timedelta
from bali_data_collector import BaliDataCollector
from bali_config import BALI_REGIONS, OPTIMIZATION_RULES

class BaliSalesAnalyzer:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –ë–∞–ª–∏"""
    
    def __init__(self):
        self.data_collector = BaliDataCollector()
        self.restaurants_data = {}
        
    def analyze_sales_drop(self, restaurant_name: str, location: str, date: str, 
                          actual_sales: float, previous_sales: float) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            location: –õ–æ–∫–∞—Ü–∏—è (seminyak, ubud, canggu, etc.)
            date: –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)
            actual_sales: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            previous_sales: –ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            
        Returns:
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ {restaurant_name} –≤ {location} –Ω–∞ {date}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {actual_sales:,.0f} (–±—ã–ª–æ: {previous_sales:,.0f})")
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change_percent = ((actual_sales - previous_sales) / previous_sales) * 100
        change_abs = actual_sales - previous_sales
        
        print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.1f}% ({change_abs:+,.0f})")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        external_data = self.data_collector.collect_all_data(location, date)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        factors = self._analyze_factors(external_data, change_percent)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations(factors, external_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'restaurant': restaurant_name,
            'location': location,
            'date': date,
            'actual_sales': actual_sales,
            'previous_sales': previous_sales,
            'change_percent': round(change_percent, 1),
            'change_absolute': round(change_abs, 0),
            'factors': factors,
            'external_data': external_data,
            'recommendations': recommendations,
            'timestamp': datetime.now().isoformat()
        }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._print_analysis_result(result)
        
        return result
    
    def _analyze_factors(self, external_data: dict, change_percent: float) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è"""
        factors = {
            'weather_impact': 0,
            'holiday_impact': 0,
            'driver_impact': 0,
            'tourist_impact': 0,
            'total_external_impact': 0
        }
        
        # –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        if external_data['rain_mm'] > 20:
            factors['weather_impact'] = -15  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å -15%
        elif external_data['rain_mm'] > 10:
            factors['weather_impact'] = -8   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å -8%
        elif external_data['rain_mm'] > 5:
            factors['weather_impact'] = -3   # –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å -3%
        
        if external_data['is_extreme_weather']:
            factors['weather_impact'] -= 5   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É
        
        # –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        if external_data['is_hindu_holiday']:
            factors['holiday_impact'] = -12  # –ò–Ω–¥—É–∏—Å—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –ë–∞–ª–∏
        elif external_data['is_muslim_holiday']:
            factors['holiday_impact'] = -8   # –ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        elif external_data['is_national_holiday']:
            factors['holiday_impact'] = -10  # –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        
        # –í–ª–∏—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        driver_availability = external_data['driver_availability']
        if driver_availability < 0.6:
            factors['driver_impact'] = -20   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        elif driver_availability < 0.8:
            factors['driver_impact'] = -10   # –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞
        elif driver_availability > 1.0:
            factors['driver_impact'] = 5     # –ò–∑–±—ã—Ç–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        
        # –í–ª–∏—è–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        tourist_density = external_data['tourist_density']
        if tourist_density > 1.0:
            factors['tourist_impact'] = 10   # –í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω
        elif tourist_density < 0.6:
            factors['tourist_impact'] = -5   # –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω
        
        # –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors['total_external_impact'] = sum([
            factors['weather_impact'],
            factors['holiday_impact'], 
            factors['driver_impact'],
            factors['tourist_impact']
        ])
        
        return factors
    
    def _generate_recommendations(self, factors: dict, external_data: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ
        if external_data['rain_mm'] > 15:
            recommendations.extend([
                "üåßÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –¥–æ–∂–¥—å",
                "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ '–î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å' —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
                "üí∞ –ü–æ–≤—ã—Å–∏—Ç—å –±–æ–Ω—É—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è–º –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –¥–æ–∂–¥—å",
                "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –Ω–µ–ø–æ–≥–æ–¥—É"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º
        if external_data['is_muslim_holiday']:
            recommendations.extend([
                "üïå –£–±—Ä–∞—Ç—å —Å–≤–∏–Ω–∏–Ω—É –∏–∑ –º–µ–Ω—é –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞",
                "ü•ò –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞–ª—è–ª—å–Ω—ã—Ö –±–ª—é–¥",
                "‚è∞ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥ –º–æ–ª–∏—Ç–≤—ã",
                "üë• –ü—Ä–∏–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π-–Ω–µ–º—É—Å—É–ª—å–º–∞–Ω"
            ])
        
        if external_data['is_hindu_holiday']:
            recommendations.extend([
                "üõï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –º–µ–Ω—é",
                "üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ –∫ –º–µ—Å—Ç–Ω–æ–º—É –ø—Ä–∞–∑–¥–Ω–∏–∫—É",
                "üìÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
                "üéØ –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–∏—Å—Ç–∞—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        if external_data['driver_availability'] < 0.7:
            recommendations.extend([
                "üöó –£–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–∞ 20-30%",
                "‚ö° –ü–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
                "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π",
                "‚è±Ô∏è –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É —Å–µ–∑–æ–Ω—É
        if external_data['tourist_density'] > 1.0:
            recommendations.extend([
                "üåç –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥",
                "üéØ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω–∞—Ö",
                "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                "üí≥ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã"
            ])
        elif external_data['tourist_density'] < 0.6:
            recommendations.extend([
                "üè† –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª—è—Ö",
                "üçõ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –±–ª—é–¥–∞",
                "üí∞ –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—Ç–Ω—ã—Ö",
                "üì± –†–µ–∫–ª–∞–º–∞ –Ω–∞ –º–µ—Å—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"
            ])
        
        return recommendations
    
    def _print_analysis_result(self, result: dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*60)
        print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
        print("="*60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant']}")
        print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {result['location']}")
        print(f"üìÖ –î–∞—Ç–∞: {result['date']}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {result['actual_sales']:,.0f} (–±—ã–ª–æ: {result['previous_sales']:,.0f})")
        
        change = result['change_percent']
        emoji = "üìà" if change > 0 else "üìâ"
        print(f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}% ({result['change_absolute']:+,.0f})")
        
        # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        print(f"\nüåç –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´:")
        ext_data = result['external_data']
        
        print(f"üåßÔ∏è –ü–æ–≥–æ–¥–∞: {ext_data['rain_mm']:.1f}–º–º –¥–æ–∂–¥—è, {ext_data['temperature']:.1f}¬∞C")
        print(f"üöó –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π: {ext_data['driver_availability']:.1%}")
        print(f"üèñÔ∏è –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω: {ext_data['tourist_season']} ({ext_data['tourist_density']:.1%})")
        
        if ext_data['holiday_names']:
            print(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {', '.join(ext_data['holiday_names'])}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è
        print(f"\nüìä –í–õ–ò–Ø–ù–ò–ï –§–ê–ö–¢–û–†–û–í:")
        factors = result['factors']
        
        if factors['weather_impact'] != 0:
            print(f"üåßÔ∏è –ü–æ–≥–æ–¥–∞: {factors['weather_impact']:+.0f}%")
        if factors['holiday_impact'] != 0:
            print(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {factors['holiday_impact']:+.0f}%")
        if factors['driver_impact'] != 0:
            print(f"üöó –í–æ–¥–∏—Ç–µ–ª–∏: {factors['driver_impact']:+.0f}%")
        if factors['tourist_impact'] != 0:
            print(f"üèñÔ∏è –¢—É—Ä–∏—Å—Ç—ã: {factors['tourist_impact']:+.0f}%")
        
        total_impact = factors['total_external_impact']
        print(f"üìà –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {total_impact:+.0f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(result['recommendations'][:8], 1):
                print(f"{i:2d}. {rec}")
        
        print("="*60)
    
    def batch_analyze_week(self, restaurant_name: str, location: str, 
                          start_date: str, sales_data: dict) -> list:
        """
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            location: –õ–æ–∫–∞—Ü–∏—è
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            sales_data: –°–ª–æ–≤–∞—Ä—å {–¥–∞—Ç–∞: –ø—Ä–æ–¥–∞–∂–∏}
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–Ω—è–º
        """
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –ó–ê –ù–ï–î–ï–õ–Æ: {restaurant_name}")
        print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {len(sales_data)} –¥–Ω–µ–π")
        print("="*60)
        
        results = []
        previous_sales = None
        
        for date, sales in sorted(sales_data.items()):
            if previous_sales is not None:
                result = self.analyze_sales_drop(
                    restaurant_name, location, date, sales, previous_sales
                )
                results.append(result)
                print()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
            
            previous_sales = sales
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if results:
            changes = [r['change_percent'] for r in results]
            avg_change = sum(changes) / len(changes)
            
            print(f"\nüìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {avg_change:.1f}%")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {max(changes):.1f}%")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {min(changes):.1f}%")
            
            # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            all_recommendations = []
            for r in results:
                all_recommendations.extend(r['recommendations'])
            
            if all_recommendations:
                from collections import Counter
                common_recs = Counter(all_recommendations).most_common(5)
                print(f"\nüî• –ß–ê–°–¢–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                for rec, count in common_recs:
                    print(f"{count}x {rec}")
        
        return results

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–û–î–ê–ñ –î–õ–Ø –ë–ê–õ–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = BaliSalesAnalyzer()
    
    # –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
    print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –î–ù–Ø")
    
    result = analyzer.analyze_sales_drop(
        restaurant_name="Warung Bali Asli",
        location="seminyak",
        date="2024-01-15",
        actual_sales=2500000,  # 2.5 –º–ª–Ω —Ä—É–ø–∏–π
        previous_sales=3200000  # 3.2 –º–ª–Ω —Ä—É–ø–∏–π
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('analysis_result.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ analysis_result.json")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ê–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é
    print("\n\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ó–ê –ù–ï–î–ï–õ–Æ")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_sales = {
        '2024-01-15': 2500000,
        '2024-01-16': 2800000,
        '2024-01-17': 2200000,
        '2024-01-18': 3100000,
        '2024-01-19': 2900000,
        '2024-01-20': 3400000,
        '2024-01-21': 2700000,
    }
    
    weekly_results = analyzer.batch_analyze_week(
        restaurant_name="Warung Bali Asli",
        location="seminyak",
        start_date="2024-01-15",
        sales_data=weekly_sales
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('weekly_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(weekly_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ù–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ weekly_analysis.json")

if __name__ == "__main__":
    main()