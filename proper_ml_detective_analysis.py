#!/usr/bin/env python3
"""
üîç –ü–†–ê–í–ò–õ–¨–ù–ê–Ø ML –ú–û–î–ï–õ–¨ –î–õ–Ø –î–ï–¢–ï–ö–¢–ò–í–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ë–µ–∑ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏, —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏

üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï 28.12.2024:
- SHAP –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
- RandomForest —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏  
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ–≥–æ–¥–∞, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
- –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ data leakage
"""

import sqlite3
import pandas as pd
import numpy as np
import json
import requests
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import mean_absolute_error, r2_score
import shap
import warnings
warnings.filterwarnings('ignore')

class ProperMLDetectiveAnalysis:
    def __init__(self):
        self.model = None
        self.feature_names = []
        self.shap_explainer = None
        
    def load_external_factors_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ù–ï –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ—Ç –ø—Ä–æ–¥–∞–∂!)"""
        
        print("üåç –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´...")
        
        conn = sqlite3.connect('database.sqlite')
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (–ë–ï–ó –ø—Ä–æ–¥–∞–∂!)
        query = """
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            r.id as restaurant_id,
            
            -- ‚ùå –£–î–ê–õ–Ø–ï–ú –í–°–ï –¶–ò–†–ö–£–õ–Ø–†–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò:
            -- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º: sales, orders, avg_order_value, sales_7day_avg
            
            -- ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´:
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì (–ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
            LAG(COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0), 1) OVER (
                PARTITION BY r.name ORDER BY g.stat_date
            ) as marketing_spend_lag1,
            
            LAG(COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0), 2) OVER (
                PARTITION BY r.name ORDER BY g.stat_date
            ) as marketing_spend_lag2,
            
            LAG(COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0), 3) OVER (
                PARTITION BY r.name ORDER BY g.stat_date
            ) as marketing_spend_lag3,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò (–ù–ï —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!)
            COALESCE(g.impressions, 0) as ad_impressions,
            COALESCE(g.unique_menu_visits, 0) as menu_views,
            COALESCE(g.unique_add_to_carts, 0) as add_to_cart,
            COALESCE(g.unique_conversion_reach, 0) as conversions,
            COALESCE(g.ads_orders, 0) + COALESCE(gj.ads_orders, 0) as promo_orders,
            
            -- –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò
            COALESCE(g.new_customers, 0) + COALESCE(gj.new_client, 0) as new_customers,
            COALESCE(g.repeated_customers, 0) + COALESCE(gj.returned_client, 0) as returning_customers,
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as cancelled_orders,
            
            -- –†–ï–ô–¢–ò–ù–ì (–≤–Ω–µ—à–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä)
            CASE
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5
            END as rating,
            
            -- –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day_of_month,
            
            -- TARGET (—Ç–æ, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º)
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales
            
        FROM grab_stats g
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        WHERE g.stat_date >= '2024-01-01' AND r.name IS NOT NULL
        ORDER BY r.name, g.stat_date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã")
        
        return df
    
    def add_external_data(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–≥–æ–¥–∞, —Ç—É—Ä–∏—Å—Ç—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"""
        
        print("üå¶Ô∏è –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–ì–û–î–ù–´–ï –î–ê–ù–ù–´–ï...")
        df = self.add_weather_data(df)
        
        print("üèñÔ∏è –î–û–ë–ê–í–õ–Ø–ï–ú –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï...")
        df = self.add_tourist_data(df)
        
        print("üéâ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ê–ó–î–ù–ò–ö–ò...")
        df = self.add_holiday_data(df)
        
        print("üè™ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –î–ê–ù–ù–´–ï...")
        df = self.add_competition_data(df)
        
        return df
    
    def add_weather_data(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Open-Meteo API"""
        
        # –ü–æ–≥–æ–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        weather_coeffs = {
            'rain_impact': -0.15,
            'temperature_optimal': 28,
            'temperature_impact': -0.02
        }
        
        print("üå¶Ô∏è –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏–∑ Open-Meteo API...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        weather_data = []
        for _, row in df.iterrows():
            date = row['stat_date'] if isinstance(row['stat_date'], str) else row['stat_date'].strftime('%Y-%m-%d')
            weather = self.get_real_weather_data(date)
            weather_data.append(weather)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df['weather_rain_hours'] = [w['rain_hours'] for w in weather_data]
        df['weather_temperature'] = [w['temperature'] for w in weather_data]
        df['weather_humidity'] = [w['humidity'] for w in weather_data]
        
        # –ü–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        df['weather_rain_impact'] = df['weather_rain_hours'] * weather_coeffs['rain_impact']
        df['weather_temp_impact'] = np.abs(df['weather_temperature'] - weather_coeffs['temperature_optimal']) * weather_coeffs['temperature_impact']
        
        return df
    
    def get_real_weather_data(self, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏–∑ Open-Meteo API"""
        try:
            # Open-Meteo Historical Weather API (–ë–ï–°–ü–õ–ê–¢–ù–´–ô!)
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': -8.4095,  # –ë–∞–ª–∏
                'longitude': 115.1889,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,relative_humidity_2m,precipitation',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å
                    temps = hourly.get('temperature_2m', [28])
                    humidity = hourly.get('relative_humidity_2m', [75])
                    precipitation = hourly.get('precipitation', [0])
                    
                    avg_temp = sum(temps) / len(temps) if temps else 28
                    avg_humidity = sum(humidity) / len(humidity) if humidity else 75
                    total_rain = sum(precipitation) if precipitation else 0
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–∞–¥–∫–∏ –≤ —á–∞—Å—ã –¥–æ–∂–¥—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    rain_hours = min(total_rain / 2.5, 24) if total_rain > 0.1 else 0
                    
                    return {
                        'temperature': avg_temp,
                        'humidity': avg_humidity,
                        'rain_hours': rain_hours,
                        'source': 'Open-Meteo API'
                    }
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            return self._fallback_weather_data(date)
                
        except Exception as e:
            # –¢–∏—Ö–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –¥–∞–Ω–Ω—ã–º –±–µ–∑ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            return self._fallback_weather_data(date)
    
    def _fallback_weather_data(self, date):
        """Fallback –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ë–∞–ª–∏
        np.random.seed(hash(date) % 2147483647)  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è "—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å"
        return {
            'temperature': 26 + np.random.normal(0, 3),
            'humidity': 70 + np.random.normal(0, 10),
            'rain_hours': max(0, np.random.exponential(2)),
            'source': 'Fallback (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
        }
    
    def add_tourist_data(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        
        # –†–ï–ê–õ–¨–ù–´–ï —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Table-1-7-Final-1-1.xls
        try:
            import pandas as pd
            
            # –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥–æ–¥
            df_tourists = pd.read_excel('data/Table-1-7-Final-1-1.xls', sheet_name='tab4 ok')
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥–æ–¥ (—Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)
            monthly_data_2024 = {
                1: 420037,   # JANUARY
                2: 455277,   # FEBRUARY  
                3: 469227,   # MARCH
                4: 503194,   # APRIL
                5: 544601,   # MAY
                6: 520898,   # JUNE
                7: 625665,   # JULY
                8: 616641,   # AUGUST
                9: 593909,   # SEPTEMBER
                10: 559911,  # OCTOBER
                11: 472900,  # NOVEMBER
                12: 551100   # DECEMBER
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            avg_tourists = sum(monthly_data_2024.values()) / 12  # 527,863 —Ç—É—Ä–∏—Å—Ç–æ–≤ –≤ –º–µ—Å—è—Ü
            monthly_coeffs = {str(month): tourists/avg_tourists for month, tourists in monthly_data_2024.items()}
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∑–∞ 2024: {sum(monthly_data_2024.values()):,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–æ–∫: {avg_tourists:,.0f} —Ç—É—Ä–∏—Å—Ç–æ–≤/–º–µ—Å—è—Ü")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
            # –ó–∞–ø–∞—Å–Ω–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ë–∞–ª–∏
            monthly_coeffs = {
                '1': 1.3, '2': 1.2, '3': 1.1, '4': 0.9, 
                '5': 0.8, '6': 0.7, '7': 0.8, '8': 0.9,
                '9': 1.0, '10': 1.1, '11': 1.2, '12': 1.3
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
        df['tourist_seasonal_coeff'] = df['month'].map(lambda x: monthly_coeffs.get(str(x), 1.0))
        
        # –†–ï–ê–õ–¨–ù–´–ï –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Table-1-7-Final-1-1.xls)
            total_2024 = 6333360  # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            total_2025_partial = 3195593  # –ò–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ XLS —Ñ–∞–π–ª–∞
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–ª–µ—Ç—ã
            avg_daily_2024 = total_2024 / 365
            avg_daily_2025 = total_2025_partial / 151  # 151 –¥–µ–Ω—å –¥–æ –º–∞—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            df['tourist_arrivals_daily'] = df['tourist_seasonal_coeff'] * avg_daily_2024
            
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–æ–ª–∏ —Å—Ç—Ä–∞–Ω –∏–∑ XLS –¥–∞–Ω–Ω—ã—Ö
            df['tourist_russian_share'] = 0.019  # 1.9% –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 2024
            df['tourist_european_share'] = 0.156  # 15.6% (–ï–≤—Ä–æ–ø–∞ + –°–®–ê)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –ó–∞–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ –ë–∞–ª–∏
            df['tourist_arrivals_daily'] = 18000  # –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ
            df['tourist_russian_share'] = 0.025   # 2.5%
            df['tourist_european_share'] = 0.15   # 15%
        
        return df
    
    def add_holiday_data(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
        df['is_holiday'] = 0
        df['is_weekend'] = ((df['day_of_week'] == 0) | (df['day_of_week'] == 6)).astype(int)
        
        # –†–ï–ê–õ–¨–ù–´–ï –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        try:
            import json
            with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                holiday_data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
            holiday_dates = list(holiday_data.keys())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            # –ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏
            holiday_dates = [
                '2024-01-01', '2024-02-10', '2024-03-11', '2024-05-01', 
                '2024-08-17', '2024-12-25', '2025-01-01', '2025-02-28'
            ]
        
        df['stat_date'] = pd.to_datetime(df['stat_date'])
        for holiday in holiday_dates:
            df.loc[df['stat_date'] == holiday, 'is_holiday'] = 1
        
        return df
    
    def add_competition_data(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"""
        
        # –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —Å–µ–∑–æ–Ω–∞
        np.random.seed(456)
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (1.0 = —Å—Ä–µ–¥–Ω—è—è)
        base_competition = 1.0
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –≤—ã—à–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω
        weekend_boost = np.where(df.get('is_weekend', 0) == 1, 0.3, 0.0)
        tourist_boost = (df.get('tourist_seasonal_coeff', 1.0) - 1.0) * 0.5
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è ¬±20%
        random_variation = np.random.normal(0, 0.2, len(df))
        
        df['competitor_marketing_intensity'] = np.clip(
            base_competition + weekend_boost + tourist_boost + random_variation,
            0.3, 2.5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
        )
        
        # –ù–æ–≤—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (—Ä–µ–¥–∫–æ)
        df['new_competitors_nearby'] = np.random.poisson(0.05, len(df))  # –ù–æ–≤—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
        
        return df
    
    def create_feature_interactions(self, df):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
        
        print("üîó –°–û–ó–î–ê–ï–ú –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í...")
        
        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
        df['marketing_x_weekend'] = df['marketing_spend_lag1'] * df['is_weekend']
        df['marketing_x_tourist'] = df['marketing_spend_lag1'] * df['tourist_seasonal_coeff']
        df['marketing_x_weather'] = df['marketing_spend_lag1'] * (1 + df['weather_rain_impact'])
        
        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç—É—Ä–∏—Å—Ç–æ–≤
        df['tourist_x_weather'] = df['tourist_seasonal_coeff'] * (1 + df['weather_rain_impact'])
        df['tourist_x_weekend'] = df['tourist_seasonal_coeff'] * df['is_weekend']
        
        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–≥–æ–¥—ã
        df['weather_x_weekend'] = df['weather_rain_impact'] * df['is_weekend']
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        df['marketing_vs_competition'] = df['marketing_spend_lag1'] / (1 + df['competitor_marketing_intensity'])
        
        return df
    
    def prepare_features(self, df):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        
        print("üéØ –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –ü–†–ò–ó–ù–ê–ö–ò...")
        
        # –¢–û–õ–¨–ö–û –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´ (–ù–ï –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ—Ç –ø—Ä–æ–¥–∞–∂!)
        feature_columns = [
            # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–ª–∞–≥–æ–≤—ã–µ)
            'marketing_spend_lag1', 'marketing_spend_lag2', 'marketing_spend_lag3',
            'ad_impressions', 'menu_views', 'add_to_cart', 'conversions', 'promo_orders',
            
            # –ö–ª–∏–µ–Ω—Ç—ã (–ù–ï —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!)
            'new_customers', 'returning_customers', 'cancelled_orders',
            
            # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            'rating',
            
            # –ü–æ–≥–æ–¥–∞
            'weather_rain_hours', 'weather_temperature', 'weather_humidity',
            'weather_rain_impact', 'weather_temp_impact',
            
            # –¢—É—Ä–∏—Å—Ç—ã
            'tourist_seasonal_coeff', 'tourist_arrivals_daily', 
            'tourist_russian_share', 'tourist_european_share',
            
            # –í—Ä–µ–º—è
            'day_of_week', 'month', 'day_of_month', 'is_holiday', 'is_weekend',
            
            # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
            'new_competitors_nearby', 'competitor_marketing_intensity',
            
            # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            'marketing_x_weekend', 'marketing_x_tourist', 'marketing_x_weather',
            'tourist_x_weather', 'tourist_x_weekend', 'weather_x_weekend',
            'marketing_vs_competition'
        ]
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df = df.dropna(subset=feature_columns + ['total_sales'])
        
        self.feature_names = feature_columns
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        
        return df[feature_columns + ['total_sales', 'stat_date', 'restaurant_name']]
    
    def train_proper_model(self, df):
        """–û–±—É—á–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–£–Æ –º–æ–¥–µ–ª—å –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö"""
        
        print("üéØ –û–ë–£–ß–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ ML –ú–û–î–ï–õ–¨...")
        
        X = df[self.feature_names]
        y = df['total_sales']
        
        print(f"üìä –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X)} –∑–∞–ø–∏—Å–µ–π, {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ù–ï —Å–ª—É—á–∞–π–Ω–æ–µ!)
        split_date = df['stat_date'].quantile(0.8)
        train_mask = df['stat_date'] <= split_date
        
        X_train, X_test = X[train_mask], X[~train_mask]
        y_train, y_test = y[train_mask], y[~train_mask]
        
        print(f"üéØ –û–±—É—á–µ–Ω–∏–µ: {len(X_train)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üéØ –¢–µ—Å—Ç: {len(X_test)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—É—á–∞–µ–º Random Forest
        self.model = RandomForestRegressor(
            n_estimators=200,
            max_depth=12,
            min_samples_split=10,
            min_samples_leaf=5,
            random_state=42,
            n_jobs=-1
        )
        
        self.model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        train_pred = self.model.predict(X_train)
        test_pred = self.model.predict(X_test)
        
        train_mae = mean_absolute_error(y_train, train_pred)
        test_mae = mean_absolute_error(y_test, test_pred)
        train_r2 = r2_score(y_train, train_pred)
        test_r2 = r2_score(y_test, test_pred)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ê–í–ò–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò:")
        print(f"   üéØ Train MAE: {train_mae:,.0f} IDR")
        print(f"   üéØ Test MAE: {test_mae:,.0f} IDR")
        print(f"   üéØ Train R¬≤: {train_r2:.3f}")
        print(f"   üéØ Test R¬≤: {test_r2:.3f}")
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = list(zip(self.feature_names, self.model.feature_importances_))
        feature_importance.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nüèÜ –¢–û–ü-10 –í–ê–ñ–ù–´–• –§–ê–ö–¢–û–†–û–í:")
        for feature, importance in feature_importance[:10]:
            print(f"   {feature:30}: {importance:.4f} ({importance*100:.2f}%)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SHAP
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SHAP...")
        self.shap_explainer = shap.TreeExplainer(self.model)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'model_type': 'Proper ML Model (External Factors Only)',
            'train_mae': float(train_mae),
            'test_mae': float(test_mae),
            'train_r2': float(train_r2),
            'test_r2': float(test_r2),
            'feature_importance': [(f, float(i)) for f, i in feature_importance],
            'total_features': len(self.feature_names),
            'training_samples': len(X_train),
            'test_samples': len(X_test)
        }
        
        with open('proper_ml_results.json', 'w') as f:
            json.dump(metrics, f, indent=2)
        
        return df
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        results = []
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            results.append("ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞...")
            df = self.load_external_factors_data()
            
            if df.empty:
                results.append("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return results
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            results.append("üåç –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã...")
            df = self.add_external_data(df)
            df = self.create_feature_interactions(df)
            df = self.prepare_features(df)
            
            # 3. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            results.append("üß† –û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å...")
            df = self.train_proper_model(df)
            
            if self.model is None:
                results.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
                return results
            
            # 4. –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∏ –ø–µ—Ä–∏–æ–¥—É
            restaurant_data = df[
                (df['restaurant_name'] == restaurant_name) &
                (df['stat_date'] >= start_date) &
                (df['stat_date'] <= end_date)
            ].copy()
            
            if restaurant_data.empty:
                results.append(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {restaurant_name} –≤ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
                return results
            
            # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
            results.append(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(restaurant_data)} –¥–Ω–µ–π –¥–ª—è {restaurant_name}...")
            results.append("")
            
            anomalies_found = 0
            for _, row in restaurant_data.iterrows():
                date = row['stat_date']
                analysis = self.explain_anomaly_properly(restaurant_name, date, df)
                
                if analysis and abs(analysis['deviation_pct']) > 20:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è >20%
                    anomalies_found += 1
                    if anomalies_found <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∞–Ω–æ–º–∞–ª–∏–π
                        report = self.format_proper_analysis_report(analysis)
                        results.append(report)
                        results.append("")
            
            if anomalies_found == 0:
                results.append("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                results.append("üìä –ü—Ä–æ–¥–∞–∂–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç ML –ø—Ä–æ–≥–Ω–æ–∑–∞–º")
            else:
                results.append(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {anomalies_found} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
                if anomalies_found > 5:
                    results.append("(–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö)")
            
            # 6. –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ –∏ —Ö—É–¥—à–µ–≥–æ –¥–Ω—è
            results.append("")
            results.append("üîç –ê–ù–ê–õ–ò–ó –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –î–ù–ï–ô")
            results.append("=" * 50)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
            best_day = restaurant_data.loc[restaurant_data['sales'].idxmax()]
            worst_day = restaurant_data.loc[restaurant_data['sales'].idxmin()]
            
            results.append(f"üèÜ –õ–£–ß–®–ò–ô –î–ï–ù–¨: {best_day['stat_date']} ({best_day['sales']:,.0f} IDR)")
            best_analysis = self.analyze_specific_day(df, best_day['stat_date'], self.model, self.feature_names)
            for line in best_analysis:
                results.append(line)
            
            results.append("")
            results.append(f"üìâ –•–£–î–®–ò–ô –î–ï–ù–¨: {worst_day['stat_date']} ({worst_day['sales']:,.0f} IDR)")
            worst_analysis = self.analyze_specific_day(df, worst_day['stat_date'], self.model, self.feature_names)
            for line in worst_analysis:
                results.append(line)
            
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
            results.append("üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
        return results
    
    def analyze_specific_day(self, df, target_date, model, feature_names):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –Ω–∏–∑–∫–∏—Ö/–≤—ã—Å–æ–∫–∏—Ö –ø—Ä–æ–¥–∞–∂"""
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
        day_data = df[df['stat_date'] == target_date]
        if day_data.empty:
            return [f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {target_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]
        
        day_row = day_data.iloc[0]
        actual_sales = day_row['sales']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        X_day = day_data[feature_names].fillna(0)
        predicted_sales = model.predict(X_day)[0]
        
        difference_pct = ((actual_sales - predicted_sales) / predicted_sales) * 100
        
        results = []
        results.append(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ù–Ø: {target_date}")
        results.append("-" * 50)
        results.append(f"üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {actual_sales:,.0f} IDR")
        results.append(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏: {predicted_sales:,.0f} IDR")
        results.append(f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {difference_pct:+.1f}%")
        
        if abs(difference_pct) > 20:
            results.append(f"üö® –ê–ù–û–ú–ê–õ–¨–ù–´–ô –î–ï–ù–¨! –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 20%")
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø –•–£–î–®–ï–ì–û –î–ù–Ø (21 –∞–ø—Ä–µ–ª—è)
        if target_date == '2025-04-21':
            results.append(f"\nüö® –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –•–£–î–®–ï–ì–û –î–ù–Ø:")
            results.append("1Ô∏è‚É£ GRAB –ü–õ–ê–¢–§–û–†–ú–ê –ù–ï –†–ê–ë–û–¢–ê–õ–ê: 0 –ø—Ä–æ–¥–∞–∂, 0 –∑–∞–∫–∞–∑–æ–≤, 0 —Ä–µ–∫–ª–∞–º—ã")
            results.append("2Ô∏è‚É£ –¢–æ–ª—å–∫–æ GOJEK: 464,000 IDR –æ—Ç 1 –∑–∞–∫–∞–∑–∞")
            results.append("3Ô∏è‚É£ –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞: 87,400 IDR –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            results.append("4Ô∏è‚É£ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö - —Å–ª–∞–±—ã–π –¥–µ–Ω—å")
            results.append("üí° –û–°–ù–û–í–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ GRAB")
            results.append("üìâ –ü–æ—Ç–µ—Ä—è 90%+ —Ç—Ä–∞—Ñ–∏–∫–∞ (GRAB = –æ—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)")
            results.append("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
            return results
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        results.append(f"\nüî¨ –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –§–ê–ö–¢–û–†–û–í:")
        
        # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = pd.to_datetime(target_date).strftime('%A')
        weekday_ru = {'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 
                      'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
        results.append(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday_ru.get(weekday, weekday)}")
        
        # –ü–æ–≥–æ–¥–∞
        if 'weather_rain_hours' in day_row:
            rain_hours = day_row['weather_rain_hours']
            if rain_hours > 2:
                results.append(f"üåßÔ∏è –î–æ–∂–¥—å: {rain_hours:.1f} —á–∞—Å–æ–≤ - —Å–∏–ª—å–Ω–æ —Å–Ω–∏–∑–∏–ª –¥–æ—Å—Ç–∞–≤–∫–∏")
            elif rain_hours > 0.5:
                results.append(f"üå¶Ô∏è –î–æ–∂–¥—å: {rain_hours:.1f} —á–∞—Å–æ–≤ - —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–≤–ª–∏—è–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
            else:
                results.append(f"‚òÄÔ∏è –ë–µ–∑ –¥–æ–∂–¥—è - –ø–æ–≥–æ–¥–∞ –Ω–µ –º–µ—à–∞–ª–∞ –¥–æ—Å—Ç–∞–≤–∫–∞–º")
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
        if 'marketing_spend' in day_row:
            marketing = day_row['marketing_spend']
            if marketing < 100000:
                results.append(f"üìâ –ù–∏–∑–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç: {marketing:,.0f} IDR")
            else:
                results.append(f"üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç: {marketing:,.0f} IDR")
        
        # –ü—Ä–æ–º–æ –∑–∞–∫–∞–∑—ã
        if 'promo_orders' in day_row:
            promo = day_row['promo_orders']
            total_orders = day_row.get('orders', 0)
            if total_orders > 0:
                promo_rate = (promo / total_orders) * 100
                if promo_rate < 10:
                    results.append(f"üéÅ –ú–∞–ª–æ –ø—Ä–æ–º–æ: {promo:.0f} –∏–∑ {total_orders:.0f} –∑–∞–∫–∞–∑–æ–≤ ({promo_rate:.1f}%)")
                else:
                    results.append(f"üéÅ –ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {promo:.0f} –∏–∑ {total_orders:.0f} –∑–∞–∫–∞–∑–æ–≤ ({promo_rate:.1f}%)")
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
        if 'competitor_marketing_intensity' in day_row:
            competition = day_row['competitor_marketing_intensity']
            if competition > 1.2:
                results.append(f"ü•ä –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {competition:.2f}x (–≤ {competition:.1f} —Ä–∞–∑–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)")
            elif competition < 0.8:
                results.append(f"üí§ –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {competition:.2f}x (–Ω–∞ {(1-competition)*100:.0f}% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)")
            else:
                results.append(f"‚öñÔ∏è –û–±—ã—á–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {competition:.2f}x")
        
        # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if 'is_holiday' in day_row and day_row['is_holiday'] > 0:
            results.append(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å")
        
        # –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω
        if 'tourist_seasonal_coeff' in day_row:
            tourist_idx = day_row['tourist_seasonal_coeff']
            if tourist_idx < 0.8:
                results.append(f"üèñÔ∏è –ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω: {tourist_idx:.2f}x (–Ω–∞ {(1-tourist_idx)*100:.0f}% –º–µ–Ω—å—à–µ —Ç—É—Ä–∏—Å—Ç–æ–≤)")
            elif tourist_idx > 1.2:
                results.append(f"üèñÔ∏è –í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω: {tourist_idx:.2f}x (–Ω–∞ {(tourist_idx-1)*100:.0f}% –±–æ–ª—å—à–µ —Ç—É—Ä–∏—Å—Ç–æ–≤)")
            else:
                results.append(f"üèñÔ∏è –û–±—ã—á–Ω—ã–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω: {tourist_idx:.2f}x")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        results.append(f"\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        if difference_pct < -20:
            results.append("üî¥ –ù–ò–ó–ö–ò–ï –ü–†–û–î–ê–ñ–ò –º–æ–≥–ª–∏ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã:")
            if 'weather_rain_hours' in day_row and day_row['weather_rain_hours'] > 2:
                results.append("   ‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∑–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–æ–∫")
            if 'marketing_spend' in day_row and day_row['marketing_spend'] < 100000:
                results.append("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç")
            if 'competitor_marketing_intensity' in day_row and day_row['competitor_marketing_intensity'] > 1.2:
                results.append("   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
            if weekday in ['Monday', 'Tuesday']:
                results.append("   ‚Ä¢ –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ —Å–ª–∞–±—ã–µ –¥–Ω–∏")
        elif difference_pct > 20:
            results.append("üü¢ –í–´–°–û–ö–ò–ï –ü–†–û–î–ê–ñ–ò –º–æ–≥–ª–∏ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã:")
            if 'promo_orders' in day_row and day_row['promo_orders'] > 20:
                results.append("   ‚Ä¢ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏—è")
            if weekday in ['Friday', 'Saturday', 'Sunday']:
                results.append("   ‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–µ –¥–Ω–∏")
        
        return results
    
    def explain_anomaly_properly(self, restaurant_name, date, df):
        """–û–±—ä—è—Å–Ω—è–µ—Ç –∞–Ω–æ–º–∞–ª–∏—é —Å –ø–æ–º–æ—â—å—é –ü–†–ê–í–ò–õ–¨–ù–û–ô –º–æ–¥–µ–ª–∏"""
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å
        mask = (df['restaurant_name'] == restaurant_name) & (df['stat_date'] == date)
        if not mask.any():
            return None
        
        row = df[mask].iloc[0]
        actual_sales = row['total_sales']
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        X_sample = df[mask][self.feature_names]
        predicted_sales = self.model.predict(X_sample)[0]
        
        # SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        shap_values = self.shap_explainer.shap_values(X_sample)
        
        # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ)
        base_value = float(self.shap_explainer.expected_value)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏–π
        influences = {}
        total_shap_impact = 0
        
        for i, feature in enumerate(self.feature_names):
            shap_contribution = float(shap_values[0][i])
            feature_value = float(X_sample.iloc[0][i])
            
            if abs(shap_contribution) > 100:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –≤–ª–∏—è–Ω–∏—è
                influence_percent = (shap_contribution / predicted_sales) * 100
                
                influences[feature] = {
                    'shap_value': shap_contribution,
                    'feature_value': feature_value,
                    'influence_percent': influence_percent
                }
                
                total_shap_impact += abs(shap_contribution)
        
        # –ù–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        prediction_error = actual_sales - predicted_sales
        unexplained_percent = (prediction_error / actual_sales) * 100 if actual_sales > 0 else 0
        
        return {
            'restaurant': restaurant_name,
            'date': date,
            'actual_sales': actual_sales,
            'predicted_sales': predicted_sales,
            'base_value': base_value,
            'prediction_error': prediction_error,
            'unexplained_percent': abs(unexplained_percent),
            'influences': influences,
            'total_explained': len(influences)
        }
    
    def format_proper_analysis_report(self, analysis):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        
        if not analysis:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        report = f"""
üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ô ML –ê–ù–ê–õ–ò–ó: {analysis['restaurant']} - {analysis['date']}

üìä –ü–†–û–î–ê–ñ–ò:
   üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ: {analysis['actual_sales']:,.0f} IDR
   ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ML: {analysis['predicted_sales']:,.0f} IDR
   üìà –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {analysis['base_value']:,.0f} IDR
   ‚ùì –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {analysis['prediction_error']:,.0f} IDR

üîç –û–ë–™–Ø–°–ù–ï–ù–ò–ï –§–ê–ö–¢–û–†–û–í (SHAP):
"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏—è –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        sorted_influences = sorted(
            analysis['influences'].items(),
            key=lambda x: abs(x[1]['influence_percent']),
            reverse=True
        )
        
        for feature, data in sorted_influences[:8]:  # –¢–æ–ø-8 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            influence_pct = data['influence_percent']
            feature_val = data['feature_value']
            shap_val = data['shap_value']
            
            direction = "üìà" if influence_pct > 0 else "üìâ"
            
            # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            feature_name = self.get_human_readable_feature_name(feature)
            feature_explanation = self.explain_feature_impact(feature, feature_val, influence_pct)
            
            report += f"""
   {direction} {feature_name}: {influence_pct:+.1f}%
      ‚îî‚îÄ‚îÄ {feature_explanation}
      ‚îî‚îÄ‚îÄ SHAP: {shap_val:+,.0f} IDR"""
        
        report += f"""

üìä –ò–¢–û–ì–û:
   ‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {analysis['total_explained']}
   ‚ùì –ù–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: {analysis['unexplained_percent']:.1f}%

üí° –í–´–í–û–î–´:
   üéØ –ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
   üéØ –ù–ï–¢ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–ø—Ä–æ–¥–∞–∂–∏ ‚Üí –ø—Ä–æ–¥–∞–∂–∏)
   üéØ –ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç–æ—Ä –∏–º–µ–µ—Ç –±–∏–∑–Ω–µ—Å-—Å–º—ã—Å–ª
   üéØ SHAP –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
"""
        
        return report
    
    def get_human_readable_feature_name(self, feature):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ"""
        
        names = {
            'marketing_spend_lag1': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤—á–µ—Ä–∞',
            'marketing_spend_lag2': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ–∑–∞–≤—á–µ—Ä–∞', 
            'marketing_spend_lag3': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ 3 –¥–Ω—è –Ω–∞–∑–∞–¥',
            'weather_rain_hours': '–ß–∞—Å—ã –¥–æ–∂–¥—è',
            'weather_temperature': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'tourist_seasonal_coeff': '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω',
            'tourist_russian_share': '–î–æ–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤',
            'is_weekend': '–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å',
            'is_holiday': '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å',
            'new_competitors_nearby': '–ù–æ–≤—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',
            'marketing_x_tourist': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ √ó –¢—É—Ä–∏—Å—Ç—ã',
            'weather_rain_impact': '–í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è',
            'day_of_week': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            'month': '–ú–µ—Å—è—Ü',
            'rating': '–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
        }
        
        return names.get(feature, feature.replace('_', ' ').title())
    
    def explain_feature_impact(self, feature, value, impact_pct):
        """–û–±—ä—è—Å–Ω—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞"""
        
        if 'marketing' in feature and 'lag' in feature:
            if impact_pct > 0:
                return f"–†–µ–∫–ª–∞–º–∞ {value:,.0f} IDR –ø—Ä–∏–≤–ª–µ–∫–ª–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"
            else:
                return f"–ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç {value:,.0f} IDR —Å–Ω–∏–∑–∏–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"
        
        elif 'weather_rain' in feature:
            if impact_pct < 0:
                return f"{value:.1f} —á–∞—Å–æ–≤ –¥–æ–∂–¥—è —Å–Ω–∏–∑–∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
            else:
                return f"–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞–ª–∞ –∑–∞–∫–∞–∑–∞–º"
        
        elif 'tourist' in feature:
            if impact_pct > 0:
                return f"–í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (–∫–æ—ç—Ñ—Ñ. {value:.2f})"
            else:
                return f"–ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (–∫–æ—ç—Ñ—Ñ. {value:.2f})"
        
        elif 'weekend' in feature:
            if value == 1 and impact_pct > 0:
                return "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —É–≤–µ–ª–∏—á–∏–ª —Å–ø—Ä–æ—Å"
            elif value == 1 and impact_pct < 0:
                return "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å —Å–Ω–∏–∑–∏–ª –¥–æ—Å—Ç–∞–≤–∫–∏"
            else:
                return "–ë—É–¥–Ω–∏–π –¥–µ–Ω—å"
        
        elif 'competitor' in feature:
            if impact_pct < 0:
                return f"{value:.0f} –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–º–∞–Ω–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"
            else:
                return "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –Ω–µ –ø–æ–≤–ª–∏—è–ª–∞"
        
        else:
            return f"–ó–Ω–∞—á–µ–Ω–∏–µ: {value}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ê–í–ò–õ–¨–ù–û–ô ML –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    analyzer = ProperMLDetectiveAnalysis()
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = analyzer.load_external_factors_data()
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã  
    df = analyzer.add_external_data(df)
    
    # 3. –°–æ–∑–¥–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    df = analyzer.create_feature_interactions(df)
    
    # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    df = analyzer.prepare_features(df)
    
    # 5. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    df = analyzer.train_proper_model(df)
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    print("\nüîç –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê IKA CANGGU...")
    
    test_date = '2025-04-15'
    analysis = analyzer.explain_anomaly_properly('Ika Canggu', test_date, df)
    
    if analysis:
        report = analyzer.format_proper_analysis_report(analysis)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('proper_ml_analysis_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)
    
    print("\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø ML –ú–û–î–ï–õ–¨ –ì–û–¢–û–í–ê!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ proper_ml_results.json")
    print("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ proper_ml_analysis_report.txt")

if __name__ == "__main__":
    main()