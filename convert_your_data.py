#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã
"""

import pandas as pd
import sqlite3
from datetime import datetime
import os

def convert_csv_to_database(csv_file_path, db_path='./data/sales_data.db'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    # –ß–∏—Ç–∞–µ–º CSV
    try:
        df = pd.read_csv(csv_file_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω CSV —Ñ–∞–π–ª: {len(df)} —Å—Ç—Ä–æ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_columns = ['date', 'restaurant_name', 'region', 'sales', 'orders']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS restaurants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            region TEXT,
            cuisine_type TEXT,
            rating REAL,
            avg_delivery_time INTEGER,
            commission_rate REAL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS grab_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            restaurant_id INTEGER,
            date DATE,
            sales REAL,
            orders INTEGER,
            avg_order_value REAL,
            ads_spend REAL,
            ads_enabled BOOLEAN,
            rating REAL,
            delivery_time INTEGER,
            FOREIGN KEY (restaurant_id) REFERENCES restaurants(id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS gojek_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            restaurant_id INTEGER,
            date DATE,
            sales REAL,
            orders INTEGER,
            avg_order_value REAL,
            ads_spend REAL,
            ads_enabled BOOLEAN,
            rating REAL,
            delivery_time INTEGER,
            FOREIGN KEY (restaurant_id) REFERENCES restaurants(id)
        )
    ''')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    restaurants = df[['restaurant_name', 'region']].drop_duplicates()
    
    for _, row in restaurants.iterrows():
        cursor.execute('''
            INSERT OR IGNORE INTO restaurants (name, region, rating, avg_delivery_time, commission_rate)
            VALUES (?, ?, ?, ?, ?)
        ''', (row['restaurant_name'], row['region'], 4.0, 30, 0.25))
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    restaurant_ids = {}
    cursor.execute('SELECT id, name FROM restaurants')
    for rest_id, name in cursor.fetchall():
        restaurant_ids[name] = rest_id
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º grab_stats –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
    for _, row in df.iterrows():
        restaurant_id = restaurant_ids[row['restaurant_name']]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        avg_order_value = row.get('avg_order_value', row['sales'] / row['orders'] if row['orders'] > 0 else 0)
        ads_enabled = row.get('ads_enabled', True)
        ads_spend = row.get('ads_spend', 0)
        rating = row.get('rating', 4.0)
        delivery_time = row.get('delivery_time', 30)
        
        cursor.execute('''
            INSERT INTO grab_stats 
            (restaurant_id, date, sales, orders, avg_order_value, ads_spend, ads_enabled, rating, delivery_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (restaurant_id, row['date'], row['sales'], row['orders'], 
              avg_order_value, ads_spend, ads_enabled, rating, delivery_time))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_path}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants)}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂: {len(df)}")
    
    return True

def validate_data_format(csv_file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        df = pd.read_csv(csv_file_path)
        print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {csv_file_path}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required = ['date', 'restaurant_name', 'region', 'sales', 'orders']
        optional = ['ads_enabled', 'rating', 'avg_order_value', 'delivery_time', 'ads_spend']
        
        print("\n‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for col in required:
            status = "‚úÖ" if col in df.columns else "‚ùå"
            print(f"  {status} {col}")
        
        print("\nüîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for col in optional:
            status = "‚úÖ" if col in df.columns else "‚ûñ"
            print(f"  {status} {col}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        if 'region' in df.columns:
            regions = df['region'].unique()
            print(f"\nüó∫Ô∏è  –†–µ–≥–∏–æ–Ω—ã: {list(regions)}")
            
            valid_regions = ['Seminyak', 'Ubud', 'Canggu', 'Denpasar', 'Sanur']
            invalid_regions = [r for r in regions if r not in valid_regions]
            if invalid_regions:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {invalid_regions}")
                print(f"‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {valid_regions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        if 'date' in df.columns:
            date_range = f"{df['date'].min()} - {df['date'].max()}"
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_range}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–∂–∏
        if 'sales' in df.columns:
            avg_sales = df['sales'].mean()
            print(f"üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞
    if os.path.exists('data_template.csv'):
        print("üìã –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: data_template.csv")
        validate_data_format('data_template.csv')
        print("\n" + "=" * 50)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    csv_file = input("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É CSV —Ñ–∞–π–ª—É: ").strip()
    
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    if not validate_data_format(csv_file):
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    if convert_csv_to_database(csv_file):
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("   python main.py train")
        print("   python main.py analyze --restaurant_id 1 --date 2024-01-15")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()