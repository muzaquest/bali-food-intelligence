#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–õ–û–ë–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê DELIVERY-–ë–ò–ó–ù–ï–°
=================================================

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è delivery-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º:
- –í–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä–∞–±–æ—Ç—É –∫—É—Ä—å–µ—Ä–æ–≤ (–±–∞–π–∫–µ—Ä—ã)
- –ü—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –¥–æ–∂–¥—å
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Grab/Gojek –ø–ª–∞—Ç—Ñ–æ—Ä–º
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π (busy_days, cancelled_orders)

–ö–ª—é—á–µ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –î–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤
2. –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å = –±–æ–ª—å—à–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
3. –†–∞–∑–Ω—ã–µ –∑–æ–Ω—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É —Å—Ç—Ä–∞–¥–∞—é—Ç –æ—Ç –ø–æ–≥–æ–¥—ã
4. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
"""

import sqlite3
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from collections import defaultdict
import requests
import os
from scipy import stats

class DeliveryWeatherAnalyzer:
    def __init__(self):
        self.db_path = 'database.sqlite'
        self.locations_file = 'data/bali_restaurant_locations.json'
        self.weather_api_url = "https://api.open-meteo.com/v1/forecast"
        
    def load_restaurant_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return {r['name']: r for r in data['restaurants']}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return {}
    
    def get_delivery_data_with_operations(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è delivery-–∞–Ω–∞–ª–∏–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        query = """
        SELECT 
            r.name as restaurant_name,
            COALESCE(g.stat_date, gj.stat_date) as date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            
            -- Grab –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            g.cancelled_orders as grab_cancelled,
            g.store_is_busy as grab_busy,
            g.store_is_closed as grab_closed,
            g.out_of_stock as grab_out_of_stock,
            
            -- Gojek –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
            gj.accepting_time as gojek_accepting_time,
            gj.preparation_time as gojek_prep_time,
            
            -- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            CASE 
                WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                ELSE 0 
            END as avg_order_value
            
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
        WHERE (g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL)
          AND (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) > 0
        ORDER BY r.name, date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ delivery-–¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {df['restaurant_name'].nunique()}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} ‚Üí {df['date'].max()}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
        df['has_operational_issues'] = (
            (df['grab_cancelled'].fillna(0) > 0) |
            (df['grab_busy'].fillna(0) > 0) |
            (df['grab_closed'].fillna(0) > 0) |
            (df['grab_out_of_stock'].fillna(0) > 0)
        )
        
        print(f"   ‚Ä¢ –î–Ω–µ–π —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {df['has_operational_issues'].sum():,}")
        
        return df
    
    def get_weather_for_location(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤"""
        try:
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,weather_code,wind_speed_10m,relative_humidity_2m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(self.weather_api_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    temps = hourly.get('temperature_2m', [28])
                    precipitation = hourly.get('precipitation', [0])
                    weather_codes = hourly.get('weather_code', [0])
                    wind_speeds = hourly.get('wind_speed_10m', [5])
                    humidity = hourly.get('relative_humidity_2m', [75])
                    
                    avg_temp = sum(temps) / len(temps) if temps else 28
                    total_rain = sum(precipitation) if precipitation else 0
                    max_wind = max(wind_speeds) if wind_speeds else 5
                    avg_humidity = sum(humidity) / len(humidity) if humidity else 75
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
                    main_weather_code = max(set(weather_codes), key=weather_codes.count) if weather_codes else 0
                    condition = self._weather_code_to_condition(main_weather_code)
                    
                    # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ (0-10)
                    courier_difficulty = self._calculate_courier_difficulty(
                        condition, total_rain, max_wind, avg_temp, avg_humidity
                    )
                    
                    return {
                        'temperature': avg_temp,
                        'condition': condition,
                        'rain': total_rain,
                        'wind_speed': max_wind,
                        'humidity': avg_humidity,
                        'courier_difficulty': courier_difficulty,
                        'weather_code': main_weather_code
                    }
            
            return None
                
        except Exception as e:
            return None
    
    def _calculate_courier_difficulty(self, condition, rain, wind, temp, humidity):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ (0-10 –±–∞–ª–ª–æ–≤)"""
        difficulty = 0
        
        # –î–æ–∂–¥—å - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
        if rain > 10:  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
            difficulty += 4
        elif rain > 5:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
            difficulty += 3
        elif rain > 1:  # –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å
            difficulty += 2
        elif rain > 0:  # –ú–æ—Ä–æ—Å—å
            difficulty += 1
            
        # –í–µ—Ç–µ—Ä
        if wind > 25:  # –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
            difficulty += 2
        elif wind > 15:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä
            difficulty += 1
            
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        if temp > 35:  # –û—á–µ–Ω—å –∂–∞—Ä–∫–æ
            difficulty += 1
        elif temp < 20:  # –•–æ–ª–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–æ–ø–∏–∫–æ–≤
            difficulty += 1
            
        # –í–ª–∞–∂–Ω–æ—Å—Ç—å + –∂–∞—Ä–∞
        if humidity > 85 and temp > 30:
            difficulty += 1
            
        # –¢–∏–ø –ø–æ–≥–æ–¥—ã
        if condition == 'Thunderstorm':
            difficulty += 2
        elif condition == 'Rain':
            difficulty += 1
            
        return min(difficulty, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –±–∞–ª–ª–æ–≤
    
    def _weather_code_to_condition(self, code):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WMO –∫–æ–¥ –≤ —É—Å–ª–æ–≤–∏–µ"""
        if code == 0:
            return 'Clear'
        elif code in [1, 2, 3]:
            return 'Clouds'
        elif code in [45, 48]:
            return 'Fog'
        elif code in [51, 53, 55, 56, 57]:
            return 'Drizzle'
        elif code in [61, 63, 65, 66, 67]:
            return 'Rain'
        elif code in [71, 73, 75, 77]:
            return 'Snow'
        elif code in [80, 81, 82]:
            return 'Rain'
        elif code in [85, 86]:
            return 'Snow'
        elif code in [95, 96, 99]:
            return 'Thunderstorm'
        else:
            return 'Unknown'
    
    def analyze_delivery_weather_impact(self, sample_size=2000):
        """
        –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ delivery-–±–∏–∑–Ω–µ—Å
        
        –§–æ–∫—É—Å –Ω–∞:
        - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ –≤ —Ä–∞–∑–Ω—É—é –ø–æ–≥–æ–¥—É
        - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã vs –ø–æ–≥–æ–¥–∞
        - –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã vs –¥–æ–∂–¥—å
        """
        print("üö¥‚Äç‚ôÇÔ∏è –ó–ê–ü–£–°–ö DELIVERY-–ê–ù–ê–õ–ò–ó–ê –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´")
        print("=" * 55)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        locations = self.load_restaurant_locations()
        delivery_data = self.get_delivery_data_with_operations()
        
        if not locations:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        restaurants_with_coords = [name for name in delivery_data['restaurant_name'].unique() 
                                 if name in locations]
        
        print(f"üìç Delivery-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(restaurants_with_coords)}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        filtered_data = delivery_data[delivery_data['restaurant_name'].isin(restaurants_with_coords)]
        
        # –ë–µ—Ä–µ–º –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(filtered_data) > sample_size:
            sample_data = filtered_data.sample(n=sample_size, random_state=42)
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–∫—É: {sample_size} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(filtered_data):,}")
        else:
            sample_data = filtered_data
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {len(sample_data):,} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏ delivery-–º–µ—Ç—Ä–∏–∫
        delivery_weather_data = []
        processed = 0
        
        print("üå§Ô∏è –°–±–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è delivery-–∞–Ω–∞–ª–∏–∑–∞...")
        
        for _, row in sample_data.iterrows():
            restaurant_name = row['restaurant_name']
            date = row['date']
            
            if restaurant_name in locations:
                location = locations[restaurant_name]
                weather = self.get_weather_for_location(
                    location['latitude'], 
                    location['longitude'], 
                    date
                )
                
                if weather:
                    delivery_weather_data.append({
                        'restaurant': restaurant_name,
                        'date': date,
                        'zone': location.get('zone', 'Unknown'),
                        'area': location.get('area', 'Unknown'),
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        'sales': row['total_sales'],
                        'orders': row['total_orders'],
                        'avg_order_value': row['avg_order_value'],
                        
                        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        'cancelled_orders': row['grab_cancelled'] or 0,
                        'busy_day': row['grab_busy'] or 0,
                        'closed_day': row['grab_closed'] or 0,
                        'out_of_stock': row['grab_out_of_stock'] or 0,
                        'has_issues': row['has_operational_issues'],
                        
                        # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                        'temperature': weather['temperature'],
                        'condition': weather['condition'],
                        'rain': weather['rain'],
                        'wind_speed': weather['wind_speed'],
                        'courier_difficulty': weather['courier_difficulty']
                    })
            
            processed += 1
            if processed % 200 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(sample_data)}")
        
        if not delivery_weather_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df = pd.DataFrame(delivery_weather_data)
        print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è delivery-–∞–Ω–∞–ª–∏–∑–∞: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        return self._analyze_delivery_patterns(df)
    
    def _analyze_delivery_patterns(self, df):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ delivery"""
        print("\nüö¥‚Äç‚ôÇÔ∏è –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê DELIVERY-–ë–ò–ó–ù–ï–°")
        print("=" * 50)
        
        results = {}
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ vs –ø–æ–≥–æ–¥–∞
        overall_avg_sales = df['sales'].mean()
        overall_avg_orders = df['orders'].mean()
        
        print(f"üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ delivery:")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {overall_avg_sales:,.0f} IDR/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑—ã: {overall_avg_orders:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        print(f"\nüö¥‚Äç‚ôÇÔ∏è –í–ª–∏—è–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤:")
        
        courier_impact = {}
        for difficulty_level in [0, 1, 2, 3, 4, 5]:
            level_data = df[(df['courier_difficulty'] >= difficulty_level) & 
                          (df['courier_difficulty'] < difficulty_level + 1)]
            
            if len(level_data) >= 5:
                avg_sales = level_data['sales'].mean()
                avg_orders = level_data['orders'].mean()
                sales_impact = ((avg_sales - overall_avg_sales) / overall_avg_sales * 100)
                orders_impact = ((avg_orders - overall_avg_orders) / overall_avg_orders * 100)
                
                courier_impact[difficulty_level] = {
                    'sales_impact': sales_impact,
                    'orders_impact': orders_impact,
                    'count': len(level_data)
                }
                
                difficulty_desc = ["–û—Ç–ª–∏—á–Ω—ã–µ", "–•–æ—Ä–æ—à–∏–µ", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", "–°–ª–æ–∂–Ω—ã–µ", "–¢—è–∂–µ–ª—ã–µ", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ"][difficulty_level]
                print(f"   {difficulty_level}‚≠ê {difficulty_desc} —É—Å–ª–æ–≤–∏—è: –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}%, –∑–∞–∫–∞–∑—ã {orders_impact:+.1f}% ({len(level_data)} –¥–Ω–µ–π)")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        print(f"\nüåßÔ∏è –î–æ–∂–¥—å vs –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
        
        rainy_days = df[df['rain'] > 1]  # –î–Ω–∏ —Å –¥–æ–∂–¥–µ–º >1–º–º
        dry_days = df[df['rain'] <= 1]
        
        if len(rainy_days) > 0 and len(dry_days) > 0:
            rain_cancelled = rainy_days['cancelled_orders'].mean()
            dry_cancelled = dry_days['cancelled_orders'].mean()
            
            rain_sales = rainy_days['sales'].mean()
            dry_sales = dry_days['sales'].mean()
            
            cancelled_increase = ((rain_cancelled - dry_cancelled) / dry_cancelled * 100) if dry_cancelled > 0 else 0
            sales_decrease = ((rain_sales - dry_sales) / dry_sales * 100) if dry_sales > 0 else 0
            
            print(f"   ‚Ä¢ –î–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏: {rain_cancelled:.1f} –æ—Ç–º–µ–Ω/–¥–µ–Ω—å, –ø—Ä–æ–¥–∞–∂–∏ {rain_sales:,.0f} IDR")
            print(f"   ‚Ä¢ –°—É—Ö–∏–µ –¥–Ω–∏: {dry_cancelled:.1f} –æ—Ç–º–µ–Ω/–¥–µ–Ω—å, –ø—Ä–æ–¥–∞–∂–∏ {dry_sales:,.0f} IDR")
            print(f"   ‚Ä¢ –î–æ–∂–¥—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—ã –Ω–∞ {cancelled_increase:+.1f}%")
            print(f"   ‚Ä¢ –î–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {abs(sales_decrease):.1f}%")
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–æ–Ω–∞–º (delivery-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
        print(f"\nüåç –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∑–æ–Ω–∞–º (delivery-–∞—Å–ø–µ–∫—Ç):")
        zone_analysis = {}
        
        for zone in df['zone'].unique():
            zone_data = df[df['zone'] == zone]
            if len(zone_data) >= 20:
                zone_avg_sales = zone_data['sales'].mean()
                zone_avg_cancelled = zone_data['cancelled_orders'].mean()
                
                print(f"\n   üìç {zone} –∑–æ–Ω–∞ ({len(zone_data)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π):")
                print(f"      üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {zone_avg_sales:,.0f} IDR")
                print(f"      ‚ùå –°—Ä–µ–¥–Ω–∏–µ –æ—Ç–º–µ–Ω—ã: {zone_avg_cancelled:.1f}/–¥–µ–Ω—å")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è –≤ –∑–æ–Ω–µ
                zone_rainy = zone_data[zone_data['rain'] > 1]
                zone_dry = zone_data[zone_data['rain'] <= 1]
                
                if len(zone_rainy) > 5 and len(zone_dry) > 5:
                    rain_impact_sales = ((zone_rainy['sales'].mean() - zone_dry['sales'].mean()) / 
                                       zone_dry['sales'].mean() * 100)
                    rain_impact_cancelled = ((zone_rainy['cancelled_orders'].mean() - zone_dry['cancelled_orders'].mean()) / 
                                           zone_dry['cancelled_orders'].mean() * 100) if zone_dry['cancelled_orders'].mean() > 0 else 0
                    
                    print(f"      üåßÔ∏è –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: –ø—Ä–æ–¥–∞–∂–∏ {rain_impact_sales:+.1f}%, –æ—Ç–º–µ–Ω—ã {rain_impact_cancelled:+.1f}%")
                    
                    zone_analysis[zone] = {
                        'rain_impact_sales': rain_impact_sales,
                        'rain_impact_cancelled': rain_impact_cancelled,
                        'avg_sales': zone_avg_sales,
                        'avg_cancelled': zone_avg_cancelled
                    }
        
        # 5. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è delivery
        print(f"\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (delivery-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞):")
        
        correlations = {}
        correlations['rain_vs_sales'] = df['rain'].corr(df['sales'])
        correlations['rain_vs_cancelled'] = df['rain'].corr(df['cancelled_orders'])
        correlations['courier_difficulty_vs_sales'] = df['courier_difficulty'].corr(df['sales'])
        correlations['wind_vs_orders'] = df['wind_speed'].corr(df['orders'])
        
        for corr_name, corr_value in correlations.items():
            if abs(corr_value) > 0.1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ
                print(f"   ‚Ä¢ {corr_name}: {corr_value:.3f}")
        
        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è delivery
        print(f"\nüí° –í–´–í–û–î–´ –î–õ–Ø DELIVERY-–ë–ò–ó–ù–ï–°–ê:")
        
        if courier_impact.get(3, {}).get('sales_impact', 0) < -10:
            print("   üö® –ö–†–ò–¢–ò–ß–ù–û: –°–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ —Å–Ω–∏–∂–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ >10%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π sales_decrease
        if len(rainy_days) > 0 and len(dry_days) > 0:
            rain_sales = rainy_days['sales'].mean()
            dry_sales = dry_days['sales'].mean()
            sales_decrease = ((rain_sales - dry_sales) / dry_sales * 100) if dry_sales > 0 else 0
            
            if sales_decrease < -15:
                print("   üåßÔ∏è –í–ê–ñ–ù–û: –î–æ–∂–¥—å –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤")
            
        print("   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("     ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("     ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π")
        print("     ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–Ω—É—Å—ã –∫—É—Ä—å–µ—Ä–∞–º –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É")
        print("     ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö")
        
        results = {
            'courier_difficulty_impact': courier_impact,
            'zone_analysis': zone_analysis,
            'correlations': correlations,
            'total_observations': len(df),
            'restaurants_analyzed': df['restaurant'].nunique(),
            'rainy_days_analyzed': len(rainy_days),
            'avg_cancelled_orders': df['cancelled_orders'].mean()
        }
        
        return results

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è delivery-–∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = DeliveryWeatherAnalyzer()
    
    print("üö¥‚Äç‚ôÇÔ∏è –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê DELIVERY")
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –¥–æ—Å—Ç–∞–≤–∫—É")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±–æ—Ä–∫–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    results = analyzer.analyze_delivery_weather_impact(sample_size=1000)
    
    if results:
        print("\nüéâ DELIVERY-–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['total_observations']} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {results['restaurants_analyzed']}")
        print(f"üåßÔ∏è –î–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: {results['rainy_days_analyzed']}")
        print(f"‚ùå –°—Ä–µ–¥–Ω–∏–µ –æ—Ç–º–µ–Ω—ã: {results['avg_cancelled_orders']:.1f}/–¥–µ–Ω—å")
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º:")
        print("   ‚Ä¢ –¢–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤")
        print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥—ã")
        print("   ‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏–π")
        print("   ‚Ä¢ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã")

if __name__ == "__main__":
    main()