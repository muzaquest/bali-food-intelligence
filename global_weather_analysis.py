#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–õ–û–ë–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ò –ü–†–ê–ó–î–ù–ò–ö–û–í
===========================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
–ø–æ –í–°–ï–ô –±–∞–∑–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏
–∑–Ω–∞—á–∏–º—ã—Ö –≤—ã–≤–æ–¥–æ–≤.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–Ω–∞–ª–∏–∑ 59 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ √ó 668 –¥–Ω–µ–π = 39,412 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
- –¢–æ—á–Ω—ã–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
- –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Open-Meteo API
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
- –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∑–æ–Ω–∞–º (Beach, Central, Mountain, Cliff)
"""

import sqlite3
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from collections import defaultdict
import requests
import os
from scipy import stats

class GlobalWeatherAnalyzer:
    def __init__(self):
        self.db_path = 'database.sqlite'
        self.locations_file = 'data/bali_restaurant_locations.json'
        self.weather_api_url = "https://api.open-meteo.com/v1/forecast"
        
    def load_restaurant_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return {r['name']: r for r in data['restaurants']}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return {}
    
    def get_all_restaurant_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT 
            r.name as restaurant_name,
            COALESCE(g.stat_date, gj.stat_date) as date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
        WHERE (g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL)
          AND (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) > 0
        ORDER BY r.name, date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {df['restaurant_name'].nunique()}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} ‚Üí {df['date'].max()}")
        
        return df
    
    def get_weather_for_location(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–∞—Ç—ã"""
        try:
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,weather_code',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(self.weather_api_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    temps = hourly.get('temperature_2m', [28])
                    precipitation = hourly.get('precipitation', [0])
                    weather_codes = hourly.get('weather_code', [0])
                    
                    avg_temp = sum(temps) / len(temps) if temps else 28
                    total_rain = sum(precipitation) if precipitation else 0
                    main_weather_code = max(set(weather_codes), key=weather_codes.count) if weather_codes else 0
                    
                    condition = self._weather_code_to_condition(main_weather_code)
                    
                    return {
                        'temperature': avg_temp,
                        'condition': condition,
                        'rain': total_rain,
                        'weather_code': main_weather_code
                    }
            
            return None
                
        except Exception as e:
            return None
    
    def _weather_code_to_condition(self, code):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WMO –∫–æ–¥ –≤ —É—Å–ª–æ–≤–∏–µ"""
        if code == 0:
            return 'Clear'
        elif code in [1, 2, 3]:
            return 'Clouds'
        elif code in [45, 48]:
            return 'Fog'
        elif code in [51, 53, 55, 56, 57]:
            return 'Drizzle'
        elif code in [61, 63, 65, 66, 67]:
            return 'Rain'
        elif code in [71, 73, 75, 77]:
            return 'Snow'
        elif code in [80, 81, 82]:
            return 'Rain'
        elif code in [85, 86]:
            return 'Snow'
        elif code in [95, 96, 99]:
            return 'Thunderstorm'
        else:
            return 'Unknown'
    
    def analyze_global_weather_impact(self, sample_size=1000):
        """
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        
        Args:
            sample_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤)
        """
        print("üåç –ó–ê–ü–£–°–ö –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–û–ì–û–î–´")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        locations = self.load_restaurant_locations()
        sales_data = self.get_all_restaurant_data()
        
        if not locations:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        restaurants_with_coords = [name for name in sales_data['restaurant_name'].unique() 
                                 if name in locations]
        
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(restaurants_with_coords)}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        filtered_data = sales_data[sales_data['restaurant_name'].isin(restaurants_with_coords)]
        
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(filtered_data) > sample_size:
            sample_data = filtered_data.sample(n=sample_size, random_state=42)
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–∫—É: {sample_size} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(filtered_data):,}")
        else:
            sample_data = filtered_data
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {len(sample_data):,} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–¥–∞–∂
        weather_sales_data = []
        processed = 0
        
        print("üå§Ô∏è –°–±–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        for _, row in sample_data.iterrows():
            restaurant_name = row['restaurant_name']
            date = row['date']
            sales = row['total_sales']
            
            if restaurant_name in locations:
                location = locations[restaurant_name]
                weather = self.get_weather_for_location(
                    location['latitude'], 
                    location['longitude'], 
                    date
                )
                
                if weather:
                    weather_sales_data.append({
                        'restaurant': restaurant_name,
                        'date': date,
                        'sales': sales,
                        'zone': location.get('zone', 'Unknown'),
                        'area': location.get('area', 'Unknown'),
                        'temperature': weather['temperature'],
                        'condition': weather['condition'],
                        'rain': weather['rain']
                    })
            
            processed += 1
            if processed % 100 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(sample_data)}")
        
        if not weather_sales_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df = pd.DataFrame(weather_sales_data)
        print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        return self._analyze_weather_patterns(df)
    
    def _analyze_weather_patterns(self, df):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê –ü–†–û–î–ê–ñ–ò")
        print("=" * 40)
        
        results = {}
        
        # 1. –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        overall_avg = df['sales'].mean()
        weather_impact = {}
        
        print(f"üí∞ –û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞: {overall_avg:,.0f} IDR")
        print(f"\nüå§Ô∏è –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:")
        
        for condition in df['condition'].unique():
            condition_data = df[df['condition'] == condition]
            if len(condition_data) >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                avg_sales = condition_data['sales'].mean()
                impact = ((avg_sales - overall_avg) / overall_avg * 100)
                count = len(condition_data)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
                _, p_value = stats.ttest_1samp(condition_data['sales'], overall_avg)
                significant = "üìà" if p_value < 0.05 else "‚û°Ô∏è"
                
                weather_impact[condition] = {
                    'avg_sales': avg_sales,
                    'impact_percent': impact,
                    'count': count,
                    'p_value': p_value,
                    'significant': p_value < 0.05
                }
                
                print(f"   {significant} {condition}: {impact:+.1f}% ({count} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)")
                if p_value < 0.05:
                    print(f"      üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ (p={p_value:.3f})")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–æ–Ω–∞–º
        print(f"\nüåç –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∑–æ–Ω–∞–º:")
        zone_analysis = {}
        
        for zone in df['zone'].unique():
            zone_data = df[df['zone'] == zone]
            if len(zone_data) >= 10:
                zone_avg = zone_data['sales'].mean()
                zone_weather = {}
                
                print(f"\n   üìç {zone} –∑–æ–Ω–∞ ({len(zone_data)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π):")
                
                for condition in zone_data['condition'].unique():
                    condition_zone_data = zone_data[zone_data['condition'] == condition]
                    if len(condition_zone_data) >= 3:
                        avg_sales = condition_zone_data['sales'].mean()
                        impact = ((avg_sales - zone_avg) / zone_avg * 100)
                        
                        zone_weather[condition] = impact
                        print(f"      {condition}: {impact:+.1f}%")
                
                zone_analysis[zone] = zone_weather
        
        # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        temp_corr = df['temperature'].corr(df['sales'])
        print(f"\nüå°Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –ø—Ä–æ–¥–∞–∂: {temp_corr:.3f}")
        
        # 4. –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è
        rainy_days = df[df['rain'] > 0]
        dry_days = df[df['rain'] == 0]
        
        if len(rainy_days) > 0 and len(dry_days) > 0:
            rain_avg = rainy_days['sales'].mean()
            dry_avg = dry_days['sales'].mean()
            rain_impact = ((rain_avg - dry_avg) / dry_avg * 100)
            
            print(f"\nüíß –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è:")
            print(f"   ‚Ä¢ –î–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏: {rain_avg:,.0f} IDR ({len(rainy_days)} –¥–Ω–µ–π)")
            print(f"   ‚Ä¢ –°—É—Ö–∏–µ –¥–Ω–∏: {dry_avg:,.0f} IDR ({len(dry_days)} –¥–Ω–µ–π)")
            print(f"   ‚Ä¢ –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {rain_impact:+.1f}%")
        
        results = {
            'weather_impact': weather_impact,
            'zone_analysis': zone_analysis,
            'temperature_correlation': temp_corr,
            'total_observations': len(df),
            'restaurants_analyzed': df['restaurant'].nunique()
        }
        
        return results

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = GlobalWeatherAnalyzer()
    
    print("üéØ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´")
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Å–µ–π –±–∞–∑–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±–æ—Ä–∫–æ–π 500 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    results = analyzer.analyze_global_weather_impact(sample_size=500)
    
    if results:
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['total_observations']} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {results['restaurants_analyzed']}")
        print("\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:")
        print("   ‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        print("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∑–æ–Ω–∞–º (Beach, Central, Mountain)")
        print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö")

if __name__ == "__main__":
    main()