#!/usr/bin/env python3
"""
üîç –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ - —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import json
import warnings
warnings.filterwarnings('ignore')

class ProfessionalDetectiveAnalysis:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        
    def analyze_sales_changes(self, restaurant_name, period1_start, period1_end, 
                            period2_start, period2_end):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫"""
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
        print("=" * 50)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        period1_data = self._get_period_data(restaurant_name, period1_start, period1_end)
        period2_data = self._get_period_data(restaurant_name, period2_start, period2_end)
        
        if period1_data.empty or period2_data.empty:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # 2. –ë–∞–∑–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        period1_sales = period1_data['total_sales'].sum()
        period2_sales = period2_data['total_sales'].sum()
        change_pct = ((period2_sales - period1_sales) / period1_sales) * 100
        
        print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–î–ê–ñ:")
        print(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:  {period1_start} ‚Äî {period1_end} ({len(period1_data)} –¥–Ω–µ–π)")
        print(f"   ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥:     {period2_start} ‚Äî {period2_end} ({len(period2_data)} –¥–Ω–µ–π)")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ —Å–µ–π—á–∞—Å:        {period1_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–≥–¥–∞:         {period2_sales:,.0f} IDR")
        
        if change_pct > 0:
            print(f"   ‚Ä¢ –†–ï–ó–£–õ–¨–¢–ê–¢:             –†–û–°–¢ –Ω–∞ {change_pct:.1f}%")
        else:
            print(f"   ‚Ä¢ –†–ï–ó–£–õ–¨–¢–ê–¢:             –°–ù–ò–ñ–ï–ù–ò–ï –Ω–∞ {abs(change_pct):.1f}%")
            
        avg_daily = period1_sales / len(period1_data) if len(period1_data) > 0 else 0
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:       {avg_daily:,.0f} IDR/–¥–µ–Ω—å")
        print()
        
        # 3. –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
        self._find_problem_days(period1_data, restaurant_name, avg_daily)
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
        self._analyze_main_causes(period1_data, period2_data, restaurant_name)
        
        # 5. –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        client_answer = self._generate_client_answer(change_pct, period1_data, restaurant_name)
        print(f"\nüìû –ì–û–¢–û–í–´–ô –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
        print("=" * 45)
        print(f'"{client_answer}"')
        print("=" * 45)
        
    def _get_period_data(self, restaurant_name, start_date, end_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        conn = sqlite3.connect(self.db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_query = "SELECT id FROM restaurants WHERE name = ?"
        restaurant_result = pd.read_sql_query(restaurant_query, conn, params=[restaurant_name])
        
        if restaurant_result.empty:
            conn.close()
            return pd.DataFrame()
            
        restaurant_id = restaurant_result.iloc[0]['id']
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ GRAB + GOJEK
        query = """
        SELECT 
            g.stat_date as date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            CASE 
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5 
            END as rating,
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as marketing_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as marketing_sales,
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as cancelled_orders,
            COALESCE(g.store_is_closed, 0) as store_closed,
            COALESCE(g.out_of_stock, 0) as out_of_stock,
            COALESCE(g.new_customers, 0) + COALESCE(gj.new_client, 0) as new_customers,
            COALESCE(g.repeated_customers, 0) + COALESCE(gj.active_client, 0) as repeat_customers,
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        WHERE g.restaurant_id = ? 
        AND g.stat_date BETWEEN ? AND ?
        ORDER BY g.stat_date
        """
        
        data = pd.read_sql_query(query, conn, params=[restaurant_id, start_date, end_date])
        conn.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        if not data.empty:
            data['avg_order_value'] = data['total_sales'] / data['total_orders'].replace(0, 1)
            data['is_weekend'] = data['day_of_week'].isin([0, 6]).astype(int)  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=0, –°—É–±–±–æ—Ç–∞=6
            data['roas'] = data['marketing_sales'] / data['marketing_spend'].replace(0, 1)
            
        return data
        
    def _find_problem_days(self, data, restaurant_name, avg_daily):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏"""
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ (< 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
        problem_threshold = avg_daily * 0.5
        problem_days = data[data['total_sales'] < problem_threshold].copy()
        
        if problem_days.empty:
            print("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return
            
        print(f"üö® –î–ù–ò –° –ù–ò–ó–ö–ò–ú–ò –ü–†–û–î–ê–ñ–ê–ú–ò:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(problem_days)} –¥–Ω–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:")
        print()
        
        for i, (_, day) in enumerate(problem_days.iterrows(), 1):
            date = day['date']
            sales = day['total_sales']
            loss = avg_daily - sales
            loss_pct = ((avg_daily - sales) / avg_daily) * 100
            
            print(f"   {i}. üìÖ {date}")
            print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (–ø–æ—Ç–µ—Ä—è {loss:,.0f} IDR)")
            print(f"      üìâ –°–Ω–∏–∂–µ–Ω–∏–µ: {loss_pct:.0f}% –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
            causes = self._analyze_single_day_causes(day, date, restaurant_name)
            if causes:
                print(f"      üéØ –ü—Ä–∏—á–∏–Ω—ã: {causes}")
            print()
            
    def _analyze_single_day_causes(self, day_data, date, restaurant_name):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–ª–æ—Ö–æ–≥–æ –¥–Ω—è - –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫"""
        
        causes = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = day_data['day_of_week']
        weekday_names = {0: '–í—Å', 1: '–ü–Ω', 2: '–í—Ç', 3: '–°—Ä', 4: '–ß—Ç', 5: '–ü—Ç', 6: '–°–±'}
        day_name = weekday_names.get(weekday, '–ù–µ–∏–∑–≤.')
        
        if weekday == 1:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            causes.append(f"–°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({day_name})")
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if day_data['store_closed'] > 0:
            causes.append("–†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç")
        if day_data['out_of_stock'] > 0:
            causes.append("–î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞")
        if day_data['cancelled_orders'] > 5:
            causes.append(f"–ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω ({day_data['cancelled_orders']:.0f})")
            
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
        if day_data['marketing_spend'] == 0:
            causes.append("–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        elif day_data['marketing_spend'] < 50000:
            causes.append("–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
            
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if day_data['rating'] < 4.0:
            causes.append(f"–£–ø–∞–ª —Ä–µ–π—Ç–∏–Ω–≥ ({day_data['rating']:.1f})")
            
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        weather_cause = self._check_weather_impact(date, restaurant_name)
        if weather_cause:
            causes.append(weather_cause)
            
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_cause = self._check_holiday_impact(date)
        if holiday_cause:
            causes.append(holiday_cause)
            
        return ", ".join(causes) if causes else "–ü—Ä–∏—á–∏–Ω—ã –Ω–µ —è—Å–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
    def _check_weather_impact(self, date, restaurant_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Open-Meteo API
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': -8.4095,  # –ë–∞–ª–∏
                'longitude': 115.1889,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    precipitation = hourly.get('precipitation', [])
                    total_rain = sum(precipitation) if precipitation else 0
                    
                    if total_rain > 10:
                        return "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∑–∏–ª –¥–æ—Å—Ç–∞–≤–∫–∏"
                    elif total_rain > 2:
                        return "–î–æ–∂–¥—å –ø–æ–≤–ª–∏—è–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
                        
        except:
            pass
            
        return None
        
    def _check_holiday_impact(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        balinese_holidays = {
            '2025-04-21': '–ë–∞–ª–∏–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å–Ω–∏–∑–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '2025-05-12': 'Purnama (–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ) - —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –¥–µ–Ω—å',
            '2025-04-16': 'Galungan - —Å–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
            '2025-04-26': 'Kuningan - —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏'
        }
        
        return balinese_holidays.get(date)
        
    def _analyze_main_causes(self, period1_data, period2_data, restaurant_name):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        
        print("üéØ –ì–õ–ê–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        p1_avg_marketing = period1_data['marketing_spend'].mean()
        p2_avg_marketing = period2_data['marketing_spend'].mean()
        
        p1_avg_rating = period1_data['rating'].mean()
        p2_avg_rating = period2_data['rating'].mean()
        
        p1_operational_issues = period1_data['store_closed'].sum() + period1_data['out_of_stock'].sum()
        p2_operational_issues = period2_data['store_closed'].sum() + period2_data['out_of_stock'].sum()
        
        major_changes = []
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
        marketing_change = ((p1_avg_marketing - p2_avg_marketing) / p2_avg_marketing * 100) if p2_avg_marketing > 0 else 0
        if abs(marketing_change) > 20:
            direction = "—É–≤–µ–ª–∏—á–∏–ª—Å—è" if marketing_change > 0 else "—Å–Ω–∏–∑–∏–ª—Å—è"
            major_changes.append(f"–†–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç {direction} –Ω–∞ {abs(marketing_change):.0f}%")
            
        # –†–µ–π—Ç–∏–Ω–≥
        rating_change = p1_avg_rating - p2_avg_rating
        if abs(rating_change) > 0.1:
            direction = "–≤—ã—Ä–æ—Å" if rating_change > 0 else "—É–ø–∞–ª"
            major_changes.append(f"–†–µ–π—Ç–∏–Ω–≥ {direction} —Å {p2_avg_rating:.1f} –¥–æ {p1_avg_rating:.1f}")
            
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if p1_operational_issues > p2_operational_issues:
            major_changes.append(f"–ë–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º ({p1_operational_issues} vs {p2_operational_issues})")
            
        if major_changes:
            for change in major_changes:
                print(f"   ‚úÖ {change}")
        else:
            print("   ‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
        print()
        
    def _generate_client_answer(self, change_pct, period_data, restaurant_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É"""
        
        if change_pct > 5:
            trend = f"–≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {change_pct:.1f}%"
        elif change_pct < -5:
            trend = f"—Å–Ω–∏–∑–∏–ª–∏—Å—å –Ω–∞ {abs(change_pct):.1f}%"
        else:
            trend = f"–æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ ({change_pct:+.1f}%)"
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        avg_marketing = period_data['marketing_spend'].mean()
        operational_issues = period_data['store_closed'].sum() + period_data['out_of_stock'].sum()
        avg_rating = period_data['rating'].mean()
        
        if operational_issues > len(period_data) * 0.1:
            main_cause = "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (–∑–∞–∫—Ä—ã—Ç–∏—è, –¥–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞)"
        elif avg_marketing < 50000:
            main_cause = "–Ω–∏–∑–∫–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"
        elif avg_rating < 4.0:
            main_cause = "—Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"
        else:
            main_cause = "—Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π —Ä—ã–Ω–∫–∞"
            
        return f"–ü—Ä–æ–¥–∞–∂–∏ {trend} –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑-–∑–∞ {main_cause}."

def compare_periods(restaurant_name, period1_start, period1_end, period2_start, period2_end):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤"""
    
    analyzer = ProfessionalDetectiveAnalysis()
    analyzer.analyze_sales_changes(
        restaurant_name, 
        period1_start, period1_end, 
        period2_start, period2_end
    )

if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ Only Eggs
    compare_periods(
        "Only Eggs",
        "2025-04-01", "2025-05-31",  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
        "2025-01-30", "2025-03-31"   # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    )