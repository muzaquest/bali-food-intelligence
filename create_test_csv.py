#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

def create_test_restaurants():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    restaurants = [
        {"id": 1, "name": "Warung Bali Asli", "region": "Seminyak", "grab_restaurant_id": "grab_001", "gojek_restaurant_id": "gojek_001"},
        {"id": 2, "name": "Ubud Organic Cafe", "region": "Ubud", "grab_restaurant_id": "grab_002", "gojek_restaurant_id": "gojek_002"},
        {"id": 3, "name": "Canggu Surf Cafe", "region": "Canggu", "grab_restaurant_id": "grab_003", "gojek_restaurant_id": "gojek_003"},
        {"id": 4, "name": "Denpasar Local", "region": "Denpasar", "grab_restaurant_id": "grab_004", "gojek_restaurant_id": "gojek_004"},
        {"id": 5, "name": "Sanur Beach Resto", "region": "Sanur", "grab_restaurant_id": "grab_005", "gojek_restaurant_id": "gojek_005"},
        {"id": 6, "name": "Nusa Dua Fine Dining", "region": "Seminyak", "grab_restaurant_id": "grab_006", "gojek_restaurant_id": "gojek_006"},
        {"id": 7, "name": "Jimbaran Seafood", "region": "Canggu", "grab_restaurant_id": "grab_007", "gojek_restaurant_id": "gojek_007"},
        {"id": 8, "name": "Kuta Night Market", "region": "Denpasar", "grab_restaurant_id": "grab_008", "gojek_restaurant_id": "gojek_008"},
    ]
    
    df = pd.DataFrame(restaurants)
    df['connected_date'] = '2022-01-01'
    df['cuisine_type'] = ['Indonesian', 'Healthy', 'Western', 'Local', 'Seafood', 'Fine Dining', 'Seafood', 'Street Food']
    df['rating'] = np.random.uniform(3.8, 4.8, len(df)).round(1)
    df['avg_delivery_time'] = np.random.randint(20, 45, len(df))
    
    return df

def create_test_grab_stats():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Grab"""
    restaurants = list(range(1, 9))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –≥–æ–¥–∞
    start_date = datetime(2022, 1, 1)
    end_date = datetime(2024, 1, 1)
    
    data = []
    current_date = start_date
    
    while current_date < end_date:
        for restaurant_id in restaurants:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            base_sales = {
                1: 3500000,  # Seminyak - –≤—ã—Å–æ–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
                2: 2800000,  # Ubud - —Å—Ä–µ–¥–Ω–∏–µ
                3: 3200000,  # Canggu - –≤—ã—Å–æ–∫–∏–µ
                4: 2200000,  # Denpasar - –Ω–∏–∑–∫–∏–µ
                5: 2600000,  # Sanur - —Å—Ä–µ–¥–Ω–∏–µ
                6: 4200000,  # Seminyak Fine Dining - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ
                7: 3800000,  # Jimbaran Seafood - –≤—ã—Å–æ–∫–∏–µ
                8: 1800000,  # Kuta Street Food - –Ω–∏–∑–∫–∏–µ
            }[restaurant_id]
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            month = current_date.month
            seasonal_multiplier = 1.0
            if month in [6, 7, 8]:  # –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω
                seasonal_multiplier = 1.3
            elif month in [1, 2, 11, 12]:  # –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω
                seasonal_multiplier = 1.1
            else:  # –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω
                seasonal_multiplier = 0.8
            
            # –î–Ω–µ–≤–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            day_of_week = current_date.weekday()
            day_multiplier = 1.0
            if day_of_week in [4, 5, 6]:  # –ü—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                day_multiplier = 1.2
            elif day_of_week in [0, 1]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫
                day_multiplier = 0.8
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            random_multiplier = np.random.uniform(0.7, 1.4)
            
            # –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            daily_sales = base_sales * seasonal_multiplier * day_multiplier * random_multiplier
            daily_orders = int(daily_sales / np.random.uniform(45000, 65000))  # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ 45-65k
            
            # –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∫–ª–∞–º–µ
            ads_enabled = np.random.choice([True, False], p=[0.7, 0.3])
            ads_spend = np.random.uniform(50000, 200000) if ads_enabled else 0
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–º–µ–Ω—ã
            rating = np.random.uniform(3.5, 4.9)
            cancellation_rate = np.random.uniform(0.02, 0.15)
            
            data.append({
                'restaurant_id': restaurant_id,
                'date': current_date.strftime('%Y-%m-%d'),
                'total_sales': round(daily_sales),
                'total_orders': daily_orders,
                'ads_spend': round(ads_spend),
                'ads_enabled': ads_enabled,
                'avg_rating': round(rating, 1),
                'cancellation_rate': round(cancellation_rate, 3),
                'avg_preparation_time': np.random.randint(15, 35),
                'avg_order_value': round(daily_sales / max(daily_orders, 1)),
                'delivery_time': np.random.randint(20, 45)
            })
        
        current_date += timedelta(days=1)
    
    return pd.DataFrame(data)

def create_test_gojek_stats():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Gojek (–æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ —á–µ–º Grab)"""
    restaurants = list(range(1, 9))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –≥–æ–¥–∞
    start_date = datetime(2022, 1, 1)
    end_date = datetime(2024, 1, 1)
    
    data = []
    current_date = start_date
    
    while current_date < end_date:
        for restaurant_id in restaurants:
            # Gojek –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–µ –æ–±—ä–µ–º—ã —á–µ–º Grab
            base_sales = {
                1: 2100000,  # 60% –æ—Ç Grab
                2: 1680000,
                3: 1920000,
                4: 1320000,
                5: 1560000,
                6: 2520000,
                7: 2280000,
                8: 1080000,
            }[restaurant_id]
            
            # –¢–µ –∂–µ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            month = current_date.month
            seasonal_multiplier = 1.0
            if month in [6, 7, 8]:
                seasonal_multiplier = 1.3
            elif month in [1, 2, 11, 12]:
                seasonal_multiplier = 1.1
            else:
                seasonal_multiplier = 0.8
            
            day_of_week = current_date.weekday()
            day_multiplier = 1.0
            if day_of_week in [4, 5, 6]:
                day_multiplier = 1.2
            elif day_of_week in [0, 1]:
                day_multiplier = 0.8
            
            random_multiplier = np.random.uniform(0.7, 1.4)
            
            daily_sales = base_sales * seasonal_multiplier * day_multiplier * random_multiplier
            daily_orders = int(daily_sales / np.random.uniform(40000, 60000))
            
            ads_enabled = np.random.choice([True, False], p=[0.6, 0.4])  # –ú–µ–Ω—å—à–µ —Ä–µ–∫–ª–∞–º—ã –≤ Gojek
            ads_spend = np.random.uniform(30000, 150000) if ads_enabled else 0
            
            rating = np.random.uniform(3.4, 4.8)
            cancellation_rate = np.random.uniform(0.03, 0.18)  # –ß—É—Ç—å –≤—ã—à–µ –æ—Ç–º–µ–Ω—ã
            
            data.append({
                'restaurant_id': restaurant_id,
                'date': current_date.strftime('%Y-%m-%d'),
                'total_sales': round(daily_sales),
                'total_orders': daily_orders,
                'ads_spend': round(ads_spend),
                'ads_enabled': ads_enabled,
                'avg_rating': round(rating, 1),
                'cancellation_rate': round(cancellation_rate, 3),
                'avg_preparation_time': np.random.randint(18, 40),
                'avg_order_value': round(daily_sales / max(daily_orders, 1)),
                'delivery_time': np.random.randint(25, 50)
            })
        
        current_date += timedelta(days=1)
    
    return pd.DataFrame(data)

def main():
    print("üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• CSV –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤...")
    restaurants_df = create_test_restaurants()
    restaurants_df.to_csv('restaurants.csv', index=False)
    print(f"‚úÖ restaurants.csv —Å–æ–∑–¥–∞–Ω: {len(restaurants_df)} –∑–∞–ø–∏—Å–µ–π")
    
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Grab (—ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)...")
    grab_df = create_test_grab_stats()
    grab_df.to_csv('grab_stats.csv', index=False)
    print(f"‚úÖ grab_stats.csv —Å–æ–∑–¥–∞–Ω: {len(grab_df)} –∑–∞–ø–∏—Å–µ–π")
    
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Gojek...")
    gojek_df = create_test_gojek_stats()
    gojek_df.to_csv('gojek_stats.csv', index=False)
    print(f"‚úÖ gojek_stats.csv —Å–æ–∑–¥–∞–Ω: {len(gojek_df)} –∑–∞–ø–∏—Å–µ–π")
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
    print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants_df)}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: 2022-01-01 - 2024-01-01 (2 –≥–æ–¥–∞)")
    print(f"üìä Grab –∑–∞–ø–∏—Å–µ–π: {len(grab_df):,}")
    print(f"üìä Gojek –∑–∞–ø–∏—Å–µ–π: {len(gojek_df):,}")
    print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (Grab): {grab_df['total_sales'].sum():,.0f} IDR")
    print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (Gojek): {gojek_df['total_sales'].sum():,.0f} IDR")
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 analyze_client_csv.py")
    print("2. –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞: python3 main.py train")
    print("3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python3 main.py analyze --restaurant_id 1 --date 2023-06-15")
    
    print("\nüìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:")
    print("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.")
    print("–ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ CSV –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

if __name__ == "__main__":
    main()