#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• API –ò–ù–¢–ï–ì–†–ê–¶–ò–ô
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Open-Meteo, OpenAI –∏ Calendarific API
"""

import os
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_open_meteo_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Open-Meteo API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)"""
    print("üå§Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPEN-METEO API")
    print("-" * 40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–∞–ª–∏
        params = {
            'latitude': -8.4095,
            'longitude': 115.1889,
            'start_date': '2025-01-01',
            'end_date': '2025-01-01',
            'daily': 'temperature_2m_mean,precipitation_sum,weather_code',
            'timezone': 'Asia/Jakarta'
        }
        
        response = requests.get('https://archive-api.open-meteo.com/v1/archive', 
                              params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            daily = data.get('daily', {})
            
            if daily and len(daily.get('time', [])) > 0:
                temp = daily.get('temperature_2m_mean', [0])[0]
                precip = daily.get('precipitation_sum', [0])[0]
                weather_code = daily.get('weather_code', [0])[0]
                
                print("‚úÖ Open-Meteo API: –†–ê–ë–û–¢–ê–ï–¢")
                print(f"   üìÖ –î–∞—Ç–∞: 2025-01-01")
                print(f"   üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
                print(f"   üåßÔ∏è –û—Å–∞–¥–∫–∏: {precip}mm")
                print(f"   üå§Ô∏è –ö–æ–¥ –ø–æ–≥–æ–¥—ã: {weather_code}")
                print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–ï–°–ü–õ–ê–¢–ù–û!")
                return True
            else:
                print("‚ö†Ô∏è Open-Meteo API: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return False
        else:
            print(f"‚ùå Open-Meteo API: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Open-Meteo API: –û—à–∏–±–∫–∞ - {e}")
        return False

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI API"""
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI API")
    print("-" * 40)
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key or api_key == '–í–°–¢–ê–í–ò–¢–¨_–í–ê–®_–ö–õ–Æ–ß_OPENAI_–°–Æ–î–ê':
        print("‚ùå OpenAI API: –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        import openai
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = openai.OpenAI(api_key=api_key)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç?"}
            ],
            max_tokens=10
        )
        
        answer = response.choices[0].message.content.strip()
        
        print("‚úÖ OpenAI API: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"   üí¨ –û—Ç–≤–µ—Ç: {answer}")
        print(f"   üè∑Ô∏è –ú–æ–¥–µ–ª—å: gpt-3.5-turbo")
        print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.001 –∑–∞ –∑–∞–ø—Ä–æ—Å")
        return True
        
    except Exception as e:
        print(f"‚ùå OpenAI API: –û—à–∏–±–∫–∞ - {e}")
        return False

def test_calendarific_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Calendarific API"""
    print("\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CALENDARIFIC API")
    print("-" * 40)
    
    api_key = os.getenv('CALENDAR_API_KEY')
    if not api_key or api_key == '–í–°–¢–ê–í–ò–¢–¨_–í–ê–®_–ö–õ–Æ–ß_–ö–ê–õ–ï–ù–î–ê–†–Ø_–°–Æ–î–ê':
        print("‚ùå Calendarific API: –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏
        params = {
            'api_key': api_key,
            'country': 'ID',
            'year': 2025,
            'type': 'national'
        }
        
        response = requests.get('https://calendarific.com/api/v2/holidays', 
                              params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('meta', {}).get('code') == 200:
                holidays = data.get('response', {}).get('holidays', [])
                
                print("‚úÖ Calendarific API: –†–ê–ë–û–¢–ê–ï–¢")
                print(f"   üé™ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {len(holidays)}")
                
                if holidays:
                    first_holiday = holidays[0]
                    print(f"   üìÖ –ü–µ—Ä–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫: {first_holiday.get('name')}")
                    print(f"   üìÜ –î–∞—Ç–∞: {first_holiday.get('date', {}).get('iso')}")
                
                print(f"   üí∞ –õ–∏–º–∏—Ç: 1000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)")
                return True
            else:
                error_msg = data.get('meta', {}).get('error_detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå Calendarific API: {error_msg}")
                return False
        else:
            print(f"‚ùå Calendarific API: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Calendarific API: –û—à–∏–±–∫–∞ - {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• API –ò–ù–¢–ï–ì–†–ê–¶–ò–ô")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API
    results = {
        'open_meteo': test_open_meteo_api(),
        'openai': test_openai_api(),
        'calendarific': test_calendarific_api()
    }
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    working_apis = sum(results.values())
    total_apis = len(results)
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö API: {working_apis}/{total_apis}")
    
    if results['open_meteo']:
        print("‚úÖ –ü–æ–≥–æ–¥–∞: Open-Meteo (–ë–ï–°–ü–õ–ê–¢–ù–û)")
    else:
        print("‚ùå –ü–æ–≥–æ–¥–∞: Open-Meteo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if results['openai']:
        print("‚úÖ AI: OpenAI GPT (–Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    else:
        print("‚ùå AI: OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if results['calendarific']:
        print("‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: Calendarific (–Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    else:
        print("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å: Calendarific –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if working_apis == total_apis:
        print("üéâ –í–°–ï API –†–ê–ë–û–¢–ê–Æ–¢! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.")
    elif working_apis >= 1:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞.")
        if not results['openai']:
            print("   ü§ñ –ë–µ–∑ OpenAI: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑")
        if not results['calendarific']:
            print("   üìÖ –ë–µ–∑ Calendarific: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
    else:
        print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–∏–Ω API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("   üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ API –∫–ª—é—á–∏")
    
    print(f"\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø: Open-Meteo –±–µ—Å–ø–ª–∞—Ç–µ–Ω (—ç–∫–æ–Ω–æ–º–∏—è $480/–≥–æ–¥)!")
    
    return working_apis == total_apis

if __name__ == "__main__":
    main()