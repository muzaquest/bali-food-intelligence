
# –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ API - —Å–æ–∑–¥–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π
import sqlite3
import json
import os
from datetime import datetime

def create_test_locations():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    conn = sqlite3.connect('database.sqlite')
    restaurants = [row[0] for row in conn.execute('SELECT DISTINCT name FROM restaurants ORDER BY name').fetchall()]
    conn.close()
    
    print(f'üìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {len(restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤...')
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–æ–Ω –ë–∞–ª–∏
    zone_coords = {
        'Canggu': {'lat': -8.671, 'lng': 115.213, 'zone': 'Beach'},
        'Seminyak': {'lat': -8.618, 'lng': 115.169, 'zone': 'Central'},
        'Kerobokan': {'lat': -8.618, 'lng': 115.169, 'zone': 'Central'},
        'Ubud': {'lat': -8.507, 'lng': 115.262, 'zone': 'Mountain'},
        'Uluwatu': {'lat': -8.829, 'lng': 115.084, 'zone': 'Cliff'},
        'Jimbaran': {'lat': -8.789, 'lng': 115.166, 'zone': 'South'},
        'Sanur': {'lat': -8.670, 'lng': 115.262, 'zone': 'East'},
        'Berawa': {'lat': -8.671, 'lng': 115.213, 'zone': 'Beach'}
    }
    
    locations = []
    
    for i, restaurant in enumerate(restaurants):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        area = 'Canggu'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if 'Ubud' in restaurant:
            area = 'Ubud'
        elif 'Uluwatu' in restaurant:
            area = 'Uluwatu'
        elif 'Jimbaran' in restaurant:
            area = 'Jimbaran'
        elif 'Sanur' in restaurant:
            area = 'Sanur'
        elif 'Berawa' in restaurant:
            area = 'Berawa'
        elif 'Seminyak' in restaurant:
            area = 'Seminyak'
        elif 'Kero' in restaurant:
            area = 'Kerobokan'
        elif 'Canggu' in restaurant:
            area = 'Canggu'
        else:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∑–æ–Ω–∞–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
            areas = ['Canggu', 'Seminyak', 'Kerobokan', 'Ubud', 'Uluwatu', 'Jimbaran']
            area = areas[i % len(areas)]
        
        base_coords = zone_coords[area]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        offset = (i % 10) * 0.001
        
        location_data = {
            'name': restaurant,
            'latitude': base_coords['lat'] + offset,
            'longitude': base_coords['lng'] + offset,
            'location': area,
            'area': area,
            'zone': base_coords['zone'],
            'formatted_address': f'{restaurant}, {area}, Bali, Indonesia',
            'found_automatically': False,
            'test_generated': True,
            'timestamp': datetime.now().isoformat()
        }
        
        locations.append(location_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    os.makedirs('data', exist_ok=True)
    
    output_data = {
        'restaurants': locations,
        'total_count': len(locations),
        'last_updated': datetime.now().isoformat(),
        'test_generated': True,
        'note': '–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ Google Maps API'
    }
    
    with open('data/bali_restaurant_locations.json', 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f'üíæ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: data/bali_restaurant_locations.json')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    zones = {}
    for loc in locations:
        zone = loc['zone']
        if zone not in zones:
            zones[zone] = 0
        zones[zone] += 1
    
    print(f'')
    print(f'üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ó–û–ù–ê–ú:')
    for zone, count in zones.items():
        print(f'   üìç {zone}: {count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    
    return locations

if __name__ == "__main__":
    create_test_locations()
