#!/usr/bin/env python3
"""
üìç GOOGLE MAPS –õ–û–ö–ê–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†
–ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é Google Maps API
"""

import requests
import json
import sqlite3
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import os
from dotenv import load_dotenv

class GoogleLocationAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ Google Maps API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        
    def geocode_address(self, address: str) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–¥—Ä–µ—Å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        
        url = "https://maps.googleapis.com/maps/api/geocode/json"
        
        params = {
            'address': address,
            'key': self.api_key,
            'language': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data['status'] == 'OK' and data['results']:
                result = data['results'][0]
                location = result['geometry']['location']
                
                return {
                    'latitude': location['lat'],
                    'longitude': location['lng'],
                    'formatted_address': result['formatted_address'],
                    'place_id': result['place_id'],
                    'address_components': result.get('address_components', [])
                }
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: {address}")
                return {}
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {}
    
    def reverse_geocode(self, latitude: float, longitude: float) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å"""
        
        url = "https://maps.googleapis.com/maps/api/geocode/json"
        
        params = {
            'latlng': f"{latitude},{longitude}",
            'key': self.api_key,
            'language': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data['status'] == 'OK' and data['results']:
                result = data['results'][0]
                
                return {
                    'formatted_address': result['formatted_address'],
                    'place_id': result['place_id'],
                    'address_components': result.get('address_components', [])
                }
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")
                return {}
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {}
    
    def find_nearby_restaurants(self, latitude: float, longitude: float, radius: int = 1000) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        
        url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
        
        params = {
            'location': f"{latitude},{longitude}",
            'radius': radius,
            'type': 'restaurant',
            'key': self.api_key,
            'language': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data['status'] == 'OK':
                restaurants = []
                
                for place in data.get('results', []):
                    restaurant_info = {
                        'name': place.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'place_id': place.get('place_id'),
                        'rating': place.get('rating', 0),
                        'user_ratings_total': place.get('user_ratings_total', 0),
                        'price_level': place.get('price_level', 0),
                        'latitude': place['geometry']['location']['lat'],
                        'longitude': place['geometry']['location']['lng'],
                        'vicinity': place.get('vicinity', ''),
                        'types': place.get('types', [])
                    }
                    restaurants.append(restaurant_info)
                
                return restaurants
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {data.get('status')}")
                return []
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
            return []
    
    def find_tourist_attractions(self, latitude: float, longitude: float, radius: int = 2000) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º"""
        
        url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
        
        params = {
            'location': f"{latitude},{longitude}",
            'radius': radius,
            'type': 'tourist_attraction',
            'key': self.api_key,
            'language': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data['status'] == 'OK':
                attractions = []
                
                for place in data.get('results', []):
                    attraction_info = {
                        'name': place.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'place_id': place.get('place_id'),
                        'rating': place.get('rating', 0),
                        'user_ratings_total': place.get('user_ratings_total', 0),
                        'latitude': place['geometry']['location']['lat'],
                        'longitude': place['geometry']['location']['lng'],
                        'vicinity': place.get('vicinity', ''),
                        'types': place.get('types', [])
                    }
                    attractions.append(attraction_info)
                
                return attractions
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {data.get('status')}")
                return []
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {e}")
            return []
    
    def analyze_location_quality(self, latitude: float, longitude: float) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        print(f"üìç –ê–ù–ê–õ–ò–ó –õ–û–ö–ê–¶–ò–ò: {latitude}, {longitude}")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
        address_info = self.reverse_geocode(latitude, longitude)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        competitors = self.find_nearby_restaurants(latitude, longitude, 1000)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        attractions = self.find_tourist_attractions(latitude, longitude, 2000)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é
        competition_analysis = self._analyze_competition(competitors)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        tourist_analysis = self._analyze_tourist_potential(attractions)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –ª–æ–∫–∞—Ü–∏–∏
        location_score = self._calculate_location_score(
            competition_analysis, tourist_analysis
        )
        
        analysis_result = {
            'coordinates': {'latitude': latitude, 'longitude': longitude},
            'address': address_info.get('formatted_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'competition_analysis': competition_analysis,
            'tourist_analysis': tourist_analysis,
            'location_score': location_score,
            'recommendations': self._generate_recommendations(
                competition_analysis, tourist_analysis, location_score
            ),
            'analysis_date': datetime.now().isoformat()
        }
        
        return analysis_result
    
    def _analyze_competition(self, competitors: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É"""
        
        if not competitors:
            return {
                'total_competitors': 0,
                'avg_rating': 0,
                'avg_price_level': 0,
                'competition_density': '–Ω–∏–∑–∫–∞—è',
                'top_competitor': None
            }
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_competitors = len(competitors)
        ratings = [c['rating'] for c in competitors if c['rating'] > 0]
        price_levels = [c['price_level'] for c in competitors if c['price_level'] > 0]
        
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        avg_price_level = sum(price_levels) / len(price_levels) if price_levels else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
        if total_competitors >= 20:
            density = '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
        elif total_competitors >= 10:
            density = '–≤—ã—Å–æ–∫–∞—è'
        elif total_competitors >= 5:
            density = '—Å—Ä–µ–¥–Ω—è—è'
        else:
            density = '–Ω–∏–∑–∫–∞—è'
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        top_competitor = max(competitors, key=lambda x: x['rating'] * x['user_ratings_total']) if competitors else None
        
        return {
            'total_competitors': total_competitors,
            'avg_rating': round(avg_rating, 2),
            'avg_price_level': round(avg_price_level, 1),
            'competition_density': density,
            'top_competitor': {
                'name': top_competitor['name'],
                'rating': top_competitor['rating'],
                'reviews': top_competitor['user_ratings_total']
            } if top_competitor else None
        }
    
    def _analyze_tourist_potential(self, attractions: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ª–æ–∫–∞—Ü–∏–∏"""
        
        if not attractions:
            return {
                'total_attractions': 0,
                'avg_rating': 0,
                'tourist_potential': '–Ω–∏–∑–∫–∏–π',
                'top_attraction': None
            }
        
        total_attractions = len(attractions)
        ratings = [a['rating'] for a in attractions if a['rating'] > 0]
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        if total_attractions >= 10 and avg_rating >= 4.0:
            potential = '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'
        elif total_attractions >= 5 and avg_rating >= 3.5:
            potential = '–≤—ã—Å–æ–∫–∏–π'
        elif total_attractions >= 2:
            potential = '—Å—Ä–µ–¥–Ω–∏–π'
        else:
            potential = '–Ω–∏–∑–∫–∏–π'
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        top_attraction = max(attractions, key=lambda x: x['rating'] * x['user_ratings_total']) if attractions else None
        
        return {
            'total_attractions': total_attractions,
            'avg_rating': round(avg_rating, 2),
            'tourist_potential': potential,
            'top_attraction': {
                'name': top_attraction['name'],
                'rating': top_attraction['rating'],
                'reviews': top_attraction['user_ratings_total']
            } if top_attraction else None
        }
    
    def _calculate_location_score(self, competition_analysis: Dict, tourist_analysis: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –ª–æ–∫–∞—Ü–∏–∏ (0-100)"""
        
        score = 50  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
        density = competition_analysis['competition_density']
        if density == '–Ω–∏–∑–∫–∞—è':
            score += 20  # –ú–∞–ª–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - —Ö–æ—Ä–æ—à–æ
        elif density == '—Å—Ä–µ–¥–Ω—è—è':
            score += 10  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
        elif density == '–≤—ã—Å–æ–∫–∞—è':
            score -= 5   # –ú–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        else:  # –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è
            score -= 15  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        potential = tourist_analysis['tourist_potential']
        if potential == '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π':
            score += 25
        elif potential == '–≤—ã—Å–æ–∫–∏–π':
            score += 15
        elif potential == '—Å—Ä–µ–¥–Ω–∏–π':
            score += 5
        # –Ω–∏–∑–∫–∏–π - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        avg_competitor_rating = competition_analysis['avg_rating']
        if avg_competitor_rating >= 4.5:
            score += 5  # –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ
        elif avg_competitor_rating <= 3.0:
            score -= 10  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤ —Ä–∞–π–æ–Ω–µ
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
        score = max(0, min(100, score))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if score >= 80:
            category = '–æ—Ç–ª–∏—á–Ω–∞—è'
        elif score >= 65:
            category = '—Ö–æ—Ä–æ—à–∞—è'
        elif score >= 50:
            category = '—Å—Ä–µ–¥–Ω—è—è'
        elif score >= 35:
            category = '–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ'
        else:
            category = '–ø–ª–æ—Ö–∞—è'
        
        return {
            'score': score,
            'category': category,
            'max_score': 100
        }
    
    def _generate_recommendations(self, competition_analysis: Dict, tourist_analysis: Dict, location_score: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏–∏"""
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
        density = competition_analysis['competition_density']
        if density == '–Ω–∏–∑–∫–∞—è':
            recommendations.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å - –º–∞–ª–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–π–æ–Ω–µ")
        elif density == '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è':
            recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è - –Ω—É–∂–Ω–∞ —á–µ—Ç–∫–∞—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        potential = tourist_analysis['tourist_potential']
        if potential in ['–≤—ã—Å–æ–∫–∏–π', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π']:
            recommendations.append("üèñÔ∏è –í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ - –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤")
        elif potential == '–Ω–∏–∑–∫–∏–π':
            recommendations.append("üè† –§–æ–∫—É—Å –Ω–∞ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π - —Ç—É—Ä–∏—Å—Ç–æ–≤ –º–∞–ª–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
        score = location_score['score']
        if score >= 80:
            recommendations.append("üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
        elif score >= 65:
            recommendations.append("üëç –•–æ—Ä–æ—à–∞—è –ª–æ–∫–∞—Ü–∏—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞")
        elif score < 50:
            recommendations.append("ü§î –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        avg_price = competition_analysis['avg_price_level']
        if avg_price >= 3:
            recommendations.append("üí∞ –†–∞–π–æ–Ω –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–∞ - –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã –æ–ø—Ä–∞–≤–¥–∞–Ω—ã")
        elif avg_price <= 1:
            recommendations.append("üíµ –ë—é–¥–∂–µ—Ç–Ω—ã–π —Ä–∞–π–æ–Ω - –∫–æ–Ω–∫—É—Ä–∏—Ä—É–π—Ç–µ —Ü–µ–Ω–æ–π")
        
        return recommendations

def analyze_restaurant_locations():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üìç –ê–ù–ê–õ–ò–ó –õ–û–ö–ê–¶–ò–ô –†–ï–°–¢–û–†–ê–ù–û–í")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    load_dotenv()
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    
    if not api_key:
        print("‚ùå Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = GoogleLocationAnalyzer(api_key)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect('database.sqlite')
    
    query = """
    SELECT DISTINCT restaurant_name 
    FROM grab_stats 
    WHERE restaurant_name IS NOT NULL 
    LIMIT 5
    """
    
    restaurants_df = pd.read_sql_query(query, conn)
    conn.close()
    
    if restaurants_df.empty:
        print("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ë–∞–ª–∏
    bali_locations = [
        {'name': 'Seminyak Restaurant', 'latitude': -8.6905, 'longitude': 115.1729},
        {'name': 'Ubud Restaurant', 'latitude': -8.5069, 'longitude': 115.2625},
        {'name': 'Canggu Restaurant', 'latitude': -8.6482, 'longitude': 115.1342},
        {'name': 'Sanur Restaurant', 'latitude': -8.6878, 'longitude': 115.2613},
        {'name': 'Denpasar Restaurant', 'latitude': -8.6500, 'longitude': 115.2167}
    ]
    
    location_analyses = []
    
    for location in bali_locations:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {location['name']}")
        
        analysis = analyzer.analyze_location_quality(
            location['latitude'], 
            location['longitude']
        )
        
        analysis['restaurant_name'] = location['name']
        location_analyses.append(analysis)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ {location['name']}:")
        print(f"   –ò–Ω–¥–µ–∫—Å –ª–æ–∫–∞—Ü–∏–∏: {analysis['location_score']['score']}/100 ({analysis['location_score']['category']})")
        print(f"   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analysis['competition_analysis']['total_competitors']}")
        print(f"   –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {analysis['tourist_analysis']['total_attractions']}")
        print(f"   –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {analysis['tourist_analysis']['tourist_potential']}")
        
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in analysis['recommendations']:
            print(f"     {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('location_analysis_results.json', 'w', encoding='utf-8') as f:
        json.dump(location_analyses, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ location_analysis_results.json")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –ª–æ–∫–∞—Ü–∏—é
    best_location = max(location_analyses, key=lambda x: x['location_score']['score'])
    
    print(f"\nüèÜ –õ–£–ß–®–ê–Ø –õ–û–ö–ê–¶–ò–Ø: {best_location['restaurant_name']}")
    print(f"   –ò–Ω–¥–µ–∫—Å: {best_location['location_score']['score']}/100")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {best_location['location_score']['category']}")
    
    return True

def test_google_geocoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Google Geocoding API"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE GEOCODING API")
    print("=" * 45)
    
    load_dotenv()
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    
    if not api_key:
        print("‚ùå Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    analyzer = GoogleLocationAnalyzer(api_key)
    
    # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    print("üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...")
    test_address = "Seminyak, Bali, Indonesia"
    
    geocode_result = analyzer.geocode_address(test_address)
    
    if geocode_result:
        print(f"‚úÖ –ê–¥—Ä–µ—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"   –ê–¥—Ä–µ—Å: {geocode_result['formatted_address']}")
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {geocode_result['latitude']}, {geocode_result['longitude']}")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        reverse_result = analyzer.reverse_geocode(
            geocode_result['latitude'], 
            geocode_result['longitude']
        )
        
        if reverse_result:
            print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –ê–¥—Ä–µ—Å: {reverse_result['formatted_address']}")
        else:
            print("‚ùå –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        print("\nüçΩÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ä—è–¥–æ–º...")
        restaurants = analyzer.find_nearby_restaurants(
            geocode_result['latitude'],
            geocode_result['longitude']
        )
        
        if restaurants:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            print("   –¢–æ–ø-3 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
            for i, restaurant in enumerate(restaurants[:3], 1):
                print(f"   {i}. {restaurant['name']} (—Ä–µ–π—Ç–∏–Ω–≥: {restaurant['rating']})")
        else:
            print("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if test_google_geocoding():
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–∏
        analyze_restaurant_locations()
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")