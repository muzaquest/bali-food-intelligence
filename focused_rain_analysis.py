#!/usr/bin/env python3
"""
üåßÔ∏è –§–û–ö–£–°–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –î–û–ñ–î–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º –¥–Ω—è–º –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∏—è–Ω–∏—è —Å–∏–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
"""

import sqlite3
import pandas as pd
import requests
import json
from datetime import datetime
from statistics import mean
import warnings
warnings.filterwarnings('ignore')

class FocusedRainAnalysis:
    """–§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        
    def analyze_rain_impact_focused(self):
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –¥–æ–∂–¥—è"""
        
        print("üåßÔ∏è –§–û–ö–£–°–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –î–û–ñ–î–Ø –ù–ê –î–û–°–¢–ê–í–ö–£")
        print("=" * 80)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        top_restaurants = self._get_top_restaurants()
        print(f"üè™ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(top_restaurants)} —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
        sales_data = self._load_recent_sales_data(top_restaurants)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sales_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂")
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É –≤—ã–±–æ—Ä–æ—á–Ω–æ
        weather_sales_data = self._analyze_weather_sample(sales_data)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è
        self._check_rain_impact(weather_sales_data)
        
        # 5. –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        self._find_specific_examples(weather_sales_data)
        
    def _get_top_restaurants(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT 
            r.id,
            r.name,
            SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id AND g.stat_date = gj.stat_date
        WHERE g.stat_date >= '2024-01-01'
        GROUP BY r.id, r.name
        HAVING total_sales > 0
        ORDER BY total_sales DESC
        LIMIT 15
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df
        
    def _load_recent_sales_data(self, top_restaurants):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã"""
        
        conn = sqlite3.connect(self.db_path)
        
        restaurant_ids = tuple(top_restaurants['id'].tolist())
        
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE g.restaurant_id IN {restaurant_ids}
        AND g.stat_date >= '2024-03-01'
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date DESC, r.name
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df
        
    def _analyze_weather_sample(self, sales_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"\nüå§Ô∏è –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´ –î–õ–Ø –í–´–ë–û–†–ö–ò")
        print("-" * 50)
        
        # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 5-–π –¥–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å)
        unique_dates = sorted(sales_data['stat_date'].unique())
        sample_dates = unique_dates[::5]  # –∫–∞–∂–¥—ã–π 5-–π –¥–µ–Ω—å
        
        print(f"üóìÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(sample_dates)} –¥–∞—Ç –∏–∑ {len(unique_dates)}")
        
        weather_sales_data = []
        
        for i, date in enumerate(sample_dates):
            if i % 10 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(sample_dates)} –¥–∞—Ç...")
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏
            weather = self._get_weather_for_date(date, -8.4095, 115.1889)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            day_sales = sales_data[sales_data['stat_date'] == date]
            
            if len(day_sales) > 0:
                total_sales = day_sales['total_sales'].sum()
                total_orders = day_sales['total_orders'].sum()
                restaurant_count = len(day_sales)
                
                weather_sales_data.append({
                    'date': date,
                    'total_sales': total_sales,
                    'total_orders': total_orders,
                    'restaurant_count': restaurant_count,
                    'avg_sales_per_restaurant': total_sales / restaurant_count if restaurant_count > 0 else 0,
                    'temperature': weather['temp'],
                    'precipitation': weather['rain'],
                    'wind_speed': weather['wind'],
                    'is_heavy_rain': weather['rain'] > 15,
                    'is_extreme_rain': weather['rain'] > 30
                })
                
        return pd.DataFrame(weather_sales_data)
        
    def _check_rain_impact(self, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        
        print(f"\nüåßÔ∏è –ü–†–û–í–ï–†–ö–ê –í–õ–ò–Ø–ù–ò–Ø –î–û–ñ–î–Ø")
        print("-" * 50)
        
        if len(data) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ–∂–¥—è
        no_rain = data[data['precipitation'] < 1]
        light_rain = data[(data['precipitation'] >= 1) & (data['precipitation'] < 10)]
        moderate_rain = data[(data['precipitation'] >= 10) & (data['precipitation'] < 20)]
        heavy_rain = data[data['precipitation'] >= 20]
        
        categories = [
            ('–ë–µ–∑ –¥–æ–∂–¥—è (< 1–º–º)', no_rain),
            ('–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å (1-10–º–º)', light_rain),
            ('–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å (10-20–º–º)', moderate_rain),
            ('–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å (‚â• 20–º–º)', heavy_rain)
        ]
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –î–û–ñ–î–Ø:")
        
        baseline_sales = no_rain['avg_sales_per_restaurant'].mean() if len(no_rain) > 0 else data['avg_sales_per_restaurant'].mean()
        
        for category_name, category_data in categories:
            if len(category_data) > 0:
                avg_sales = category_data['avg_sales_per_restaurant'].mean()
                avg_orders = category_data['total_orders'].mean()
                days_count = len(category_data)
                
                sales_change = ((avg_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
                
                print(f"   üå¶Ô∏è {category_name}:")
                print(f"      ‚Ä¢ –î–Ω–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ: {days_count}")
                print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {avg_sales:,.0f} IDR")
                print(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏: {sales_change:+.1f}%")
                
                if sales_change < -15:
                    print(f"      ‚ö†Ô∏è –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –°–ù–ò–ñ–ï–ù–ò–ï - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ª–æ–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞!")
                elif sales_change > 15:
                    print(f"      üìà –†–û–°–¢ - –ª—é–¥–∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç, –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ")
                else:
                    print(f"      ‚û°Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
                print()
                
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è
        extreme_rain = data[data['precipitation'] > 30]
        if len(extreme_rain) > 0:
            print(f"‚õàÔ∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –î–û–ñ–î–¨ (> 30–º–º):")
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {len(extreme_rain)} –¥–Ω–µ–π")
            
            extreme_avg_sales = extreme_rain['avg_sales_per_restaurant'].mean()
            extreme_change = ((extreme_avg_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
            
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {extreme_avg_sales:,.0f} IDR")
            print(f"   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {extreme_change:+.1f}%")
            
            if extreme_change < -30:
                print(f"   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–ù–ò–ñ–ï–ù–ò–ï - –∫—É—Ä—å–µ—Ä—ã –±–æ—è—Ç—Å—è –µ–∑–¥–∏—Ç—å!")
                
    def _find_specific_examples(self, data):
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º"""
        
        print(f"\nüîç –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ò–ú–ï–†–´ –î–ù–ï–ô –° –°–ò–õ–¨–ù–´–ú –î–û–ñ–î–ï–ú")
        print("-" * 50)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å —Å–∞–º—ã–º —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º
        heavy_rain_days = data[data['precipitation'] > 15].sort_values('precipitation', ascending=False)
        
        if len(heavy_rain_days) == 0:
            print("‚ùå –í –≤—ã–±–æ—Ä–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º > 15–º–º")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
            max_rain_days = data.nlargest(5, 'precipitation')
            print(f"üåßÔ∏è –¢–û–ü-5 –°–ê–ú–´–• –î–û–ñ–î–õ–ò–í–´–• –î–ù–ï–ô –í –í–´–ë–û–†–ö–ï:")
            
            for _, day in max_rain_days.iterrows():
                print(f"   üìÖ {day['date']}")
                print(f"      üåßÔ∏è –î–æ–∂–¥—å: {day['precipitation']:.1f}–º–º")
                print(f"      üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {day['avg_sales_per_restaurant']:,.0f} IDR")
                print(f"      üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {day['total_orders']:.0f}")
                print()
        else:
            print(f"üåßÔ∏è –ù–ê–ô–î–ï–ù–û {len(heavy_rain_days)} –î–ù–ï–ô –° –°–ò–õ–¨–ù–´–ú –î–û–ñ–î–ï–ú:")
            
            for _, day in heavy_rain_days.head(10).iterrows():
                print(f"   üìÖ {day['date']}")
                print(f"      üåßÔ∏è –î–æ–∂–¥—å: {day['precipitation']:.1f}–º–º")
                print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temperature']:.1f}¬∞C")
                print(f"      üí® –í–µ—Ç–µ—Ä: {day['wind_speed']:.1f} –º/—Å")
                print(f"      üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {day['avg_sales_per_restaurant']:,.0f} IDR")
                print(f"      üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {day['total_orders']:.0f}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–µ–π
                baseline = data[data['precipitation'] < 5]['avg_sales_per_restaurant'].mean()
                if baseline > 0:
                    change = ((day['avg_sales_per_restaurant'] - baseline) / baseline * 100)
                    print(f"      üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –¥–Ω—è: {change:+.1f}%")
                print()
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        if len(data) > 10:
            correlation = data['precipitation'].corr(data['avg_sales_per_restaurant'])
            print(f"üìà –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –î–û–ñ–î–¨-–ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
            
            if correlation < -0.3:
                print(f"   ‚ö†Ô∏è –°–ò–õ–¨–ù–ê–Ø –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–ê–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–Ø - –∫–ª–∏–µ–Ω—Ç –ø—Ä–∞–≤!")
            elif correlation > 0.3:
                print(f"   üìà –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–Ø - –ª—é–¥–∏ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ –≤ –¥–æ–∂–¥—å")
            else:
                print(f"   ‚û°Ô∏è –°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
                
    def _get_weather_for_date(self, date, lat, lon):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –¥–∞—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        
        cache_key = f"{lat}_{lon}_{date}"
        
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
            
        default_weather = {'temp': 28.0, 'rain': 0.0, 'wind': 5.0}
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    wind_speed = hourly.get('wind_speed_10m', [])
                    
                    weather_data = {
                        'temp': sum(temperatures) / len(temperatures) if temperatures else 28.0,
                        'rain': sum(precipitation) if precipitation else 0.0,
                        'wind': sum(wind_speed) / len(wind_speed) if wind_speed else 5.0
                    }
                    
                    self.weather_cache[cache_key] = weather_data
                    return weather_data
                    
        except Exception:
            pass
            
        self.weather_cache[cache_key] = default_weather
        return default_weather

def main():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    analyzer = FocusedRainAnalysis()
    analyzer.analyze_rain_impact_focused()

if __name__ == "__main__":
    main()