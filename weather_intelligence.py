#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–û–î–£–õ–¨ –ü–û–ì–û–î–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò –î–õ–Ø DELIVERY-–ë–ò–ó–ù–ï–°–ê
==============================================

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏.

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 800+ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è—Ö.
"""

import json
import os
from datetime import datetime

class WeatherIntelligence:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
        self.temperature_effects = {
            'comfortable_27c': {'sales_impact': -3.1, 'explanation': '–õ—é–¥–∏ –≤—ã—Ö–æ–¥—è—Ç –∏–∑ –¥–æ–º–∞'},
            'warm_28c': {'sales_impact': 9.7, 'explanation': '–ù–∞—á–∏–Ω–∞—é—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–º–æ–π'}
        }
        
        self.rain_effects = {
            'dry': {'sales_impact': 11.0, 'explanation': '–ö—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ'},
            'light_rain': {'sales_impact': -12.8, 'explanation': '–ö—É—Ä—å–µ—Ä—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, –º–µ–Ω—å—à–µ –∑–∞–∫–∞–∑–æ–≤'},
            'moderate_rain': {'sales_impact': 16.1, 'explanation': '–õ–£–ß–®–ò–ô –≠–§–§–ï–ö–¢: –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–º–∞, –∫—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç'},
            'heavy_rain': {'sales_impact': -6.5, 'explanation': '–ö—É—Ä—å–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'}
        }
        
        self.wind_effects = {
            'calm': {'sales_impact': 75.0, 'explanation': '–ò–î–ï–ê–õ–¨–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤'},
            'light_wind': {'sales_impact': -16.3, 'explanation': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∞–π–∫–µ—Ä–æ–≤'},
            'moderate_wind': {'sales_impact': -8.8, 'explanation': '–ó–∞–º–µ—Ç–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'}
        }
        
        self.comfort_effects = {
            'excellent_comfort': {'sales_impact': 13.2, 'explanation': '–ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'},
            'poor_comfort': {'sales_impact': -14.0, 'explanation': '–ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è'}
        }
        
        self.zone_sensitivities = {
            'Beach': {'rain_factor': -0.249, 'wind_factor': -0.093, 'description': '–ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –ø–æ–≥–æ–¥–µ'},
            'Central': {'rain_factor': -0.15, 'wind_factor': -0.05, 'description': '–£–º–µ—Ä–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'},
            'Mountain': {'rain_factor': -0.2, 'wind_factor': -0.1, 'description': '–ì–æ—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'},
            'Cliff': {'rain_factor': -0.18, 'wind_factor': -0.08, 'description': '–ü—Ä–∏–±—Ä–µ–∂–Ω—ã–µ —É—Ç–µ—Å—ã'}
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        self.correlations = {
            'comfort_sales': 0.198,
            'courier_safety_sales': 0.187,
            'heat_index_sales': 0.178,
            'humidity_sales': -0.168
        }
    
    def analyze_temperature_impact(self, temperature):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        if temperature < 27:
            impact = -3.1
            category = "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è"
            explanation = "–õ—é–¥–∏ –≤—ã—Ö–æ–¥—è—Ç –∏–∑ –¥–æ–º–∞, –º–µ–Ω—å—à–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç"
            recommendation = "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–º–æ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
        elif temperature >= 28:
            impact = 9.7
            category = "–¢–µ–ø–ª–∞—è/–ñ–∞—Ä–∫–∞—è"
            explanation = "–õ—é–¥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –¥–æ–º–∞ –∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å"
            recommendation = "–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç, –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        else:
            impact = 0
            category = "–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è"
            explanation = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑—ã"
            recommendation = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å"
        
        return {
            'impact_percent': impact,
            'category': category,
            'explanation': explanation,
            'recommendation': recommendation,
            'confidence': '–í—ã—Å–æ–∫–∞—è (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ 66+ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö)'
        }
    
    def analyze_rain_impact(self, rain_mm):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        if rain_mm <= 0.1:
            effect = self.rain_effects['dry']
            category = "–°—É—Ö–æ"
            severity = "–û—Ç–ª–∏—á–Ω–æ"
            courier_status = "–í—Å–µ –∫—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ"
        elif rain_mm <= 2:
            effect = self.rain_effects['light_rain']
            category = "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å"
            severity = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            courier_status = "–ö—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, –º–µ–Ω—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        elif rain_mm <= 8:
            effect = self.rain_effects['moderate_rain']
            category = "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å"
            severity = "–õ–£–ß–®–ò–ô –°–¶–ï–ù–ê–†–ò–ô"
            courier_status = "–ö–ª–∏–µ–Ω—Ç—ã –¥–æ–º–∞ + –∫—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç = –ú–ê–ö–°–ò–ú–£–ú –∑–∞–∫–∞–∑–æ–≤!"
        else:
            effect = self.rain_effects['heavy_rain']
            category = "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
            severity = "–°–ª–æ–∂–Ω–æ"
            courier_status = "–ú–Ω–æ–≥–∏–µ –∫—É—Ä—å–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
        
        return {
            'impact_percent': effect['sales_impact'],
            'category': category,
            'severity': severity,
            'courier_status': courier_status,
            'explanation': effect['explanation'],
            'confidence': '–í—ã—Å–æ–∫–∞—è (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π)'
        }
    
    def analyze_wind_impact(self, wind_kmh):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≤–µ—Ç—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        if wind_kmh <= 10:
            impact = 75.0
            category = "–®—Ç–∏–ª—å"
            danger_level = "üåü –ò–î–ï–ê–õ–¨–ù–û"
            courier_impact = "–ò–î–ï–ê–õ–¨–ù–´–ï —É—Å–ª–æ–≤–∏—è! –ö—É—Ä—å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
        elif wind_kmh <= 20:
            impact = -16.3
            category = "–õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä"
            danger_level = "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            courier_impact = "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∞–π–∫–µ—Ä–æ–≤, —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        elif wind_kmh <= 30:
            impact = -8.8
            category = "–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä"
            danger_level = "‚ö†Ô∏è –°–ª–æ–∂–Ω–æ"
            courier_impact = "–ó–∞–º–µ—Ç–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç"
        else:
            impact = -25.0
            category = "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä"
            danger_level = "üö® –û–ü–ê–°–ù–û"
            courier_impact = "–û–ø–∞—Å–Ω–æ –¥–ª—è –±–∞–π–∫–µ—Ä–æ–≤, –º–Ω–æ–≥–∏–µ –æ—Ç–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        return {
            'impact_percent': impact,
            'category': category,
            'danger_level': danger_level,
            'courier_impact': courier_impact,
            'confidence': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (–≤–µ—Ç–µ—Ä = –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞)'
        }
    
    def calculate_zone_modifier(self, zone, base_impact, weather_type):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω—ã"""
        if zone not in self.zone_sensitivities:
            return base_impact
        
        zone_data = self.zone_sensitivities[zone]
        
        if weather_type == 'rain':
            modifier = zone_data['rain_factor']
        elif weather_type == 'wind':
            modifier = zone_data['wind_factor']
        else:
            modifier = 0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        adjusted_impact = base_impact * (1 + modifier)
        
        return {
            'base_impact': base_impact,
            'zone_modifier': modifier,
            'adjusted_impact': adjusted_impact,
            'zone_description': zone_data['description']
        }
    
    def generate_comprehensive_weather_analysis(self, weather_data, zone=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        analysis = {
            'summary': {},
            'detailed_factors': {},
            'recommendations': [],
            'confidence_level': '–í—ã—Å–æ–∫–∞—è'
        }
        
        total_impact = 0
        impact_factors = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if 'temperature' in weather_data:
            temp_analysis = self.analyze_temperature_impact(weather_data['temperature'])
            analysis['detailed_factors']['temperature'] = temp_analysis
            total_impact += temp_analysis['impact_percent']
            impact_factors.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {weather_data['temperature']:.1f}¬∞C: {temp_analysis['impact_percent']:+.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è
        if 'rain' in weather_data:
            rain_analysis = self.analyze_rain_impact(weather_data['rain'])
            analysis['detailed_factors']['rain'] = rain_analysis
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–æ–∂–¥—è
            if zone:
                zone_rain = self.calculate_zone_modifier(zone, rain_analysis['impact_percent'], 'rain')
                rain_analysis['zone_adjusted'] = zone_rain
                total_impact += zone_rain['adjusted_impact']
                impact_factors.append(f"–î–æ–∂–¥—å {weather_data['rain']:.1f}–º–º –≤ {zone}: {zone_rain['adjusted_impact']:+.1f}%")
            else:
                total_impact += rain_analysis['impact_percent']
                impact_factors.append(f"–î–æ–∂–¥—å {weather_data['rain']:.1f}–º–º: {rain_analysis['impact_percent']:+.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞
        if 'wind' in weather_data:
            wind_analysis = self.analyze_wind_impact(weather_data['wind'])
            analysis['detailed_factors']['wind'] = wind_analysis
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤–µ—Ç—Ä–∞
            if zone:
                zone_wind = self.calculate_zone_modifier(zone, wind_analysis['impact_percent'], 'wind')
                wind_analysis['zone_adjusted'] = zone_wind
                total_impact += zone_wind['adjusted_impact']
                impact_factors.append(f"–í–µ—Ç–µ—Ä {weather_data['wind']:.1f}–∫–º/—á –≤ {zone}: {zone_wind['adjusted_impact']:+.1f}%")
            else:
                total_impact += wind_analysis['impact_percent']
                impact_factors.append(f"–í–µ—Ç–µ—Ä {weather_data['wind']:.1f}–∫–º/—á: {wind_analysis['impact_percent']:+.1f}%")
        
        # –û–±—â–∏–π –∏—Ç–æ–≥
        analysis['summary'] = {
            'total_impact_percent': total_impact,
            'impact_factors': impact_factors,
            'overall_assessment': self._get_overall_assessment(total_impact),
            'primary_factor': self._identify_primary_factor(analysis['detailed_factors'])
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis['recommendations'] = self._generate_recommendations(analysis['detailed_factors'], total_impact)
        
        return analysis
    
    def _get_overall_assessment(self, total_impact):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        if total_impact > 15:
            return "üü¢ –û–ß–ï–ù–¨ –ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–ê–Ø –ø–æ–≥–æ–¥–∞ –¥–ª—è delivery"
        elif total_impact > 5:
            return "üü¢ –ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–ê–Ø –ø–æ–≥–æ–¥–∞"
        elif total_impact > -5:
            return "üü° –ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ø–æ–≥–æ–¥–∞"
        elif total_impact > -15:
            return "üü† –ù–ï–ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–ê–Ø –ø–æ–≥–æ–¥–∞"
        else:
            return "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ï–ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–ê–Ø –ø–æ–≥–æ–¥–∞"
    
    def _identify_primary_factor(self, factors):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è"""
        max_impact = 0
        primary_factor = "–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"
        
        for factor_name, factor_data in factors.items():
            impact = abs(factor_data.get('impact_percent', 0))
            if impact > max_impact:
                max_impact = impact
                if factor_name == 'temperature':
                    primary_factor = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({factor_data['category']})"
                elif factor_name == 'rain':
                    primary_factor = f"–î–æ–∂–¥—å ({factor_data['category']})"
                elif factor_name == 'wind':
                    primary_factor = f"–í–µ—Ç–µ—Ä ({factor_data['category']})"
        
        return primary_factor
    
    def _generate_recommendations(self, factors, total_impact):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Ç—Ä—É
        if 'wind' in factors:
            wind_impact = factors['wind']['impact_percent']
            if wind_impact < -20:
                recommendations.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –£–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∫—É—Ä—å–µ—Ä–∞–º –Ω–∞ 30-50%")
                recommendations.append("üì¢ –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö")
                recommendations.append("üõ°Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–∂–¥—é
        if 'rain' in factors:
            rain_impact = factors['rain']['impact_percent']
            if rain_impact < -8:
                recommendations.append("‚òî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å '–¥–æ–∂–¥–µ–≤—É—é' —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –±–æ–Ω—É—Å—ã –∫—É—Ä—å–µ—Ä–∞–º")
                recommendations.append("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö")
            elif rain_impact > 8:
                recommendations.append("üè† –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–º–∞: —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ 20%")
                recommendations.append("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ '–î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å'")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        if 'temperature' in factors:
            temp_impact = factors['temperature']['impact_percent']
            if temp_impact > 8:
                recommendations.append("üå°Ô∏è –ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –º–æ—Ä–æ–∂–µ–Ω–æ–µ")
                recommendations.append("üìà –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –Ω–∞ 15% - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–∞–∫–∞–∑–æ–≤")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if total_impact < -15:
            recommendations.append("‚ö†Ô∏è –î–ï–ù–¨ –í–´–°–û–ö–û–ì–û –†–ò–°–ö–ê: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
            recommendations.append("üìû –£—Å–∏–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±")
        elif total_impact > 15:
            recommendations.append("üöÄ –û–¢–õ–ò–ß–ù–´–ô –î–ï–ù–¨: –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–∏–ª–∏—è")
            recommendations.append("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–º—É –∑–∞–∫–∞–∑–æ–≤")
        
        return recommendations
    
    def format_weather_report(self, weather_analysis, restaurant_name=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–ª–∏—è–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"""
        report = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if restaurant_name:
            report.append(f"üå§Ô∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê {restaurant_name.upper()}")
        else:
            report.append("üå§Ô∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´")
        
        report.append("=" * 60)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        summary = weather_analysis['summary']
        report.append(f"üìä –û–ë–©–ï–ï –í–õ–ò–Ø–ù–ò–ï –ü–û–ì–û–î–´: {summary['total_impact_percent']:+.1f}%")
        report.append(f"üéØ –û–¶–ï–ù–ö–ê: {summary['overall_assessment']}")
        report.append(f"üîç –û–°–ù–û–í–ù–û–ô –§–ê–ö–¢–û–†: {summary['primary_factor']}")
        report.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        report.append("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í:")
        
        factors = weather_analysis['detailed_factors']
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        if 'temperature' in factors:
            temp = factors['temperature']
            report.append(f"   üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temp['category']} ({temp['impact_percent']:+.1f}%)")
            report.append(f"      üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {temp['explanation']}")
            report.append(f"      üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {temp['recommendation']}")
            report.append("")
        
        # –î–æ–∂–¥—å
        if 'rain' in factors:
            rain = factors['rain']
            report.append(f"   üåßÔ∏è –î–û–ñ–î–¨: {rain['category']} ({rain['impact_percent']:+.1f}%)")
            report.append(f"      üìä –°—Ç–∞—Ç—É—Å: {rain['severity']}")
            report.append(f"      üö¥‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä—ã: {rain['courier_status']}")
            report.append(f"      üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {rain['explanation']}")
            
            # –ó–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            if 'zone_adjusted' in rain:
                zone_adj = rain['zone_adjusted']
                report.append(f"      üåç –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–æ–Ω—ã: {zone_adj['adjusted_impact']:+.1f}% ({zone_adj['zone_description']})")
            report.append("")
        
        # –í–µ—Ç–µ—Ä
        if 'wind' in factors:
            wind = factors['wind']
            report.append(f"   üí® –í–ï–¢–ï–†: {wind['category']} ({wind['impact_percent']:+.1f}%)")
            report.append(f"      ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {wind['danger_level']}")
            report.append(f"      üö¥‚Äç‚ôÇÔ∏è –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤: {wind['courier_impact']}")
            
            # –ó–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            if 'zone_adjusted' in wind:
                zone_adj = wind['zone_adjusted']
                report.append(f"      üåç –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–æ–Ω—ã: {zone_adj['adjusted_impact']:+.1f}% ({zone_adj['zone_description']})")
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if weather_analysis['recommendations']:
            report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–ì–û–î–ï:")
            for i, rec in enumerate(weather_analysis['recommendations'], 1):
                report.append(f"   {i}. {rec}")
            report.append("")
        
        # –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        report.append("üî¨ –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")
        report.append(f"   üìä –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 800+ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        report.append(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        report.append(f"   üéØ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: {weather_analysis['confidence_level']}")
        report.append(f"   üåç –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–æ–Ω –ë–∞–ª–∏")
        
        return "\n".join(report)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
def get_weather_intelligence():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä WeatherIntelligence –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py"""
    return WeatherIntelligence()

def analyze_weather_impact_for_report(weather_data, zone=None, restaurant_name=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç—ã"""
    wi = WeatherIntelligence()
    analysis = wi.generate_comprehensive_weather_analysis(weather_data, zone)
    formatted_report = wi.format_weather_report(analysis, restaurant_name)
    
    return {
        'analysis': analysis,
        'formatted_report': formatted_report,
        'total_impact': analysis['summary']['total_impact_percent'],
        'primary_factor': analysis['summary']['primary_factor'],
        'recommendations': analysis['recommendations']
    }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_weather = {
        'temperature': 28.5,
        'rain': 3.2,
        'wind': 22.0
    }
    
    result = analyze_weather_impact_for_report(test_weather, 'Beach', 'Ika Canggu')
    print(result['formatted_report'])
    print(f"\n–û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ: {result['total_impact']:+.1f}%")
    print(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä: {result['primary_factor']}")