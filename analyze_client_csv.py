#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ ML
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime, timedelta
import json
import sqlite3

class ClientCSVAnalyzer:
    def __init__(self, csv_folder='.'):
        self.csv_folder = csv_folder
        self.restaurants_df = None
        self.grab_df = None
        self.gojek_df = None
        
    def load_csv_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã"""
        print("üîç –ó–ê–ì–†–£–ó–ö–ê CSV –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        # –ò—â–µ–º CSV —Ñ–∞–π–ª—ã
        csv_files = [f for f in os.listdir(self.csv_folder) if f.endswith('.csv')]
        print(f"–ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
        
        for file in csv_files:
            print(f"  - {file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º restaurants.csv
        restaurants_file = None
        for file in csv_files:
            if 'restaurant' in file.lower():
                restaurants_file = file
                break
        
        if restaurants_file:
            self.restaurants_df = pd.read_csv(os.path.join(self.csv_folder, restaurants_file))
            print(f"\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {restaurants_file}: {len(self.restaurants_df)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("\n‚ùå –§–∞–π–ª restaurants.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º grab_stats.csv
        grab_file = None
        for file in csv_files:
            if 'grab' in file.lower():
                grab_file = file
                break
        
        if grab_file:
            self.grab_df = pd.read_csv(os.path.join(self.csv_folder, grab_file))
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {grab_file}: {len(self.grab_df)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ùå –§–∞–π–ª grab_stats.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º gojek_stats.csv
        gojek_file = None
        for file in csv_files:
            if 'gojek' in file.lower():
                gojek_file = file
                break
        
        if gojek_file:
            self.gojek_df = pd.read_csv(os.path.join(self.csv_folder, gojek_file))
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {gojek_file}: {len(self.gojek_df)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ùå –§–∞–π–ª gojek_stats.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
    
    def analyze_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        if self.restaurants_df is not None:
            print("\nüè™ –¢–ê–ë–õ–ò–¶–ê –†–ï–°–¢–û–†–ê–ù–û–í:")
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(self.restaurants_df)}")
            print(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(self.restaurants_df.columns)}")
            
            if 'name' in self.restaurants_df.columns:
                print("  –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:")
                for name in self.restaurants_df['name'].head(5):
                    print(f"    - {name}")
            
            print("  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            print(self.restaurants_df.head(3).to_string())
        
        # –ê–Ω–∞–ª–∏–∑ Grab –¥–∞–Ω–Ω—ã—Ö
        if self.grab_df is not None:
            print("\nüü¢ GRAB –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(self.grab_df)}")
            print(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(self.grab_df.columns)}")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
            if 'date' in self.grab_df.columns:
                self.grab_df['date'] = pd.to_datetime(self.grab_df['date'])
                print(f"  –ü–µ—Ä–∏–æ–¥: {self.grab_df['date'].min()} - {self.grab_df['date'].max()}")
                print(f"  –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {self.grab_df['date'].nunique()}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
            sales_columns = [col for col in self.grab_df.columns if 'sales' in col.lower() or 'revenue' in col.lower()]
            if sales_columns:
                print(f"  –ö–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂: {sales_columns}")
                for col in sales_columns:
                    if pd.api.types.is_numeric_dtype(self.grab_df[col]):
                        print(f"    {col}: —Å—Ä–µ–¥–Ω–µ–µ = {self.grab_df[col].mean():,.0f}")
            
            print("  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            print(self.grab_df.head(3).to_string())
        
        # –ê–Ω–∞–ª–∏–∑ Gojek –¥–∞–Ω–Ω—ã—Ö
        if self.gojek_df is not None:
            print("\nüîµ GOJEK –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(self.gojek_df)}")
            print(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(self.gojek_df.columns)}")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
            if 'date' in self.gojek_df.columns:
                self.gojek_df['date'] = pd.to_datetime(self.gojek_df['date'])
                print(f"  –ü–µ—Ä–∏–æ–¥: {self.gojek_df['date'].min()} - {self.gojek_df['date'].max()}")
                print(f"  –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {self.gojek_df['date'].nunique()}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
            sales_columns = [col for col in self.gojek_df.columns if 'sales' in col.lower() or 'revenue' in col.lower()]
            if sales_columns:
                print(f"  –ö–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂: {sales_columns}")
                for col in sales_columns:
                    if pd.api.types.is_numeric_dtype(self.gojek_df[col]):
                        print(f"    {col}: —Å—Ä–µ–¥–Ω–µ–µ = {self.gojek_df[col].mean():,.0f}")
            
            print("  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            print(self.gojek_df.head(3).to_string())
    
    def analyze_data_quality(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        datasets = [
            ("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", self.restaurants_df),
            ("Grab", self.grab_df),
            ("Gojek", self.gojek_df)
        ]
        
        for name, df in datasets:
            if df is not None:
                print(f"\nüìä {name.upper()}:")
                print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                missing_data = df.isnull().sum()
                if missing_data.sum() > 0:
                    print("  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                    for col, missing in missing_data.items():
                        if missing > 0:
                            percentage = (missing / len(df)) * 100
                            print(f"    {col}: {missing} ({percentage:.1f}%)")
                else:
                    print("  ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
                
                # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                if len(df) > 0:
                    duplicates = df.duplicated().sum()
                    if duplicates > 0:
                        print(f"  ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
                    else:
                        print("  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç")
    
    def create_combined_dataset(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è ML"""
        print("\nüîß –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
        print("=" * 50)
        
        combined_data = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Grab –¥–∞–Ω–Ω—ã–µ
        if self.grab_df is not None:
            grab_processed = self.grab_df.copy()
            grab_processed['platform'] = 'grab'
            combined_data.append(grab_processed)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã Grab –¥–∞–Ω–Ω—ã–µ: {len(grab_processed)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Gojek –¥–∞–Ω–Ω—ã–µ
        if self.gojek_df is not None:
            gojek_processed = self.gojek_df.copy()
            gojek_processed['platform'] = 'gojek'
            combined_data.append(gojek_processed)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã Gojek –¥–∞–Ω–Ω—ã–µ: {len(gojek_processed)} –∑–∞–ø–∏—Å–µ–π")
        
        if not combined_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            return None
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        combined_df = pd.concat(combined_data, ignore_index=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
        if self.restaurants_df is not None:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–≤—è–∑–∏
            restaurant_id_col = None
            for col in combined_df.columns:
                if 'restaurant' in col.lower() and 'id' in col.lower():
                    restaurant_id_col = col
                    break
            
            if restaurant_id_col:
                combined_df = combined_df.merge(
                    self.restaurants_df,
                    left_on=restaurant_id_col,
                    right_on='id',
                    how='left',
                    suffixes=('', '_restaurant')
                )
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö")
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {len(combined_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(combined_df.columns)}")
        
        return combined_df
    
    def prepare_for_ml(self, combined_df):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML"""
        print("\nü§ñ –ü–û–î–ì–û–¢–û–í–ö–ê –î–õ–Ø ML")
        print("=" * 50)
        
        if combined_df is None:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        key_columns = {
            'date': None,
            'restaurant_id': None,
            'restaurant_name': None,
            'sales': None,
            'orders': None,
            'region': None
        }
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏
        for col in combined_df.columns:
            col_lower = col.lower()
            
            if 'date' in col_lower and key_columns['date'] is None:
                key_columns['date'] = col
            elif 'restaurant_id' == col_lower:
                key_columns['restaurant_id'] = col
            elif 'name' in col_lower and key_columns['restaurant_name'] is None:
                key_columns['restaurant_name'] = col
            elif 'total_sales' in col_lower:
                key_columns['sales'] = col
            elif 'sales' in col_lower and key_columns['sales'] is None:
                if pd.api.types.is_numeric_dtype(combined_df[col]):
                    key_columns['sales'] = col
            elif 'total_orders' in col_lower:
                key_columns['orders'] = col
            elif 'orders' in col_lower and key_columns['orders'] is None:
                if pd.api.types.is_numeric_dtype(combined_df[col]):
                    key_columns['orders'] = col
            elif 'region' in col_lower or 'location' in col_lower:
                key_columns['region'] = col
        
        print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for key, col in key_columns.items():
            status = "‚úÖ" if col else "‚ùå"
            print(f"  {status} {key}: {col}")
        
        # –°–æ–∑–¥–∞–µ–º ML –¥–∞—Ç–∞—Å–µ—Ç
        ml_columns = []
        column_mapping = {}
        
        for key, col in key_columns.items():
            if col and col in combined_df.columns:
                ml_columns.append(col)
                column_mapping[col] = key
        
        if not ml_columns:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ML")
            return None
        
        ml_df = combined_df[ml_columns].copy()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        rename_dict = {col: key for col, key in column_mapping.items()}
        ml_df = ml_df.rename(columns=rename_dict)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        if 'date' in ml_df.columns:
            ml_df['date'] = pd.to_datetime(ml_df['date'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'region' not in ml_df.columns:
            ml_df['region'] = 'Unknown'
        
        if 'orders' not in ml_df.columns and 'sales' in ml_df.columns:
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–∞–∂
            ml_df['orders'] = (ml_df['sales'] / 50000).round().astype(int)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 50k IDR
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'sales' in ml_df.columns and 'orders' in ml_df.columns:
            ml_df['avg_order_value'] = ml_df['sales'] / ml_df['orders'].replace(0, 1)
        
        ml_df['ads_enabled'] = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ml_df['rating'] = 4.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ml_df['delivery_time'] = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        print(f"‚úÖ ML –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤: {len(ml_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(ml_df.columns)}")
        
        return ml_df
    
    def save_to_sqlite(self, ml_df, db_path='client_data.db'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SQLite –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã"""
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í SQLITE: {db_path}")
        print("=" * 50)
        
        if ml_df is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS restaurants (
                id INTEGER PRIMARY KEY,
                name TEXT,
                region TEXT,
                rating REAL,
                avg_delivery_time INTEGER,
                commission_rate REAL
            )
        ''')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        if 'restaurant_name' in ml_df.columns:
            restaurants = ml_df[['restaurant_name', 'region']].drop_duplicates()
            
            for idx, row in restaurants.iterrows():
                cursor.execute('''
                    INSERT OR IGNORE INTO restaurants (name, region, rating, avg_delivery_time, commission_rate)
                    VALUES (?, ?, ?, ?, ?)
                ''', (row['restaurant_name'], row['region'], 4.0, 30, 0.25))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS grab_stats (
                id INTEGER PRIMARY KEY,
                restaurant_id INTEGER,
                date DATE,
                sales REAL,
                orders INTEGER,
                avg_order_value REAL,
                ads_spend REAL,
                ads_enabled BOOLEAN,
                rating REAL,
                delivery_time INTEGER
            )
        ''')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –∏—Ö ID
        cursor.execute('SELECT id, name FROM restaurants')
        restaurant_mapping = {name: id for id, name in cursor.fetchall()}
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for _, row in ml_df.iterrows():
            restaurant_name = row.get('restaurant_name', 'Unknown')
            restaurant_id = restaurant_mapping.get(restaurant_name, 1)
            
            cursor.execute('''
                INSERT INTO grab_stats 
                (restaurant_id, date, sales, orders, avg_order_value, ads_spend, ads_enabled, rating, delivery_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                restaurant_id,
                str(row.get('date')) if row.get('date') is not None else None,
                row.get('sales', 0),
                row.get('orders', 0),
                row.get('avg_order_value', 0),
                0,  # ads_spend
                row.get('ads_enabled', True),
                row.get('rating', 4.0),
                row.get('delivery_time', 30)
            ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {db_path}")
        print(f"üìä –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants) if 'restaurants' in locals() else 0}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂: {len(ml_df)}")
        
        return True
    
    def generate_summary_report(self, ml_df):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        
        if ml_df is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        if 'date' in ml_df.columns:
            print(f"  –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {ml_df['date'].min()} - {ml_df['date'].max()}")
            print(f"  –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {ml_df['date'].nunique()}")
        
        if 'restaurant_name' in ml_df.columns:
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {ml_df['restaurant_name'].nunique()}")
        
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(ml_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        if 'sales' in ml_df.columns:
            print(f"\nüí∞ –ü–†–û–î–ê–ñ–ò:")
            print(f"  –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {ml_df['sales'].sum():,.0f} IDR")
            print(f"  –°—Ä–µ–¥–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {ml_df['sales'].mean():,.0f} IDR")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å: {ml_df['sales'].max():,.0f} IDR")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å: {ml_df['sales'].min():,.0f} IDR")
        
        # –¢–æ–ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        if 'restaurant_name' in ml_df.columns and 'sales' in ml_df.columns:
            print(f"\nüèÜ –¢–û–ü –†–ï–°–¢–û–†–ê–ù–û–í –ü–û –ü–†–û–î–ê–ñ–ê–ú:")
            top_restaurants = ml_df.groupby('restaurant_name')['sales'].sum().sort_values(ascending=False).head(5)
            for i, (name, sales) in enumerate(top_restaurants.items(), 1):
                print(f"  {i}. {name}: {sales:,.0f} IDR")
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if 'region' in ml_df.columns and 'sales' in ml_df.columns:
            print(f"\nüó∫Ô∏è –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
            regional_stats = ml_df.groupby('region')['sales'].agg(['sum', 'mean', 'count'])
            for region, stats in regional_stats.iterrows():
                print(f"  {region}: {stats['sum']:,.0f} IDR (—Å—Ä–µ–¥–Ω–µ–µ: {stats['mean']:,.0f}, –∑–∞–ø–∏—Å–µ–π: {stats['count']})")
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó CSV –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
        if not self.load_csv_files():
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.analyze_structure()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        self.analyze_data_quality()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        combined_df = self.create_combined_dataset()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è ML
        ml_df = self.prepare_for_ml(combined_df)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
        if ml_df is not None:
            self.save_to_sqlite(ml_df)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            ml_df.to_csv('client_ml_data.csv', index=False)
            print(f"‚úÖ ML –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ client_ml_data.csv")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_summary_report(ml_df)
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 60)
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª client_data.db")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 main.py train")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python3 main.py analyze --restaurant_id 1 --date 2024-01-15")
        
        return True

def main():
    print("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä CSV –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞")
    print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ CSV —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
    print("=" * 60)
    
    analyzer = ClientCSVAnalyzer()
    analyzer.run_full_analysis()

if __name__ == "__main__":
    main()