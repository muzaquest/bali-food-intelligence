
import sqlite3
import pandas as pd
import numpy as np
import json
import requests

def load_mega_data():
    """–í–æ—Å—Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ú–ï–ì–ê –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
        locations_data = json.load(f)
    locations = {r['name']: r for r in locations_data['restaurants']}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
    conn = sqlite3.connect('database.sqlite')
    query = """
    SELECT 
        r.name as restaurant_name,
        COALESCE(g.stat_date, gj.stat_date) as date,
        COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
        COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders
    FROM restaurants r
    LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
    LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
    WHERE (g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL)
      AND (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) > 0
    ORDER BY RANDOM()
    LIMIT 6000
    """
    
    df = pd.read_sql_query(query, conn)
    conn.close()
    
    return df, locations

def get_weather_for_date(lat, lon, date):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            'latitude': lat,
            'longitude': lon,
            'start_date': date,
            'end_date': date,
            'hourly': 'temperature_2m,precipitation,wind_speed_10m',
            'timezone': 'Asia/Jakarta'
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            hourly = data.get('hourly', {})
            
            if hourly and len(hourly.get('time', [])) > 0:
                precipitation = hourly.get('precipitation', [0])
                return sum(precipitation) if precipitation else 0
        
        return None
    except:
        return None

def analyze_heavy_rain_days():
    """–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–Ω–∏ —Å —Å–∏–ª—å–Ω—ã–º–∏ –¥–æ–∂–¥—è–º–∏"""
    
    sales_data, locations = load_mega_data()
    
    print('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ù–ï–ô –° –°–ò–õ–¨–ù–´–ú–ò –î–û–ñ–î–Ø–ú–ò')
    print('=' * 50)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    restaurants_with_coords = [name for name in sales_data['restaurant_name'].unique() 
                              if name in locations]
    
    filtered_data = sales_data[sales_data['restaurant_name'].isin(restaurants_with_coords)]
    unique_combos = filtered_data[['restaurant_name', 'date']].drop_duplicates()
    
    # –ë–µ—Ä–µ–º –≤—ã–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    sample_combos = unique_combos.sample(min(300, len(unique_combos)), random_state=42)
    
    heavy_rain_data = []
    moderate_rain_data = []
    light_rain_data = []
    dry_data = []
    
    print(f'üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(sample_combos)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...')
    
    for i, (_, row) in enumerate(sample_combos.iterrows()):
        restaurant_name = row['restaurant_name']
        date = row['date']
        
        if restaurant_name in locations:
            location = locations[restaurant_name]
            
            rain = get_weather_for_date(
                location['latitude'], 
                location['longitude'], 
                date
            )
            
            if rain is not None:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
                day_sales = filtered_data[
                    (filtered_data['restaurant_name'] == restaurant_name) & 
                    (filtered_data['date'] == date)
                ]
                
                if not day_sales.empty:
                    total_sales = day_sales['total_sales'].sum()
                    
                    record = {
                        'restaurant': restaurant_name,
                        'date': date,
                        'rain': rain,
                        'sales': total_sales
                    }
                    
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ –¥–æ–∂–¥—é
                    if rain >= 8:  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
                        heavy_rain_data.append(record)
                    elif rain >= 2:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
                        moderate_rain_data.append(record)
                    elif rain >= 0.1:  # –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å
                        light_rain_data.append(record)
                    else:  # –°—É—Ö–æ
                        dry_data.append(record)
        
        if (i + 1) % 50 == 0:
            print(f'   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(sample_combos)}')
            import time
            time.sleep(1)
    
    print(f'')
    print(f'üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:')
    print(f'   üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å (‚â•8–º–º): {len(heavy_rain_data)} –¥–Ω–µ–π')
    print(f'   üåßÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å (2-8–º–º): {len(moderate_rain_data)} –¥–Ω–µ–π')
    print(f'   üåßÔ∏è –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å (0.1-2–º–º): {len(light_rain_data)} –¥–Ω–µ–π')
    print(f'   ‚òÄÔ∏è –°—É—Ö–æ (<0.1–º–º): {len(dry_data)} –¥–Ω–µ–π')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
    if heavy_rain_data:
        print(f'')
        print(f'üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–õ–¨–ù–´–• –î–û–ñ–î–ï–ô:')
        print('=' * 40)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ–∂–¥—è
        heavy_rain_data.sort(key=lambda x: x['rain'], reverse=True)
        
        total_sales = sum(record['sales'] for record in heavy_rain_data)
        avg_sales = total_sales / len(heavy_rain_data)
        
        print(f'üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å: {avg_sales:,.0f} IDR')
        
        print(f'')
        print(f'üìã –¢–û–ü-10 –°–ê–ú–´–• –î–û–ñ–î–õ–ò–í–´–• –î–ù–ï–ô:')
        for i, record in enumerate(heavy_rain_data[:10], 1):
            print(f'   {i:2d}. {record["date"]} | {record["restaurant"]:25} | {record["rain"]:5.1f}–º–º | {record["sales"]:8,.0f} IDR')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        if dry_data:
            dry_avg = sum(r['sales'] for r in dry_data) / len(dry_data)
            impact = ((avg_sales - dry_avg) / dry_avg * 100)
            print(f'')
            print(f'üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –°–£–•–ò–ú–ò –î–ù–Ø–ú–ò:')
            print(f'   ‚òÄÔ∏è –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å—É—Ö–∏–µ –¥–Ω–∏: {dry_avg:,.0f} IDR')
            print(f'   üìà –í–ª–∏—è–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è: {impact:+.1f}%')
            
            if impact > 5:
                print(f'   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏')
            elif impact < -5:
                print(f'   ‚ùå –û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ: —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏')
            else:
                print(f'   ‚û°Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –ø–æ—á—Ç–∏ –Ω–µ –≤–ª–∏—è–µ—Ç')
    else:
        print(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º –≤ –≤—ã–±–æ—Ä–∫–µ')

if __name__ == "__main__":
    analyze_heavy_rain_days()
