#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
–ù–µ–¥–µ–ª—å–Ω—ã–µ, –º–µ—Å—è—á–Ω—ã–µ –∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å ML –∞–Ω–∞–ª–∏–∑–æ–º
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import sqlite3
from client_data_adapter import ClientDataAdapter
from main import analyze_restaurant
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import base64

class ReportsGenerator:
    def __init__(self, db_path, ml_model_path=None):
        self.adapter = ClientDataAdapter(db_path)
        self.ml_model_path = ml_model_path
        
    def generate_weekly_report(self, restaurant_id, weeks_back=4):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å ML –∞–Ω–∞–ª–∏–∑–æ–º
        """
        print(f"üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ï–î–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å)")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        end_date = datetime.now().date()
        start_date = end_date - timedelta(weeks=weeks_back)
        
        df = self.adapter.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"}
        
        restaurant_name = restaurant_data['name'].iloc[0]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
        restaurant_data['week_start'] = restaurant_data['date'].dt.to_period('W').dt.start_time
        weekly_stats = restaurant_data.groupby('week_start').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'ads_spend': 'sum'
        }).round(2)
        
        # Flatten column names
        weekly_stats.columns = ['_'.join(col).strip() for col in weekly_stats.columns]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        weekly_stats['sales_change'] = weekly_stats['sales_sum'].pct_change() * 100
        weekly_stats['orders_change'] = weekly_stats['orders_sum'].pct_change() * 100
        
        # ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
        ml_insights = []
        for week_start in weekly_stats.index:
            week_end = week_start + timedelta(days=6)
            week_data = restaurant_data[
                (restaurant_data['date'] >= week_start) & 
                (restaurant_data['date'] <= week_end)
            ]
            
            if len(week_data) > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                daily_insights = []
                for _, day_data in week_data.iterrows():
                    if self.ml_model_path:
                        try:
                            insight = analyze_restaurant(
                                restaurant_id, 
                                day_data['date'].strftime('%Y-%m-%d')
                            )
                            daily_insights.append(insight)
                        except:
                            pass
                
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –Ω–µ–¥–µ–ª–∏
                week_insight = self._aggregate_weekly_insights(daily_insights)
                week_insight['week_start'] = week_start.strftime('%Y-%m-%d')
                ml_insights.append(week_insight)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = {
            'restaurant_name': restaurant_name,
            'restaurant_id': restaurant_id,
            'period': f"{start_date} - {end_date}",
            'weeks_analyzed': weeks_back,
            'summary': {
                'total_sales': weekly_stats['sales_sum'].sum(),
                'total_orders': weekly_stats['orders_sum'].sum(),
                'avg_rating': weekly_stats['rating_mean'].mean(),
                'avg_cancellation_rate': weekly_stats['cancellation_rate_mean'].mean(),
                'total_ads_spend': weekly_stats['ads_spend_sum'].sum()
            },
            'trends': {
                'sales_trend': self._calculate_trend(weekly_stats['sales_sum']),
                'orders_trend': self._calculate_trend(weekly_stats['orders_sum']),
                'rating_trend': self._calculate_trend(weekly_stats['rating_mean'])
            },
            'weekly_breakdown': weekly_stats.to_dict('index'),
            'ml_insights': ml_insights,
            'recommendations': self._generate_weekly_recommendations(weekly_stats, ml_insights)
        }
        
        return report
    
    def generate_monthly_report(self, restaurant_id, months_back=3):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å ML –∞–Ω–∞–ª–∏–∑–æ–º
        """
        print(f"üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ï–°–Ø–ß–ù–û–ì–û –û–¢–ß–ï–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_back} –º–µ—Å—è—Ü–∞)")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30*months_back)
        
        df = self.adapter.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"}
        
        restaurant_name = restaurant_data['name'].iloc[0]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        restaurant_data['month'] = restaurant_data['date'].dt.to_period('M')
        monthly_stats = restaurant_data.groupby('month').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'ads_spend': 'sum'
        }).round(2)
        
        # Flatten column names
        monthly_stats.columns = ['_'.join(col).strip() for col in monthly_stats.columns]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        monthly_stats['sales_change'] = monthly_stats['sales_sum'].pct_change() * 100
        monthly_stats['orders_change'] = monthly_stats['orders_sum'].pct_change() * 100
        
        # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        seasonal_analysis = self._analyze_seasonal_patterns(restaurant_data)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = {
            'restaurant_name': restaurant_name,
            'restaurant_id': restaurant_id,
            'period': f"{start_date} - {end_date}",
            'months_analyzed': months_back,
            'summary': {
                'total_sales': monthly_stats['sales_sum'].sum(),
                'total_orders': monthly_stats['orders_sum'].sum(),
                'avg_rating': monthly_stats['rating_mean'].mean(),
                'avg_cancellation_rate': monthly_stats['cancellation_rate_mean'].mean(),
                'total_ads_spend': monthly_stats['ads_spend_sum'].sum(),
                'avg_monthly_sales': monthly_stats['sales_sum'].mean(),
                'sales_volatility': monthly_stats['sales_sum'].std()
            },
            'trends': {
                'sales_trend': self._calculate_trend(monthly_stats['sales_sum']),
                'orders_trend': self._calculate_trend(monthly_stats['orders_sum']),
                'rating_trend': self._calculate_trend(monthly_stats['rating_mean'])
            },
            'monthly_breakdown': monthly_stats.to_dict('index'),
            'seasonal_analysis': seasonal_analysis,
            'recommendations': self._generate_monthly_recommendations(monthly_stats, seasonal_analysis)
        }
        
        return report
    
    def generate_quarterly_report(self, restaurant_id, quarters_back=4):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å ML –∞–Ω–∞–ª–∏–∑–æ–º
        """
        print(f"üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–í–ê–†–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {quarters_back} –∫–≤–∞—Ä—Ç–∞–ª–∞)")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=90*quarters_back)
        
        df = self.adapter.load_combined_sales_data(start_date, end_date)
        restaurant_data = df[df['restaurant_id'] == restaurant_id]
        
        if len(restaurant_data) == 0:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"}
        
        restaurant_name = restaurant_data['name'].iloc[0]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
        restaurant_data['quarter'] = restaurant_data['date'].dt.to_period('Q')
        quarterly_stats = restaurant_data.groupby('quarter').agg({
            'sales': ['sum', 'mean', 'std'],
            'orders': ['sum', 'mean'],
            'rating': 'mean',
            'cancellation_rate': 'mean',
            'ads_spend': 'sum'
        }).round(2)
        
        # Flatten column names
        quarterly_stats.columns = ['_'.join(col).strip() for col in quarterly_stats.columns]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        quarterly_stats['sales_change'] = quarterly_stats['sales_sum'].pct_change() * 100
        quarterly_stats['orders_change'] = quarterly_stats['orders_sum'].pct_change() * 100
        
        # –ì–æ–¥–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
        yearly_analysis = self._analyze_yearly_patterns(restaurant_data)
        
        # ROI –∞–Ω–∞–ª–∏–∑
        roi_analysis = self._calculate_roi_analysis(quarterly_stats)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = {
            'restaurant_name': restaurant_name,
            'restaurant_id': restaurant_id,
            'period': f"{start_date} - {end_date}",
            'quarters_analyzed': quarters_back,
            'summary': {
                'total_sales': quarterly_stats['sales_sum'].sum(),
                'total_orders': quarterly_stats['orders_sum'].sum(),
                'avg_rating': quarterly_stats['rating_mean'].mean(),
                'avg_cancellation_rate': quarterly_stats['cancellation_rate_mean'].mean(),
                'total_ads_spend': quarterly_stats['ads_spend_sum'].sum(),
                'avg_quarterly_sales': quarterly_stats['sales_sum'].mean(),
                'sales_volatility': quarterly_stats['sales_sum'].std(),
                'growth_rate': self._calculate_growth_rate(quarterly_stats['sales_sum'])
            },
            'trends': {
                'sales_trend': self._calculate_trend(quarterly_stats['sales_sum']),
                'orders_trend': self._calculate_trend(quarterly_stats['orders_sum']),
                'rating_trend': self._calculate_trend(quarterly_stats['rating_mean'])
            },
            'quarterly_breakdown': quarterly_stats.to_dict('index'),
            'yearly_analysis': yearly_analysis,
            'roi_analysis': roi_analysis,
            'recommendations': self._generate_quarterly_recommendations(quarterly_stats, yearly_analysis, roi_analysis)
        }
        
        return report
    
    def generate_comprehensive_report(self, restaurant_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        """
        print(f"üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –û–¢–ß–ï–¢–ê")
        print("=" * 60)
        
        weekly = self.generate_weekly_report(restaurant_id, 4)
        monthly = self.generate_monthly_report(restaurant_id, 3)
        quarterly = self.generate_quarterly_report(restaurant_id, 4)
        
        comprehensive = {
            'restaurant_name': weekly.get('restaurant_name', 'Unknown'),
            'restaurant_id': restaurant_id,
            'generated_at': datetime.now().isoformat(),
            'weekly_report': weekly,
            'monthly_report': monthly,
            'quarterly_report': quarterly,
            'executive_summary': self._generate_executive_summary(weekly, monthly, quarterly)
        }
        
        return comprehensive
    
    def _aggregate_weekly_insights(self, daily_insights):
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç ML –∏–Ω—Å–∞–π—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é"""
        if not daily_insights:
            return {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        all_factors = {}
        for insight in daily_insights:
            if 'top_factors' in insight:
                for factor, impact in insight['top_factors'].items():
                    if factor not in all_factors:
                        all_factors[factor] = []
                    all_factors[factor].append(impact)
        
        # –£—Å—Ä–µ–¥–Ω—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        avg_factors = {k: np.mean(v) for k, v in all_factors.items()}
        
        return {
            'avg_factors': avg_factors,
            'days_analyzed': len(daily_insights),
            'dominant_factor': max(avg_factors.items(), key=lambda x: abs(x[1])) if avg_factors else None
        }
    
    def _calculate_trend(self, series):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"""
        if len(series) < 2:
            return "insufficient_data"
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        x = np.arange(len(series))
        y = series.values
        
        # –£–¥–∞–ª—è–µ–º NaN
        mask = ~np.isnan(y)
        if mask.sum() < 2:
            return "insufficient_data"
        
        x_clean = x[mask]
        y_clean = y[mask]
        
        slope = np.polyfit(x_clean, y_clean, 1)[0]
        
        if slope > 0.05:
            return "growing"
        elif slope < -0.05:
            return "declining"
        else:
            return "stable"
    
    def _analyze_seasonal_patterns(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        data['month'] = data['date'].dt.month
        data['day_of_week'] = data['date'].dt.dayofweek
        
        monthly_avg = data.groupby('month')['sales'].mean()
        weekly_avg = data.groupby('day_of_week')['sales'].mean()
        
        return {
            'best_month': monthly_avg.idxmax(),
            'worst_month': monthly_avg.idxmin(),
            'best_day_of_week': weekly_avg.idxmax(),
            'worst_day_of_week': weekly_avg.idxmin(),
            'monthly_pattern': monthly_avg.to_dict(),
            'weekly_pattern': weekly_avg.to_dict()
        }
    
    def _analyze_yearly_patterns(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–¥–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        data['year'] = data['date'].dt.year
        yearly_stats = data.groupby('year').agg({
            'sales': ['sum', 'mean'],
            'orders': ['sum', 'mean'],
            'rating': 'mean'
        })
        
        return {
            'yearly_growth': yearly_stats['sales']['sum'].pct_change().iloc[-1] * 100 if len(yearly_stats) > 1 else 0,
            'yearly_stats': yearly_stats.to_dict()
        }
    
    def _calculate_roi_analysis(self, quarterly_stats):
        """–í—ã—á–∏—Å–ª—è–µ—Ç ROI –∞–Ω–∞–ª–∏–∑"""
        if 'ads_spend_sum' not in quarterly_stats.columns:
            return {}
        
        quarterly_stats['roi'] = (quarterly_stats['sales_sum'] / quarterly_stats['ads_spend_sum'].replace(0, 1)) * 100
        
        return {
            'avg_roi': quarterly_stats['roi'].mean(),
            'best_roi_quarter': quarterly_stats['roi'].idxmax(),
            'worst_roi_quarter': quarterly_stats['roi'].idxmin(),
            'roi_trend': self._calculate_trend(quarterly_stats['roi'])
        }
    
    def _calculate_growth_rate(self, series):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–æ–∫—É–ø–Ω—ã–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞"""
        if len(series) < 2:
            return 0
        
        first_value = series.iloc[0]
        last_value = series.iloc[-1]
        
        if first_value == 0:
            return 0
        
        periods = len(series) - 1
        growth_rate = ((last_value / first_value) ** (1/periods) - 1) * 100
        
        return growth_rate
    
    def _generate_weekly_recommendations(self, weekly_stats, ml_insights):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if 'sales_change' in weekly_stats.columns:
            avg_change = weekly_stats['sales_change'].mean()
            if avg_change < -5:
                recommendations.append("‚ö†Ô∏è –ü—Ä–æ–¥–∞–∂–∏ —Å–Ω–∏–∂–∞—é—Ç—Å—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
            elif avg_change > 10:
                recommendations.append("üìà –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç! –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        if 'rating_mean' in weekly_stats.columns:
            avg_rating = weekly_stats['rating_mean'].mean()
            if avg_rating < 4.0:
                recommendations.append("‚≠ê –†–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ 4.0. –£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        
        # ML –∏–Ω—Å–∞–π—Ç—ã
        if ml_insights:
            dominant_factors = {}
            for insight in ml_insights:
                if 'avg_factors' in insight:
                    for factor, impact in insight['avg_factors'].items():
                        if factor not in dominant_factors:
                            dominant_factors[factor] = []
                        dominant_factors[factor].append(impact)
            
            for factor, impacts in dominant_factors.items():
                avg_impact = np.mean(impacts)
                if abs(avg_impact) > 0.05:
                    if 'rain' in factor and avg_impact < 0:
                        recommendations.append("üåßÔ∏è –î–æ–∂–¥—å —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–º–æ –¥–ª—è –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã")
                    elif 'ads' in factor and avg_impact < 0:
                        recommendations.append("üì± –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∫–ª–∞–º–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏")
        
        return recommendations
    
    def _generate_monthly_recommendations(self, monthly_stats, seasonal_analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if seasonal_analysis:
            best_month = seasonal_analysis.get('best_month')
            worst_month = seasonal_analysis.get('worst_month')
            
            if best_month and worst_month:
                recommendations.append(f"üìÖ –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {best_month}. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Å–ø—Ä–æ—Å—É")
                recommendations.append(f"üìÖ –°–ª–∞–±—ã–π –º–µ—Å—è—Ü: {worst_month}. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if 'sales_sum' in monthly_stats.columns:
            volatility = monthly_stats['sales_sum'].std()
            mean_sales = monthly_stats['sales_sum'].mean()
            cv = volatility / mean_sales if mean_sales > 0 else 0
            
            if cv > 0.3:
                recommendations.append("üìä –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂. –£–ª—É—á—à–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        return recommendations
    
    def _generate_quarterly_recommendations(self, quarterly_stats, yearly_analysis, roi_analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # ROI –∞–Ω–∞–ª–∏–∑
        if roi_analysis and 'avg_roi' in roi_analysis:
            avg_roi = roi_analysis['avg_roi']
            if avg_roi < 200:
                recommendations.append("üí∞ –ù–∏–∑–∫–∏–π ROI —Ä–µ–∫–ª–∞–º—ã. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
            elif avg_roi > 500:
                recommendations.append("üéØ –û—Ç–ª–∏—á–Ω—ã–π ROI! –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
        
        # –ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç
        if yearly_analysis and 'yearly_growth' in yearly_analysis:
            growth = yearly_analysis['yearly_growth']
            if growth < 0:
                recommendations.append("üìâ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≥–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä")
            elif growth > 20:
                recommendations.append("üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
        
        return recommendations
    
    def _generate_executive_summary(self, weekly, monthly, quarterly):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ"""
        return {
            'key_metrics': {
                'weekly_sales_trend': weekly.get('trends', {}).get('sales_trend', 'unknown'),
                'monthly_sales_trend': monthly.get('trends', {}).get('sales_trend', 'unknown'),
                'quarterly_sales_trend': quarterly.get('trends', {}).get('sales_trend', 'unknown'),
                'overall_health': self._assess_overall_health(weekly, monthly, quarterly)
            },
            'critical_actions': self._identify_critical_actions(weekly, monthly, quarterly),
            'opportunities': self._identify_opportunities(weekly, monthly, quarterly)
        }
    
    def _assess_overall_health(self, weekly, monthly, quarterly):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        trends = [
            weekly.get('trends', {}).get('sales_trend', 'stable'),
            monthly.get('trends', {}).get('sales_trend', 'stable'),
            quarterly.get('trends', {}).get('sales_trend', 'stable')
        ]
        
        growing_count = trends.count('growing')
        declining_count = trends.count('declining')
        
        if growing_count >= 2:
            return "excellent"
        elif declining_count >= 2:
            return "concerning"
        else:
            return "stable"
    
    def _identify_critical_actions(self, weekly, monthly, quarterly):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        actions = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recommendations = []
        all_recommendations.extend(weekly.get('recommendations', []))
        all_recommendations.extend(monthly.get('recommendations', []))
        all_recommendations.extend(quarterly.get('recommendations', []))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
        critical_keywords = ['‚ö†Ô∏è', 'üìâ', '‚ùå', '—Å–Ω–∏–∂–∞—é—Ç—Å—è', '–Ω–∏–∑–∫–∏–π', '–ø—Ä–æ–±–ª–µ–º—ã']
        for rec in all_recommendations:
            if any(keyword in rec for keyword in critical_keywords):
                actions.append(rec)
        
        return actions[:5]  # –¢–æ–ø 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    def _identify_opportunities(self, weekly, monthly, quarterly):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞"""
        opportunities = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recommendations = []
        all_recommendations.extend(weekly.get('recommendations', []))
        all_recommendations.extend(monthly.get('recommendations', []))
        all_recommendations.extend(quarterly.get('recommendations', []))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        opportunity_keywords = ['üìà', 'üöÄ', 'üéØ', 'üí∞', '–æ—Ç–ª–∏—á–Ω—ã–π', '—É–≤–µ–ª–∏—á—å—Ç–µ', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ']
        for rec in all_recommendations:
            if any(keyword in rec for keyword in opportunity_keywords):
                opportunities.append(rec)
        
        return opportunities[:5]  # –¢–æ–ø 5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    
    def save_report_to_json(self, report, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2, default=str)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.adapter.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
    generator = ReportsGenerator("path_to_your_database.db")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_id = 1
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    weekly_report = generator.generate_weekly_report(restaurant_id)
    generator.save_report_to_json(weekly_report, f"weekly_report_{restaurant_id}.json")
    
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    monthly_report = generator.generate_monthly_report(restaurant_id)
    generator.save_report_to_json(monthly_report, f"monthly_report_{restaurant_id}.json")
    
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    quarterly_report = generator.generate_quarterly_report(restaurant_id)
    generator.save_report_to_json(quarterly_report, f"quarterly_report_{restaurant_id}.json")
    
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    comprehensive_report = generator.generate_comprehensive_report(restaurant_id)
    generator.save_report_to_json(comprehensive_report, f"comprehensive_report_{restaurant_id}.json")
    
    generator.close()
    print("\n‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")