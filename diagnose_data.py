#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np
from data_loader import load_data_for_training
from feature_engineering import FeatureEngineer

def diagnose_data():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = load_data_for_training()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º feature engineer
    engineer = FeatureEngineer()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    print("\nüîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏...")
    df_prepared = engineer.prepare_features(df)
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df_prepared)} –∑–∞–ø–∏—Å–µ–π —Å {len(df_prepared.columns)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    print("\nüö® –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–û–ë–õ–ï–ú–´:")
    
    for col in df_prepared.columns:
        if df_prepared[col].dtype in ['float64', 'int64', 'float32', 'int32']:
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ infinity
            inf_count = np.isinf(df_prepared[col]).sum()
            if inf_count > 0:
                print(f"‚ùå {col}: {inf_count} infinity –∑–Ω–∞—á–µ–Ω–∏–π")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            nan_count = df_prepared[col].isna().sum()
            if nan_count > 0:
                print(f"‚ö†Ô∏è  {col}: {nan_count} NaN –∑–Ω–∞—á–µ–Ω–∏–π")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
            if not df_prepared[col].isna().all():
                max_val = df_prepared[col].max()
                min_val = df_prepared[col].min()
                
                if abs(max_val) > 1e10 or abs(min_val) > 1e10:
                    print(f"‚ö†Ô∏è  {col}: –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ({min_val:.2e} to {max_val:.2e})")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
    key_features = ['delta_sales_prev', 'target', 'pct_change_sales', 'rolling_std_7']
    
    for feature in key_features:
        if feature in df_prepared.columns:
            print(f"\n{feature}:")
            print(f"  Count: {df_prepared[feature].count()}")
            print(f"  Mean: {df_prepared[feature].mean():.2f}")
            print(f"  Std: {df_prepared[feature].std():.2f}")
            print(f"  Min: {df_prepared[feature].min():.2f}")
            print(f"  Max: {df_prepared[feature].max():.2f}")
            print(f"  Infinity: {np.isinf(df_prepared[feature]).sum()}")
            print(f"  NaN: {df_prepared[feature].isna().sum()}")

if __name__ == "__main__":
    diagnose_data()