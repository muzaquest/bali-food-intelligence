#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Ç–µ—Ä—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚úÖ –ß–µ—Ç–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
"""

import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta

class FinalClientAnalyzer:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        
    def generate_client_report(self, restaurant_name, days=60):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        
        print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: '{restaurant_name}'")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self._load_business_data(restaurant_name, days)
        
        if data.empty:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
        # –ü—Ä–æ–≤–æ–¥–∏–º –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑
        business_analysis = self._conduct_business_analysis(data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self._create_executive_summary(business_analysis, restaurant_name)
        
    def _load_business_data(self, restaurant_name, days):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = f"""
        SELECT 
            g.stat_date,
            
            -- –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as daily_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as daily_orders,
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as ad_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as ad_sales,
            
            -- –ü–õ–ê–¢–§–û–†–ú–´ –û–¢–î–ï–õ–¨–ù–û
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            
            -- –ö–ê–ß–ï–°–¢–í–û –ò –°–ï–†–í–ò–°
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as cancelled_orders,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.store_is_busy, 0) as grab_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_busy,
            
            -- –í–†–ï–ú–Ø –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
            COALESCE(gj.preparation_time, '00:00:00') as prep_time,
            COALESCE(gj.delivery_time, '00:00:00') as delivery_time,
            
            -- –ö–ê–õ–ï–ù–î–ê–†–ù–´–ï –î–ê–ù–ù–´–ï
            CAST(strftime('%w', g.stat_date) AS INTEGER) as weekday,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date >= date('now', '-{days} days')
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        df['avg_check'] = df['daily_sales'] / df['daily_orders'].replace(0, 1)
        df['cancellation_rate'] = df['cancelled_orders'] / df['daily_orders'].replace(0, 1) * 100
        df['roas'] = df['ad_sales'] / df['ad_spend'].replace(0, 1)
        df['grab_share'] = df['grab_sales'] / df['daily_sales'].replace(0, 1) * 100
        df['gojek_share'] = df['gojek_sales'] / df['daily_sales'].replace(0, 1) * 100
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        df['has_problems'] = ((df['grab_closed'] + df['gojek_closed'] + 
                              df['grab_out_of_stock'] + df['gojek_out_of_stock'] + 
                              df['grab_busy'] + df['gojek_busy']) > 0).astype(int)
        
        return df
        
    def _conduct_business_analysis(self, data):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑"""
        
        analysis = {}
        
        # 1. –ë–ê–ó–û–í–´–ï –ú–ï–¢–†–ò–ö–ò
        analysis['total_days'] = len(data)
        analysis['avg_daily_sales'] = data['daily_sales'].mean()
        analysis['total_revenue'] = data['daily_sales'].sum()
        analysis['avg_daily_orders'] = data['daily_orders'].mean()
        analysis['avg_check'] = data['avg_check'].mean()
        analysis['avg_rating'] = data['rating'].mean()
        
        print(f"üìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   ‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {analysis['total_revenue']:,.0f} IDR")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å: {analysis['avg_daily_sales']:,.0f} IDR")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analysis['avg_check']:,.0f} IDR")
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {analysis['avg_daily_orders']:.0f}")
        
        # 2. –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–§–û–†–ú
        grab_total = data['grab_sales'].sum()
        gojek_total = data['gojek_sales'].sum()
        total_sales = grab_total + gojek_total
        
        analysis['grab_share'] = (grab_total / total_sales) * 100 if total_sales > 0 else 0
        analysis['gojek_share'] = (gojek_total / total_sales) * 100 if total_sales > 0 else 0
        analysis['grab_revenue'] = grab_total
        analysis['gojek_revenue'] = gojek_total
        
        # 3. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
        marketing_data = data[data['ad_spend'] > 0]
        if len(marketing_data) > 0:
            analysis['avg_roas'] = marketing_data['roas'].mean()
            analysis['total_ad_spend'] = marketing_data['ad_spend'].sum()
            analysis['total_ad_revenue'] = marketing_data['ad_sales'].sum()
            analysis['marketing_days'] = len(marketing_data)
        else:
            analysis['avg_roas'] = 0
            analysis['total_ad_spend'] = 0
            analysis['total_ad_revenue'] = 0
            analysis['marketing_days'] = 0
            
        # 4. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        problem_days = data[data['has_problems'] == 1]
        analysis['problem_days_count'] = len(problem_days)
        analysis['problem_rate'] = (len(problem_days) / len(data)) * 100
        
        if len(problem_days) > 0:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ–±–ª–µ–º
            avg_normal_sales = data[data['has_problems'] == 0]['daily_sales'].mean()
            problem_sales = problem_days['daily_sales'].sum()
            potential_sales = len(problem_days) * avg_normal_sales
            analysis['operational_losses'] = potential_sales - problem_sales
        else:
            analysis['operational_losses'] = 0
            
        # 5. –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í
        recent_week = data.head(7)
        older_week = data.tail(7)
        
        if len(recent_week) >= 7 and len(older_week) >= 7:
            recent_avg = recent_week['daily_sales'].mean()
            older_avg = older_week['daily_sales'].mean()
            analysis['trend_change'] = ((recent_avg - older_avg) / older_avg) * 100
        else:
            analysis['trend_change'] = 0
            
        # 6. –õ–£–ß–®–ò–ï –ò –•–£–î–®–ò–ï –î–ù–ò
        analysis['best_day'] = data.loc[data['daily_sales'].idxmax()]
        analysis['worst_day'] = data.loc[data['daily_sales'].idxmin()]
        
        # 7. –ê–ù–ê–õ–ò–ó –î–ù–Ø –ù–ï–î–ï–õ–ò
        weekday_performance = data.groupby('weekday')['daily_sales'].agg(['mean', 'count']).reset_index()
        weekday_performance['weekday_name'] = weekday_performance['weekday'].map({
            0: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 1: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 2: '–í—Ç–æ—Ä–Ω–∏–∫', 3: '–°—Ä–µ–¥–∞', 
            4: '–ß–µ—Ç–≤–µ—Ä–≥', 5: '–ü—è—Ç–Ω–∏—Ü–∞', 6: '–°—É–±–±–æ—Ç–∞'
        })
        
        analysis['best_weekday'] = weekday_performance.loc[weekday_performance['mean'].idxmax()]
        analysis['worst_weekday'] = weekday_performance.loc[weekday_performance['mean'].idxmin()]
        
        return analysis
        
    def _create_executive_summary(self, analysis, restaurant_name):
        """–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ"""
        
        report = []
        
        # –ó–ê–ì–û–õ–û–í–û–ö
        report.append(f"üìà –ë–ò–ó–ù–ï–°-–û–¢–ß–ï–¢: {restaurant_name}")
        report.append("=" * 80)
        report.append(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {analysis['total_days']} –¥–Ω–µ–π")
        report.append("")
        
        # –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
        report.append("üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        report.append(f"   üéØ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {analysis['total_revenue']:,.0f} IDR")
        report.append(f"   üìä –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å: {analysis['avg_daily_sales']:,.0f} IDR")
        report.append(f"   üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analysis['avg_check']:,.0f} IDR")
        report.append(f"   üì¶ –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {analysis['avg_daily_orders']:.0f}")
        report.append(f"   ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analysis['avg_rating']:.1f}/5.0")
        report.append("")
        
        # –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–§–û–†–ú
        report.append("üì± –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–§–û–†–ú:")
        report.append(f"   üü¢ Grab: {analysis['grab_revenue']:,.0f} IDR ({analysis['grab_share']:.1f}%)")
        report.append(f"   üü† Gojek: {analysis['gojek_revenue']:,.0f} IDR ({analysis['gojek_share']:.1f}%)")
        
        if analysis['grab_share'] > 70:
            report.append("   ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Grab")
        elif analysis['gojek_share'] > 70:
            report.append("   ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Gojek")
        else:
            report.append("   ‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏")
        report.append("")
        
        # –ú–ê–†–ö–ï–¢–ò–ù–ì
        if analysis['marketing_days'] > 0:
            report.append("üì¢ –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
            report.append(f"   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–µ–∫–ª–∞–º—É: {analysis['total_ad_spend']:,.0f} IDR")
            report.append(f"   üí∞ –í—ã—Ä—É—á–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã: {analysis['total_ad_revenue']:,.0f} IDR")
            report.append(f"   üìà ROAS: {analysis['avg_roas']:.1f} (–∫–∞–∂–¥–∞—è 1000 IDR —Ä–µ–∫–ª–∞–º—ã = {analysis['avg_roas']*1000:.0f} IDR –≤—ã—Ä—É—á–∫–∏)")
            
            if analysis['avg_roas'] < 2.0:
                report.append("   üî¥ –†–µ–∫–ª–∞–º–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ - ROAS —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π")
            elif analysis['avg_roas'] > 5.0:
                report.append("   üü¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ - —Å—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç")
            else:
                report.append("   üü° –†–µ–∫–ª–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        else:
            report.append("üì¢ –ú–ê–†–ö–ï–¢–ò–ù–ì:")
            report.append("   ‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å - —É–ø—É—â–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!")
        report.append("")
        
        # –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        if analysis['problem_days_count'] > 0:
            report.append("üö® –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            report.append(f"   üìä –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {analysis['problem_days_count']} –∏–∑ {analysis['total_days']} ({analysis['problem_rate']:.1f}%)")
            report.append(f"   üí∏ –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ–±–ª–µ–º: {analysis['operational_losses']:,.0f} IDR")
            report.append("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            report.append("‚úÖ –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨:")
            report.append("   üéØ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
        report.append("")
        
        # –¢–†–ï–ù–î–´
        report.append("üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:")
        if abs(analysis['trend_change']) < 5:
            report.append(f"   üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ ({analysis['trend_change']:+.1f}%)")
        elif analysis['trend_change'] > 5:
            report.append(f"   üöÄ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥: —Ä–æ—Å—Ç –Ω–∞ {analysis['trend_change']:.1f}%")
        else:
            report.append(f"   üìâ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥: –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ {abs(analysis['trend_change']):.1f}%")
        report.append("")
        
        # –õ–£–ß–®–ò–ï –ò –•–£–î–®–ò–ï –î–ù–ò
        report.append("üèÜ –õ–£–ß–®–ò–ï –ò –•–£–î–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        best_day = analysis['best_day']
        worst_day = analysis['worst_day']
        
        report.append(f"   ü•á –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_day['stat_date']} - {best_day['daily_sales']:,.0f} IDR")
        report.append(f"   ü•â –•—É–¥—à–∏–π –¥–µ–Ω—å: {worst_day['stat_date']} - {worst_day['daily_sales']:,.0f} IDR")
        
        performance_gap = ((best_day['daily_sales'] - worst_day['daily_sales']) / best_day['daily_sales']) * 100
        report.append(f"   üìä –†–∞–∑–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {performance_gap:.1f}%")
        report.append("")
        
        # –ê–ù–ê–õ–ò–ó –î–ù–Ø –ù–ï–î–ï–õ–ò
        report.append("üìÖ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
        best_wd = analysis['best_weekday']
        worst_wd = analysis['worst_weekday']
        
        report.append(f"   üèÜ –õ—É—á—à–∏–π: {best_wd['weekday_name']} - {best_wd['mean']:,.0f} IDR")
        report.append(f"   üìâ –°–ª–∞–±—ã–π: {worst_wd['weekday_name']} - {worst_wd['mean']:,.0f} IDR")
        
        weekday_gap = ((best_wd['mean'] - worst_wd['mean']) / best_wd['mean']) * 100
        if weekday_gap > 30:
            report.append(f"   ‚ö†Ô∏è  –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ ({weekday_gap:.1f}%) - –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Å–ª–∞–±—ã–µ –¥–Ω–∏")
        report.append("")
        
        # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        recommendations = self._generate_recommendations(analysis)
        
        report.append("üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations, 1):
            report.append(f"   {i}. {rec}")
        report.append("")
        
        # –§–ò–ù–ê–ù–°–û–í–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ
        potential_gains = self._calculate_potential(analysis)
        
        report.append("üíé –ü–û–¢–ï–ù–¶–ò–ê–õ –†–û–°–¢–ê:")
        for gain in potential_gains:
            report.append(f"   ‚Ä¢ {gain}")
        report.append("")
        
        # –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
        score = self._calculate_business_score(analysis)
        report.append(f"üéñÔ∏è  –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ë–ò–ó–ù–ï–°–ê: {score['rating']} ({score['score']}/100)")
        report.append(f"   {score['comment']}")
        
        return "\n".join(report)
        
    def _generate_recommendations(self, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        recommendations = []
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1
        if analysis['operational_losses'] > 0:
            recommendations.append(f"üö® –°–†–û–ß–ù–û: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (—ç–∫–æ–Ω–æ–º–∏—è {analysis['operational_losses']:,.0f} IDR)")
            
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2
        if analysis['marketing_days'] == 0:
            recommendations.append("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
        elif analysis['avg_roas'] > 5.0:
            recommendations.append(f"üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç (—Ç–µ–∫—É—â–∏–π ROAS: {analysis['avg_roas']:.1f})")
        elif analysis['avg_roas'] < 2.0:
            recommendations.append("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–∏–∑–∫–∏–π ROAS)")
            
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3
        if analysis['grab_share'] > 80:
            recommendations.append("üì± –†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ Gojek (—Å–Ω–∏–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Grab)")
        elif analysis['gojek_share'] > 80:
            recommendations.append("üì± –†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ Grab (—Å–Ω–∏–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Gojek)")
            
        # –°–ª–∞–±—ã–µ –¥–Ω–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4
        weekday_gap = ((analysis['best_weekday']['mean'] - analysis['worst_weekday']['mean']) / analysis['best_weekday']['mean']) * 100
        if weekday_gap > 30:
            recommendations.append(f"üìÖ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤ {analysis['worst_weekday']['weekday_name']}")
            
        # –¢—Ä–µ–Ω–¥—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5
        if analysis['trend_change'] < -10:
            recommendations.append("üìâ –°—Ä–æ—á–Ω–æ –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
            
        return recommendations[:5]  # –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    def _calculate_potential(self, analysis):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞"""
        
        potential = []
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        if analysis['operational_losses'] > 0:
            monthly_savings = analysis['operational_losses'] * (30 / analysis['total_days'])
            potential.append(f"–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º: +{monthly_savings:,.0f} IDR/–º–µ—Å—è—Ü")
            
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
        if analysis['avg_roas'] > 3.0 and analysis['total_ad_spend'] > 0:
            additional_budget = analysis['total_ad_spend'] * 0.5  # +50% –∫ –±—é–¥–∂–µ—Ç—É
            additional_revenue = additional_budget * analysis['avg_roas']
            monthly_potential = additional_revenue * (30 / analysis['total_days'])
            potential.append(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã: +{monthly_potential:,.0f} IDR/–º–µ—Å—è—Ü")
            
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekday_gap = analysis['best_weekday']['mean'] - analysis['worst_weekday']['mean']
        if weekday_gap > analysis['avg_daily_sales'] * 0.3:
            weekly_potential = weekday_gap * 0.5  # –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ 50%
            monthly_potential = weekly_potential * 4
            potential.append(f"–£—Å–∏–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –¥–Ω–µ–π: +{monthly_potential:,.0f} IDR/–º–µ—Å—è—Ü")
            
        if not potential:
            potential.append("–ë–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –∫—Ä—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
            
        return potential
        
    def _calculate_business_score(self, analysis):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–∏–∑–Ω–µ—Å–∞"""
        
        score = 0
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (30 –±–∞–ª–ª–æ–≤)
        if analysis['problem_rate'] == 0:
            score += 30
        elif analysis['problem_rate'] < 10:
            score += 20
        elif analysis['problem_rate'] < 20:
            score += 10
            
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (25 –±–∞–ª–ª–æ–≤)
        if analysis['avg_roas'] > 5.0:
            score += 25
        elif analysis['avg_roas'] > 3.0:
            score += 20
        elif analysis['avg_roas'] > 2.0:
            score += 15
        elif analysis['avg_roas'] > 1.0:
            score += 10
            
        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ (20 –±–∞–ª–ª–æ–≤)
        if analysis['avg_rating'] >= 4.7:
            score += 20
        elif analysis['avg_rating'] >= 4.5:
            score += 15
        elif analysis['avg_rating'] >= 4.0:
            score += 10
        elif analysis['avg_rating'] >= 3.5:
            score += 5
            
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤ (15 –±–∞–ª–ª–æ–≤)
        if analysis['trend_change'] > 10:
            score += 15
        elif analysis['trend_change'] > 0:
            score += 10
        elif analysis['trend_change'] > -10:
            score += 5
            
        # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º (10 –±–∞–ª–ª–æ–≤)
        platform_balance = abs(analysis['grab_share'] - 50)
        if platform_balance < 10:
            score += 10
        elif platform_balance < 20:
            score += 7
        elif platform_balance < 30:
            score += 5
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if score >= 85:
            rating = "–û–¢–õ–ò–ß–ù–û üèÜ"
            comment = "–ë–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ"
        elif score >= 70:
            rating = "–•–û–†–û–®–û ‚úÖ"
            comment = "–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å—Ç—å —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞"
        elif score >= 55:
            rating = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û üü°"
            comment = "–°—Ç–∞–±–∏–ª—å–Ω–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π"
        elif score >= 40:
            rating = "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø üü†"
            comment = "–ï—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"
        else:
            rating = "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï üî¥"
            comment = "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã"
            
        return {
            'score': score,
            'rating': rating,
            'comment': comment
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = FinalClientAnalyzer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è Only Eggs
    result = analyzer.generate_client_report("Only Eggs", 60)
    
    print("\n" + "="*100)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:")
    print("="*100)
    print(result)
    print("="*100)

if __name__ == "__main__":
    main()