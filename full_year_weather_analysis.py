#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–û–õ–ù–´–ô –ì–û–î–û–í–û–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê DELIVERY
==============================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–ï–°–¨ 2024 –≥–æ–¥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
"""

import sqlite3
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from collections import defaultdict
import requests
import os
from scipy import stats
import time

class FullYearWeatherAnalyzer:
    def __init__(self):
        self.db_path = 'database.sqlite'
        self.locations_file = 'data/bali_restaurant_locations.json'
        self.weather_api_url = "https://api.open-meteo.com/v1/forecast"
        self.cache_file = 'data/full_year_weather_cache.json'
        self.results_file = 'data/full_year_analysis_results.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.weather_cache = self._load_cache()
        
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            os.makedirs('data', exist_ok=True)
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.weather_cache, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def get_full_year_data(self, year=2024):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ–ª–Ω—ã–π –≥–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        
        query = f"""
        SELECT 
            r.name as restaurant_name,
            COALESCE(g.stat_date, gj.stat_date) as date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            g.cancelled_orders as grab_cancelled,
            g.store_is_busy as grab_busy,
            g.store_is_closed as grab_closed,
            g.out_of_stock as grab_out_of_stock,
            CASE 
                WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                ELSE 0 
            END as avg_order_value
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
        WHERE (g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL)
          AND (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) > 0
          AND strftime('%Y', COALESCE(g.stat_date, gj.stat_date)) = '{year}'
        ORDER BY r.name, date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–ê–ì–†–£–ñ–ï–ù–û –î–ê–ù–ù–´–• –ó–ê {year} –ì–û–î:")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {df['restaurant_name'].nunique()}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} ‚Üí {df['date'].max()}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {df['date'].nunique()}")
        
        return df
    
    def load_restaurant_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return {r['name']: r for r in data['restaurants']}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return {}
    
    def get_weather_with_cache(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        cache_key = f"{lat:.3f}_{lon:.3f}_{date}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        try:
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,weather_code,wind_speed_10m,relative_humidity_2m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(self.weather_api_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    temps = hourly.get('temperature_2m', [28])
                    precipitation = hourly.get('precipitation', [0])
                    weather_codes = hourly.get('weather_code', [0])
                    wind_speeds = hourly.get('wind_speed_10m', [5])
                    humidity = hourly.get('relative_humidity_2m', [75])
                    
                    weather_summary = {
                        'temperature': np.mean(temps) if temps else 28,
                        'rain': sum(precipitation) if precipitation else 0,
                        'wind': max(wind_speeds) if wind_speeds else 5,
                        'humidity': np.mean(humidity) if humidity else 75,
                        'condition': self._weather_code_to_condition(
                            max(set(weather_codes), key=weather_codes.count) if weather_codes else 0
                        )
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self.weather_cache[cache_key] = weather_summary
                    return weather_summary
            
            return None
        except Exception as e:
            return None
    
    def _weather_code_to_condition(self, code):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WMO –∫–æ–¥ –≤ —É—Å–ª–æ–≤–∏–µ"""
        if code == 0:
            return 'Clear'
        elif code in [1, 2, 3]:
            return 'Clouds'
        elif code in [45, 48]:
            return 'Fog'
        elif code in [51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 80, 81, 82]:
            return 'Rain'
        elif code in [95, 96, 99]:
            return 'Thunderstorm'
        else:
            return 'Unknown'
    
    def run_full_year_analysis(self, year=2024, batch_size=100):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ–¥–∞ —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print(f"üåç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê {year} –ì–û–î–ê")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        locations = self.load_restaurant_locations()
        yearly_data = self.get_full_year_data(year)
        
        if not locations:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        restaurants_with_coords = [name for name in yearly_data['restaurant_name'].unique() 
                                 if name in locations]
        
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(restaurants_with_coords)}")
        
        filtered_data = yearly_data[yearly_data['restaurant_name'].isin(restaurants_with_coords)]
        
        print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(filtered_data):,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {year} –≥–æ–¥")
        
        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        all_weather_data = []
        processed = 0
        
        print("üå§Ô∏è –°–±–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω-–¥–∞—Ç–∞
        unique_combinations = filtered_data[['restaurant_name', 'date']].drop_duplicates()
        
        for i in range(0, len(unique_combinations), batch_size):
            batch = unique_combinations.iloc[i:i+batch_size]
            
            print(f"   –ë–∞—Ç—á {i//batch_size + 1}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(batch)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
            
            for _, row in batch.iterrows():
                restaurant_name = row['restaurant_name']
                date = row['date']
                
                if restaurant_name in locations:
                    location = locations[restaurant_name]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
                    weather = self.get_weather_with_cache(
                        location['latitude'], 
                        location['longitude'], 
                        date
                    )
                    
                    if weather:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                        day_data = filtered_data[
                            (filtered_data['restaurant_name'] == restaurant_name) & 
                            (filtered_data['date'] == date)
                        ]
                        
                        if not day_data.empty:
                            record = {
                                'restaurant': restaurant_name,
                                'date': date,
                                'zone': location.get('zone', 'Unknown'),
                                'area': location.get('area', 'Unknown'),
                                'total_sales': day_data['total_sales'].sum(),
                                'total_orders': day_data['total_orders'].sum(),
                                'avg_order_value': day_data['avg_order_value'].mean(),
                                'cancelled_orders': day_data['grab_cancelled'].sum(),
                                'temperature': weather['temperature'],
                                'rain': weather['rain'],
                                'wind': weather['wind'],
                                'humidity': weather['humidity'],
                                'condition': weather['condition']
                            }
                            all_weather_data.append(record)
                
                processed += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                if processed % 50 == 0:
                    time.sleep(1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
            self._save_cache()
            
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω –±–∞—Ç—á {i//batch_size + 1}, —Å–æ–±—Ä–∞–Ω–æ {len(all_weather_data)} –∑–∞–ø–∏—Å–µ–π")
        
        if not all_weather_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df = pd.DataFrame(all_weather_data)
        print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        
        results = self._analyze_full_year_patterns(df, year)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_results(results, year)
        
        return results
    
    def _analyze_full_year_patterns(self, df, year):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞ –ø–æ–ª–Ω—ã–π –≥–æ–¥"""
        print(f"\nüåç –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô –ó–ê {year} –ì–û–î")
        print("=" * 55)
        
        results = {
            'year': year,
            'total_observations': len(df),
            'restaurants_analyzed': df['restaurant'].nunique(),
            'date_range': (df['date'].min(), df['date'].max()),
            'analysis_timestamp': datetime.now().isoformat()
        }
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_sales = df['total_sales'].mean()
        avg_orders = df['total_orders'].mean()
        
        print(f"üí∞ –ë–ê–ó–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ó–ê {year}:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã: {avg_orders:.1f}/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {len(df):,}")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {df['restaurant'].nunique()}")
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        temp_ranges = [
            (0, 26, "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ"),
            (26, 28, "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ"), 
            (28, 30, "–¢–µ–ø–ª–æ"),
            (30, 32, "–ñ–∞—Ä–∫–æ"),
            (32, 50, "–û—á–µ–Ω—å –∂–∞—Ä–∫–æ")
        ]
        
        temp_analysis = {}
        for min_temp, max_temp, desc in temp_ranges:
            temp_data = df[(df['temperature'] >= min_temp) & (df['temperature'] < max_temp)]
            if len(temp_data) >= 20:  # –ú–∏–Ω–∏–º—É–º 20 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                temp_avg_sales = temp_data['total_sales'].mean()
                temp_avg_orders = temp_data['total_orders'].mean()
                sales_impact = ((temp_avg_sales - avg_sales) / avg_sales * 100)
                orders_impact = ((temp_avg_orders - avg_orders) / avg_orders * 100)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
                _, p_value = stats.ttest_1samp(temp_data['total_sales'], avg_sales)
                
                temp_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'orders_impact': orders_impact,
                    'count': len(temp_data),
                    'avg_temp': temp_data['temperature'].mean(),
                    'p_value': p_value,
                    'significant': p_value < 0.05
                }
                
                significance = "üìà –ó–Ω–∞—á–∏–º–æ" if p_value < 0.05 else "‚û°Ô∏è –¢—Ä–µ–Ω–¥"
                print(f"   {significance} {desc} ({temp_data['temperature'].mean():.1f}¬∞C): –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}% ({len(temp_data)} –¥–Ω–µ–π)")
        
        # –î–æ–∂–¥–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüåßÔ∏è –î–û–ñ–î–ï–í–û–ô –ê–ù–ê–õ–ò–ó:")
        rain_ranges = [
            (0, 0.1, "–°—É—Ö–æ"),
            (0.1, 2, "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å"),
            (2, 8, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å"),
            (8, 20, "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"),
            (20, 100, "–õ–∏–≤–µ–Ω—å")
        ]
        
        rain_analysis = {}
        for min_rain, max_rain, desc in rain_ranges:
            rain_data = df[(df['rain'] >= min_rain) & (df['rain'] < max_rain)]
            if len(rain_data) >= 10:
                rain_avg_sales = rain_data['total_sales'].mean()
                rain_avg_cancelled = rain_data['cancelled_orders'].mean()
                sales_impact = ((rain_avg_sales - avg_sales) / avg_sales * 100)
                
                _, p_value = stats.ttest_1samp(rain_data['total_sales'], avg_sales)
                
                rain_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'avg_cancelled': rain_avg_cancelled,
                    'count': len(rain_data),
                    'p_value': p_value,
                    'significant': p_value < 0.05
                }
                
                significance = "üìà –ó–Ω–∞—á–∏–º–æ" if p_value < 0.05 else "‚û°Ô∏è –¢—Ä–µ–Ω–¥"
                print(f"   {significance} {desc}: –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}%, –æ—Ç–º–µ–Ω—ã {rain_avg_cancelled:.1f}/–¥–µ–Ω—å ({len(rain_data)} –¥–Ω–µ–π)")
        
        # –í–µ—Ç—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüí® –í–ï–¢–†–û–í–û–ô –ê–ù–ê–õ–ò–ó:")
        wind_ranges = [
            (0, 10, "–®—Ç–∏–ª—å"),
            (10, 20, "–õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä"),
            (20, 30, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä"),
            (30, 50, "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä")
        ]
        
        wind_analysis = {}
        for min_wind, max_wind, desc in wind_ranges:
            wind_data = df[(df['wind'] >= min_wind) & (df['wind'] < max_wind)]
            if len(wind_data) >= 15:
                wind_avg_sales = wind_data['total_sales'].mean()
                sales_impact = ((wind_avg_sales - avg_sales) / avg_sales * 100)
                
                _, p_value = stats.ttest_1samp(wind_data['total_sales'], avg_sales)
                
                wind_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'count': len(wind_data),
                    'p_value': p_value,
                    'significant': p_value < 0.05
                }
                
                significance = "üìà –ó–Ω–∞—á–∏–º–æ" if p_value < 0.05 else "‚û°Ô∏è –¢—Ä–µ–Ω–¥"
                print(f"   {significance} {desc}: –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}% ({len(wind_data)} –¥–Ω–µ–π)")
        
        # –ó–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüåç –ó–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        zone_analysis = {}
        for zone in df['zone'].unique():
            zone_data = df[df['zone'] == zone]
            if len(zone_data) >= 50:
                zone_temp_corr = zone_data['temperature'].corr(zone_data['total_sales'])
                zone_rain_corr = zone_data['rain'].corr(zone_data['total_sales'])
                zone_wind_corr = zone_data['wind'].corr(zone_data['total_sales'])
                
                zone_analysis[zone] = {
                    'temp_correlation': zone_temp_corr,
                    'rain_correlation': zone_rain_corr,
                    'wind_correlation': zone_wind_corr,
                    'observations': len(zone_data)
                }
                
                print(f"   üìç {zone} ({len(zone_data)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π):")
                print(f"      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {zone_temp_corr:+.3f}")
                print(f"      üåßÔ∏è –î–æ–∂–¥—å: {zone_rain_corr:+.3f}")
                print(f"      üí® –í–µ—Ç–µ—Ä: {zone_wind_corr:+.3f}")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = {
            'temperature_sales': df['temperature'].corr(df['total_sales']),
            'rain_sales': df['rain'].corr(df['total_sales']),
            'wind_sales': df['wind'].corr(df['total_sales']),
            'humidity_sales': df['humidity'].corr(df['total_sales'])
        }
        
        print(f"\nüìä –û–ë–©–ò–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
        for name, value in correlations.items():
            if abs(value) > 0.05:
                print(f"   üìä {name}: {value:.3f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results.update({
            'temperature_analysis': temp_analysis,
            'rain_analysis': rain_analysis,
            'wind_analysis': wind_analysis,
            'zone_analysis': zone_analysis,
            'correlations': correlations,
            'base_metrics': {
                'avg_sales': avg_sales,
                'avg_orders': avg_orders
            }
        })
        
        return results
    
    def _save_results(self, results, year):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            os.makedirs('data', exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy —Ç–∏–ø—ã –¥–ª—è JSON
            def convert_numpy(obj):
                if isinstance(obj, np.integer):
                    return int(obj)
                elif isinstance(obj, np.floating):
                    return float(obj)
                elif isinstance(obj, np.ndarray):
                    return obj.tolist()
                return obj
            
            filename = f'data/full_year_analysis_{year}.json'
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=convert_numpy)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = FullYearWeatherAnalyzer()
    
    print("üåç –ü–û–õ–ù–´–ô –ì–û–î–û–í–û–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´")
    print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ–≥–æ –≥–æ–¥–∞!")
    print("=" * 65)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ 2024 –≥–æ–¥–∞
    results = analyzer.run_full_year_analysis(year=2024, batch_size=50)
    
    if results:
        print("\nüéâ –ü–û–õ–ù–´–ô –ì–û–î–û–í–û–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['total_observations']:,} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {results['restaurants_analyzed']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {results['date_range'][0]} ‚Üí {results['date_range'][1]}")
        
        print("\nüí° –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π –≥–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å")
        print("   ‚úÖ –í—Å–µ —Å–µ–∑–æ–Ω—ã –∏ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —É—á—Ç–µ–Ω—ã")
        print("   ‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")

if __name__ == "__main__":
    main()