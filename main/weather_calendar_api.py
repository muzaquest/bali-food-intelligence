#!/usr/bin/env python3
"""
üå§Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° API –ü–û–ì–û–î–´ –ò –ö–ê–õ–ï–ù–î–ê–†–Ø
–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
"""

import requests
import pandas as pd
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import json
import time

class WeatherCalendarAPI:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –ø–æ–≥–æ–¥—ã –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        # API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        from dotenv import load_dotenv
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
        load_dotenv()
        
        self.weather_api_key = os.getenv('WEATHER_API_KEY')
        self.calendar_api_key = os.getenv('CALENDAR_API_KEY')
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–∞–ª–∏ –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.bali_coords = {
            'lat': -8.4095,
            'lon': 115.1889
        }
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.weather_cache = {}
        self.holiday_cache = {}
    
    def get_historical_weather(self, date: str, location: str = "Bali") -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        """
        
        if not self.weather_api_key:
            return self._get_simulated_weather(date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{date}_{location}"
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ timestamp
            dt = datetime.strptime(date, '%Y-%m-%d')
            timestamp = int(dt.timestamp())
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenWeatherMap Historical API
            url = f"http://api.openweathermap.org/data/2.5/onecall/timemachine"
            params = {
                'lat': self.bali_coords['lat'],
                'lon': self.bali_coords['lon'],
                'dt': timestamp,
                'appid': self.weather_api_key,
                'units': 'metric'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                weather = self._parse_weather_data(data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.weather_cache[cache_key] = weather
                return weather
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã: {response.status_code}")
                return self._get_simulated_weather(date)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return self._get_simulated_weather(date)
    
    def get_holidays(self, year: int, country: str = "ID") -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
        """
        
        if not self.calendar_api_key:
            return self._get_simulated_holidays(year)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{year}_{country}"
        if cache_key in self.holiday_cache:
            return self.holiday_cache[cache_key]
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Calendarific API
            url = "https://calendarific.com/api/v2/holidays"
            params = {
                'api_key': self.calendar_api_key,
                'country': country,
                'year': year,
                'type': 'national,religious,observance'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                holidays = self._parse_holiday_data(data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.holiday_cache[cache_key] = holidays
                return holidays
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {response.status_code}")
                return self._get_simulated_holidays(year)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return self._get_simulated_holidays(year)
    
    def _parse_weather_data(self, data: Dict) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        current = data.get('current', {})
        
        return {
            'temperature_celsius': current.get('temp', 28.0),
            'humidity_percent': current.get('humidity', 75.0),
            'precipitation_mm': current.get('rain', {}).get('1h', 0.0),
            'weather_condition': self._translate_weather_condition(current.get('weather', [{}])[0].get('main', 'Clear')),
            'wind_speed_kmh': current.get('wind_speed', 0) * 3.6,  # –º/—Å –≤ –∫–º/—á
            'visibility_km': current.get('visibility', 10000) / 1000,  # –º –≤ –∫–º
            'pressure_hpa': current.get('pressure', 1013)
        }
    
    def _parse_holiday_data(self, data: Dict) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        holidays = []
        
        for holiday in data.get('response', {}).get('holidays', []):
            holidays.append({
                'date': holiday['date']['iso'],
                'name': holiday['name'],
                'type': holiday['type'][0] if holiday['type'] else 'national',
                'description': holiday.get('description', ''),
                'is_national': 'national' in holiday['type'],
                'is_religious': 'religious' in holiday['type']
            })
        
        return holidays
    
    def _translate_weather_condition(self, condition: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–≥–æ–¥—ã –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç"""
        
        condition_map = {
            'Clear': 'Sunny',
            'Clouds': 'Cloudy',
            'Rain': 'Rainy',
            'Drizzle': 'Rainy',
            'Thunderstorm': 'Stormy',
            'Snow': 'Cloudy',
            'Mist': 'Partly Cloudy',
            'Fog': 'Partly Cloudy',
            'Haze': 'Partly Cloudy'
        }
        
        return condition_map.get(condition, 'Partly Cloudy')
    
    def _get_simulated_weather(self, date: str) -> Dict[str, Any]:
        """Fallback: —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã"""
        
        import random
        import numpy as np
        
        # –ë–∞–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –¥–∞—Ç–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        random.seed(hash(date) % 2147483647)
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ë–∞–ª–∏
        month = int(date.split('-')[1])
        
        # –°–µ–∑–æ–Ω –¥–æ–∂–¥–µ–π (–¥–µ–∫–∞–±—Ä—å-–º–∞—Ä—Ç)
        is_rainy_season = month in [12, 1, 2, 3]
        
        if is_rainy_season:
            temp_base = 26
            humidity_base = 85
            rain_chance = 0.4
        else:
            temp_base = 29
            humidity_base = 70
            rain_chance = 0.1
        
        precipitation = 0
        if random.random() < rain_chance:
            precipitation = np.random.exponential(8)
        
        if precipitation > 5:
            condition = 'Rainy'
        elif precipitation > 1:
            condition = 'Partly Cloudy'
        elif random.random() < 0.6:
            condition = 'Sunny'
        else:
            condition = 'Cloudy'
        
        return {
            'temperature_celsius': temp_base + np.random.normal(0, 3),
            'humidity_percent': humidity_base + np.random.normal(0, 10),
            'precipitation_mm': precipitation,
            'weather_condition': condition,
            'wind_speed_kmh': random.uniform(5, 25),
            'visibility_km': random.uniform(8, 15),
            'pressure_hpa': random.uniform(1005, 1020)
        }
    
    def _get_simulated_holidays(self, year: int) -> List[Dict[str, Any]]:
        """Fallback: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ –∏ –ë–∞–ª–∏"""
        
        holidays = [
            # –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏
            {'date': f'{year}-01-01', 'name': 'New Year', 'type': 'national', 'is_national': True, 'is_religious': False},
            {'date': f'{year}-08-17', 'name': 'Independence Day', 'type': 'national', 'is_national': True, 'is_religious': False},
            {'date': f'{year}-12-25', 'name': 'Christmas', 'type': 'religious', 'is_national': True, 'is_religious': True},
            
            # –ò—Å–ª–∞–º—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã, –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥)
            {'date': f'{year}-04-10', 'name': 'Eid al-Fitr', 'type': 'religious', 'is_national': True, 'is_religious': True},
            {'date': f'{year}-06-17', 'name': 'Eid al-Adha', 'type': 'religious', 'is_national': True, 'is_religious': True},
            
            # –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            {'date': f'{year}-03-14', 'name': 'Nyepi (Day of Silence)', 'type': 'religious', 'is_national': False, 'is_religious': True},
            {'date': f'{year}-05-18', 'name': 'Vesak Day', 'type': 'religious', 'is_national': True, 'is_religious': True},
        ]
        
        return holidays
    
    def get_bali_specific_events(self, date: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–ª—è –ë–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏"""
        
        events = []
        
        # –ì–∞–ª—É–Ω–≥–∞–Ω –∏ –ö—É–Ω–∏–Ω–≥–∞–Ω (–∫–∞–∂–¥—ã–µ 210 –¥–Ω–µ–π –ø–æ –±–∞–ª–∏–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é)
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω —Ç–æ—á–Ω—ã–π –±–∞–ª–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        month_day = date[5:]  # MM-DD
        
        galungan_dates = ['02-15', '09-11', '04-05', '10-31']
        kuningan_dates = ['02-25', '09-21', '04-15', '11-10']
        
        if month_day in galungan_dates:
            events.append({
                'name': 'Galungan',
                'type': 'balinese_religious',
                'impact': 'positive',  # –°–µ–º–µ–π–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è, –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
                'description': '–ë–∞–ª–∏–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–æ–±–µ–¥—ã –¥–æ–±—Ä–∞ –Ω–∞–¥ –∑–ª–æ–º'
            })
        
        if month_day in kuningan_dates:
            events.append({
                'name': 'Kuningan',
                'type': 'balinese_religious', 
                'impact': 'neutral',
                'description': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–π –ì–∞–ª—É–Ω–≥–∞–Ω'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ç–∏—à–∏–Ω—ã (Nyepi)
        if month_day in ['03-14', '03-25']:  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã
            events.append({
                'name': 'Nyepi (Day of Silence)',
                'type': 'balinese_religious',
                'impact': 'very_negative',  # –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                'description': '–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã - –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ª—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
            })
        
        return events
    
    def update_database_with_real_data(self, start_date: str, end_date: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö: {start_date} - {end_date}")
        
        conn = sqlite3.connect('data/database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã
        dates_df = pd.read_sql_query('''
            SELECT DISTINCT date FROM restaurant_data 
            WHERE date >= ? AND date <= ?
            ORDER BY date
        ''', conn, params=[start_date, end_date])
        
        updated_records = 0
        
        for _, row in dates_df.iterrows():
            date_str = row['date']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
            weather_data = self.get_historical_weather(date_str)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ë–∞–ª–∏
            bali_events = self.get_bali_specific_events(date_str)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
            year = int(date_str[:4])
            holidays = self.get_holidays(year)
            
            is_holiday = any(h['date'] == date_str for h in holidays)
            is_bali_event = len(bali_events) > 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_query = '''
                UPDATE restaurant_data 
                SET 
                    temperature_celsius = ?,
                    humidity_percent = ?,
                    precipitation_mm = ?,
                    weather_condition = ?,
                    is_holiday = ?
                WHERE date = ?
            '''
            
            cursor = conn.cursor()
            cursor.execute(update_query, [
                weather_data['temperature_celsius'],
                weather_data['humidity_percent'], 
                weather_data['precipitation_mm'],
                weather_data['weather_condition'],
                1 if (is_holiday or is_bali_event) else 0,
                date_str
            ])
            
            updated_records += cursor.rowcount
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API
            time.sleep(0.1)
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_records} –∑–∞–ø–∏—Å–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        return updated_records

    def analyze_weather_impact(self, restaurant_name: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        conn = sqlite3.connect('data/database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É —Å –ø–æ–≥–æ–¥–æ–π
        query = '''
            SELECT date, total_sales, orders, weather_condition, 
                   temperature_celsius, precipitation_mm, is_holiday
            FROM restaurant_data 
            WHERE restaurant_name = ?
            ORDER BY date
        '''
        
        df = pd.read_sql_query(query, conn, params=[restaurant_name])
        conn.close()
        
        if df.empty:
            return {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø–æ–≥–æ–¥—ã
        weather_impact = df.groupby('weather_condition').agg({
            'total_sales': ['mean', 'count'],
            'orders': 'mean'
        }).round(0)
        
        # –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è
        rainy_sales = df[df['precipitation_mm'] > 5]['total_sales'].mean()
        dry_sales = df[df['precipitation_mm'] <= 1]['total_sales'].mean()
        rain_impact = ((rainy_sales - dry_sales) / dry_sales * 100) if dry_sales > 0 else 0
        
        # –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        hot_sales = df[df['temperature_celsius'] > 32]['total_sales'].mean() 
        normal_sales = df[(df['temperature_celsius'] >= 26) & (df['temperature_celsius'] <= 30)]['total_sales'].mean()
        temp_impact = ((hot_sales - normal_sales) / normal_sales * 100) if normal_sales > 0 else 0
        
        return {
            'weather_conditions': weather_impact,
            'rain_impact_percent': rain_impact,
            'temperature_impact_percent': temp_impact,
            'best_weather': weather_impact.idxmax()[('total_sales', 'mean')],
            'worst_weather': weather_impact.idxmin()[('total_sales', 'mean')]
        }