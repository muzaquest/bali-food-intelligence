#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import logging
import sys
from model import train_sales_model

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    
    print("‚ö° –ë–´–°–¢–†–û–ï –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±—ã—Å—Ç—Ä–µ–µ)
        predictor = train_sales_model(
            start_date=None,
            end_date=None,
            model_type='random_forest',
            optimize_hyperparams=False,  # –ë—ã—Å—Ç—Ä–µ–µ!
            save_model=True
        )
        
        if predictor:
            print("\n‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–û–ë–£–ß–ï–ù–ê!")
            print("=" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            importance = predictor.get_feature_importance()
            print("\nüìä –¢–û–ü-10 –í–ê–ñ–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
            if hasattr(importance, 'head'):
                for feature, score in importance.head(10).items():
                    print(f"  {feature}: {score:.4f}")
            else:
                print("  –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = predictor.training_metrics
            if metrics:
                print(f"\nüìà –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò:")
                print(f"  R¬≤ (–æ–±—É—á–µ–Ω–∏–µ): {metrics.get('train_r2', 'N/A'):.4f}")
                print(f"  R¬≤ (—Ç–µ—Å—Ç): {metrics.get('test_r2', 'N/A'):.4f}")
                print(f"  MAE (—Ç–µ—Å—Ç): {metrics.get('test_mae', 'N/A'):.2f}")
            
            print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: models/client_sales_model.joblib")
            print("üéâ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            return 1
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())