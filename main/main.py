"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
"""
import argparse
import logging
import sys
from datetime import datetime, timedelta
from typing import Dict
import json
import os

from model import train_sales_model, load_trained_model
from business_intelligence_system import (
    BusinessIntelligenceSystem,
    analyze_restaurant_performance,
    get_weekly_report,
    get_executive_summary,
    test_business_hypothesis
)
from data_loader import load_data_for_training, get_restaurants_list
from utils import setup_logging, validate_date, format_currency
from config import MODEL_PATH, RESULTS_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

def train_model_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    logger.info("=== –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===")
    
    try:
        predictor = train_sales_model(
            start_date=args.start_date,
            end_date=args.end_date,
            model_type=args.model_type,
            optimize_hyperparams=args.optimize,
            save_model=True
        )
        
        if predictor:
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print(f"R¬≤ score: {predictor.training_metrics.get('test_r2', 'N/A'):.4f}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {predictor.training_metrics.get('feature_count', 'N/A')}")
            return True
        else:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

def analyze_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
    logger.info(f"=== –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–î–∞—Ç–∞: {args.date}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if not validate_date(args.date):
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return False
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –±–∏–∑–Ω–µ—Å-—Å–∏—Å—Ç–µ–º—É
        result = analyze_restaurant_performance(args.restaurant, args.date)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –†–ï–°–¢–û–†–ê–ù–ê")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['analysis_date']}")
        print(f"üìä –ü–µ—Ä–∏–æ–¥: {result['period_analyzed']}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        summary = result['summary']
        print(f"\nüìà –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {summary['sales_change_percent']:+.1f}%")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥: {summary['sales_trend']}")
        print(f"  ‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['latest_period_sales'])}")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['earlier_period_sales'])}")
        print(f"  ‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {format_currency(summary['absolute_change'])}")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if result['key_factors']:
            print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(result['key_factors'], 1):
                impact_emoji = "üìà" if factor['impact'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" else "üìâ"
                print(f"  {i}. {impact_emoji} {factor['factor']}: {factor['change']}")
                print(f"     –í–ª–∏—è–Ω–∏–µ: {factor['impact']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {factor['confidence']})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ö –î–ï–ô–°–¢–í–ò–Æ:")
            for i, rec in enumerate(result['recommendations'], 1):
                priority_emoji = "üî¥" if rec['priority'] == "–í–´–°–û–ö–ò–ô" else "üü°" if rec['priority'] == "–°–†–ï–î–ù–ò–ô" else "üü¢"
                print(f"  {i}. {priority_emoji} {rec['category']}: {rec['action']}")
                print(f"     {rec['description']}")
                print(f"     –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {rec.get('expected_impact', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"     –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {rec.get('implementation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_filename = f"{args.restaurant}_{args.date}_{timestamp}.json"
        result_path = os.path.join(RESULTS_PATH, result_filename)
        
        os.makedirs(RESULTS_PATH, exist_ok=True)
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def weekly_report_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info(f"=== –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–ù–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥: {args.weeks}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result = get_weekly_report(args.restaurant, args.weeks)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üìä –ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        print(f"üìà –ù–µ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['weeks_analyzed']}")
        
        # –°–≤–æ–¥–∫–∞
        summary = result['summary']
        print(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"  ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['total_sales'])}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['average_weekly_sales'])}")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {summary['average_rating']:.2f}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {summary['average_cancel_rate']:.1%}")
        
        # –¢—Ä–µ–Ω–¥—ã
        trends = result['trends']
        print(f"\nüìà –¢–†–ï–ù–î–´:")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂: {trends['trend_direction']} ({trends['sales_trend_percent']:+.1f}%)")
        print(f"  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {trends['stability']} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {trends['volatility_percent']:.1f}%)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(result['recommendations'], 1):
                priority_emoji = "üî¥" if rec['priority'] == "–í–´–°–û–ö–ò–ô" else "üü°" if rec['priority'] == "–°–†–ï–î–ù–ò–ô" else "üü¢"
                print(f"  {i}. {priority_emoji} {rec['category']}: {rec['action']}")
                print(f"     {rec['description']}")
                print(f"     –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {rec.get('implementation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_filename = f"{args.restaurant}_weekly_{timestamp}.json"
        result_path = os.path.join(RESULTS_PATH, result_filename)
        
        os.makedirs(RESULTS_PATH, exist_ok=True)
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def executive_summary_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
    logger.info(f"=== –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        result = get_executive_summary(args.restaurant)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –î–õ–Ø –†–£–ö–û–í–û–î–°–¢–í–ê")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print(f"\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
        print(f"  {result['overall_status']}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = result['key_metrics']
        print(f"\nüìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {metrics['sales_change_percent']:+.1f}%")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥: {metrics['sales_trend']}")
        print(f"  ‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(metrics['latest_period_sales'])}")
        
        # –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞
        if result['top_3_factors']:
            print(f"\nüîç –¢–û–ü-3 –§–ê–ö–¢–û–†–ê –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(result['top_3_factors'], 1):
                impact_emoji = "üìà" if factor['impact'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" else "üìâ"
                print(f"  {i}. {impact_emoji} {factor['factor']}: {factor['change']}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if result['priority_actions']:
            print(f"\nüö® –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for i, action in enumerate(result['priority_actions'], 1):
                print(f"  {i}. {action['category']}: {action['action']}")
                print(f"     {action['description']}")
                print()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def test_hypothesis_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑"""
    logger.info(f"=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–ì–∏–ø–æ—Ç–µ–∑–∞: {args.hypothesis}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
        result = test_business_hypothesis(args.restaurant, args.hypothesis, args.days)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ü–û–¢–ï–ó–´")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üî¨ –ì–∏–ø–æ—Ç–µ–∑–∞: {result['hypothesis']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        test_result = result['result']
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  ‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {test_result['conclusion']}")
        
        if 'improvement_percent' in test_result:
            print(f"  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ: {test_result['improvement_percent']:+.1f}%")
        
        if 'confidence' in test_result:
            print(f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_result['confidence']}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
        return False

def causal_analysis_command(args):
    """–ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ —Ä–æ—Å—Ç–∞ –∑–∞–∫–∞–∑–æ–≤"""
    logger.info("=== –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ===")
    
    try:
        from business_intelligence_system import generate_causal_analysis_report
        
        if args.compare_all:
            # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            report = generate_causal_analysis_report()
        else:
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            report = generate_causal_analysis_report(args.restaurant, args.start_date, args.end_date)
        
        if 'error' not in report:
            if report['type'] == 'single_restaurant':
                print_single_restaurant_causal_analysis(report)
            else:
                print_comparative_causal_analysis(report)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {report['error']}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def print_single_restaurant_causal_analysis(report: Dict):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    analysis = report['restaurant_analysis']
    
    print(f"\nüéØ –ü–†–ò–ß–ò–ù–ù–û-–°–õ–ï–î–°–¢–í–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: {analysis['restaurant_name']}")
    print("=" * 70)
    
    # –î—Ä–∞–π–≤–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
    if analysis['order_correlations']:
        print(f"\nüìà –î–†–ê–ô–í–ï–†–´ –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ö–ê–ó–û–í:")
        for driver, data in analysis['order_correlations'].items():
            strength_emoji = {"–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è": "üî•", "—Å–∏–ª—å–Ω–∞—è": "üí™", "—É–º–µ—Ä–µ–Ω–Ω–∞—è": "üìä", "—Å–ª–∞–±–∞—è": "üìâ"}
            emoji = strength_emoji.get(data['strength'], "üìä")
            
            print(f"  {emoji} {data['impact_interpretation']}")
            print(f"     –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {data['correlation']:+.3f} ({data['strength']})")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ/–ø–æ—Å–ª–µ
    if analysis['period_comparisons']:
        print(f"\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–û –ü–ï–†–ò–û–î–ê–ú:")
        
        for change_type, change_data in analysis['period_comparisons'].items():
            print(f"\n  üìÖ {change_data['interpretation']}")
            print(f"     –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {change_data['change_date']}")
            print(f"     –î–æ: {change_data['before_avg_orders']:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
            print(f"     –ü–æ—Å–ª–µ: {change_data['after_avg_orders']:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
    
    # –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    if 'platform_effect' in analysis:
        platform = analysis['platform_effect']
        print(f"\nüì± –ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢:")
        print(f"  {platform['interpretation']}")
        print(f"  Gojek: {platform['gojek_avg_orders']:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
        print(f"  Grab: {platform['grab_avg_orders']:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
    
    # –†—ã—á–∞–≥–∏ —Ä–æ—Å—Ç–∞
    if analysis['growth_levers']:
        print(f"\nüöÄ –£–ü–†–ê–í–õ–Ø–ï–ú–´–ï –†–´–ß–ê–ì–ò –†–û–°–¢–ê:")
        
        sorted_levers = sorted(analysis['growth_levers'].items(), 
                             key=lambda x: float(x[1]['potential_order_increase'].replace('%', '')), 
                             reverse=True)
        
        for i, (lever_name, lever_data) in enumerate(sorted_levers, 1):
            actionability_emoji = {"high": "üü¢", "medium": "üü°", "low": "üî¥"}
            emoji = actionability_emoji.get(lever_data['actionability'], "‚ö™")
            
            print(f"  {i}. {emoji} {lever_data['recommendation']}")
            print(f"     –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{lever_data['potential_order_increase']} –∑–∞–∫–∞–∑–æ–≤")
            print(f"     –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {lever_data['current_value']:.1f}")
            print(f"     –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {lever_data['target_value']:.1f}")
            print()
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if analysis['actionable_insights']:
        print(f"\nüí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for insight in analysis['actionable_insights']:
            print(f"  {insight}")

def print_comparative_causal_analysis(report: Dict):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    comparison = report['comparison_analysis']
    
    print(f"\nüèÜ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–û–í")
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {report['total_restaurants_analyzed']}")
    print("=" * 70)
    
    # –¢–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
    print(f"\nü•á –¢–û–ü-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò:")
    for i, (name, data) in enumerate(comparison['top_performers'].items(), 1):
        print(f"  {i}. {name}")
        print(f"     –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {data['avg_orders']:.1f}")
        print(f"     –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤: {data['order_growth']:+.1f}%")
        print(f"     –†–µ–π—Ç–∏–Ω–≥: {data['avg_rating']:.2f}")
        print(f"     –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['avg_delivery_time']:.1f} –º–∏–Ω")
        print(f"     –û—Ç–º–µ–Ω—ã: {data['avg_cancel_rate']*100:.1f}%")
        print(f"     –†–µ–∫–ª–∞–º–∞: {data['ads_usage_percent']:.0f}% –¥–Ω–µ–π")
        print()
    
    # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã
    print(f"\nüìâ –ê–£–¢–°–ê–ô–î–ï–†–´:")
    for i, (name, data) in enumerate(comparison['underperformers'].items(), 1):
        print(f"  {i}. {name}")
        print(f"     –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {data['avg_orders']:.1f}")
        print(f"     –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤: {data['order_growth']:+.1f}%")
        print(f"     –†–µ–π—Ç–∏–Ω–≥: {data['avg_rating']:.2f}")
        print(f"     –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['avg_delivery_time']:.1f} –º–∏–Ω")
        print(f"     –û—Ç–º–µ–Ω—ã: {data['avg_cancel_rate']*100:.1f}%")
        print(f"     –†–µ–∫–ª–∞–º–∞: {data['ads_usage_percent']:.0f}% –¥–Ω–µ–π")
        print()
    
    # –§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
    if comparison['success_factors']:
        print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê:")
        for factor, data in comparison['success_factors'].items():
            if data['is_success_factor']:
                factor_names = {
                    'rating': '–†–µ–π—Ç–∏–Ω–≥',
                    'delivery_time': '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
                    'cancel_rate': '–£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω',
                    'ads_usage': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã'
                }
                
                factor_name = factor_names.get(factor, factor)
                print(f"  üîë {factor_name}:")
                print(f"     –¢–æ–ø: {data['top_avg']:.2f}")
                print(f"     –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã: {data['bottom_avg']:.2f}")
                print(f"     –†–∞–∑–ª–∏—á–∏–µ: {data['difference_percent']:.1f}%")
    
    # –ò–Ω—Å–∞–π—Ç—ã –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏–∏
    if comparison['differentiation_insights']:
        print(f"\nüí° –ò–ù–°–ê–ô–¢–´ –î–ò–§–§–ï–†–ï–ù–¶–ò–ê–¶–ò–ò:")
        for insight in comparison['differentiation_insights']:
            print(f"  {insight}")
    
    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    if 'individual_analyses' in report:
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ü-–†–ï–°–¢–û–†–ê–ù–û–í:")
        for restaurant, analysis in report['individual_analyses'].items():
            print(f"\nüìç {restaurant}:")
            
            if analysis['growth_levers']:
                top_lever = sorted(analysis['growth_levers'].items(), 
                                 key=lambda x: float(x[1]['potential_order_increase'].replace('%', '')), 
                                 reverse=True)[0]
                
                lever_data = top_lever[1]
                print(f"  üöÄ –ì–ª–∞–≤–Ω—ã–π —Ä—ã—á–∞–≥ —Ä–æ—Å—Ç–∞: {lever_data['recommendation']}")
                print(f"     –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{lever_data['potential_order_increase']} –∑–∞–∫–∞–∑–æ–≤")

def market_intelligence_command(args):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    logger.info("=== –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===")
    
    try:
        from business_intelligence_system import generate_market_intelligence_report
        
        report = generate_market_intelligence_report(args.start_date, args.end_date)
        
        if 'error' not in report:
            print_market_intelligence_report(report)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {report['error']}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False

def print_market_intelligence_report(report: Dict):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print(f"\nüåç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –†–´–ù–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {report['period']}")
    print("=" * 80)
    
    # –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
    market = report['market_overview']
    print(f"\nüìä –û–ë–ó–û–† –†–´–ù–ö–ê:")
    print(f"  üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {market['total_restaurants']}")
    print(f"  üìÖ –î–Ω–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {market['total_days_analyzed']}")
    print(f"  üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {market['total_sales']:,.0f} IDR")
    print(f"  üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {market['total_orders']:,}")
    print(f"  ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {market['market_average_rating']:.2f}")
    print(f"  üöö –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {market['market_average_delivery_time']:.1f} –º–∏–Ω")
    print(f"  ‚ùå –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {market['market_cancel_rate']*100:.1f}%")
    print(f"  üì¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã: {market['ads_adoption_rate']:.1f}% –¥–Ω–µ–π")
    print(f"  üíé –°—Ä–µ–¥–Ω–∏–π ROAS: {market['average_roas']:.1f}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_analysis = report.get('platform_analysis', {})
    if 'comparison' in platform_analysis:
        comp = platform_analysis['comparison']
        grab = platform_analysis.get('grab', {})
        gojek = platform_analysis.get('gojek', {})
        
        print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú:")
        print(f"  üí∞ –õ–∏–¥–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {comp['sales_leader'].title()} (—Ä–∞–∑—Ä—ã–≤: {comp['sales_difference_pct']:.1f}%)")
        print(f"  üì¶ –õ–∏–¥–µ—Ä –ø–æ –∑–∞–∫–∞–∑–∞–º: {comp['orders_leader'].title()}")
        print(f"  üíé –õ–∏–¥–µ—Ä –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {comp['efficiency_leader'].title()} (AOV —Ä–∞–∑—Ä—ã–≤: {comp['aov_difference_pct']:.1f}%)")
        print(f"  ‚ö° –õ–∏–¥–µ—Ä –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏: {comp['speed_leader'].title()} (—Ä–∞–∑—Ä—ã–≤: {comp['delivery_time_difference']:.1f} –º–∏–Ω)")
        print(f"  üì¢ –õ–∏–¥–µ—Ä –ø–æ —Ä–µ–∫–ª–∞–º–µ: {comp['roas_leader'].title()} (ROAS —Ä–∞–∑—Ä—ã–≤: {comp['roas_difference_pct']:.1f}%)")
        
        print(f"\n  üìà –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:")
        if grab:
            print(f"    üü¢ GRAB:")
            print(f"      ‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: {grab['market_share_by_records']:.1f}%")
            print(f"      ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {grab['total_sales']:,.0f} IDR")
            print(f"      ‚Ä¢ AOV: {grab['average_order_value']:,.0f} IDR")
            print(f"      ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {grab['average_rating']:.2f}")
            print(f"      ‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {grab['average_delivery_time']:.1f} –º–∏–Ω")
            print(f"      ‚Ä¢ –û—Ç–º–µ–Ω—ã: {grab['cancel_rate']*100:.1f}%")
            print(f"      ‚Ä¢ ROAS: {grab['average_roas']:.1f}")
        
        if gojek:
            print(f"    üü° GOJEK:")
            print(f"      ‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: {gojek['market_share_by_records']:.1f}%")
            print(f"      ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {gojek['total_sales']:,.0f} IDR")
            print(f"      ‚Ä¢ AOV: {gojek['average_order_value']:,.0f} IDR")
            print(f"      ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {gojek['average_rating']:.2f}")
            print(f"      ‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {gojek['average_delivery_time']:.1f} –º–∏–Ω")
            print(f"      ‚Ä¢ –û—Ç–º–µ–Ω—ã: {gojek['cancel_rate']*100:.1f}%")
            print(f"      ‚Ä¢ ROAS: {gojek['average_roas']:.1f}")
    
    # –¢–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
    rest_perf = report.get('restaurant_performance', {})
    if 'top_performers' in rest_perf:
        print(f"\nü•á –¢–û–ü-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò:")
        
        top_sales = rest_perf['top_performers']['by_sales']
        print(f"  üí∞ –ü–û –ü–†–û–î–ê–ñ–ê–ú:")
        for i, (name, data) in enumerate(list(top_sales.items())[:3], 1):
            print(f"    {i}. {name}: {data['total_sales']:,.0f} IDR ({data['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤)")
        
        top_orders = rest_perf['top_performers']['by_orders']
        print(f"  üì¶ –ü–û –ó–ê–ö–ê–ó–ê–ú:")
        for i, (name, data) in enumerate(list(top_orders.items())[:3], 1):
            print(f"    {i}. {name}: {data['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤ ({data['total_sales']:,.0f} IDR)")
        
        top_efficiency = rest_perf['top_performers']['by_efficiency']
        print(f"  üíé –ü–û –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò (AOV):")
        for i, (name, data) in enumerate(list(top_efficiency.items())[:3], 1):
            print(f"    {i}. {name}: {data['avg_order_value']:,.0f} IDR –∑–∞ –∑–∞–∫–∞–∑")
    
    # –†–µ–∫–ª–∞–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    ads_intel = report.get('advertising_intelligence', {})
    if 'performance_comparison' in ads_intel:
        perf = ads_intel['performance_comparison']
        print(f"\nüì¢ –†–ï–ö–õ–ê–ú–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
        print(f"  üöÄ –≠—Ñ—Ñ–µ–∫—Ç —Ä–µ–∫–ª–∞–º—ã: +{perf['sales_lift']:.1f}% –∫ –ø—Ä–æ–¥–∞–∂–∞–º, +{perf['orders_lift']:.1f}% –∫ –∑–∞–∫–∞–∑–∞–º")
        print(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏ —Å —Ä–µ–∫–ª–∞–º–æ–π: {perf['avg_sales_with_ads']:,.0f} IDR/–¥–µ–Ω—å")
        print(f"  üí∞ –ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã: {perf['avg_sales_without_ads']:,.0f} IDR/–¥–µ–Ω—å")
        
        if 'advertiser_segments' in ads_intel:
            segments = ads_intel['advertiser_segments']
            print(f"\n  üìä –°–ï–ì–ú–ï–ù–¢–´ –†–ï–ö–õ–ê–ú–û–î–ê–¢–ï–õ–ï–ô:")
            print(f"    üî• –ê–∫—Ç–∏–≤–Ω—ã–µ (80%+ –¥–Ω–µ–π): {segments['heavy_advertisers']['count']} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            print(f"       ROAS: {segments['heavy_advertisers']['avg_roas']:.1f}")
            print(f"       –ü—Ä–æ–¥–∞–∂–∏: {segments['heavy_advertisers']['avg_daily_sales']:,.0f} IDR/–¥–µ–Ω—å")
            
            print(f"    üî∏ –£–º–µ—Ä–µ–Ω–Ω—ã–µ (20-80% –¥–Ω–µ–π): {segments['moderate_advertisers']['count']} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            print(f"       ROAS: {segments['moderate_advertisers']['avg_roas']:.1f}")
            
            print(f"    üîπ –°–ª–∞–±—ã–µ (<20% –¥–Ω–µ–π): {segments['light_advertisers']['count']} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            if segments['light_advertisers']['avg_roas'] > 0:
                print(f"       ROAS: {segments['light_advertisers']['avg_roas']:.1f}")
        
        if 'temporal_patterns' in ads_intel:
            patterns = ads_intel['temporal_patterns']
            if patterns.get('best_ads_day') and patterns.get('worst_ads_day'):
                weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                best_day = weekdays[patterns['best_ads_day']]
                worst_day = weekdays[patterns['worst_ads_day']]
                best_roas = patterns['roas_by_weekday'][patterns['best_ads_day']]
                worst_roas = patterns['roas_by_weekday'][patterns['worst_ads_day']]
                print(f"  üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã: {best_day} (ROAS: {best_roas:.1f})")
                print(f"  üìÖ –•—É–¥—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã: {worst_day} (ROAS: {worst_roas:.1f})")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    temporal = report.get('temporal_analysis', {})
    if 'comparisons' in temporal:
        print(f"\nüìà –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:")
        
        if 'year_over_year' in temporal['comparisons']:
            yoy = temporal['comparisons']['year_over_year']['changes_pct']
            print(f"  üìÖ –ì–û–î –ö –ì–û–î–£:")
            print(f"    üí∞ –ü—Ä–æ–¥–∞–∂–∏: {yoy['total_sales']:+.1f}%")
            print(f"    üì¶ –ó–∞–∫–∞–∑—ã: {yoy['total_orders']:+.1f}%")
            print(f"    ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {yoy['avg_rating']:+.1f}%")
            print(f"    üöö –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {yoy['avg_delivery_time']:+.1f}%")
            print(f"    üíé ROAS: {yoy['avg_roas']:+.1f}%")
        
        if 'quarter_over_quarter' in temporal['comparisons']:
            qoq = temporal['comparisons']['quarter_over_quarter']['changes_pct']
            print(f"  üìÖ –ö–í–ê–†–¢–ê–õ –ö –ö–í–ê–†–¢–ê–õ–£:")
            print(f"    üí∞ –ü—Ä–æ–¥–∞–∂–∏: {qoq['total_sales']:+.1f}%")
            print(f"    üì¶ –ó–∞–∫–∞–∑—ã: {qoq['total_orders']:+.1f}%")
            print(f"    ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {qoq['avg_rating']:+.1f}%")
    
    # –ê–Ω–æ–º–∞–ª–∏–∏
    anomalies = report.get('market_anomalies', {})
    if anomalies.get('summary'):
        summary = anomalies['summary']
        print(f"\nüö® –†–´–ù–û–ß–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò:")
        print(f"  üìä –ê–Ω–æ–º–∞–ª–∏–∏ –ø—Ä–æ–¥–∞–∂: {summary['total_sales_anomalies']}")
        print(f"  üì¢ –ê–Ω–æ–º–∞–ª–∏–∏ ROAS: {summary['total_roas_anomalies']}")
        print(f"  üöö –ê–Ω–æ–º–∞–ª–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {summary['total_delivery_anomalies']}")
        
        if anomalies.get('sales_anomalies'):
            print(f"\n  üî• –¢–û–ü-3 –ê–ù–û–ú–ê–õ–ò–ò –ü–†–û–î–ê–ñ:")
            for i, anomaly in enumerate(anomalies['sales_anomalies'][:3], 1):
                date_str = anomaly['date'].strftime('%Y-%m-%d') if hasattr(anomaly['date'], 'strftime') else str(anomaly['date'])[:10]
                print(f"    {i}. {anomaly['restaurant_name']} ({date_str}): {anomaly['total_sales']:,.0f} IDR")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.get('strategic_recommendations'):
        print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(report['strategic_recommendations'], 1):
            print(f"  {i}. {rec}")
    
    # –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
    if report.get('expert_hypotheses'):
        print(f"\nüí° –≠–ö–°–ü–ï–†–¢–ù–´–ï –ì–ò–ü–û–¢–ï–ó–´:")
        for i, hyp in enumerate(report['expert_hypotheses'], 1):
            print(f"  {i}. {hyp}")
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['metadata']['generated_at']}")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {report['metadata']['total_data_points']:,}")

def deep_analysis_command(args):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–∏—Å–∫–æ–º –∞–Ω–æ–º–∞–ª–∏–π –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    logger.info("=== –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ ===")
    
    try:
        from business_intelligence_system import generate_deep_analytics_report
        
        report = generate_deep_analytics_report(args.restaurant, args.start_date, args.end_date)
        
        if 'error' not in report:
            print(f"\nüîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó: {report['restaurant_name']}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {report['period']}")
            print("=" * 60)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = report['base_statistics']
            print(f"\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['total_sales']:,.0f} IDR")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {stats['avg_daily_sales']:,.0f} IDR")
            print(f"  ‚Ä¢ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {stats['total_orders']:,}")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}")
            print(f"  ‚Ä¢ –î–Ω–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['days_analyzed']}")
            
            # YoY —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if 'temporal_analysis' in report and 'comparisons' in report['temporal_analysis']:
                temporal = report['temporal_analysis']
                if 'year_over_year' in temporal['comparisons']:
                    yoy = temporal['comparisons']['year_over_year']['changes_pct']
                    print(f"\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ì–û–î –ö –ì–û–î–£ (vs 2024):")
                    if 'total_sales' in yoy:
                        change = yoy['total_sales']
                        arrow = "‚Üë" if change > 0 else "‚Üì"
                        print(f"  ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {arrow}{abs(change):.1f}%")
                    if 'total_orders' in yoy:
                        change = yoy['total_orders']
                        arrow = "‚Üë" if change > 0 else "‚Üì"
                        print(f"  ‚Ä¢ –ó–∞–∫–∞–∑—ã: {arrow}{abs(change):.1f}%")
                    if 'avg_rating' in yoy:
                        change = yoy['avg_rating']
                        arrow = "‚Üë" if change > 0 else "‚Üì"
                        print(f"  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {arrow}{abs(change):.1f}%")
            
            # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if 'competitor_analysis' in report and report['competitor_analysis']['top_performers']:
                competitors = report['competitor_analysis']
                print(f"\nüèÜ –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï (–¢–û–ü-5 –ü–û –ó–ê–ö–ê–ó–ê–ú):")
                for i, comp in enumerate(competitors['top_performers'], 1):
                    print(f"  {i}. {comp['restaurant_name']}: {comp['avg_orders_per_day']:.1f} –∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å")
                
                if competitors['current_restaurant_rank']:
                    print(f"\nüìä –ü–æ–∑–∏—Ü–∏—è {report['restaurant_name']}: #{competitors['current_restaurant_rank']} –º–µ—Å—Ç–æ")
            
            # –ê–Ω–æ–º–∞–ª–∏–∏
            if report['anomalies']:
                print(f"\nüö® –ê–ù–û–ú–ê–õ–ò–ò –ò –û–¢–ö–õ–û–ù–ï–ù–ò–Ø (—Ç–æ–ø-5):")
                for i, anomaly in enumerate(report['anomalies'][:5], 1):
                    print(f"  {i}. {anomaly['date']} - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {anomaly['deviation']}")
                    print(f"     –ü—Ä–æ–¥–∞–∂–∏: {anomaly['sales']:,.0f} IDR")
                    if anomaly['possible_causes']:
                        print(f"     –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        for cause in anomaly['possible_causes']:
                            print(f"       ‚Ä¢ {cause}")
                    print()
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlations = report['correlations']
            print(f"\nüîó –°–ò–õ–¨–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
            
            if correlations['strong_positive']:
                print(f"  üìà –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –°–í–Ø–ó–ò:")
                for corr in correlations['strong_positive']:
                    print(f"    ‚Ä¢ {corr['interpretation']} (r={corr['correlation']:.3f})")
            
            if correlations['strong_negative']:
                print(f"  üìâ –û–ë–†–ê–¢–ù–´–ï –°–í–Ø–ó–ò:")
                for corr in correlations['strong_negative']:
                    print(f"    ‚Ä¢ {corr['interpretation']} (r={corr['correlation']:.3f})")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            if correlations['interesting_patterns']:
                print(f"\nüéØ –ò–ù–¢–ï–†–ï–°–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
                for pattern in correlations['interesting_patterns']:
                    print(f"  ‚Ä¢ {pattern['description']}")
            
            # –¢—Ä–µ–Ω–¥—ã
            trends = report['trends']
            if trends:
                print(f"\nüìà –¢–†–ï–ù–î–´ –ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
                if 'monthly' in trends:
                    monthly = trends['monthly']
                    print(f"  ‚Ä¢ –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {monthly['best_month']} ({monthly['best_sales']:,.0f} IDR)")
                    print(f"  ‚Ä¢ –•—É–¥—à–∏–π –º–µ—Å—è—Ü: {monthly['worst_month']} ({monthly['worst_sales']:,.0f} IDR)")
                
                if 'roas_trend' in trends:
                    roas_trend = trends['roas_trend']
                    print(f"  ‚Ä¢ {roas_trend['interpretation']}")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ YoY –∞–Ω–∞–ª–∏–∑–∞
            if 'temporal_analysis' in report and 'comparisons' in report['temporal_analysis']:
                temporal = report['temporal_analysis']
                if 'year_over_year' in temporal['comparisons']:
                    yoy = temporal['comparisons']['year_over_year']['changes_pct']
                    print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                    
                    if yoy.get('total_sales', 0) < -10:
                        print(f"  üî¥ –¢–†–ï–í–û–ì–ê: –ü—Ä–æ–¥–∞–∂–∏ —É–ø–∞–ª–∏ –Ω–∞ {abs(yoy['total_sales']):.1f}% –≥–æ–¥ –∫ –≥–æ–¥—É!")
                        print(f"     –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                    elif yoy.get('total_sales', 0) > 30:
                        print(f"  üü¢ –£–°–ü–ï–•: –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ {yoy['total_sales']:.1f}% –≥–æ–¥ –∫ –≥–æ–¥—É!")
                        print(f"     –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏")
                    
                    if yoy.get('total_orders', 0) < -20:
                        print(f"  üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–∫–∞–∑—ã —É–ø–∞–ª–∏ –Ω–∞ {abs(yoy['total_orders']):.1f}% –≥–æ–¥ –∫ –≥–æ–¥—É!")
                        print(f"     –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —É—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
            
            print(f"\nüéâ –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –ò–ù–°–ê–ô–¢–û–í: {report['insights_count']}")
            print(f"üìÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['generated_at']}")
            
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {report['error']}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def info_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    logger.info("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ ===")
    
    try:
        if not os.path.exists(MODEL_PATH):
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"–ü—É—Ç—å: {MODEL_PATH}")
            print("–î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py train")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        predictor = load_trained_model()
        
        if predictor is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
            return False
        
        print("\n" + "="*50)
        print("ü§ñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò")
        print("="*50)
        print(f"üìä –¢–∏–ø –º–æ–¥–µ–ª–∏: {predictor.model_type}")
        print(f"üìà R¬≤ score: {predictor.training_metrics.get('test_r2', 'N/A'):.4f}")
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {predictor.training_metrics.get('feature_count', 'N/A')}")
        print(f"üìÖ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {predictor.training_metrics.get('training_date', 'N/A')}")
        print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(MODEL_PATH) / 1024 / 1024:.1f} MB")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return False

def list_restaurants_command(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    logger.info("=== –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ ===")
    
    try:
        restaurants = get_restaurants_list()
        
        if not restaurants:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return False
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
        for restaurant in restaurants:
            print(f"  ‚Ä¢ {restaurant}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
  python main.py analyze --restaurant "Canggu Surf Cafe" --date "2023-06-15"

  # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  python main.py weekly --restaurant "Canggu Surf Cafe" --weeks 4

  # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
  python main.py summary --restaurant "Canggu Surf Cafe"

  # –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
  python main.py deep --restaurant "Ika Canggu" --start-date "2024-04-01" --end-date "2024-06-30"

  # –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ —Ä–æ—Å—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
  python main.py causal --restaurant "Ika Canggu" --start-date "2024-04-01" --end-date "2024-06-30"
  python main.py causal --compare-all

  # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  python main.py market --start-date "2025-04-01" --end-date "2025-06-21"

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
  python main.py test --restaurant "Canggu Surf Cafe" --hypothesis "—Ä–µ–∫–ª–∞–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"

  # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
  python main.py train --model-type random_forest

  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
  python main.py info

  # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  python main.py list
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è')
    analyze_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    analyze_parser.add_argument('--date', required=True, help='–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    weekly_parser = subparsers.add_parser('weekly', help='–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    weekly_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    weekly_parser.add_argument('--weeks', type=int, default=4, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    summary_parser = subparsers.add_parser('summary', help='–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞')
    summary_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑')
    test_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    test_parser.add_argument('--hypothesis', required=True, help='–ì–∏–ø–æ—Ç–µ–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    test_parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    deep_parser = subparsers.add_parser('deep', help='–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏')
    deep_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    deep_parser.add_argument('--start-date', required=True, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    deep_parser.add_argument('--end-date', required=True, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    causal_parser = subparsers.add_parser('causal', help='–ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ —Ä–æ—Å—Ç–∞ –∑–∞–∫–∞–∑–æ–≤')
    causal_parser.add_argument('--restaurant', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)')
    causal_parser.add_argument('--start-date', help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    causal_parser.add_argument('--end-date', help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    causal_parser.add_argument('--compare-all', action='store_true', help='–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    market_parser = subparsers.add_parser('market', help='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    market_parser.add_argument('--start-date', required=True, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    market_parser.add_argument('--end-date', required=True, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    train_parser = subparsers.add_parser('train', help='–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    train_parser.add_argument('--model-type', choices=['random_forest', 'xgboost', 'linear'], 
                             default='random_forest', help='–¢–∏–ø –º–æ–¥–µ–ª–∏')
    train_parser.add_argument('--start-date', help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    train_parser.add_argument('--end-date', help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    train_parser.add_argument('--optimize', action='store_true', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    info_parser = subparsers.add_parser('info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    success = False
    
    if args.command == 'analyze':
        success = analyze_command(args)
    elif args.command == 'weekly':
        success = weekly_report_command(args)
    elif args.command == 'summary':
        success = executive_summary_command(args)
    elif args.command == 'test':
        success = test_hypothesis_command(args)
    elif args.command == 'deep':
        success = deep_analysis_command(args)
    elif args.command == 'causal':
        success = causal_analysis_command(args)
    elif args.command == 'market':
        success = market_intelligence_command(args)
    elif args.command == 'train':
        success = train_model_command(args)
    elif args.command == 'info':
        success = info_command(args)
    elif args.command == 'list':
        success = list_restaurants_command(args)
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()