#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
"""

import sqlite3
import sys
import pandas as pd
from datetime import datetime, timedelta

def check_database_compatibility(db_path: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
    
    print(f"üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•: {db_path}")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        print("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
        for table in tables:
            print(f"  ‚úÖ {table}")
        
        required_tables = ['restaurants', 'grab_stats', 'gojek_stats']
        missing_tables = [t for t in required_tables if t not in tables]
        
        if missing_tables:
            print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´: {missing_tables}")
            return False
        
        print("\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ restaurants
        cursor.execute("PRAGMA table_info(restaurants)")
        restaurant_columns = [row[1] for row in cursor.fetchall()]
        required_restaurant_cols = ['id', 'name']
        
        print(f"\n  üìç restaurants ({len(restaurant_columns)} –∫–æ–ª–æ–Ω–æ–∫):")
        for col in restaurant_columns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"    ‚Ä¢ {col}")
        if len(restaurant_columns) > 5:
            print(f"    ... –∏ –µ—â–µ {len(restaurant_columns) - 5}")
        
        missing_rest_cols = [c for c in required_restaurant_cols if c not in restaurant_columns]
        if missing_rest_cols:
            print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_rest_cols}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ grab_stats
        cursor.execute("PRAGMA table_info(grab_stats)")
        grab_columns = [row[1] for row in cursor.fetchall()]
        required_grab_cols = ['stat_date', 'sales', 'orders', 'restaurant_id']
        
        print(f"\n  üìä grab_stats ({len(grab_columns)} –∫–æ–ª–æ–Ω–æ–∫):")
        for col in grab_columns[:5]:
            print(f"    ‚Ä¢ {col}")
        if len(grab_columns) > 5:
            print(f"    ... –∏ –µ—â–µ {len(grab_columns) - 5}")
        
        missing_grab_cols = [c for c in required_grab_cols if c not in grab_columns]
        if missing_grab_cols:
            print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_grab_cols}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ gojek_stats
        cursor.execute("PRAGMA table_info(gojek_stats)")
        gojek_columns = [row[1] for row in cursor.fetchall()]
        required_gojek_cols = ['stat_date', 'sales', 'orders', 'restaurant_id']
        
        print(f"\n  üìä gojek_stats ({len(gojek_columns)} –∫–æ–ª–æ–Ω–æ–∫):")
        for col in gojek_columns[:5]:
            print(f"    ‚Ä¢ {col}")
        if len(gojek_columns) > 5:
            print(f"    ... –∏ –µ—â–µ {len(gojek_columns) - 5}")
        
        missing_gojek_cols = [c for c in required_gojek_cols if c not in gojek_columns]
        if missing_gojek_cols:
            print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_gojek_cols}")
            return False
        
        print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü —Å–æ–≤–º–µ—Å—Ç–∏–º–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìà –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        cursor.execute("SELECT COUNT(*) FROM restaurants")
        restaurant_count = cursor.fetchone()[0]
        print(f"  üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {restaurant_count}")
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        cursor.execute("SELECT MIN(stat_date), MAX(stat_date) FROM grab_stats")
        grab_dates = cursor.fetchone()
        if grab_dates[0]:
            print(f"  üìÖ Grab –¥–∞–Ω–Ω—ã–µ: {grab_dates[0]} - {grab_dates[1]}")
        
        cursor.execute("SELECT MIN(stat_date), MAX(stat_date) FROM gojek_stats")
        gojek_dates = cursor.fetchone()
        if gojek_dates[0]:
            print(f"  üìÖ Gojek –¥–∞–Ω–Ω—ã–µ: {gojek_dates[0]} - {gojek_dates[1]}")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM grab_stats")
        grab_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM gojek_stats")
        gojek_count = cursor.fetchone()[0]
        
        print(f"  üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {grab_count + gojek_count}")
        print(f"    ‚Ä¢ Grab: {grab_count}")
        print(f"    ‚Ä¢ Gojek: {gojek_count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ YoY –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if grab_dates[0] or gojek_dates[0]:
            earliest_date = min([d for d in [grab_dates[0], gojek_dates[0]] if d])
            latest_date = max([d for d in [grab_dates[1], gojek_dates[1]] if d])
            
            earliest = datetime.strptime(earliest_date, '%Y-%m-%d')
            latest = datetime.strptime(latest_date, '%Y-%m-%d')
            
            data_span = (latest - earliest).days
            
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô:")
            print(f"  üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {data_span} –¥–Ω–µ–π")
            
            if data_span >= 365:
                print("  ‚úÖ YoY —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print("  ‚ö†Ô∏è YoY —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º –≥–æ–¥ –¥–∞–Ω–Ω—ã—Ö)")
            
            if restaurant_count >= 3:
                print("  ‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω")
            else:
                print("  ‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (–º–∞–ª–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)")
        
        print(f"\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print(f"\nüöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
        print(f"export DATABASE_PATH='{db_path}'")
        print(f"python3 main.py list")
        print(f"python3 main.py market --start-date '{grab_dates[0] or gojek_dates[0]}' --end-date '{grab_dates[1] or gojek_dates[1]}'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 check_database_compatibility.py /path/to/client.db")
        sys.exit(1)
    
    db_path = sys.argv[1]
    
    if check_database_compatibility(db_path):
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞!")
        sys.exit(0)
    else:
        print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main()