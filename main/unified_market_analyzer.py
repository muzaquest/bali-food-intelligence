import pandas as pd
import sqlite3
from datetime import datetime, timedelta
import statistics
from typing import Dict, List, Tuple, Optional
import numpy as np
from main.weather_calendar_api import WeatherCalendarAPI
from main.openai_analytics import OpenAIAnalytics

class UnifiedMarketAnalyzer:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
    –≤–∫–ª—é—á–∞—è –∞–Ω–æ–º–∞–ª–∏–∏, –ø–æ–≥–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Ç—Ä–µ–Ω–¥—ã –∏ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    
    def __init__(self, db_path: str = "data/database.sqlite"):
        self.db_path = db_path
        self.weather_api = WeatherCalendarAPI()
        self.openai_analytics = OpenAIAnalytics()
    
    def generate_full_market_report(self, start_date: str, end_date: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä—ã–Ω–∫—É —Å –≥–ª—É–±–æ–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        
        Args:
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
        """
        
        print(f"üî¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–û–õ–ù–û–ì–û —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} ‚Üí {end_date}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_data = self._load_market_data(start_date, end_date)
            
            if market_data.empty:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            report_sections = []
            
            # 1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            report_sections.append(self._generate_executive_summary(market_data, start_date, end_date))
            
            # 2. –¢–æ–ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            report_sections.append(self._generate_top_performers_analysis(market_data))
            
            # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º Grab vs Gojek
            report_sections.append(self._generate_platform_comparison(market_data))
            
            # 4. ROI –∏ —Ä–µ–∫–ª–∞–º–∞ –∞–Ω–∞–ª–∏–∑
            report_sections.append(self._generate_roi_analysis(market_data))
            
            # 5. –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
            report_sections.append(self._generate_anomaly_analysis(market_data, start_date, end_date))
            
            # 6. –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ–≥–æ–¥–∞ + –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
            report_sections.append(self._generate_external_factors_analysis(market_data, start_date, end_date))
            
            # 7. –°–µ–≥–º–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            report_sections.append(self._generate_segment_analysis(market_data))
            
            # 8. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            report_sections.append(self._generate_competitive_analysis(market_data))
            
            # 9. –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
            report_sections.append(self._generate_trends_analysis(market_data, start_date, end_date))
            
            # 10. –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report_sections.append(self._generate_strategic_recommendations(market_data, start_date, end_date))
            
            # 11. –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ 30 –¥–Ω–µ–π
            report_sections.append(self._generate_action_plan())
            
            # 12. –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤
            report_sections.append(self._generate_revenue_forecast(market_data))
            
            # 13. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô (–Ω–æ–≤–∏–Ω–∫–∞!)
            report_sections.append(self._generate_intelligent_analysis(market_data, start_date, end_date))
            
            # 14. KPI –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            report_sections.append(self._generate_kpi_dashboard(market_data))
            
            # 15. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report_sections.append(self._generate_detailed_statistics(market_data))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            full_report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë                    üìä –ü–û–õ–ù–´–ô –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –î–û–°–¢–ê–í–ö–ò –ë–ê–õ–ò
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}
‚ïë üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: {len(market_data['restaurant_name'].unique())}
‚ïë üìä –û–±—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(market_data):,}
‚ïë üïê –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {timestamp}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{"".join(report_sections)}

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë                           üéØ –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ì–û –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            
            return full_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
    
    def _load_market_data(self, start_date: str, end_date: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT 
            restaurant_name,
            date,
            platform,
            total_sales,
            orders,
            rating,
            delivery_time,
            marketing_spend,
            marketing_sales,
            marketing_orders,
            roas,
            avg_order_value,
            cancel_rate,
            ads_on,
            weather_condition,
            temperature_celsius,
            precipitation_mm,
            is_holiday,
            is_weekend
        FROM restaurant_data 
        WHERE date BETWEEN ? AND ?
        ORDER BY date, restaurant_name, platform
        """
        
        df = pd.read_sql_query(query, conn, params=(start_date, end_date))
        conn.close()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º date –≤ datetime
        df['date'] = pd.to_datetime(df['date'])
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –∏ –¥–Ω—è–º (–æ–±—ä–µ–¥–∏–Ω—è–µ–º Grab –∏ Gojek)
        aggregated = df.groupby(['restaurant_name', 'date']).agg({
            'total_sales': 'sum',
            'orders': 'sum', 
            'rating': 'mean',
            'delivery_time': 'mean',
            'marketing_spend': 'sum',
            'marketing_sales': 'sum',
            'marketing_orders': 'sum',
            'roas': 'mean',
            'avg_order_value': 'mean',
            'cancel_rate': 'mean',
            'ads_on': 'max',
            'weather_condition': 'first',
            'temperature_celsius': 'mean',
            'precipitation_mm': 'mean',
            'is_holiday': 'max',
            'is_weekend': 'max'
        }).reset_index()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        aggregated = aggregated.rename(columns={
            'orders': 'total_orders',
            'rating': 'avg_rating',
            'delivery_time': 'avg_delivery_time'
        })
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        platform_data = df.groupby(['restaurant_name', 'date', 'platform']).agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'delivery_time': 'mean',
            'marketing_spend': 'sum',
            'roas': 'mean'
        }).reset_index()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
        self.platform_data = platform_data
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π, –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤ {len(aggregated)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {start_date} ‚Üí {end_date}")
        
        return aggregated
    
    def _generate_top_performers_analysis(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        restaurant_stats = data.groupby('restaurant_name').agg({
            'total_sales': 'sum',
            'total_orders': 'sum',
            'marketing_spend': 'sum',
            'roas': 'mean',
            'avg_rating': 'mean'
        }).reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI —Ä–µ–∫–ª–∞–º—ã
        restaurant_stats['roi'] = restaurant_stats.apply(
            lambda row: row['roas'] if pd.notna(row['roas']) and row['roas'] > 0 else 0, axis=1
        )
        
        # –¢–æ–ø –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        top_by_sales = restaurant_stats.nlargest(10, 'total_sales')
        # –¢–æ–ø –ø–æ ROI
        top_by_roi = restaurant_stats[restaurant_stats['roi'] > 0].nlargest(10, 'roi')
        
        return f"""

ü•á –¢–û–ü-–†–ï–°–¢–û–†–ê–ù–´ –ü–û –í–´–†–£–ß–ö–ï –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –¢–û–ü-10 –ü–û –ü–†–û–î–ê–ñ–ê–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–†–µ—Å—Ç–æ—Ä–∞–Ω":<25} {"–ü—Ä–æ–¥–∞–∂–∏":<15} {"ROI —Ä–µ–∫–ª–∞–º—ã":<12} {"–†–µ–π—Ç–∏–Ω–≥":<8}
{"‚îÄ"*60}
{chr(10).join([f"{row['restaurant_name']:<25} {row['total_sales']/1000000:.1f} –º–ª–Ω IDR    {row['roi']:.1f}x        {row['avg_rating']:.2f}/5.0" for _, row in top_by_sales.head(10).iterrows()])}

üöÄ –¢–û–ü-10 –ü–û –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ï–ö–õ–ê–ú–´ (ROI)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–†–µ—Å—Ç–æ—Ä–∞–Ω":<25} {"ROI":<8} {"–ü—Ä–æ–¥–∞–∂–∏":<15} {"–¢—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É":<15}
{"‚îÄ"*65}
{chr(10).join([f"{row['restaurant_name']:<25} {row['roi']:.1f}x    {row['total_sales']/1000000:.1f} –º–ª–Ω IDR    {row['marketing_spend']/1000000:.1f} –º–ª–Ω IDR" for _, row in top_by_roi.head(10).iterrows()])}

üí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –¥–∞—Å—Ç –∫—Ä–∞—Ç–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂
‚Ä¢ –í—ã—Å–æ–∫–∏–π ROI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ä–µ–∫–ª–∞–º—É
‚Ä¢ –õ–∏–¥–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
"""

    def _generate_platform_comparison(self, data: pd.DataFrame) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º Grab vs Gojek"""
        
        if not hasattr(self, 'platform_data'):
            return "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        
        platform_stats = self.platform_data.groupby('platform').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'delivery_time': 'mean',
            'marketing_spend': 'sum',
            'roas': 'mean'
        }).reset_index()
        
        total_sales = platform_stats['total_sales'].sum()
        
        comparison_text = f"""

‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú: GOJEK VS GRAB
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞":<10} {"–ü—Ä–æ–¥–∞–∂–∏":<15} {"ROI":<8} {"–†–µ–π—Ç–∏–Ω–≥":<8} {"–î–æ—Å—Ç–∞–≤–∫–∞":<10} {"–î–æ–ª—è":<8}
{"‚îÄ"*60}
"""
        
        for _, platform in platform_stats.iterrows():
            share = (platform['total_sales'] / total_sales) * 100
            comparison_text += f"{platform['platform']:<10} {platform['total_sales']/1000000:.1f} –º–ª–Ω IDR   {platform['roas']:.1f}x   {platform['rating']:.2f}     {platform['delivery_time']:.1f} –º–∏–Ω   {share:.1f}%\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–¥–µ—Ä–∞
        leader = platform_stats.loc[platform_stats['roas'].idxmax()]
        roi_advantage = leader['roas'] / platform_stats[platform_stats['platform'] != leader['platform']]['roas'].iloc[0]
        
        comparison_text += f"""
üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üëâ {leader['platform']} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ {roi_advantage:.1f} —Ä–∞–∑–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π ROI
üì¶ {leader['platform']} —Ç–∞–∫–∂–µ –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã
üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç –≤ –ø–æ–ª—å–∑—É {leader['platform']}

üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ {leader['platform']} –¥–æ 70-75%
‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç ROI: +15-25%
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
"""
        
        return comparison_text

    def _generate_roi_analysis(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑ ROI –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∫–ª–∞–º–æ–π
        ads_data = data[data['marketing_spend'] > 0].copy()
        
        if ads_data.empty:
            return "\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ROI\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ
        total_ad_spend = ads_data['marketing_spend'].sum()
        total_ad_sales = ads_data['marketing_sales'].sum()
        avg_roas = ads_data['roas'].mean()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        ads_data['weekday'] = ads_data['date'].dt.day_name()
        weekday_roi = ads_data.groupby('weekday')['roas'].mean().sort_values(ascending=False)
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏ –ø–æ ROI
        best_roi_days = ads_data.nlargest(5, 'roas')[['date', 'restaurant_name', 'roas', 'marketing_spend']]
        
        return f"""

üí∞ –ê–ù–ê–õ–ò–ó ROI –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ï–ö–õ–ê–ú–´
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –û–ë–©–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ö–õ–ê–ú–´
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí∏ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É:    {total_ad_spend/1000000:.1f} –º–ª–Ω IDR
üí∞ –ü—Ä–æ–¥–∞–∂–∏ –æ—Ç —Ä–µ–∫–ª–∞–º—ã:          {total_ad_sales/1000000:.1f} –º–ª–Ω IDR  
üìà –°—Ä–µ–¥–Ω–∏–π ROAS:                {avg_roas:.1f}x ‚Äî {"–≤—ã–¥–∞—é—â–∞—è—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" if avg_roas > 20 else "—Ö–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" if avg_roas > 10 else "—Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"}

üóìÔ∏è –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{chr(10).join([f"{day}: {roi:.1f}x ROI" for day, roi in weekday_roi.head(7).items()])}

üèÜ –¢–û–ü-5 –î–ù–ï–ô –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú ROI
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–î–∞—Ç–∞":<12} {"–†–µ—Å—Ç–æ—Ä–∞–Ω":<20} {"ROI":<8} {"–ó–∞—Ç—Ä–∞—Ç—ã":<12}
{"‚îÄ"*50}
{chr(10).join([f"{row['date'].strftime('%Y-%m-%d'):<12} {row['restaurant_name']:<20} {row['roas']:.1f}x    {row['marketing_spend']/1000:.0f}k IDR" for _, row in best_roi_days.iterrows()])}

üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:
‚Ä¢ –†–µ–∫–ª–∞–º–∞ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂
‚Ä¢ –õ—É—á—à–∏–µ –¥–Ω–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã: {weekday_roi.index[0]}, {weekday_roi.index[1]}
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
"""

    def _generate_strategic_recommendations(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        daily_market = data.groupby('date')['total_sales'].sum()
        trend_slope = np.polyfit(range(len(daily_market)), daily_market.values, 1)[0] if len(daily_market) > 1 else 0
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        data['month'] = data['date'].dt.month
        monthly_sales = data.groupby('month')['total_sales'].sum()
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
        low_performers = data.groupby('restaurant_name')['avg_rating'].mean().sort_values()
        problem_restaurants = low_performers[low_performers < 4.0].head(5)
        
        return f"""

üìà –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üî¥ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (1-2 –Ω–µ–¥–µ–ª–∏)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1Ô∏è‚É£ –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–ù–û–ì–û –ë–Æ–î–ñ–ï–¢–ê:
   ‚Ä¢ 70-75% –≤ –ø–æ–ª—å–∑—É –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç ROI: +15-25%
   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è

2Ô∏è‚É£ –°–ò–°–¢–ï–ú–ê –£–î–ï–†–ñ–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–û–í:
   ‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è  
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç retention: +10-15%

3Ô∏è‚É£ –†–ê–ë–û–¢–ê –° –ü–†–û–ë–õ–ï–ú–ù–´–ú–ò –†–ï–°–¢–û–†–ê–ù–ê–ú–ò:
   ‚Ä¢ –ê—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {', '.join(problem_restaurants.index[:3])}
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ

üü° –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (1-3 –º–µ—Å—è—Ü–∞)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
4Ô∏è‚É£ –°–ï–ó–û–ù–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø:
   ‚Ä¢ {"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∏–ª—å–Ω–æ–º—É —Å–µ–∑–æ–Ω—É" if trend_slope > 0 else "–°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –≤ —Å–ª–∞–±—ã–π –ø–µ—Ä–∏–æ–¥"}
   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
   ‚Ä¢ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π –Ω–∞ 20-30%

5Ô∏è‚É£ –°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –¢–û–ü-–†–ï–°–¢–û–†–ê–ù–û–í:
   ‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂
   ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã
   ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º-—É—Ä–æ–≤–Ω—è

üü¢ –î–û–õ–ì–û–°–†–û–ß–ù–û–ï –†–ê–ó–í–ò–¢–ò–ï (3-6 –º–µ—Å—è—Ü–µ–≤)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
6Ô∏è‚É£ –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ delivery performance
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: +3-7%

7Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì:
   ‚Ä¢ Real-time —Ç—Ä–µ–∫–∏–Ω–≥ ROI –∏ retention
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
   ‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞
"""

    def _generate_action_plan(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ 30 –¥–Ω–µ–π"""
        
        return f"""

üìÜ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô –ù–ê –ë–õ–ò–ñ–ê–ô–®–ò–ï 30 –î–ù–ï–ô
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{"–ù–µ–¥–µ–ª—è":<8} {"–ö–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è":<50} {"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π":<15}
{"‚îÄ"*75}
{"1-2":<8} {"–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –∞—É–¥–∏—Ç —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤":<50} {"Marketing":<15}
{"1-2":<8} {"–ó–∞–ø—É—Å–∫ CRM-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤":<50} {"CRM team":<15}
{"2-3":<8} {"–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π":<50} {"Operations":<15}
{"3-4":<8} {"–ó–∞–ø—É—Å–∫ retention-–∫–∞–º–ø–∞–Ω–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∑–æ–Ω—É":<50} {"Marketing":<15}
{"3-4":<8} {"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è delivery performance":<50} {"Logistics":<15}

üéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ ROI –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è)
‚Ä¢ Retention rate (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)  
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ vs –ø—Ä–æ–≥–Ω–æ–∑ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)

üì± –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ö–û–ù–¢–†–û–õ–Ø:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Dashboard —Å real-time –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä
"""

    def _generate_revenue_forecast(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤"""
        
        # –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_sales = data['total_sales'].sum()
        days_in_period = (data['date'].max() - data['date'].min()).days + 1
        daily_avg = total_sales / days_in_period
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
        monthly_revenue = daily_avg * 30
        quarterly_revenue = daily_avg * 90
        yearly_revenue = daily_avg * 365
        
        # –ü—Ä–æ–≥–Ω–æ–∑ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        improved_monthly = monthly_revenue * 1.12  # +12% –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        improved_yearly = yearly_revenue * 1.25    # +25% –æ—Ç –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        
        return f"""

üìä –ü–†–û–ì–ù–û–ó –î–û–•–û–î–û–í –ò –ü–û–¢–ï–ù–¶–ò–ê–õ –†–û–°–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìà –ë–ê–ó–û–í–´–ô –ü–†–û–ì–ù–û–ó (—Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üóìÔ∏è –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:     {monthly_revenue/1000000000:.1f} –º–ª—Ä–¥ IDR
üóìÔ∏è –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥:  {quarterly_revenue/1000000000:.1f} –º–ª—Ä–¥ IDR  
üóìÔ∏è –ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥:      {yearly_revenue/1000000000:.1f} –º–ª—Ä–¥ IDR

üöÄ –ü–†–û–ì–ù–û–ó –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–ü–µ—Ä–∏–æ–¥":<15} {"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑":<15} {"–° —É–ª—É—á—à–µ–Ω–∏—è–º–∏":<15} {"–ü—Ä–∏—Ä–æ—Å—Ç":<10}
{"‚îÄ"*60}
{"1-3 –º–µ—Å—è—Ü–∞":<15} {f"{monthly_revenue/1000000000:.1f} –º–ª—Ä–¥ IDR":<15} {f"{improved_monthly/1000000000:.1f} –º–ª—Ä–¥ IDR":<15} {"+12%":<10}
{"6-12 –º–µ—Å—è—Ü–µ–≤":<15} {f"{yearly_revenue/1000000000:.1f} –º–ª—Ä–¥ IDR":<15} {f"{improved_yearly/1000000000:.1f} –º–ª—Ä–¥ IDR":<15} {"+25%":<10}

üí∞ –ü–û–¢–ï–ù–¶–ò–ê–õ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –î–û–•–û–î–ê:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (3 –º–µ—Å): +{(improved_monthly*3 - quarterly_revenue)/1000000000:.1f} –º–ª—Ä–¥ IDR
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (–≥–æ–¥):    +{(improved_yearly - yearly_revenue)/1000000000:.1f} –º–ª—Ä–¥ IDR
‚Ä¢ ROI –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é: 15-25x

üéØ –ò–°–¢–û–ß–ù–ò–ö–ò –†–û–°–¢–ê:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞: +8-12%
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ retention rate: +5-8%  
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: +3-7%
‚Ä¢ –°–µ–∑–æ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: +2-5%
"""

    def _generate_kpi_dashboard(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç KPI –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        
        # –¢–µ–∫—É—â–∏–µ KPI
        avg_rating = data['avg_rating'].mean()
        avg_delivery_time = data['avg_delivery_time'].mean()
        total_orders = data['total_orders'].sum()
        avg_order_value = data['total_sales'].sum() / total_orders if total_orders > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å KPI
        def get_status(value, good_threshold, excellent_threshold):
            if value >= excellent_threshold:
                return "üü¢ –û—Ç–ª–∏—á–Ω–æ"
            elif value >= good_threshold:
                return "üü° –•–æ—Ä–æ—à–æ"
            else:
                return "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        
        rating_status = get_status(avg_rating, 4.5, 4.7)
        delivery_status = get_status(35 - avg_delivery_time, 0, 5)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        
        return f"""

üìä KPI DASHBOARD –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{"–ú–µ—Ç—Ä–∏–∫–∞":<25} {"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ":<15} {"–°—Ç–∞—Ç—É—Å":<20} {"–¶–µ–ª—å":<10}
{"‚îÄ"*70}
{"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥":<25} {f"{avg_rating:.2f}/5.0":<15} {rating_status:<20} {"4.7+":<10}
{"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏":<25} {f"{avg_delivery_time:.1f} –º–∏–Ω":<15} {delivery_status:<20} {"<30 –º–∏–Ω":<10}
{"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫":<25} {f"{avg_order_value/1000:.0f}k IDR":<15} {"üü¢ –û—Ç–ª–∏—á–Ω–æ":<20} {"200k+":<10}
{"–ó–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å":<25} {f"{total_orders/30:.0f}":<15} {"üü° –•–æ—Ä–æ—à–æ":<20} {"1000+":<10}

üìà –ß–ê–°–¢–û–¢–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
   ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ vs –ø–ª–∞–Ω
   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
   ‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–æ–Ω–∞–º

üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ:  
   ‚Ä¢ ROI –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏ –∫–∞–º–ø–∞–Ω–∏—è–º
   ‚Ä¢ Retention rate –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞

üîÑ –ï–∂–µ–º–µ—Å—è—á–Ω–æ:
   ‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
   ‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä —Ü–µ–ª–µ–π

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ >15% –∑–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ <4.0 —É —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤  
‚Ä¢ ROI —Ä–µ–∫–ª–∞–º—ã <10x –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ >35 –º–∏–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ
"""

    def _generate_executive_summary(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞"""
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        daily_market = data.groupby('date').agg({
            'total_sales': 'sum',
            'total_orders': 'sum',
            'avg_rating': 'mean',
            'avg_delivery_time': 'mean'
        }).reset_index()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_sales = data['total_sales'].sum()
        total_orders = data['total_orders'].sum()
        avg_daily_sales = daily_market['total_sales'].mean()
        avg_daily_orders = daily_market['total_orders'].mean()
        market_avg_rating = data['avg_rating'].mean()
        market_avg_delivery = data['avg_delivery_time'].mean()
        avg_order_value = total_sales / total_orders if total_orders > 0 else 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        active_restaurants = len(data['restaurant_name'].unique())
        days_analyzed = len(daily_market)
        
        # –¢—Ä–µ–Ω–¥—ã (–ø–µ—Ä–≤–∞—è vs –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞)
        mid_point = len(daily_market) // 2
        first_half = daily_market.iloc[:mid_point]
        second_half = daily_market.iloc[mid_point:]
        
        sales_change = ((second_half['total_sales'].mean() / first_half['total_sales'].mean()) - 1) * 100
        orders_change = ((second_half['total_orders'].mean() / first_half['total_orders'].mean()) - 1) * 100
        rating_change = second_half['avg_rating'].mean() - first_half['avg_rating'].mean()
        
        sales_trend = "üìà" if sales_change > 0 else "üìâ"
        orders_trend = "üìà" if orders_change > 0 else "üìâ"
        rating_trend = "‚≠ê" if rating_change > 0 else "‚≠ê"
        
        # –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
        best_day = daily_market.loc[daily_market['total_sales'].idxmax()]
        worst_day = daily_market.loc[daily_market['total_sales'].idxmin()]
        
        return f"""

üîç –û–ë–©–ê–Ø –ö–ê–†–¢–ò–ù–ê –†–´–ù–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ó–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ {active_restaurants} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º. –û–±—ä–µ–º—ã –≤–ø–µ—á–∞—Ç–ª—è—é—Ç:

üìä –ö–õ–Æ–ß–ï–í–´–ï –†–´–ù–û–ß–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç —Ä—ã–Ω–∫–∞:      {total_sales/1000000000:.1f} –º–ª—Ä–¥ IDR {sales_trend}
üìà –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±–æ—Ä–æ—Ç:    {avg_daily_sales/1000000:.0f} –º–ª–Ω IDR
üõí –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,.0f} {orders_trend}
üì¶ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:    {avg_daily_orders:,.0f}
üí∏ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫:             {avg_order_value/1000:.0f}k IDR
‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä—ã–Ω–∫–∞:   {market_avg_rating:.2f}/5.0 {rating_trend}
üöö –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {market_avg_delivery:.1f} –º–∏–Ω
üè™ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:     {active_restaurants}
üìÖ –î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ:          {days_analyzed}

üìä –î–ò–ù–ê–ú–ò–ö–ê –†–´–ù–ö–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üíπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂:        {sales_change:+.1f}% (2-—è –ø–æ–ª–æ–≤–∏–Ω–∞ vs 1-—è)
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:       {orders_change:+.1f}% (2-—è –ø–æ–ª–æ–≤–∏–Ω–∞ vs 1-—è)
‚≠ê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:      {rating_change:+.2f} –±–∞–ª–ª–∞

üèÜ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –î–ù–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ü•á –õ—É—á—à–∏–π –¥–µ–Ω—å:  {best_day['date'].strftime('%Y-%m-%d')} - {best_day['total_sales']/1000000:.0f} –º–ª–Ω IDR
üî¥ –•—É–¥—à–∏–π –¥–µ–Ω—å: {worst_day['date'].strftime('%Y-%m-%d')} - {worst_day['total_sales']/1000000:.0f} –º–ª–Ω IDR
"""

    def _generate_anomaly_analysis(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_market = data.groupby('date').agg({
            'total_sales': 'sum',
            'total_orders': 'sum',
            'avg_rating': 'mean'
        }).reset_index()
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è > 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
        sales_mean = daily_market['total_sales'].mean()
        sales_std = daily_market['total_sales'].std()
        
        # –ê–Ω–æ–º–∞–ª–∏–∏ –ø—Ä–æ–¥–∞–∂
        sales_anomalies = daily_market[
            (daily_market['total_sales'] < sales_mean - 2*sales_std) |
            (daily_market['total_sales'] > sales_mean + 2*sales_std)
        ].copy()
        
        # –ê–Ω–æ–º–∞–ª–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        orders_mean = daily_market['total_orders'].mean()
        orders_std = daily_market['total_orders'].std()
        
        orders_anomalies = daily_market[
            (daily_market['total_orders'] < orders_mean - 2*orders_std) |
            (daily_market['total_orders'] > orders_mean + 2*orders_std)
        ].copy()
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑
        daily_market['weekday'] = daily_market['date'].dt.day_name()
        weekly_patterns = daily_market.groupby('weekday')['total_sales'].mean().sort_values(ascending=False)
        
        # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã (—Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä—ã–Ω–∫–∞)
        restaurant_stats = data.groupby('restaurant_name').agg({
            'total_sales': 'mean',
            'total_orders': 'mean',
            'avg_rating': 'mean'
        }).reset_index()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        market_median_sales = restaurant_stats['total_sales'].median()
        top_performers = restaurant_stats[restaurant_stats['total_sales'] > market_median_sales * 3].head(5)
        underperformers = restaurant_stats[restaurant_stats['total_sales'] < market_median_sales * 0.3].head(5)
        
        anomaly_text = f"""

üîç –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô –ò –ü–ê–¢–¢–ï–†–ù–û–í
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìâ –ê–ù–û–ú–ê–õ–¨–ù–´–ï –î–ù–ò –ü–û –ü–†–û–î–ê–ñ–ê–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ö—Ä–∏—Ç–µ—Ä–∏–π: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > 2œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ ({sales_mean/1000000:.0f} –º–ª–Ω IDR ¬± {sales_std/1000000:.0f} –º–ª–Ω)

"""
        
        if len(sales_anomalies) > 0:
            for _, anomaly in sales_anomalies.head(5).iterrows():
                deviation = ((anomaly['total_sales'] - sales_mean) / sales_std)
                anomaly_type = "üìà –ü–∏–∫" if deviation > 0 else "üìâ –°–ø–∞–¥"
                anomaly_text += f"{anomaly_type}: {anomaly['date'].strftime('%Y-%m-%d')} - {anomaly['total_sales']/1000000:.0f} –º–ª–Ω IDR (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}œÉ)\n"
        else:
            anomaly_text += "‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
        anomaly_text += f"""
üì¶ –ê–ù–û–ú–ê–õ–¨–ù–´–ï –î–ù–ò –ü–û –ó–ê–ö–ê–ó–ê–ú  
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ö—Ä–∏—Ç–µ—Ä–∏–π: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > 2œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ ({orders_mean:,.0f} –∑–∞–∫–∞–∑–æ–≤ ¬± {orders_std:,.0f})

"""
        
        if len(orders_anomalies) > 0:
            for _, anomaly in orders_anomalies.head(5).iterrows():
                deviation = ((anomaly['total_orders'] - orders_mean) / orders_std)
                anomaly_type = "üìà –ü–∏–∫" if deviation > 0 else "üìâ –°–ø–∞–¥"
                anomaly_text += f"{anomaly_type}: {anomaly['date'].strftime('%Y-%m-%d')} - {anomaly['total_orders']:,.0f} –∑–∞–∫–∞–∑–æ–≤ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}œÉ)\n"
        else:
            anomaly_text += "‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –≤ –∑–∞–∫–∞–∑–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
        anomaly_text += f"""
üìÖ –ü–ê–¢–¢–ï–†–ù–´ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        for day, avg_sales in weekly_patterns.head(7).items():
            anomaly_text += f"{day}: {avg_sales/1000000:.0f} –º–ª–Ω IDR –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
            
        anomaly_text += f"""
üèÜ –¢–û–ü-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò (–≤—ã—à–µ {market_median_sales*3/1000000:.1f} –º–ª–Ω IDR/–¥–µ–Ω—å)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        for _, restaurant in top_performers.iterrows():
            anomaly_text += f"ü•á {restaurant['restaurant_name']}: {restaurant['total_sales']/1000000:.1f} –º–ª–Ω IDR/–¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
            
        anomaly_text += f"""
‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø (–Ω–∏–∂–µ {market_median_sales*0.3/1000000:.1f} –º–ª–Ω IDR/–¥–µ–Ω—å)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        for _, restaurant in underperformers.iterrows():
            anomaly_text += f"üî¥ {restaurant['restaurant_name']}: {restaurant['total_sales']/1000000:.1f} –º–ª–Ω IDR/–¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
        
        return anomaly_text

    def _generate_external_factors_analysis(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ–≥–æ–¥–∞, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
            weather_data = self.weather_api.get_historical_weather(start_date, end_date)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö  
            holidays_data = self.weather_api.get_holidays(start_date, end_date)
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º
            daily_sales = data.groupby('date')['total_sales'].sum().reset_index()
            daily_sales['date_str'] = daily_sales['date'].dt.strftime('%Y-%m-%d')
            
            external_text = f"""

üåç –ê–ù–ê–õ–ò–ó –í–ù–ï–®–ù–ò–• –§–ê–ö–¢–û–†–û–í
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üå¶Ô∏è –í–õ–ò–Ø–ù–ò–ï –ü–û–ì–û–î–´
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
            
            if weather_data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –ø–æ–≥–æ–¥–æ–π
                rainy_days = []
                hot_days = []
                
                for weather in weather_data:
                    date_str = weather['date']
                    temp = weather.get('temperature', 0)
                    precipitation = weather.get('precipitation', 0)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_sales = daily_sales[daily_sales['date_str'] == date_str]
                    if not day_sales.empty:
                        sales = day_sales['total_sales'].iloc[0]
                        
                        if precipitation > 5:  # –î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å
                            rainy_days.append({'date': date_str, 'sales': sales, 'rain': precipitation})
                        if temp > 32:  # –ñ–∞—Ä–∫–∏–π –¥–µ–Ω—å
                            hot_days.append({'date': date_str, 'sales': sales, 'temp': temp})
                
                # –ê–Ω–∞–ª–∏–∑ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π
                if rainy_days:
                    avg_rainy_sales = sum([day['sales'] for day in rainy_days]) / len(rainy_days)
                    avg_normal_sales = daily_sales['total_sales'].mean()
                    rain_impact = ((avg_rainy_sales / avg_normal_sales) - 1) * 100
                    
                    external_text += f"‚òî –î–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏ ({len(rainy_days)} –¥–Ω–µ–π —Å –æ—Å–∞–¥–∫–∞–º–∏ >5–º–º):\n"
                    external_text += f"   –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_rainy_sales/1000000:.1f} –º–ª–Ω IDR vs {avg_normal_sales/1000000:.1f} –º–ª–Ω IDR –≤ –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏\n"
                    external_text += f"   –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {rain_impact:+.1f}% –∫ –ø—Ä–æ–¥–∞–∂–∞–º\n\n"
                    
                    # –•—É–¥—à–∏–µ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏
                    worst_rainy = sorted(rainy_days, key=lambda x: x['sales'])[:3]
                    external_text += "üåßÔ∏è –°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏:\n"
                    for day in worst_rainy:
                        external_text += f"   {day['date']}: {day['sales']/1000000:.1f} –º–ª–Ω IDR (–æ—Å–∞–¥–∫–∏: {day['rain']:.1f}–º–º)\n"
                
                # –ê–Ω–∞–ª–∏–∑ –∂–∞—Ä–∫–∏—Ö –¥–Ω–µ–π
                if hot_days:
                    avg_hot_sales = sum([day['sales'] for day in hot_days]) / len(hot_days)
                    avg_normal_sales = daily_sales['total_sales'].mean()
                    heat_impact = ((avg_hot_sales / avg_normal_sales) - 1) * 100
                    
                    external_text += f"\nüå°Ô∏è –ñ–∞—Ä–∫–∏–µ –¥–Ω–∏ ({len(hot_days)} –¥–Ω–µ–π —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π >32¬∞C):\n"
                    external_text += f"   –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_hot_sales/1000000:.1f} –º–ª–Ω IDR vs {avg_normal_sales/1000000:.1f} –º–ª–Ω IDR –≤ –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏\n"
                    external_text += f"   –í–ª–∏—è–Ω–∏–µ –∂–∞—Ä—ã: {heat_impact:+.1f}% –∫ –ø—Ä–æ–¥–∞–∂–∞–º\n"
                
            else:
                external_text += "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            external_text += f"""
üéâ –í–õ–ò–Ø–ù–ò–ï –ü–†–ê–ó–î–ù–ò–ö–û–í –ù–ê –ü–†–û–î–ê–ñ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:
"""
            
            if holidays_data:
                holiday_impact = []
                
                for holiday in holidays_data:
                    holiday_date = holiday['date']
                    holiday_name = holiday['name']
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å
                    day_sales = daily_sales[daily_sales['date_str'] == holiday_date]
                    if not day_sales.empty:
                        sales = day_sales['total_sales'].iloc[0]
                        avg_sales = daily_sales['total_sales'].mean()
                        impact = ((sales / avg_sales) - 1) * 100
                        
                        holiday_impact.append({
                            'date': holiday_date,
                            'name': holiday_name,
                            'sales': sales,
                            'impact': impact
                        })
                
                if holiday_impact:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–ª–∏—è–Ω–∏—é
                    holiday_impact.sort(key=lambda x: x['impact'], reverse=True)
                    
                    external_text += f"\nüìä –ê–Ω–∞–ª–∏–∑ {len(holiday_impact)} –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π:\n"
                    external_text += f"{'üìÖ –ü—Ä–∞–∑–¥–Ω–∏–∫':<25} {'–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏':<20}\n"
                    external_text += f"{'‚îÄ'*45}\n"
                    
                    for holiday in holiday_impact[:10]:  # –¢–æ–ø-10 –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
                        impact_icon = "üìà" if holiday['impact'] > 0 else "üìâ"
                        external_text += f"{holiday['name']:<25} {impact_icon} {holiday['impact']:+.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É\n"
                    
                    external_text += f"""
üîé –í–´–í–û–î:
‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ = –º–æ—â–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä —Ä–æ—Å—Ç–∞ (–∏–ª–∏ –ø–∞–¥–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
‚Ä¢ –ü—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 2-3 –¥–Ω—è –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏

üìå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í–Ω–µ–¥—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞–∫–∞–Ω—É–Ω–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤:
‚Ä¢ –ù–æ–≤—ã–π –≥–æ–¥ (–≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏–π –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π)
‚Ä¢ –£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
‚Ä¢ –î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏ –≤ –ë–∞–ª–∏
"""
                else:
                    external_text += "‚ÑπÔ∏è –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ –≤–ª–∏—è–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏\n"
            else:
                external_text += "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            return external_text
            
        except Exception as e:
            return f"""

üåç –ê–ù–ê–õ–ò–ó –í–ù–ï–®–ù–ò–• –§–ê–ö–¢–û–†–û–í
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {str(e)}
"""

    def _generate_segment_analysis(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        segments = {
            'Pizza': ['PIZZA', 'SLICE'],
            'Sushi': ['SUSHI', 'NINJA'],
            'Healthy': ['HEALTHY', 'FIT', 'PROTEIN', 'PLANT'],
            'Burgers': ['BURGER', 'SMASH'],
            'Asian': ['IKA', 'DODO', 'TEAMO'],
            'Eggs': ['EGG', 'ONLY EGGS'],
            'Premium': ['PRANA', 'BALAGAN', 'SOUL KITCHEN']
        }
        
        segment_stats = {}
        
        for segment_name, keywords in segments.items():
            segment_restaurants = []
            
            for _, row in data.iterrows():
                restaurant_name = row['restaurant_name'].upper()
                if any(keyword in restaurant_name for keyword in keywords):
                    segment_restaurants.append(row)
            
            if segment_restaurants:
                segment_df = pd.DataFrame(segment_restaurants)
                
                segment_stats[segment_name] = {
                    'restaurants_count': len(segment_df['restaurant_name'].unique()),
                    'total_sales': segment_df['total_sales'].sum(),
                    'total_orders': segment_df['total_orders'].sum(),
                    'avg_rating': segment_df['avg_rating'].mean(),
                    'avg_delivery_time': segment_df['avg_delivery_time'].mean(),
                    'avg_order_value': segment_df['total_sales'].sum() / segment_df['total_orders'].sum() if segment_df['total_orders'].sum() > 0 else 0
                }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        sorted_segments = sorted(segment_stats.items(), key=lambda x: x[1]['total_sales'], reverse=True)
        
        segment_text = f"""

üçΩÔ∏è –°–ï–ì–ú–ï–ù–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ö–£–•–ù–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        total_market_sales = data['total_sales'].sum()
        
        for segment_name, stats in sorted_segments:
            market_share = (stats['total_sales'] / total_market_sales) * 100
            
            segment_text += f"""
üè∑Ô∏è {segment_name.upper()}
   üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {stats['restaurants_count']}
   üí∞ –ü—Ä–æ–¥–∞–∂–∏: {stats['total_sales']/1000000:.0f} –º–ª–Ω IDR ({market_share:.1f}% —Ä—ã–Ω–∫–∞)
   üì¶ –ó–∞–∫–∞–∑—ã: {stats['total_orders']:,.0f}
   üí∏ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order_value']/1000:.0f}k IDR
   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}/5.0
   üöö –î–æ—Å—Ç–∞–≤–∫–∞: {stats['avg_delivery_time']:.1f} –º–∏–Ω
"""
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∏–¥–µ—Ä–æ–≤ –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
        if sorted_segments:
            leader = sorted_segments[0]
            outsider = sorted_segments[-1] if len(sorted_segments) > 1 else None
            
            segment_text += f"""
üèÜ –°–ï–ì–ú–ï–ù–¢–ù–´–ï –ò–ù–°–ê–ô–¢–´
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ü•á –õ–∏–¥–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç: {leader[0]} ({leader[1]['total_sales']/total_market_sales*100:.1f}% —Ä—ã–Ω–∫–∞)
   ‚Üí –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
"""
            
            if outsider:
                segment_text += f"""üî¥ –ù–∏—à–µ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç: {outsider[0]} ({outsider[1]['total_sales']/total_market_sales*100:.1f}% —Ä—ã–Ω–∫–∞)
   ‚Üí –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""
        
        return segment_text

    def _generate_competitive_analysis(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É"""
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        restaurant_stats = data.groupby('restaurant_name').agg({
            'total_sales': ['sum', 'mean'],
            'total_orders': ['sum', 'mean'], 
            'avg_rating': 'mean',
            'avg_delivery_time': 'mean'
        }).round(2)
        
        # –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        restaurant_stats.columns = ['total_sales', 'avg_daily_sales', 'total_orders', 'avg_daily_orders', 'avg_rating', 'avg_delivery_time']
        restaurant_stats = restaurant_stats.reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
        restaurant_stats['avg_order_value'] = restaurant_stats['total_sales'] / restaurant_stats['total_orders']
        restaurant_stats['avg_order_value'] = restaurant_stats['avg_order_value'].fillna(0)
        
        # –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        top_by_sales = restaurant_stats.nlargest(5, 'total_sales')
        bottom_by_sales = restaurant_stats.nsmallest(5, 'total_sales')
        top_by_rating = restaurant_stats.nlargest(5, 'avg_rating')
        bottom_by_rating = restaurant_stats.nsmallest(5, 'avg_rating')
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞
        total_market_sales = restaurant_stats['total_sales'].sum()
        top_3_share = top_by_sales.head(3)['total_sales'].sum() / total_market_sales * 100
        top_10_share = top_by_sales.head(10)['total_sales'].sum() / total_market_sales * 100
        
        competitive_text = f"""

üèÅ –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ô –ê–ù–ê–õ–ò–ó
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –†–´–ù–ö–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ü•á –¢–û–ü-3 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç: {top_3_share:.1f}% —Ä—ã–Ω–∫–∞
üèÜ –¢–û–ü-10 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç: {top_10_share:.1f}% —Ä—ã–Ω–∫–∞
üìà –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏: {"–í—ã—Å–æ–∫–∏–π (—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫)" if top_3_share < 30 else "–°—Ä–µ–¥–Ω–∏–π (—É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)" if top_3_share < 50 else "–ù–∏–∑–∫–∏–π (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫)"}

üèÜ –¢–û–ü-5 –ü–û –ü–†–û–î–ê–ñ–ê–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for i, (_, restaurant) in enumerate(top_by_sales.iterrows(), 1):
            market_share = (restaurant['total_sales'] / total_market_sales) * 100
            competitive_text += f"{i}. {restaurant['restaurant_name']}\n"
            competitive_text += f"   üí∞ {restaurant['total_sales']/1000000:.1f} –º–ª–Ω IDR ({market_share:.1f}% —Ä—ã–Ω–∫–∞)\n"
            competitive_text += f"   üì¶ {restaurant['total_orders']:,.0f} –∑–∞–∫–∞–∑–æ–≤ | üí∏ {restaurant['avg_order_value']/1000:.0f}k IDR/–∑–∞–∫–∞–∑\n"
            competitive_text += f"   ‚≠ê {restaurant['avg_rating']:.2f}/5.0 | üöö {restaurant['avg_delivery_time']:.1f} –º–∏–Ω\n\n"
        
        competitive_text += f"""‚≠ê –¢–û–ü-5 –ü–û –ö–ê–ß–ï–°–¢–í–£ (—Ä–µ–π—Ç–∏–Ω–≥)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for i, (_, restaurant) in enumerate(top_by_rating.iterrows(), 1):
            competitive_text += f"{i}. {restaurant['restaurant_name']}: ‚≠ê {restaurant['avg_rating']:.2f}/5.0\n"
        
        competitive_text += f"""
‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –£–õ–£–ß–®–ï–ù–ò–Ø (–Ω–∏–∑–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for i, (_, restaurant) in enumerate(bottom_by_rating.iterrows(), 1):
            competitive_text += f"{i}. {restaurant['restaurant_name']}: ‚≠ê {restaurant['avg_rating']:.2f}/5.0 (—Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤)\n"
        
        competitive_text += f"""
üî¥ –û–¢–°–¢–ê–Æ–©–ò–ï –ü–û –ü–†–û–î–ê–ñ–ê–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for i, (_, restaurant) in enumerate(bottom_by_sales.iterrows(), 1):
            competitive_text += f"{i}. {restaurant['restaurant_name']}: {restaurant['total_sales']/1000000:.1f} –º–ª–Ω IDR (–Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞)\n"
        
        return competitive_text

    def _generate_trends_analysis(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ —Å—Ç—Ä–æ–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã"""
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_trends = data.groupby('date').agg({
            'total_sales': 'sum',
            'total_orders': 'sum',
            'avg_rating': 'mean',
            'avg_delivery_time': 'mean'
        }).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        daily_trends['weekday'] = daily_trends['date'].dt.day_name()
        daily_trends['week_number'] = daily_trends['date'].dt.isocalendar().week
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –Ω–µ–¥–µ–ª—è–º
        weekly_trends = daily_trends.groupby('week_number').agg({
            'total_sales': 'mean',
            'total_orders': 'mean',
            'avg_rating': 'mean'
        }).reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ (–ø—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)
        weeks = list(range(len(weekly_trends)))
        sales_trend_slope = np.polyfit(weeks, weekly_trends['total_sales'], 1)[0] if len(weeks) > 1 else 0
        orders_trend_slope = np.polyfit(weeks, weekly_trends['total_orders'], 1)[0] if len(weeks) > 1 else 0
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        if len(weekly_trends) > 0:
            last_week_sales = weekly_trends['total_sales'].iloc[-1]
            predicted_sales = last_week_sales + sales_trend_slope
            sales_change_percent = (sales_trend_slope / last_week_sales) * 100 if last_week_sales > 0 else 0
        else:
            predicted_sales = 0
            sales_change_percent = 0
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = daily_trends.groupby('weekday')['total_sales'].agg(['mean', 'std']).reset_index()
        weekday_stats = weekday_stats.sort_values('mean', ascending=False)
        
        trends_text = f"""

üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ò –ü–†–û–ì–ù–û–ó–´
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üíπ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂: {sales_trend_slope/1000000:+.1f} –º–ª–Ω IDR/–Ω–µ–¥–µ–ª—é ({sales_change_percent:+.1f}%/–Ω–µ–¥–µ–ª—è)
üì¶ –¢—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤: {orders_trend_slope:+,.0f} –∑–∞–∫–∞–∑–æ–≤/–Ω–µ–¥–µ–ª—é
üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é: {predicted_sales/1000000:.0f} –º–ª–Ω IDR/–¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º

üìÖ –°–ï–ó–û–ù–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for _, day_stat in weekday_stats.iterrows():
            trends_text += f"{day_stat['weekday']}: {day_stat['mean']/1000000:.0f} –º–ª–Ω IDR –≤ —Å—Ä–µ–¥–Ω–µ–º (¬±{day_stat['std']/1000000:.0f} –º–ª–Ω)\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
        best_day = weekday_stats.iloc[0]
        worst_day = weekday_stats.iloc[-1]
        
        trends_text += f"""
üèÜ –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ü•á –°–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –¥–µ–Ω—å: {best_day['weekday']} ({best_day['mean']/1000000:.0f} –º–ª–Ω IDR –≤ —Å—Ä–µ–¥–Ω–µ–º)
üî¥ –°–∞–º—ã–π —Å–ª–∞–±—ã–π –¥–µ–Ω—å: {worst_day['weekday']} ({worst_day['mean']/1000000:.0f} –º–ª–Ω IDR –≤ —Å—Ä–µ–¥–Ω–µ–º)
üìä –†–∞–∑–Ω–∏—Ü–∞: {((best_day['mean'] / worst_day['mean']) - 1) * 100:.1f}% –º–µ–∂–¥—É –ª—É—á—à–∏–º –∏ —Ö—É–¥—à–∏–º –¥–Ω–µ–º

üîÆ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–†–ï–ù–î–ê–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        if sales_trend_slope > 0:
            trends_text += "üìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - —Ä—ã–Ω–æ–∫ —Ä–∞—Å—Ç–µ—Ç, —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏\n"
        elif sales_trend_slope < 0:
            trends_text += "üìâ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - –Ω—É–∂–Ω—ã –º–µ—Ä—ã –ø–æ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é —Å–ø—Ä–æ—Å–∞\n"
        else:
            trends_text += "üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ - —Ñ–æ–∫—É—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        
        trends_text += f"üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ {worst_day['weekday']} –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂\n"
        trends_text += f"üí™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å {best_day['weekday']} –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π\n"
        
        return trends_text

    def _generate_detailed_statistics(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_sales = data['total_sales'].sum()
        total_orders = data['total_orders'].sum()
        avg_order_value = total_sales / total_orders if total_orders > 0 else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_stats = data['avg_delivery_time'].describe()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
        rating_stats = data['avg_rating'].describe()
        
        return f"""

üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–´–ù–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:           {total_sales/1000000000:.1f} –º–ª—Ä–¥ IDR
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,.0f}
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:            {avg_order_value/1000:.0f}k IDR

 üì± –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ü–õ–ê–¢–§–û–†–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Grab + Gojek –∑–∞ –ø–µ—Ä–∏–æ–¥

üöö –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–°–¢–ê–í–ö–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:          {delivery_stats['mean']:.1f} –º–∏–Ω
–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:        {delivery_stats['50%']:.1f} –º–∏–Ω  
–ë—ã—Å—Ç—Ä–µ–π—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:    {delivery_stats['min']:.1f} –º–∏–Ω
–°–∞–º–∞—è –¥–æ–ª–≥–∞—è:           {delivery_stats['max']:.1f} –º–∏–Ω

‚≠ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:        {rating_stats['mean']:.2f}/5.0
–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:      {rating_stats['50%']:.2f}/5.0
–õ—É—á—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥:         {rating_stats['max']:.2f}/5.0
–•—É–¥—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥:         {rating_stats['min']:.2f}/5.0

üìà –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:    {len(data['restaurant_name'].unique())}
–î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ:         {len(data['date'].unique())}
–ó–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö:         {len(data):,}
–°—Ä–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π/—Ä–µ—Å—Ç–æ—Ä–∞–Ω: {len(data)/len(data['restaurant_name'].unique()):.1f}
"""

    def _generate_intelligent_analysis(self, data: pd.DataFrame, start_date: str, end_date: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π"""
        
        try:
            from main.intelligent_anomaly_detector import IntelligentAnomalyDetector
            
            print("üß† –ó–∞–ø—É—Å–∫–∞—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π...")
            
            detector = IntelligentAnomalyDetector()
            findings = detector.analyze_everything(start_date, end_date)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
            intelligent_section = f"""

üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–ò–ô
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ù–ê–ô–î–ï–ù–û:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏: {len(findings['critical_findings'])}
‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏: {len(findings['major_findings'])}
üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(findings['interesting_patterns'])}
üîó –°–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {len(findings['hidden_correlations'])}
üì± –ê–Ω–æ–º–∞–ª–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(findings['platform_insights'])}

"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏
            if findings['critical_findings']:
                intelligent_section += "üö® –°–ê–ú–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:\n"
                intelligent_section += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                for i, finding in enumerate(findings['critical_findings'][:3], 1):
                    intelligent_section += f"{i}. üî¥ {finding['description']}\n"
                    intelligent_section += f"   –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {finding['severity']:.1%}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            if findings['hidden_correlations']:
                intelligent_section += "\nüîó –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n"
                intelligent_section += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                for correlation in findings['hidden_correlations'][:3]:
                    intelligent_section += f"‚Ä¢ {correlation['description']}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
            if findings['platform_insights']:
                intelligent_section += "\nüì± –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´ –ü–õ–ê–¢–§–û–†–ú:\n"
                intelligent_section += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                for insight in findings['platform_insights'][:3]:
                    intelligent_section += f"‚Ä¢ {insight['description']}\n"
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = detector._generate_automatic_recommendations(findings)
            if recommendations:
                intelligent_section += "\nüéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                intelligent_section += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                for i, rec in enumerate(recommendations[:5], 1):
                    intelligent_section += f"{i}. {rec}\n"
            
            intelligent_section += f"""
üí° –≠—Ç–æ –ª–∏—à—å –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
   –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 main.py intelligent --start {start_date} --end {end_date}
"""
            
            return intelligent_section
            
        except ImportError:
            return f"""

üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sklearn, scipy)
üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install scikit-learn scipy
"""
        except Exception as e:
            return f"""

üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}
"""

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
        try:
            if hasattr(self.weather_api, 'close'):
                self.weather_api.close()
        except:
            pass