#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–•
–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ DATA_FIELDS_USED.md
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)

# üìä –ë–ï–õ–´–ô –°–ü–ò–°–û–ö –ü–û–õ–ï–ô (—Å–æ–≥–ª–∞—Å–Ω–æ DATA_FIELDS_USED.md)
ALLOWED_SALES_FIELDS = {
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    'stat_date': 'date',  # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    'platform': 'platform',  # grab/gojek
    
    # –ü—Ä–æ–¥–∞–∂–∏ (sales - —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    'sales': 'total_sales',
    'orders': 'orders', 
    'avg_order_value': 'avg_order_value',
    
    # –î–æ—Å—Ç–∞–≤–∫–∞
    'delivery_time_minutes': 'delivery_time',
    'cancelled_orders': 'cancelled_orders',
    'delivery_success_rate': 'delivery_success_rate',
    
    # –†–µ–π—Ç–∏–Ω–≥
    'customer_rating': 'rating',
    'customer_complaints': 'customer_complaints',
    
    # –ö–ª–∏–µ–Ω—Ç—ã  
    'total_customers': 'total_customers_count',
    'new_customers': 'new_customers_count',
    'returning_customers': 'returning_customers_count',
    
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
    'marketing_spend': 'marketing_spend',
    'promotion_usage': 'promotion_usage',
    
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
    'peak_hour_orders': 'peak_hour_orders',
    'off_peak_orders': 'off_peak_orders', 
    'weekend_sales': 'weekend_sales',
    'weekday_sales': 'weekday_sales',
    'menu_items_sold': 'menu_items_sold',
    'staff_efficiency': 'staff_efficiency',
    'kitchen_capacity_utilization': 'kitchen_capacity_utilization'
}

# ‚ùå –ò–°–ö–õ–Æ–ß–ê–ï–ú–´–ï –ü–û–õ–Ø (–º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ)
FORBIDDEN_FIELDS = {
    'id', 'restaurant_id',  # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏
    'most_popular_item',    # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    'seasonal_boost',       # –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    'competitor_impact'     # –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
}

def validate_features(df: pd.DataFrame) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
    forbidden_future_cols = [col for col in df.columns 
                           if 'lag_minus' in col or 'future' in col]
    if forbidden_future_cols:
        raise ValueError(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –±—É–¥—É—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {forbidden_future_cols}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    forbidden_tech_cols = [col for col in df.columns 
                          if col in ['id', 'restaurant_id'] and 'lag' not in col]
    if forbidden_tech_cols:
        raise ValueError(f"‚ùå –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏: {forbidden_tech_cols}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if 'total_sales' not in df.columns:
        raise ValueError("‚ùå –ù–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'total_sales'")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_cols = [col for col in df.columns if col not in ['date', 'restaurant_name', 'total_sales']]
    feature_count = len(feature_cols)
    
    if not (20 <= feature_count <= 150):
        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_count}")
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_count}")

def load_restaurant_data_fixed(restaurant_name: Optional[str] = None) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    
    Args:
        restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–µ—Å–ª–∏ None - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ)
        
    Returns:
        DataFrame —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    
    logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant_name or '–í–°–ï'}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database.sqlite')
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º platform - –µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é)
        grab_fields = [field for field in ALLOWED_SALES_FIELDS.keys() if field != 'platform']
        grab_field_str = ', '.join([f'g.{field}' for field in grab_fields])
        gojek_field_str = ', '.join([f'j.{field}' for field in grab_fields])
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"""
        SELECT 
            r.name as restaurant_name,
            {grab_field_str},
            'grab' as platform
        FROM grab_stats g
        JOIN restaurants r ON g.restaurant_id = r.id
        
        UNION ALL
        
        SELECT 
            r.name as restaurant_name,
            {gojek_field_str}, 
            'gojek' as platform
        FROM gojek_stats j
        JOIN restaurants r ON j.restaurant_id = r.id
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if restaurant_name:
            # –î–ª—è UNION –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –≤ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            parts = base_query.split("UNION ALL")
            part1 = parts[0].strip() + f" WHERE r.name = '{restaurant_name}'"
            part2 = parts[1].strip() + f" WHERE r.name = '{restaurant_name}'"
            base_query = f"{part1}\n        UNION ALL\n        {part2}"
            
        base_query += " ORDER BY stat_date, restaurant_name, platform"
        
        logger.info(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...")
        df = pd.read_sql_query(base_query, conn)
        conn.close()
        
        if df.empty:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant_name}")
            return df
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        rename_mapping = {old: new for old, new in ALLOWED_SALES_FIELDS.items() if old != new}
        df = df.rename(columns=rename_mapping)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        df['date'] = pd.to_datetime(df['date'])
        df['platform'] = df['platform'].astype('category')
        df['restaurant_name'] = df['restaurant_name'].astype('category')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        df[numeric_cols] = df[numeric_cols].fillna(0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏
        if df['total_sales'].isnull().all():
            raise ValueError("‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è total_sales —Ä–∞–≤–Ω—ã NULL")
            
        if (df['total_sales'] < 0).any():
            logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 0")
            df.loc[df['total_sales'] < 0, 'total_sales'] = 0
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {df['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} - {df['date'].max()}")
        logger.info(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–¥–∞–∂: {df['total_sales'].min():,.0f} - {df['total_sales'].max():,.0f}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def add_weather_data(df: pd.DataFrame) -> pd.DataFrame:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É"""
    
    logger.info("üå¶Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –∏–∑ API)
    weather_data = []
    dates = df['date'].dt.date.unique()
    
    for date in dates:
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        base_temp = 28 + np.random.normal(0, 3)  # –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ë–∞–ª–∏
        
        weather_record = {
            'date': date,
            'temperature_celsius': base_temp,
            'feels_like_celsius': base_temp + np.random.uniform(-2, 4),
            'humidity_percent': np.random.uniform(60, 90),
            'precipitation_mm': np.random.exponential(1) if np.random.random() < 0.3 else 0,
            'rain_probability': np.random.uniform(0, 1),
            'wind_speed_kmh': np.random.uniform(5, 25),
            'weather_condition': np.random.choice(['clear', 'cloudy', 'rainy'], p=[0.5, 0.3, 0.2])
        }
        
        weather_data.append(weather_record)
    
    weather_df = pd.DataFrame(weather_data)
    weather_df['date'] = pd.to_datetime(weather_df['date'])
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    weather_df['is_rainy'] = (weather_df['precipitation_mm'] > 1).astype(int)
    weather_df['is_hot'] = (weather_df['temperature_celsius'] > 30).astype(int)
    weather_df['is_humid'] = (weather_df['humidity_percent'] > 80).astype(int)
    weather_df['is_windy'] = (weather_df['wind_speed_kmh'] > 15).astype(int)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    df = df.merge(weather_df, on='date', how='left')
    
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(weather_df.columns)-1} –ø–æ–≥–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return df

def add_calendar_data(df: pd.DataFrame) -> pd.DataFrame:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É"""
    
    logger.info("üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['day_of_week'] = df['date'].dt.dayofweek
    df['month'] = df['date'].dt.month  
    df['quarter'] = df['date'].dt.quarter
    df['week_of_year'] = df['date'].dt.isocalendar().week
    df['day_of_year'] = df['date'].dt.dayofyear
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    df['is_weekend'] = (df['day_of_week'].isin([5, 6])).astype(int)
    df['is_month_start'] = (df['date'].dt.day <= 3).astype(int)
    df['is_month_end'] = (df['date'].dt.day >= 28).astype(int)
    
    # –î–Ω–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã (1-–µ –∏ 15-–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)
    df['is_pay_day'] = (df['date'].dt.day.isin([1, 15])).astype(int)
    
    # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ (—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ API)
    holiday_dates = [
        '2025-01-01',  # –ù–æ–≤—ã–π –≥–æ–¥
        '2025-04-09',  # –°—Ç—Ä–∞—Å—Ç–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞  
        '2025-05-01',  # –î–µ–Ω—å —Ç—Ä—É–¥–∞
        '2025-05-09',  # –í–æ–∑–Ω–µ—Å–µ–Ω–∏–µ
        '2025-06-01',  # –ü–∞–Ω—á–∞—Å–∏–ª–∞
        '2025-08-17',  # –î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ]
    
    holiday_dates = pd.to_datetime(holiday_dates)
    df['is_holiday'] = df['date'].isin(holiday_dates).astype(int)
    
    # –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (–∏—é–Ω—å-—Å–µ–Ω—Ç—è–±—Ä—å, –¥–µ–∫–∞–±—Ä—å-—è–Ω–≤–∞—Ä—å)
    df['is_tourist_high_season'] = df['month'].isin([6, 7, 8, 9, 12, 1]).astype(int)
    
    # –¶–∏–∫–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    df['sin_day_of_year'] = np.sin(2 * np.pi * df['day_of_year'] / 365)
    df['cos_day_of_year'] = np.cos(2 * np.pi * df['day_of_year'] / 365)
    df['sin_day_of_week'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
    df['cos_day_of_week'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
    
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {15} –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return df

def get_restaurant_data(restaurant_name: Optional[str] = None) -> pd.DataFrame:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    
    Args:
        restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        
    Returns:
        DataFrame —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = load_restaurant_data_fixed(restaurant_name)
        
        if df.empty:
            return df
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        df = add_weather_data(df)
        df = add_calendar_data(df)
        
        # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫
        df = df.sort_values(['restaurant_name', 'platform', 'date']).reset_index(drop=True)
        
        # 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        validate_features(df)
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def get_multiple_restaurants(restaurant_names: List[str]) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(restaurant_names)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    all_data = []
    
    for restaurant in restaurant_names:
        try:
            data = get_restaurant_data(restaurant)
            if not data.empty:
                all_data.append(data)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {restaurant}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {restaurant}: {e}")
    
    if not all_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
        return pd.DataFrame()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    combined_df = pd.concat(all_data, ignore_index=True)
    
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(combined_df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {combined_df['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    return combined_df

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    import logging
    logging.basicConfig(level=logging.INFO)
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ó–ê–ì–†–£–ó–ß–ò–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    try:
        df = get_restaurant_data("Ika Canggu")
        print(f"‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} - {df['date'].max()}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    try:
        df_all = get_restaurant_data()
        print(f"‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: {len(df_all)} –∑–∞–ø–∏—Å–µ–π, {df_all['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")