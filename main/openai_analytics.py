#!/usr/bin/env python3
"""
ü§ñ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° OPENAI –î–õ–Ø –£–ì–õ–£–ë–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
"""

import os
import json
import pandas as pd
from typing import Dict, List, Any, Optional

try:
    import openai
    HAS_OPENAI = True
except ImportError:
    HAS_OPENAI = False

class OpenAIAnalytics:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.model = "gpt-4"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-3.5-turbo –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        
        if self.api_key and HAS_OPENAI:
            openai.api_key = self.api_key
            self.enabled = True
        else:
            self.enabled = False
    
    def generate_business_insights(self, restaurant_data: Dict[str, Any]) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é OpenAI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        """
        
        if not self.enabled:
            return self._get_fallback_insights(restaurant_data)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._prepare_analysis_prompt(restaurant_data)
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –ë–∞–ª–∏. 
                        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                        –£—á–∏—Ç—ã–≤–∞–π —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ë–∞–ª–∏: —Ç—É—Ä–∏–∑–º, –ø–æ–≥–æ–¥—É, –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏."""
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=1500,
                temperature=0.3
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            insights = self._parse_openai_response(response.choices[0].message.content)
            
            return insights
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return self._get_fallback_insights(restaurant_data)
    
    def analyze_competitive_positioning(self, restaurant_name: str, market_data: pd.DataFrame) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI
        """
        
        if not self.enabled:
            return self._get_fallback_positioning(restaurant_name, market_data)
        
        try:
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
            market_summary = self._prepare_market_summary(restaurant_name, market_data)
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant_name} –Ω–∞ —Ä—ã–Ω–∫–µ –ë–∞–ª–∏.
            
            –î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ:
            {market_summary}
            
            –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
            1. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º
            3. –ó–æ–Ω–∞–º —Ä–æ—Å—Ç–∞
            4. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±–≥–æ–Ω–∞ –ª–∏–¥–µ—Ä–æ–≤
            """
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É"
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=800,
                temperature=0.4
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return self._get_fallback_positioning(restaurant_name, market_data)
    
    def generate_promotional_strategies(self, restaurant_data: Dict[str, Any]) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        
        if not self.enabled:
            return self._get_fallback_strategies(restaurant_data)
        
        try:
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–π 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
            
            –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
            - –ü—Ä–æ–¥–∞–∂–∏: {restaurant_data.get('total_sales', 0):,} IDR
            - ROAS: {restaurant_data.get('roas', 0):.1f}
            - –†–µ–π—Ç–∏–Ω–≥: {restaurant_data.get('rating', 0):.1f}/5.0
            - –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {restaurant_data.get('delivery_time', 0):.1f} –º–∏–Ω
            - –õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {restaurant_data.get('best_day', 'N/A')}
            
            –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
            1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
            2. –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é  
            3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            4. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            """
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=1000,
                temperature=0.5
            )
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            strategies = self._parse_strategies(response.choices[0].message.content)
            
            return strategies
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return self._get_fallback_strategies(restaurant_data)
    
    def predict_future_trends(self, historical_data: pd.DataFrame) -> Dict[str, Any]:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é AI –∞–Ω–∞–ª–∏–∑–∞
        """
        
        if not self.enabled:
            return self._get_fallback_predictions()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            trends_summary = self._analyze_historical_patterns(historical_data)
            
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∂–∏ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –º–µ—Å—è—Ü–∞:
            
            –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
            {trends_summary}
            
            –ü—Ä–µ–¥—Å–∫–∞–∂–∏:
            1. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ (%)
            2. –õ—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            3. –í–ª–∏—è–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
            """
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=800,
                temperature=0.2
            )
            
            predictions = self._parse_predictions(response.choices[0].message.content)
            
            return predictions
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return self._get_fallback_predictions()
    
    def _prepare_analysis_prompt(self, data: Dict[str, Any]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        return f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã:
        
        –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
        - –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {data.get('total_sales', 0):,} IDR
        - –°—Ä–µ–¥–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {data.get('daily_avg', 0):,} IDR  
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {data.get('total_orders', 0):,}
        - –†–µ–π—Ç–∏–Ω–≥: {data.get('avg_rating', 0):.1f}/5.0
        - –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('avg_delivery_time', 0):.1f} –º–∏–Ω
        - ROAS: {data.get('roas', 0):.1f}
        
        –ê–ù–û–ú–ê–õ–ò–ò:
        {data.get('anomalies_summary', '–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π')}
        
        –ö–û–ù–ö–£–†–ï–ù–¢–´:
        {data.get('market_position', '–î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}
        
        –î–∞–π 3 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–∞ –∏ 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        """
    
    def _parse_openai_response(self, response_text: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            insights = {}
            
            if "–ò–ù–°–ê–ô–¢–´" in response_text or "–∏–Ω—Å–∞–π—Ç—ã" in response_text:
                insights_section = response_text.split("–ò–ù–°–ê–ô–¢–´")[1] if "–ò–ù–°–ê–ô–¢–´" in response_text else response_text
                insights['insights'] = insights_section.split("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")[0] if "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò" in insights_section else insights_section[:500]
            
            if "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò" in response_text or "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in response_text:
                recommendations_section = response_text.split("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")[1] if "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò" in response_text else ""
                insights['recommendations'] = recommendations_section[:500]
            
            if not insights:
                insights['analysis'] = response_text[:1000]
            
            return insights
            
        except Exception:
            return {'analysis': response_text[:1000]}
    
    def _get_fallback_insights(self, data: Dict[str, Any]) -> Dict[str, str]:
        """Fallback –∏–Ω—Å–∞–π—Ç—ã –±–µ–∑ OpenAI"""
        
        insights = []
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ ROAS
        roas = data.get('roas', 0)
        if roas > 15:
            insights.append(f"üöÄ –û—Ç–ª–∏—á–Ω—ã–π ROAS {roas:.1f} - —Ä–µ–∫–ª–∞–º–∞ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞")
            recommendations.append("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
        elif roas < 5:
            insights.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π ROAS {roas:.1f} - —Ä–µ–∫–ª–∞–º–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞")
            recommendations.append("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating = data.get('avg_rating', 0)
        if rating > 4.7:
            insights.append(f"‚≠ê –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {rating:.1f} - –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
            recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ")
        elif rating < 4.0:
            insights.append(f"üìâ –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {rating:.1f} - –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º")
            recommendations.append("–°—Ä–æ—á–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_time = data.get('avg_delivery_time', 0)
        if delivery_time > 40:
            insights.append(f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ {delivery_time:.1f}–º–∏–Ω")
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        return {
            'insights': '\n'.join(insights),
            'recommendations': '\n'.join(recommendations)
        }
    
    def _get_fallback_positioning(self, name: str, market_data: pd.DataFrame) -> str:
        """Fallback –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        if market_data.empty:
            return f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {name} —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ"
        
        restaurant_data = market_data[market_data['restaurant_name'] == name]
        if restaurant_data.empty:
            return f"–†–µ—Å—Ç–æ—Ä–∞–Ω {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞"
        
        position = restaurant_data.index[0] + 1
        total = len(market_data)
        
        return f"""
        –ü–æ–∑–∏—Ü–∏—è {name} –Ω–∞ —Ä—ã–Ω–∫–µ: #{position} –∏–∑ {total}
        
        –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        ‚Ä¢ –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–æ–ø-3 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª–∏–¥–µ—Ä–æ–≤
        ‚Ä¢ –ù–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –Ω–∏—à—É –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏–∏
        """
    
    def _get_fallback_strategies(self, data: Dict[str, Any]) -> List[str]:
        """Fallback —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        strategies = [
            "üéØ –¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
            "üçî –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∑–∫–æ—Å–µ–∑–æ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã", 
            "‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏",
            "üåü –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –æ—Ç–µ–ª—è–º–∏ –∏ –≥–µ—Å—Ç—Ö–∞—É—Å–∞–º–∏"
        ]
        
        return strategies
    
    def _get_fallback_predictions(self) -> Dict[str, Any]:
        """Fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        
        return {
            'growth_forecast': "–ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
            'seasonal_trends': "–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Å OpenAI API",
            'recommendations': [
                "–°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
            ]
        }
    
    def _prepare_market_summary(self, restaurant_name: str, market_data: pd.DataFrame) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É"""
        
        if market_data.empty:
            return "–î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # –¢–æ–ø-5 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        top_5 = market_data.head(5)[['restaurant_name', 'total_sales', 'avg_rating']].to_string()
        
        # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_row = market_data[market_data['restaurant_name'] == restaurant_name]
        position = restaurant_row.index[0] + 1 if not restaurant_row.empty else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        return f"""
        –¢–û–ü-5 –†–ï–°–¢–û–†–ê–ù–û–í:
        {top_5}
        
        –ü–û–ó–ò–¶–ò–Ø {restaurant_name}: #{position}
        """
    
    def _analyze_historical_patterns(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        
        if data.empty:
            return "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_sales = data['total_sales'].mean()
        growth_trend = "—Ä–∞—Å—Ç—É—â–∏–π" if data['total_sales'].iloc[-1] > data['total_sales'].iloc[0] else "–ø–∞–¥–∞—é—â–∏–π"
        
        return f"""
        –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR
        –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: {growth_trend}
        –ü–µ—Ä–∏–æ–¥–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(data)}
        """
    
    def _parse_strategies(self, response_text: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = response_text.split('\n')
        strategies = []
        
        for line in lines:
            if any(marker in line for marker in ['1.', '2.', '3.', '4.', '5.', '-', '‚Ä¢']):
                strategies.append(line.strip())
        
        return strategies[:5] if strategies else self._get_fallback_strategies({})
    
    def _parse_predictions(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        
        return {
            'forecast_summary': response_text[:500],
            'confidence': 'medium',
            'recommendations': ['–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã', '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é']
        }