#!/usr/bin/env python3
"""
üîß –ê–î–ê–ü–¢–ï–† –î–ê–ù–ù–´–•
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)

def load_restaurant_data(restaurant_name: str = None, start_date: str = None, end_date: str = None) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (grab_stats + gojek_stats)
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–Ω–µ
        conn = sqlite3.connect('database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Grab
        grab_query = '''
        SELECT g.*, r.name as restaurant_name, 'grab' as platform
        FROM grab_stats g
        JOIN restaurants r ON g.restaurant_id = r.id
        '''
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Gojek  
        gojek_query = '''
        SELECT g.*, r.name as restaurant_name, 'gojek' as platform
        FROM gojek_stats g
        JOIN restaurants r ON g.restaurant_id = r.id
        '''
        
        conditions = []
        params_grab = []
        params_gojek = []
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        if restaurant_name:
            conditions.append("r.name = ?")
            params_grab.append(restaurant_name)
            params_gojek.append(restaurant_name)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
        if start_date:
            conditions.append("g.stat_date >= ?")
            params_grab.append(start_date)
            params_gojek.append(start_date)
            
        if end_date:
            conditions.append("g.stat_date <= ?")
            params_grab.append(end_date)
            params_gojek.append(end_date)
        
        if conditions:
            condition_str = " WHERE " + " AND ".join(conditions)
            grab_query += condition_str
            gojek_query += condition_str
        
        grab_query += " ORDER BY g.stat_date, g.restaurant_id"
        gojek_query += " ORDER BY g.stat_date, g.restaurant_id"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        grab_df = pd.read_sql_query(grab_query, conn, params=params_grab)
        gojek_df = pd.read_sql_query(gojek_query, conn, params=params_gojek)
        
        conn.close()
        
        if grab_df.empty and gojek_df.empty:
            logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return pd.DataFrame()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        combined_df = pd.concat([grab_df, gojek_df], ignore_index=True)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        df_transformed = transform_real_data_format(combined_df)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_transformed)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {df_transformed['restaurant_name'].nunique()} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        return df_transformed
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def transform_real_data_format(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã
    """
    if df.empty:
        return df
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    column_mapping = {
        'stat_date': 'date',
        'sales': 'total_sales',
        'orders': 'orders',
        'rating': 'rating',
        'ads_sales': 'marketing_sales',
        'ads_spend': 'marketing_spend',
        'ads_orders': 'marketing_orders',
        'offline_rate': 'offline_rate',
        'cancelation_rate': 'cancel_rate'
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    df_transformed = df.copy()
    for old_col, new_col in column_mapping.items():
        if old_col in df_transformed.columns:
            df_transformed[new_col] = df_transformed[old_col]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    df_transformed = add_calculated_fields_real(df_transformed)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    df_transformed['date'] = pd.to_datetime(df_transformed['date'])
    
    # –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    columns_to_keep = [
        'date', 'restaurant_name', 'platform', 'total_sales', 'orders', 'rating',
        'marketing_spend', 'marketing_sales', 'marketing_orders', 'cancel_rate',
        'avg_order_value', 'delivery_time', 'cancelled_orders', 'ads_on', 'roas',
        'weather_condition', 'temperature_celsius', 'humidity_percent', 'precipitation_mm',
        'is_rainy', 'is_hot', 'is_windy', 'is_weekend', 'is_holiday', 
        'is_tourist_high_season', 'is_pay_day', 'day_of_week', 'month', 'year',
        'month_end', 'month_start', 'delivery_success_rate', 'revenue_per_order',
        'sales_per_hour', 'total_customers_count', 'new_customers_count', 
        'returning_customers_count', 'peak_hour_orders', 'off_peak_orders',
        'weekend_sales', 'weekday_sales', 'menu_items_sold', 'promotion_usage',
        'customer_complaints', 'location', 'cuisine_type'
    ]
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    available_columns = [col for col in columns_to_keep if col in df_transformed.columns]
    df_transformed = df_transformed[available_columns]
    
    return df_transformed

def add_calculated_fields_real(df: pd.DataFrame) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    df['avg_order_value'] = df['total_sales'] / df['orders'].replace(0, 1)
    df['cancelled_orders'] = (df['orders'] * df.get('cancel_rate', 0.05) / 100).astype(int)
    
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
    df['ads_on'] = (df.get('marketing_spend', 0) > 0).astype(int)
    df['roas'] = df.get('marketing_sales', 0) / df.get('marketing_spend', 1).replace(0, 1)
    
    # –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ü–µ–Ω–æ—á–Ω–æ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    base_delivery_time = np.where(df['platform'] == 'grab', 35, 30)
    df['delivery_time'] = base_delivery_time + np.random.normal(0, 5, len(df))
    df['delivery_time'] = np.clip(df['delivery_time'], 15, 60).astype(int)
    
    # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
    weather_conditions = ['Sunny', 'Partly Cloudy', 'Cloudy', 'Rainy', 'Stormy']
    weather_probs = [0.4, 0.25, 0.2, 0.1, 0.05]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ë–∞–ª–∏
    
    df['weather_condition'] = np.random.choice(weather_conditions, len(df), p=weather_probs)
    df['temperature_celsius'] = np.random.normal(28, 3, len(df))
    df['humidity_percent'] = np.random.normal(75, 10, len(df))
    df['precipitation_mm'] = np.where(
        df['weather_condition'].isin(['Rainy', 'Stormy']),
        np.random.exponential(5, len(df)),
        0
    )
    
    # –ü–æ–≥–æ–¥–Ω—ã–µ —Ñ–ª–∞–≥–∏
    df['is_rainy'] = (df['weather_condition'] == 'Rainy').astype(int)
    df['is_hot'] = (df['temperature_celsius'] > 30).astype(int)
    df['is_windy'] = 0  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    df['date_temp'] = pd.to_datetime(df['date'])
    df['is_weekend'] = (df['date_temp'].dt.dayofweek >= 5).astype(int)
    df['is_holiday'] = 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    df['is_tourist_high_season'] = df['date_temp'].dt.month.isin([7, 8, 12, 1]).astype(int)
    df['is_pay_day'] = df['date_temp'].dt.day.isin([25, 26, 27, 28, 29, 30, 31, 1, 2]).astype(int)
    df['day_of_week'] = df['date_temp'].dt.dayofweek
    df['month'] = df['date_temp'].dt.month
    df['year'] = df['date_temp'].dt.year
    df['month_end'] = (df['date_temp'].dt.day >= 28).astype(int)
    df['month_start'] = (df['date_temp'].dt.day <= 3).astype(int)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    df['delivery_success_rate'] = 1 - (df.get('cancel_rate', 5) / 100)
    df['revenue_per_order'] = df['avg_order_value']
    df['sales_per_hour'] = df['total_sales'] / 24
    
    # Customer –º–µ—Ç—Ä–∏–∫–∏ (–æ—Ü–µ–Ω–æ—á–Ω—ã–µ)
    df['total_customers_count'] = (df['orders'] * 0.8).astype(int)
    df['new_customers_count'] = (df['orders'] * 0.2).astype(int)
    df['returning_customers_count'] = df['total_customers_count'] - df['new_customers_count']
    
    # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (–æ—Ü–µ–Ω–æ—á–Ω—ã–µ)
    df['peak_hour_orders'] = (df['orders'] * 0.6).astype(int)
    df['off_peak_orders'] = df['orders'] - df['peak_hour_orders']
    
    # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º
    weekend_multiplier = df['is_weekend'].apply(lambda x: 1.2 if x else 0.8)
    df['weekend_sales'] = df['total_sales'] * weekend_multiplier
    df['weekday_sales'] = df['total_sales'] * (2 - weekend_multiplier)
    
    # –ú–µ–Ω—é
    df['menu_items_sold'] = (df['orders'] * np.random.uniform(1.2, 2.5, len(df))).astype(int)
    
    # –ü—Ä–æ–º–æ
    df['promotion_usage'] = np.random.uniform(0.1, 0.4, len(df))
    
    # –ñ–∞–ª–æ–±—ã (–æ—Ü–µ–Ω–æ—á–Ω—ã–µ)
    df['customer_complaints'] = (df['orders'] * (5 - df['rating']) / 20).astype(int)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    df['location'] = 'Bali'
    df['cuisine_type'] = 'Various'
    
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    if 'date_temp' in df.columns:
        df = df.drop('date_temp', axis=1)
    
    return df

def get_available_restaurants() -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        conn = sqlite3.connect('database.sqlite')
        
        query = '''
        SELECT r.name,
               COUNT(DISTINCT COALESCE(g.stat_date, gj.stat_date)) as days_data,
               MIN(COALESCE(g.stat_date, gj.stat_date)) as first_date,
               MAX(COALESCE(g.stat_date, gj.stat_date)) as last_date,
               COUNT(g.id) as grab_records,
               COUNT(gj.id) as gojek_records
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id
        WHERE g.id IS NOT NULL OR gj.id IS NOT NULL
        GROUP BY r.id, r.name
        ORDER BY r.name
        '''
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df.to_dict('records')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return []

def validate_data_structure() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        conn = sqlite3.connect('database.sqlite')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['restaurants', 'grab_stats', 'gojek_stats']
        missing_tables = [t for t in required_tables if t not in tables]
        
        if missing_tables:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM grab_stats")
        grab_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM gojek_stats")
        gojek_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM restaurants")
        restaurant_count = cursor.fetchone()[0]
        
        conn.close()
        
        logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {restaurant_count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, {grab_count} –∑–∞–ø–∏—Å–µ–π Grab, {gojek_count} –∑–∞–ø–∏—Å–µ–π Gojek")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False