#!/usr/bin/env python3
"""
üî¨ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ò–ó–ù–ï–°-–ê–ù–ê–õ–ò–¢–ò–ö–ò
–ù–∞—Ö–æ–¥–∏—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –≤ 2.5 –≥–æ–¥–∞—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

class AdvancedRestaurantAnalytics:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    def __init__(self):
        self.conn = sqlite3.connect('data/database.sqlite')
        self.data = None
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        query = '''
            SELECT * FROM restaurant_data
            ORDER BY date, restaurant_name, platform
        '''
        
        self.data = pd.read_sql_query(query, self.conn)
        self.data['date'] = pd.to_datetime(self.data['date'])
        
        # –°–æ–∑–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.data['year'] = self.data['date'].dt.year
        self.data['month'] = self.data['date'].dt.month
        self.data['quarter'] = self.data['date'].dt.quarter
        self.data['day_of_week'] = self.data['date'].dt.dayofweek
        self.data['week_of_year'] = self.data['date'].dt.isocalendar().week
        self.data['is_weekend'] = self.data['day_of_week'].isin([5, 6])
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data):,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {self.data['date'].min().strftime('%Y-%m-%d')} - {self.data['date'].max().strftime('%Y-%m-%d')}")
    
    def analyze_restaurant_deep(self, restaurant_name: str, period_start: str = None, period_end: str = None) -> Dict[str, Any]:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏"""
        
        print(f"üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}")
        print("=" * 80)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_data = self.data[self.data['restaurant_name'] == restaurant_name].copy()
        
        if restaurant_data.empty:
            return {"error": f"–†–µ—Å—Ç–æ—Ä–∞–Ω {restaurant_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if period_start and period_end:
            mask = (restaurant_data['date'] >= period_start) & (restaurant_data['date'] <= period_end)
            current_period = restaurant_data[mask].copy()
            analysis_period = f"{period_start} - {period_end}"
        else:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            latest_date = restaurant_data['date'].max()
            three_months_ago = latest_date - timedelta(days=90)
            current_period = restaurant_data[restaurant_data['date'] >= three_months_ago].copy()
            analysis_period = f"{three_months_ago.strftime('%Y-%m-%d')} - {latest_date.strftime('%Y-%m-%d')}"
        
        if current_period.empty:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        current_stats = self.calculate_period_stats(current_period)
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        historical_analysis = self.analyze_historical_trends(restaurant_data, current_period)
        
        # –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π
        anomalies = self.detect_anomalies(restaurant_data, current_period)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        seasonality = self.analyze_seasonality(restaurant_data)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
        marketing_impact = self.analyze_marketing_effectiveness(restaurant_data, current_period)
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        competitive_analysis = self.analyze_competition(restaurant_name, current_period)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
        trend_forecast = self.forecast_trends(restaurant_data)
        
        # –ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã
        business_insights = self.generate_business_insights(restaurant_data, current_period, historical_analysis)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.generate_strategic_recommendations(
            restaurant_data, current_stats, historical_analysis, marketing_impact, competitive_analysis
        )
        
        return {
            "restaurant_name": restaurant_name,
            "analysis_period": analysis_period,
            "current_stats": current_stats,
            "historical_analysis": historical_analysis,
            "anomalies": anomalies,
            "seasonality": seasonality,
            "marketing_impact": marketing_impact,
            "competitive_analysis": competitive_analysis,
            "trend_forecast": trend_forecast,
            "business_insights": business_insights,
            "recommendations": recommendations
        }
    
    def calculate_period_stats(self, period_data: pd.DataFrame) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º (—Å—É–º–º–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        daily_stats = period_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'delivery_time': 'mean',
            'cancel_rate': 'mean',
            'ads_on': 'max',  # –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±—ã–ª–∞ —Ä–µ–∫–ª–∞–º–∞
            'roas': 'mean'
        }).reset_index()
        
        return {
            "total_sales": daily_stats['total_sales'].sum(),
            "avg_daily_sales": daily_stats['total_sales'].mean(),
            "total_orders": daily_stats['orders'].sum(),
            "avg_daily_orders": daily_stats['orders'].mean(),
            "avg_rating": daily_stats['rating'].mean(),
            "avg_delivery_time": daily_stats['delivery_time'].mean(),
            "avg_cancel_rate": daily_stats['cancel_rate'].mean(),
            "days_with_ads": daily_stats['ads_on'].sum(),
            "avg_roas": daily_stats[daily_stats['roas'] > 0]['roas'].mean() if (daily_stats['roas'] > 0).any() else 0,
            "days_analyzed": len(daily_stats),
            "sales_volatility": daily_stats['total_sales'].std() / daily_stats['total_sales'].mean() if daily_stats['total_sales'].mean() > 0 else 0
        }
    
    def analyze_historical_trends(self, full_data: pd.DataFrame, current_period: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        monthly_data = full_data.groupby([full_data['date'].dt.to_period('M'), 'platform']).agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean'
        }).reset_index()
        
        monthly_data['date'] = monthly_data['date'].dt.to_timestamp()
        
        # –°—É–º–º–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        monthly_combined = monthly_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum', 
            'rating': 'mean'
        }).reset_index()
        
        # –¢—Ä–µ–Ω–¥—ã
        sales_trend = self.calculate_trend(monthly_combined['total_sales'].values)
        orders_trend = self.calculate_trend(monthly_combined['orders'].values)
        rating_trend = self.calculate_trend(monthly_combined['rating'].values)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º
        current_period_start = current_period['date'].min()
        current_period_end = current_period['date'].max()
        
        # –¢–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
        last_year_start = current_period_start - timedelta(days=365)
        last_year_end = current_period_end - timedelta(days=365)
        
        last_year_data = full_data[
            (full_data['date'] >= last_year_start) & 
            (full_data['date'] <= last_year_end)
        ]
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        current_stats = self.calculate_period_stats(current_period)
        last_year_stats = self.calculate_period_stats(last_year_data) if not last_year_data.empty else None
        
        yoy_comparison = {}
        if last_year_stats:
            yoy_comparison = {
                "sales_change": ((current_stats['total_sales'] / last_year_stats['total_sales']) - 1) * 100,
                "orders_change": ((current_stats['total_orders'] / last_year_stats['total_orders']) - 1) * 100,
                "rating_change": current_stats['avg_rating'] - last_year_stats['avg_rating'],
                "delivery_time_change": current_stats['avg_delivery_time'] - last_year_stats['avg_delivery_time']
            }
        
        return {
            "monthly_trend": {
                "sales_trend": sales_trend,
                "orders_trend": orders_trend, 
                "rating_trend": rating_trend
            },
            "year_over_year": yoy_comparison,
            "peak_month": monthly_combined.loc[monthly_combined['total_sales'].idxmax(), 'date'].strftime('%Y-%m'),
            "worst_month": monthly_combined.loc[monthly_combined['total_sales'].idxmin(), 'date'].strftime('%Y-%m'),
            "growth_acceleration": self.calculate_growth_acceleration(monthly_combined['total_sales'].values)
        }
    
    def detect_anomalies(self, full_data: pd.DataFrame, current_period: pd.DataFrame) -> Dict[str, Any]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º)
        daily_data = full_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'ads_on': 'max',
            'roas': 'mean'
        }).reset_index()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–≤—ã–±—Ä–æ—Å—ã)
        sales_mean = daily_data['total_sales'].mean()
        sales_std = daily_data['total_sales'].std()
        
        # –ê–Ω–æ–º–∞–ª–∏–∏ = –±–æ–ª—å—à–µ 2.5 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        anomaly_threshold = 2.5
        
        positive_anomalies = daily_data[
            daily_data['total_sales'] > (sales_mean + anomaly_threshold * sales_std)
        ].copy()
        
        negative_anomalies = daily_data[
            daily_data['total_sales'] < (sales_mean - anomaly_threshold * sales_std)
        ].copy()
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∞–Ω–æ–º–∞–ª–∏–π
        positive_anomalies['deviation_pct'] = ((positive_anomalies['total_sales'] / sales_mean) - 1) * 100
        negative_anomalies['deviation_pct'] = ((negative_anomalies['total_sales'] / sales_mean) - 1) * 100
        
        # –¢–æ–ø –∞–Ω–æ–º–∞–ª–∏–∏
        top_positive = positive_anomalies.nlargest(5, 'total_sales')[['date', 'total_sales', 'orders', 'ads_on', 'roas', 'deviation_pct']].to_dict('records')
        top_negative = negative_anomalies.nsmallest(5, 'total_sales')[['date', 'total_sales', 'orders', 'ads_on', 'roas', 'deviation_pct']].to_dict('records')
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∞–Ω–æ–º–∞–ª–∏–π
        anomaly_insights = self.analyze_anomaly_causes(full_data, top_positive, top_negative)
        
        return {
            "positive_anomalies": top_positive,
            "negative_anomalies": top_negative,
            "anomaly_insights": anomaly_insights,
            "volatility_score": sales_std / sales_mean if sales_mean > 0 else 0
        }
    
    def analyze_seasonality(self, full_data: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        
        # –ú–µ—Å—è—á–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        monthly_seasonality = full_data.groupby('month')['total_sales'].mean().to_dict()
        peak_months = sorted(monthly_seasonality.items(), key=lambda x: x[1], reverse=True)[:3]
        low_months = sorted(monthly_seasonality.items(), key=lambda x: x[1])[:3]
        
        # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å  
        weekly_seasonality = full_data.groupby('day_of_week')['total_sales'].mean()
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        holiday_effect = self.analyze_holiday_impact(full_data)
        
        return {
            "peak_months": [{"month": m, "avg_sales": round(s, 2)} for m, s in peak_months],
            "low_months": [{"month": m, "avg_sales": round(s, 2)} for m, s in low_months],
            "weekly_pattern": {
                "weekend_boost": (weekly_seasonality[5:7].mean() / weekly_seasonality[0:5].mean() - 1) * 100,
                "best_day": weekly_seasonality.idxmax(),
                "worst_day": weekly_seasonality.idxmin()
            },
            "holiday_impact": holiday_effect
        }
    
    def analyze_marketing_effectiveness(self, full_data: pd.DataFrame, current_period: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"""
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —Å —Ä–µ–∫–ª–∞–º–æ–π –∏ –±–µ–∑
        with_ads = full_data[full_data['ads_on'] == 1]
        without_ads = full_data[full_data['ads_on'] == 0]
        
        if len(with_ads) == 0 or len(without_ads) == 0:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"}
        
        marketing_lift = (with_ads['total_sales'].mean() / without_ads['total_sales'].mean() - 1) * 100
        
        # ROAS –∞–Ω–∞–ª–∏–∑
        roas_data = with_ads[with_ads['roas'] > 0]
        
        # –¢—Ä–µ–Ω–¥—ã ROAS —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        roas_trends = self.analyze_roas_trends(full_data)
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
        optimal_days = self.find_optimal_marketing_days(full_data)
        
        return {
            "marketing_lift": marketing_lift,
            "avg_roas": roas_data['roas'].mean() if not roas_data.empty else 0,
            "best_roas": roas_data['roas'].max() if not roas_data.empty else 0,
            "worst_roas": roas_data['roas'].min() if not roas_data.empty else 0,
            "roas_trends": roas_trends,
            "optimal_days": optimal_days,
            "campaign_frequency": len(with_ads) / len(full_data) * 100
        }
    
    def analyze_competition(self, restaurant_name: str, current_period: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
        period_start = current_period['date'].min()
        period_end = current_period['date'].max()
        
        all_restaurants = self.data[
            (self.data['date'] >= period_start) & 
            (self.data['date'] <= period_end)
        ].groupby('restaurant_name').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean'
        }).round(2)
        
        # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        all_restaurants = all_restaurants.sort_values('total_sales', ascending=False)
        position = list(all_restaurants.index).index(restaurant_name) + 1 if restaurant_name in all_restaurants.index else None
        
        # –î–æ–ª—è —Ä—ã–Ω–∫–∞
        total_market = all_restaurants['total_sales'].sum()
        restaurant_sales = all_restaurants.loc[restaurant_name, 'total_sales'] if restaurant_name in all_restaurants.index else 0
        market_share = (restaurant_sales / total_market * 100) if total_market > 0 else 0
        
        # –õ–∏–¥–µ—Ä —Ä—ã–Ω–∫–∞
        market_leader = all_restaurants.index[0] if not all_restaurants.empty else None
        
        return {
            "market_position": position,
            "market_share": market_share,
            "market_leader": market_leader,
            "competitors": all_restaurants.to_dict('index'),
            "competitive_gap": (all_restaurants.iloc[0]['total_sales'] / restaurant_sales - 1) * 100 if restaurant_sales > 0 else None
        }
    
    def forecast_trends(self, full_data: pd.DataFrame) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã"""
        
        # –ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        monthly_data = full_data.groupby(full_data['date'].dt.to_period('M'))['total_sales'].sum()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
        x = np.arange(len(monthly_data))
        y = monthly_data.values
        
        if len(y) > 3:
            trend_coef = np.polyfit(x, y, 1)[0]
            trend_direction = "—Ä–∞—Å—Ç–µ—Ç" if trend_coef > 0 else "–ø–∞–¥–∞–µ—Ç"
            trend_strength = abs(trend_coef) / np.mean(y) * 100
        else:
            trend_direction = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            trend_strength = 0
        
        return {
            "trend_direction": trend_direction,
            "trend_strength": trend_strength,
            "monthly_growth_rate": trend_coef if len(y) > 3 else 0
        }
    
    def generate_business_insights(self, full_data: pd.DataFrame, current_period: pd.DataFrame, historical_analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã"""
        
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
        if historical_analysis.get('year_over_year'):
            yoy = historical_analysis['year_over_year']
            if yoy.get('sales_change', 0) > 20:
                insights.append(f"üöÄ –í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–æ—Å—Ç: –ø—Ä–æ–¥–∞–∂–∏ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {yoy['sales_change']:.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º")
            elif yoy.get('sales_change', 0) < -10:
                insights.append(f"‚ö†Ô∏è –¢—Ä–µ–≤–æ–∂–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: –ø—Ä–æ–¥–∞–∂–∏ —É–ø–∞–ª–∏ –Ω–∞ {abs(yoy['sales_change']):.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        current_rating = current_period['rating'].mean()
        if current_rating > 4.5:
            insights.append(f"‚≠ê –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: —Ä–µ–π—Ç–∏–Ω–≥ {current_rating:.2f}/5.0 - –≤ —Ç–æ–ø-10% —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        elif current_rating < 4.0:
            insights.append(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º: —Ä–µ–π—Ç–∏–Ω–≥ {current_rating:.2f}/5.0 —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        daily_sales = current_period.groupby('date')['total_sales'].sum()
        volatility = daily_sales.std() / daily_sales.mean()
        if volatility > 0.4:
            insights.append(f"üìä –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–ª–µ–±–ª—é—Ç—Å—è –Ω–∞ {volatility*100:.1f}% - –Ω—É–∂–Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è")
        
        return insights
    
    def generate_strategic_recommendations(self, full_data: pd.DataFrame, current_stats: Dict, 
                                         historical_analysis: Dict, marketing_impact: Dict, 
                                         competitive_analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        recommendations = []
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if marketing_impact.get('marketing_lift', 0) > 50:
            recommendations.append(f"üì¢ –ö–†–ò–¢–ò–ß–ù–û: –†–µ–∫–ª–∞–º–∞ –¥–∞–µ—Ç +{marketing_impact['marketing_lift']:.1f}% –∫ –ø—Ä–æ–¥–∞–∂–∞–º - —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç")
        
        if marketing_impact.get('avg_roas', 0) > 5:
            recommendations.append(f"üí∞ –û—Ç–ª–∏—á–Ω—ã–π ROAS {marketing_impact['avg_roas']:.1f} - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
        elif marketing_impact.get('avg_roas', 0) < 2:
            recommendations.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π ROAS {marketing_impact['avg_roas']:.1f} - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if competitive_analysis.get('market_position', 999) > 3:
            recommendations.append(f"üéØ –ù–∏–∑–∫–∞—è –ø–æ–∑–∏—Ü–∏—è #{competitive_analysis['market_position']} - –∏–∑—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ª–∏–¥–µ—Ä–æ–≤")
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if current_stats.get('avg_delivery_time', 0) > 35:
            recommendations.append(f"‚è±Ô∏è –î–æ–ª–≥–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ {current_stats['avg_delivery_time']:.1f} –º–∏–Ω - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É")
        
        if current_stats.get('avg_cancel_rate', 0) > 0.05:
            recommendations.append(f"‚ùå –í—ã—Å–æ–∫–∏–π % –æ—Ç–º–µ–Ω {current_stats['avg_cancel_rate']*100:.1f}% - —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")
        
        return recommendations
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def calculate_trend(self, values: np.ndarray) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"""
        if len(values) < 3:
            return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        x = np.arange(len(values))
        slope = np.polyfit(x, values, 1)[0]
        
        if abs(slope) < np.std(values) * 0.1:
            return "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
        elif slope > 0:
            return "—Ä–∞—Å—Ç—É—â–∏–π"
        else:
            return "–ø–∞–¥–∞—é—â–∏–π"
    
    def calculate_growth_acceleration(self, values: np.ndarray) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞"""
        if len(values) < 4:
            return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
        first_diff = np.diff(values)
        second_diff = np.diff(first_diff)
        
        avg_acceleration = np.mean(second_diff)
        
        if avg_acceleration > np.std(second_diff):
            return "—É—Å–∫–æ—Ä—è–µ—Ç—Å—è"
        elif avg_acceleration < -np.std(second_diff):
            return "–∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è"
        else:
            return "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
    
    def analyze_anomaly_causes(self, full_data: pd.DataFrame, positive_anomalies: List, negative_anomalies: List) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –∞–Ω–æ–º–∞–ª–∏–π"""
        
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        for anomaly in positive_anomalies[:3]:
            date = anomaly['date']
            if isinstance(date, str):
                date = pd.to_datetime(date)
            
            day_data = full_data[full_data['date'] == date]
            ads_active = day_data['ads_on'].max() == 1
            avg_roas = day_data['roas'].mean()
            
            factors = []
            if ads_active and avg_roas > 5:
                factors.append(f"—É—Å–ø–µ—à–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ (ROAS {avg_roas:.1f})")
            if date.weekday() >= 5:
                factors.append("–≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å")
            
            insight = f"üìà {date.strftime('%Y-%m-%d')}: +{anomaly['deviation_pct']:.1f}% –±–ª–∞–≥–æ–¥–∞—Ä—è " + ", ".join(factors) if factors else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–∞–º"
            insights.append(insight)
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        for anomaly in negative_anomalies[:2]:
            date = anomaly['date']
            if isinstance(date, str):
                date = pd.to_datetime(date)
            
            factors = []
            if date.month == 3 and date.day in [11, 22, 29]:  # –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã Nyepi
                factors.append("Nyepi (–¥–µ–Ω—å —Ç–∏—à–∏–Ω—ã)")
            
            insight = f"üìâ {date.strftime('%Y-%m-%d')}: {anomaly['deviation_pct']:.1f}% –∏–∑-–∑–∞ " + ", ".join(factors) if factors else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"
            insights.append(insight)
        
        return {"insights": insights}
    
    def analyze_holiday_impact(self, full_data: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        holiday_effects = {}
        
        new_year_data = full_data[
            (full_data['date'].dt.month == 1) & 
            (full_data['date'].dt.day == 1)
        ]
        
        if not new_year_data.empty:
            avg_sales = full_data['total_sales'].mean()
            ny_effect = (new_year_data['total_sales'].mean() / avg_sales - 1) * 100
            holiday_effects['New Year'] = ny_effect
        
        return holiday_effects
    
    def analyze_roas_trends(self, full_data: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã ROAS"""
        
        roas_data = full_data[full_data['roas'] > 0]
        
        if roas_data.empty:
            return {"trend": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_roas = roas_data.groupby(roas_data['date'].dt.to_period('M'))['roas'].mean()
        
        if len(monthly_roas) < 3:
            return {"trend": "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
        
        trend = self.calculate_trend(monthly_roas.values)
        
        return {
            "trend": trend,
            "best_month": monthly_roas.idxmax().strftime('%Y-%m'),
            "worst_month": monthly_roas.idxmin().strftime('%Y-%m')
        }
    
    def find_optimal_marketing_days(self, full_data: pd.DataFrame) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"""
        
        roas_by_day = full_data[full_data['roas'] > 0].groupby('day_of_week')['roas'].mean()
        
        if roas_by_day.empty:
            return {"message": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ ROAS"}
        
        days_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        best_day = roas_by_day.idxmax()
        worst_day = roas_by_day.idxmin()
        
        return {
            "best_day": days_names[best_day],
            "best_roas": roas_by_day[best_day],
            "worst_day": days_names[worst_day], 
            "worst_roas": roas_by_day[worst_day]
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
def run_advanced_analysis(restaurant_name: str, period_start: str = None, period_end: str = None) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    
    analytics = AdvancedRestaurantAnalytics()
    try:
        result = analytics.analyze_restaurant_deep(restaurant_name, period_start, period_end)
        return result
    finally:
        analytics.close()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    result = run_advanced_analysis("Ika Canggu", "2024-04-01", "2024-06-30")
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")