#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –±–∞–∑–æ–≤–æ–π –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
"""

import pandas as pd
import logging
from typing import Optional
from main.field_compatibility import ensure_field_compatibility

logger = logging.getLogger(__name__)

def load_data_with_all_features(db_path: str = None) -> pd.DataFrame:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        from main.data_loader_enhanced import load_data_enhanced
        logger.info("üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–£–Æ –°–ò–°–¢–ï–ú–£ (–≤—Å–µ –ø–æ–ª—è + –ø–æ–≥–æ–¥–∞ + –∫–∞–ª–µ–Ω–¥–∞—Ä—å)")
        
        enhanced_df = load_data_enhanced(db_path)
        
        if not enhanced_df.empty:
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {len(enhanced_df)} –∑–∞–ø–∏—Å–µ–π —Å {len(enhanced_df.columns)} –ø–æ–ª—è–º–∏")
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π
            enhanced_df = ensure_field_compatibility(enhanced_df)
            return enhanced_df
        else:
            logger.warning("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
    
    # –†–µ–∑–µ—Ä–≤: –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    try:
        from main.data_loader import load_data_for_training
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤")
        
        basic_df = load_data_for_training(db_path)
        
        if not basic_df.empty:
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {len(basic_df)} –∑–∞–ø–∏—Å–µ–π —Å {len(basic_df.columns)} –ø–æ–ª—è–º–∏")
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π
            basic_df = ensure_field_compatibility(basic_df)
            return basic_df
        else:
            logger.error("‚ùå –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–∫–∂–µ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
    
    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    logger.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    return pd.DataFrame()

def prepare_features_with_all_enhancements(df: pd.DataFrame) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ features —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    if df.empty:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ features")
        return df
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É feature engineering
    try:
        from main.feature_engineering_enhanced import prepare_features_enhanced
        logger.info("üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–´–ô FEATURE ENGINEERING")
        
        enhanced_df = prepare_features_enhanced(df)
        
        if not enhanced_df.empty and len(enhanced_df.columns) >= len(df.columns):
            new_features = len(enhanced_df.columns) - len(df.columns)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {new_features} –Ω–æ–≤—ã—Ö features —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
            return enhanced_df
        else:
            logger.warning("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ feature engineering –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ feature engineering –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ feature engineering: {e}")
    
    # –†–µ–∑–µ—Ä–≤: –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    try:
        from main.feature_engineering import prepare_features
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É feature engineering –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤")
        
        basic_df = prepare_features(df)
        
        if not basic_df.empty:
            new_features = len(basic_df.columns) - len(df.columns)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {new_features} –Ω–æ–≤—ã—Ö features —Å –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
            return basic_df
        else:
            logger.error("‚ùå –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ feature engineering —Ç–∞–∫–∂–µ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ feature engineering: {e}")
    
    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.warning("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö features")
    return df

def get_system_status() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    
    status = {
        'enhanced_loader_available': False,
        'enhanced_features_available': False,
        'basic_loader_available': False,
        'basic_features_available': False,
        'recommendation': 'unknown'
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    try:
        from main.data_loader_enhanced import load_data_enhanced
        status['enhanced_loader_available'] = True
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ feature engineering
    try:
        from main.feature_engineering_enhanced import prepare_features_enhanced
        status['enhanced_features_available'] = True
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    try:
        from main.data_loader import load_data_for_training
        status['basic_loader_available'] = True
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ feature engineering
    try:
        from main.feature_engineering import prepare_features
        status['basic_features_available'] = True
    except ImportError:
        pass
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if status['enhanced_loader_available'] and status['enhanced_features_available']:
        status['recommendation'] = 'enhanced_full'
    elif status['enhanced_loader_available']:
        status['recommendation'] = 'enhanced_loader_only'
    elif status['basic_loader_available'] and status['basic_features_available']:
        status['recommendation'] = 'basic_full'
    else:
        status['recommendation'] = 'error'
    
    return status

def print_system_status():
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º"""
    status = get_system_status()
    
    print("üîç –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú –ó–ê–ì–†–£–ó–ö–ò –ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•:")
    print("=" * 60)
    
    print(f"üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['enhanced_loader_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"üåü –£–ª—É—á—à–µ–Ω–Ω—ã–π feature engineering: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['enhanced_features_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"üìà –ë–∞–∑–æ–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['basic_loader_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"üîß –ë–∞–∑–æ–≤—ã–π feature engineering: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['basic_features_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    if status['recommendation'] == 'enhanced_full':
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ —Å–∏—Å—Ç–µ–º—É (–≤—Å–µ –ø–æ–ª—è + –ø–æ–≥–æ–¥–∞ + –∫–∞–ª–µ–Ω–¥–∞—Ä—å)")
    elif status['recommendation'] == 'enhanced_loader_only':
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ + –±–∞–∑–æ–≤—ã–π feature engineering")
    elif status['recommendation'] == 'basic_full':
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º
    print_system_status()
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´:")
    
    df = load_data_with_all_features()
    if not df.empty:
        print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π —Å {len(df.columns)} –ø–æ–ª—è–º–∏")
        
        enhanced_df = prepare_features_with_all_enhancements(df)
        print(f"üåü –ü–æ—Å–ª–µ feature engineering: {len(enhanced_df.columns)} –ø–æ–ª–µ–π")
        print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(enhanced_df.columns) - len(df.columns)} –Ω–æ–≤—ã—Ö features")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")