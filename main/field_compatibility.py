#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
–º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import logging

logger = logging.getLogger(__name__)

# Mapping —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
FIELD_COMPATIBILITY_MAP = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ)
    'date': 'date',
    'restaurant_name': 'restaurant_name',
    'total_sales': 'total_sales',
    'orders': 'orders',
    'rating': 'rating',
    'platform': 'platform',
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è gojek
    'delivery_time': 'delivery_time_minutes',  # –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê
    'accepting_time': 'accepting_time_minutes',
    'preparation_time': 'preparation_time_minutes',
    
    # –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    'cancel_rate': 'cancel_rate',
    'ads_on': 'ads_on',
    'roas': 'roas',
    'avg_order_value': 'avg_order_value',
    
    # –ü–æ–≥–æ–¥–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
    'temperature_celsius': 'temperature_celsius',
    'humidity_percent': 'humidity_percent',
    'precipitation_mm': 'precipitation_mm',
    'is_rainy': 'is_rainy',
    'is_hot': 'is_hot',
    'weather_condition': 'weather_condition',
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
    'is_weekend': 'is_weekend',
    'is_holiday': 'is_holiday',
    'day_of_week': 'day_of_week',
    'month': 'month',
    'is_tourist_high_season': 'is_tourist_high_season'
}

def ensure_field_compatibility(df: pd.DataFrame) -> pd.DataFrame:
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    if df.empty:
        return df
    
    df_copy = df.copy()
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ delivery_time –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å delivery_time_minutes
        if 'delivery_time' not in df_copy.columns and 'delivery_time_minutes' in df_copy.columns:
            df_copy['delivery_time'] = df_copy['delivery_time_minutes']
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ 'delivery_time' –∏–∑ 'delivery_time_minutes'")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ delivery_time_minutes –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å delivery_time
        elif 'delivery_time_minutes' not in df_copy.columns and 'delivery_time' in df_copy.columns:
            df_copy['delivery_time_minutes'] = df_copy['delivery_time']
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ 'delivery_time_minutes' –∏–∑ 'delivery_time'")
        
        # 3. –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ
        elif 'delivery_time' not in df_copy.columns and 'delivery_time_minutes' not in df_copy.columns:
            # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if 'platform' in df_copy.columns:
                df_copy['delivery_time'] = df_copy['platform'].apply(
                    lambda x: 25 if x == 'gojek' else 30
                )
            else:
                df_copy['delivery_time'] = 30  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            df_copy['delivery_time_minutes'] = df_copy['delivery_time']
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ 'delivery_time'")
        
        # 4. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        time_field_pairs = [
            ('accepting_time', 'accepting_time_minutes'),
            ('preparation_time', 'preparation_time_minutes')
        ]
        
        for old_field, new_field in time_field_pairs:
            if old_field not in df_copy.columns and new_field in df_copy.columns:
                df_copy[old_field] = df_copy[new_field]
            elif new_field not in df_copy.columns and old_field in df_copy.columns:
                df_copy[new_field] = df_copy[old_field]
        
        # 5. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        essential_fields = {
            'cancel_rate': 0.05,  # 5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'ads_on': 0,          # –†–µ–∫–ª–∞–º–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'roas': 0,            # –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã
            'avg_order_value': lambda df: df['total_sales'] / (df['orders'] + 1e-8) if 'total_sales' in df.columns and 'orders' in df.columns else 50000
        }
        
        for field, default_value in essential_fields.items():
            if field not in df_copy.columns:
                if callable(default_value):
                    df_copy[field] = default_value(df_copy)
                else:
                    df_copy[field] = default_value
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ '{field}' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # 6. –ü–æ–≥–æ–¥–Ω—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ)
        weather_defaults = {
            'temperature_celsius': 29,     # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ë–∞–ª–∏
            'humidity_percent': 75,        # –°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            'precipitation_mm': 0,         # –ë–µ–∑ –¥–æ–∂–¥—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'is_rainy': False,
            'is_hot': False,
            'weather_condition': 'clear'
        }
        
        for field, default_value in weather_defaults.items():
            if field not in df_copy.columns:
                df_copy[field] = default_value
        
        # 7. –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã)
        if 'date' in df_copy.columns:
            df_copy['date'] = pd.to_datetime(df_copy['date'])
            
            if 'day_of_week' not in df_copy.columns:
                df_copy['day_of_week'] = df_copy['date'].dt.dayofweek
            
            if 'is_weekend' not in df_copy.columns:
                df_copy['is_weekend'] = df_copy['day_of_week'].isin([5, 6])
            
            if 'month' not in df_copy.columns:
                df_copy['month'] = df_copy['date'].dt.month
            
            if 'is_holiday' not in df_copy.columns:
                df_copy['is_holiday'] = False  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
            
            if 'is_tourist_high_season' not in df_copy.columns:
                df_copy['is_tourist_high_season'] = df_copy['month'].isin([7, 8, 12, 1])
        
        logger.info(f"‚úÖ –û–±–µ—Å–ø–µ—á–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π: {len(df_copy.columns)} –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–ª–µ–π")
        return df_copy
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π: {e}")
        return df

def check_required_fields(df: pd.DataFrame, required_fields: list) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ DataFrame
    
    Returns:
        dict: {'missing': [—Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π], 'available': [—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π]}
    """
    if df.empty:
        return {'missing': required_fields, 'available': []}
    
    available_fields = []
    missing_fields = []
    
    for field in required_fields:
        if field in df.columns:
            available_fields.append(field)
        else:
            missing_fields.append(field)
    
    return {
        'missing': missing_fields,
        'available': available_fields
    }

def get_field_mapping_info() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mapping –ø–æ–ª–µ–π"""
    return {
        'compatibility_map': FIELD_COMPATIBILITY_MAP,
        'critical_mappings': {
            'delivery_time': 'delivery_time_minutes',
            'accepting_time': 'accepting_time_minutes',
            'preparation_time': 'preparation_time_minutes'
        },
        'weather_fields': [
            'temperature_celsius', 'humidity_percent', 'precipitation_mm',
            'is_rainy', 'is_hot', 'weather_condition'
        ],
        'calendar_fields': [
            'is_weekend', 'is_holiday', 'day_of_week', 'month', 'is_tourist_high_season'
        ]
    }

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–û–õ–ï–ô")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
    test_df = pd.DataFrame({
        'date': pd.date_range('2024-01-01', periods=5),
        'restaurant_name': ['Test'] * 5,
        'total_sales': [1000, 1500, 2000, 1200, 1800],
        'orders': [20, 30, 40, 25, 35],
        'delivery_time_minutes': [25, 30, 28, 32, 27]  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    })
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è: {list(test_df.columns)}")
    
    compatible_df = ensure_field_compatibility(test_df)
    
    print(f"‚úÖ –ü–æ—Å–ª–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {len(compatible_df.columns)} –ø–æ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required = ['delivery_time', 'cancel_rate', 'is_weekend', 'temperature_celsius']
    check_result = check_required_fields(compatible_df, required)
    
    print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {check_result['available']}")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {check_result['missing']}")