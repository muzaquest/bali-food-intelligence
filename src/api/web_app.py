import streamlit as st
import pandas as pd
import sqlite3
import json
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import subprocess
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="MUZAQUEST Analytics Dashboard",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .success-metric {
        background-color: #d4edda;
        border-left: 4px solid #28a745;
    }
    .warning-metric {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
    }
    .danger-metric {
        background-color: #f8d7da;
        border-left: 4px solid #dc3545;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<h1 class="main-header">üéØ MUZAQUEST Analytics Dashboard</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ë–∞–ª–∏ ‚Ä¢ AI-Powered ‚Ä¢ Real-time</p>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_restaurants():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    try:
        conn = sqlite3.connect('database.sqlite')
        query = """
        SELECT DISTINCT restaurant_name 
        FROM grab_stats 
        UNION 
        SELECT DISTINCT restaurant_name 
        FROM gojek_stats 
        ORDER BY restaurant_name
        """
        restaurants = pd.read_sql_query(query, conn)
        conn.close()
        return restaurants['restaurant_name'].tolist()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return []

@st.cache_data
def load_restaurant_locations():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    try:
        with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

@st.cache_data
def load_tourist_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open('data/scientific_tourist_coefficients.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def run_analysis(restaurant_name=None, start_date=None, end_date=None):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ main.py"""
    try:
        cmd = [sys.executable, 'main.py', 'analyze']
        
        if restaurant_name:
            cmd.append(f'"{restaurant_name}"')
        else:
            cmd.append('market')
            
        if start_date and end_date:
            cmd.extend(['--start-date', start_date, '--end-date', end_date])
            
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            return result.stdout
        else:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.stderr}"
            
    except subprocess.TimeoutExpired:
        return "–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
st.sidebar.markdown("## üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    [
        "üè† –ì–ª–∞–≤–Ω–∞—è",
        "üè™ –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", 
        "üè¢ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
        "ü§ñ ML-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã",
        "üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
        "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏",
        "üóìÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
        "üåç –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    ]
)

# ===== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê =====
if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
    st.markdown("## üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    restaurants = load_restaurants()
    locations = load_restaurant_locations()
    
    with col1:
        st.metric("üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ", len(restaurants))
    
    with col2:
        st.metric("üìç –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ GPS", len(locations))
    
    with col3:
        st.metric("üåê API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π", "4")
    
    with col4:
        st.metric("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞", "63")
    
    st.markdown("---")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    st.markdown("## üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã")
    reports_dir = Path("reports")
    if reports_dir.exists():
        report_files = list(reports_dir.glob("*.txt"))
        if report_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            report_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            for report_file in report_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                modified_time = datetime.fromtimestamp(report_file.stat().st_mtime)
                st.markdown(f"üìÑ **{report_file.name}** - {modified_time.strftime('%d.%m.%Y %H:%M')}")
        else:
            st.info("–û—Ç—á–µ—Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö.")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    st.markdown("## üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    status_col1, status_col2 = st.columns(2)
    
    with status_col1:
        st.markdown('<div class="metric-card success-metric"><b>‚úÖ ML-–º–æ–¥–µ–ª—å</b><br>RandomForest R¬≤ = 85%</div>', unsafe_allow_html=True)
        st.markdown('<div class="metric-card success-metric"><b>‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b><br>Open-Meteo API</div>', unsafe_allow_html=True)
        
    with status_col2:
        st.markdown('<div class="metric-card success-metric"><b>‚úÖ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏</b><br>35 –±–∞–ª–∏–π—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤</div>', unsafe_allow_html=True)
        st.markdown('<div class="metric-card success-metric"><b>‚úÖ AI-–∞–Ω–∞–ª–∏–∑</b><br>OpenAI GPT-4</div>', unsafe_allow_html=True)

# ===== –ê–ù–ê–õ–ò–ó –û–¢–î–ï–õ–¨–ù–û–ì–û –†–ï–°–¢–û–†–ê–ù–ê =====
elif page == "üè™ –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞":
    st.markdown("## üè™ –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
    
    restaurants = load_restaurants()
    
    if not restaurants:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        st.stop()
    
    # –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    selected_restaurant = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:",
        restaurants,
        index=0
    )
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        period_type = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"]
        )
    
    with col2:
        if period_type == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            date_range = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                value=(datetime.now() - timedelta(days=30), datetime.now()),
                max_value=datetime.now()
            )
        else:
            st.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period_type}")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {selected_restaurant}..."):
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
            if period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
                start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            elif period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            elif period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞":
                start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            else:  # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                if len(date_range) == 2:
                    start_date = date_range[0].strftime('%Y-%m-%d')
                    end_date = date_range[1].strftime('%Y-%m-%d')
                else:
                    st.error("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    st.stop()
            
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
            result = run_analysis(selected_restaurant, start_date, end_date)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
            st.text_area("", result, height=600)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç"):
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"reports/{selected_restaurant}_{start_date}_{end_date}_{timestamp}.txt"
                
                os.makedirs("reports", exist_ok=True)
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(result)
                
                st.success(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

# ===== –ê–ù–ê–õ–ò–ó –í–°–ï–• –†–ï–°–¢–û–†–ê–ù–û–í =====
elif page == "üè¢ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤":
    st.markdown("## üè¢ –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        period_type = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            ["–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"],
            key="market_period"
        )
    
    with col2:
        if period_type == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            date_range = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                value=(datetime.now() - timedelta(days=90), datetime.now()),
                max_value=datetime.now(),
                key="market_dates"
            )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    st.markdown("### ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        include_weather = st.checkbox("üå§Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", value=True)
        include_holidays = st.checkbox("üéâ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤", value=True)
    
    with col2:
        include_ml = st.checkbox("ü§ñ –í–∫–ª—é—á–∏—Ç—å ML-–ø—Ä–æ–≥–Ω–æ–∑—ã", value=True)
        include_tourist = st.checkbox("üåç –í–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", value=True)
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ä—ã–Ω–æ–∫..."):
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
            if period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
                start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            elif period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª":
                start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            elif period_type == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞":
                start_date = (datetime.now() - timedelta(days=180)).strftime('%Y-%m-%d')
                end_date = datetime.now().strftime('%Y-%m-%d')
            else:
                if len(date_range) == 2:
                    start_date = date_range[0].strftime('%Y-%m-%d')
                    end_date = date_range[1].strftime('%Y-%m-%d')
                else:
                    st.error("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    st.stop()
            
            # –ó–∞–ø—É—Å–∫ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            result = run_analysis(None, start_date, end_date)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.markdown("### üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            st.text_area("", result, height=600, key="market_result")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–±–∞–∑–æ–≤–∞—è)
            if st.checkbox("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
                st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                st.info("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# ===== ML-–ú–û–î–ï–õ–¨ =====
elif page == "ü§ñ ML-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã":
    st.markdown("## ü§ñ ML-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã")
    
    st.markdown("""
    ### üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º:** RandomForestRegressor  
    **–¢–æ—á–Ω–æ—Å—Ç—å:** R¬≤ = 85% –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
    **–û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å:** SHAP –∞–Ω–∞–ª–∏–∑  
    **–§–∞–∫—Ç–æ—Ä–æ–≤:** 35 –≤–Ω–µ—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤  
    """)
    
    # –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞
    restaurants = load_restaurants()
    selected_restaurant = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞:",
        restaurants,
        key="ml_restaurant"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        analysis_type = st.selectbox(
            "–¢–∏–ø ML-–∞–Ω–∞–ª–∏–∑–∞:",
            [
                "üîç –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (SHAP)",
                "üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂",
                "üéØ –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è",
                "üìä –ê–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"
            ]
        )
    
    with col2:
        forecast_days = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏):", 1, 30, 7)
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å ML-–∞–Ω–∞–ª–∏–∑", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º ML-–∞–Ω–∞–ª–∏–∑..."):
            
            # –ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ proper_ml_detective_analysis.py
            try:
                from src.analyzers.proper_ml_detective_analysis import run_detective_analysis
                
                st.markdown("### ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ML-–∞–Ω–∞–ª–∏–∑–∞")
                
                if analysis_type == "üîç –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (SHAP)":
                    # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    st.info("–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏...")
                    result = subprocess.run([
                        sys.executable, '-c',
                        f"from src.analyzers.proper_ml_detective_analysis import run_detective_analysis; run_detective_analysis('{selected_restaurant}')"
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        st.success("‚úÖ –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result.stdout, height=400)
                    else:
                        st.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
                
                elif analysis_type == "üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂":
                    st.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂...")
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                    st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤")
                    
                elif analysis_type == "üéØ –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è":
                    st.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è...")
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç SHAP –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                else:  # –ê–Ω–æ–º–∞–ª–∏–∏
                    st.info("–ò—â–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö...")
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π
                    st.success("‚úÖ –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ ML-–∞–Ω–∞–ª–∏–∑–∞: {e}")

# ===== –°–í–û–ë–û–î–ù–´–ô –ó–ê–ü–†–û–° =====
elif page == "üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å":
    st.markdown("## üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ")
    
    st.markdown("""
    –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
    """)
    
    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    user_query = st.text_area(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∏—é–Ω–µ",
        height=100
    )
    
    # –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
    query_type = st.selectbox(
        "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        [
            "üîç –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑",
            "üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
            "üéâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤",
            "üåç –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "ü§ñ ML-–∞–Ω–∞–ª–∏–∑",
            "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        ]
    )
    
    if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", type="primary"):
        if not user_query.strip():
            st.error("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
        else:
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI API –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
                # –∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
                
                st.markdown("### ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                st.info(f"–ó–∞–ø—Ä–æ—Å: {user_query}")
                st.info(f"–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {query_type}")
                
                # –í—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ main.py
                try:
                    import subprocess
                    import sys
                    result = subprocess.run([
                        sys.executable, 'main.py', 'analyze', selected_restaurant, 
                        '--start', '2025-01-01', '--end', '2025-06-30'
                    ], capture_output=True, text=True, cwd='.')
                    
                    if result.returncode == 0:
                        st.text_area("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:", result.stdout, height=400)
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.stderr}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ö–ê–¶–ò–Ø–ú–ò =====
elif page == "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏":
    st.markdown("## üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    locations = load_restaurant_locations()
    restaurants = load_restaurants()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üè™ –í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", len(restaurants))
    
    with col2:
        st.metric("üìç –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏", len(locations))
    
    with col3:
        coverage = len(locations) / len(restaurants) * 100 if restaurants else 0
        st.metric("üìä –ü–æ–∫—Ä—ã—Ç–∏–µ GPS", f"{coverage:.1f}%")
    
    # –ö–∞—Ä—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    if locations:
        st.markdown("### üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã
        map_data = []
        for name, data in locations.items():
            if 'latitude' in data and 'longitude' in data:
                map_data.append({
                    'name': name,
                    'lat': data['latitude'],
                    'lon': data['longitude'],
                    'zone': data.get('zone', 'Unknown')
                })
        
        if map_data:
            df_map = pd.DataFrame(map_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å Plotly
            fig = px.scatter_mapbox(
                df_map,
                lat="lat",
                lon="lon",
                hover_name="name",
                hover_data=["zone"],
                color="zone",
                zoom=10,
                height=500,
                title="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–∞ –ë–∞–ª–∏"
            )
            
            fig.update_layout(
                mapbox_style="open-street-map",
                mapbox=dict(center=dict(lat=-8.3405, lon=115.0920))  # –¶–µ–Ω—Ç—Ä –ë–∞–ª–∏
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
    st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π")
    
    selected_restaurant_loc = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        restaurants,
        key="edit_location"
    )
    
    if selected_restaurant_loc in locations:
        current_data = locations[selected_restaurant_loc]
        st.info(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {current_data.get('latitude', 'N/A')}, {current_data.get('longitude', 'N/A')}")
        st.info(f"–ó–æ–Ω–∞: {current_data.get('zone', 'N/A')}")
    else:
        st.warning("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        new_lat = st.number_input("–®–∏—Ä–æ—Ç–∞ (latitude):", value=-8.3405, format="%.6f")
        new_zone = st.selectbox("–ó–æ–Ω–∞:", ["Beach", "Central", "Mountain", "Urban"])
    
    with col2:
        new_lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞ (longitude):", value=115.0920, format="%.6f")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if selected_restaurant_loc not in locations:
            locations[selected_restaurant_loc] = {}
        
        locations[selected_restaurant_loc].update({
            'latitude': new_lat,
            'longitude': new_lon,
            'zone': new_zone
        })
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        try:
            with open('data/bali_restaurant_locations.json', 'w', encoding='utf-8') as f:
                json.dump(locations, f, indent=2, ensure_ascii=False)
            
            st.success(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {selected_restaurant_loc} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.experimental_rerun()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ===== –ë–ê–õ–ò–ô–°–ö–ò–ô –ö–ê–õ–ï–ù–î–ê–†–¨ =====
elif page == "üóìÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å":
    st.markdown("## üóìÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        st.markdown("### üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        import calendar
        from datetime import date
        
        today = date.today()
        cal = calendar.monthcalendar(today.year, today.month)
        month_name = calendar.month_name[today.month]
        
        st.markdown(f"#### üìÖ {month_name} {today.year}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_df = pd.DataFrame(cal)
        calendar_df = calendar_df.replace(0, '')
        
        st.dataframe(calendar_df, use_container_width=True)
        
        # –°–ø–∏—Å–æ–∫ –±–∞–ª–∏–π—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        st.markdown("### üèùÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (35 –≤–∏–¥–æ–≤)")
        
        holiday_types = [
            "üåï Purnama (–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ)",
            "üåë Tilem (–ù–æ–≤–æ–ª—É–Ω–∏–µ)", 
            "üé≠ Galungan",
            "üôè Kuningan",
            "üèõÔ∏è Odalan (–•—Ä–∞–º–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)",
            "üáÆüá© –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
            "üïå –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
            "‚ö° Nyepi (–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã)"
        ]
        
        for holiday in holiday_types:
            st.markdown(f"- {holiday}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        if st.button("üìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤..."):
                st.markdown("### üìà –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
                
                # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                try:
                    import json
                    with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                        holiday_data = json.load(f)
                    
                    holiday_impact = {}
                    for date, info in list(holiday_data.items())[:5]:  # –¢–æ–ø-5 –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
                        if 'impact_percent' in info:
                            holiday_impact[info.get('name', date)] = f"{info['impact_percent']:+.1f}%"
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö: {e}")
                    holiday_impact = {"–î–∞–Ω–Ω—ã–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}
                
                for holiday, impact in holiday_impact.items():
                    color = "success" if impact.startswith('+') else "danger"
                    st.markdown(f'<div class="metric-card {color}-metric"><b>{holiday}</b><br>–í–ª–∏—è–Ω–∏–µ: {impact}</div>', unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")

# ===== –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê =====
elif page == "üåç –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.markdown("## üåç –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ë–∞–ª–∏")
    
    tourist_data = load_tourist_data()
    
    if tourist_data:
        st.markdown("### üìä –î–∞–Ω–Ω—ã–µ –ø–æ —Ç—É—Ä–∏—Å—Ç–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìà 2024 vs 2025")
            st.metric("2024 –≥–æ–¥", "3.52 –º–ª–Ω —Ç—É—Ä–∏—Å—Ç–æ–≤")
            st.metric("2025 –≥–æ–¥ (–¥–æ –º–∞—è)", "2.72 –º–ª–Ω —Ç—É—Ä–∏—Å—Ç–æ–≤")
        
        with col2:
            st.markdown("#### üá∑üá∫ –ü–æ–∑–∏—Ü–∏—è –†–æ—Å—Å–∏–∏")
            st.metric("2024 –º–µ—Å—Ç–æ", "#14 (68,572 —Ç—É—Ä–∏—Å—Ç–æ–≤)")
            st.metric("2025 –º–µ—Å—Ç–æ", "#18 (28,672 —Ç—É—Ä–∏—Å—Ç–æ–≤)")
        
        # –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω
        st.markdown("### üèÜ –¢–û–ü-10 —Å—Ç—Ä–∞–Ω –ø–æ —Ç—É—Ä–∏—Å—Ç–∞–º")
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ XLS —Ñ–∞–π–ª–æ–≤
        try:
            import sys
            sys.path.append('.')
            from main import analyze_tourist_data
            
            tourist_data = analyze_tourist_data()
            if tourist_data and 'top_countries_2024' in tourist_data:
                top_countries = []
                for country in tourist_data['top_countries_2024'][:5]:
                    country_2025 = next((c for c in tourist_data.get('top_countries_2025', []) 
                                       if c['country'] == country['country']), 
                                      {'tourists': 0})
                    
                    total_2024 = tourist_data['total_2024']
                    share = (country['tourists'] / total_2024 * 100) if total_2024 > 0 else 0
                    
                    top_countries.append({
                        "–°—Ç—Ä–∞–Ω–∞": f"üè≥Ô∏è {country['country']}",
                        "2024": f"{country['tourists']:,}",
                        "2025": f"{country_2025['tourists']:,}",
                        "–î–æ–ª—è": f"{share:.1f}%"
                    })
            else:
                top_countries = [{"–°—Ç—Ä–∞–Ω–∞": "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "2024": "-", "2025": "-", "–î–æ–ª—è": "-"}]
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            top_countries = [{"–°—Ç—Ä–∞–Ω–∞": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "2024": "-", "2025": "-", "–î–æ–ª—è": "-"}]
        
        df_countries = pd.DataFrame(top_countries)
        st.dataframe(df_countries, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏
        if st.checkbox("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏"):
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π']
            tourists_2024 = [320000, 340000, 380000, 420000, 450000]
            tourists_2025 = [280000, 300000, 350000, 380000, 410000]
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=months, y=tourists_2024, mode='lines+markers', name='2024'))
            fig.add_trace(go.Scatter(x=months, y=tourists_2025, mode='lines+markers', name='2025'))
            
            fig.update_layout(
                title="–î–∏–Ω–∞–º–∏–∫–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞",
                xaxis_title="–ú–µ—Å—è—Ü",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

# –ü–æ–¥–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; margin-top: 2rem;">
    <p>üéØ <strong>MUZAQUEST Analytics Dashboard</strong> | –í–µ—Ä—Å–∏—è 1.0 | 2025</p>
    <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ë–∞–ª–∏ —Å AI –∏ ML</p>
</div>
""", unsafe_allow_html=True)