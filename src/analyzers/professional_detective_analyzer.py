"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∫—Ä—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
–ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã–≤–æ–¥—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
"""

import sqlite3
import pandas as pd
import json
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

# –ò–º–ø–æ—Ä—Ç fake orders filter –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from ..utils.fake_orders_filter import FakeOrdersFilter
    FAKE_ORDERS_AVAILABLE = True
except ImportError:
    FAKE_ORDERS_AVAILABLE = False


class ProfessionalDetectiveAnalyzer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ —É—Ä–æ–≤–Ω—è –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.holidays_data = self._load_holidays()
        self.locations_data = self._load_locations()
        
        if FAKE_ORDERS_AVAILABLE:
            self.fake_orders_filter = FakeOrdersFilter()
        else:
            self.fake_orders_filter = None
    
    def analyze_sales_performance(self, restaurant_name: str, start_date: str, end_date: str) -> List[str]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            
        Returns:
            List[str]: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        results = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        results.append("üîç 7. –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
        results.append("=" * 80)
        results.append("")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        period_stats = self._get_period_statistics(restaurant_name, start_date, end_date)
        if not period_stats:
            results.append("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return results
        
        # 1. –û–±–∑–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        results.extend(self._format_period_overview(period_stats, start_date, end_date))
        results.append("")
        
        # 2. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π
        problem_days = self._identify_problem_days(restaurant_name, start_date, end_date)
        results.extend(self._format_problem_days_summary(problem_days))
        results.append("")
        
        # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–ü-5 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π
        if problem_days:
            results.extend(self._analyze_top_problem_days(problem_days[:5], restaurant_name))
            results.append("")
        
        # 4. –°–≤–æ–¥–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        results.extend(self._generate_executive_summary(problem_days, period_stats))
        
        return results
    
    def _get_period_statistics(self, restaurant_name: str, start_date: str, end_date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            with sqlite3.connect('database.sqlite') as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return None
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
                query = f"""
                WITH all_dates AS (
                    SELECT stat_date FROM grab_stats
                    WHERE restaurant_id = {restaurant_id}
                    AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                    UNION
                    SELECT stat_date FROM gojek_stats
                    WHERE restaurant_id = {restaurant_id}
                    AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                )
                SELECT
                    COUNT(DISTINCT ad.stat_date) as total_days,
                    SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
                    SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders,
                    AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_daily_sales,
                    MIN(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as min_daily_sales,
                    MAX(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as max_daily_sales
                FROM all_dates ad
                LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
                LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
                """
                
                df = pd.read_sql_query(query, conn)
                if df.empty:
                    return None
                
                return df.iloc[0].to_dict()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def _identify_problem_days(self, restaurant_name: str, start_date: str, end_date: str) -> List[Tuple]:
        """–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
        try:
            with sqlite3.connect('database.sqlite') as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return []
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
                query = f"""
                WITH all_dates AS (
                    SELECT stat_date FROM grab_stats
                    WHERE restaurant_id = {restaurant_id}
                    AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                    UNION
                    SELECT stat_date FROM gojek_stats
                    WHERE restaurant_id = {restaurant_id}
                    AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                )
                SELECT
                    ad.stat_date,
                    COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
                    COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders
                FROM all_dates ad
                LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
                LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
                ORDER BY total_sales ASC
                """
                
                df = pd.read_sql_query(query, conn)
                if df.empty:
                    return []
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω—É –∏ –ø–æ—Ä–æ–≥–∏
                median_sales = df['total_sales'].median()
                q25_sales = df['total_sales'].quantile(0.25)
                mean_sales = df['total_sales'].mean()
                
                problem_days = []
                
                for _, row in df.iterrows():
                    date = row['stat_date']
                    sales = row['total_sales']
                    
                    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –¥–Ω—è
                    if sales < q25_sales:  # –ù–∏–∂–Ω–∏–π –∫–≤–∞—Ä—Ç–∏–ª—å
                        deviation_from_median = ((median_sales - sales) / median_sales) * 100
                        deviation_from_mean = ((mean_sales - sales) / mean_sales) * 100
                        
                        problem_type = "critical" if sales < median_sales * 0.5 else "significant"
                        problem_days.append((date, sales, deviation_from_median, deviation_from_mean, problem_type))
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                problem_days.sort(key=lambda x: x[2], reverse=True)
                
                return problem_days[:15]  # –¢–æ–ø-15 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {e}")
            return []
    
    def _format_period_overview(self, stats: Dict, start_date: str, end_date: str) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±–∑–æ—Ä –ø–µ—Ä–∏–æ–¥–∞"""
        results = []
        
        results.append("üìä –û–ë–ó–û–† –ü–ï–†–ò–û–î–ê")
        results.append("‚îÄ" * 40)
        results.append(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:     {start_date} ‚Äî {end_date}")
        results.append(f"üìà –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏:     {stats['total_sales']:>12,.0f} IDR")
        results.append(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã:      {stats['total_orders']:>12,.0f}")
        results.append(f"üìä –î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ:    {stats['total_days']:>12.0f}")
        results.append(f"üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:   {stats['avg_daily_sales']:>12,.0f} IDR/–¥–µ–Ω—å")
        results.append(f"üìâ –ú–∏–Ω–∏–º—É–º –∑–∞ –¥–µ–Ω—å:   {stats['min_daily_sales']:>12,.0f} IDR")
        results.append(f"üìà –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å:  {stats['max_daily_sales']:>12,.0f} IDR")
        
        # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = (stats['max_daily_sales'] - stats['min_daily_sales']) / stats['avg_daily_sales'] * 100
        results.append(f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:     {volatility:>12.1f}%")
        
        return results
    
    def _format_problem_days_summary(self, problem_days: List[Tuple]) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π"""
        results = []
        
        results.append("üö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ù–ò")
        results.append("‚îÄ" * 40)
        
        if not problem_days:
            results.append("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
            return results
        
        results.append(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {len(problem_days)}")
        results.append("")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
        critical_days = [d for d in problem_days if d[4] == "critical"]
        significant_days = [d for d in problem_days if d[4] == "significant"]
        
        if critical_days:
            results.append(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:  {len(critical_days)} –¥–Ω–µ–π")
        if significant_days:
            results.append(f"üü† –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(significant_days)} –¥–Ω–µ–π")
        
        results.append("")
        results.append("üìâ –¢–û–ü-5 –ù–ê–ò–ë–û–õ–ï–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –î–ù–ï–ô:")
        results.append("    –î–∞—Ç–∞       ‚îÇ   –ü—Ä–æ–¥–∞–∂–∏   ‚îÇ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚îÇ –¢–∏–ø")
        results.append("‚îÄ" * 50)
        
        for i, (date, sales, deviation, _, problem_type) in enumerate(problem_days[:5], 1):
            icon = "üî¥" if problem_type == "critical" else "üü†"
            results.append(f"{i}. {date} ‚îÇ {sales:>9,.0f} IDR ‚îÇ   -{deviation:>5.1f}%   ‚îÇ {icon}")
        
        return results
    
    def _analyze_top_problem_days(self, problem_days: List[Tuple], restaurant_name: str) -> List[str]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π"""
        results = []
        
        results.append("üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –î–ù–ï–ô")
        results.append("=" * 80)
        results.append("")
        
        for i, (date, sales, deviation, _, problem_type) in enumerate(problem_days, 1):
            results.append(f"üìâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨ #{i}: {date}")
            results.append("‚îÄ" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
            day_analysis = self._analyze_specific_day(restaurant_name, date, sales, deviation)
            results.extend(day_analysis)
            results.append("")
        
        return results
    
    def _analyze_specific_day(self, restaurant_name: str, date: str, sales: float, deviation: float) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        results = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        day_data = self._get_day_detailed_data(restaurant_name, date)
        if not day_data:
            results.append("‚ùå –ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
            return results
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        results.append(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: -{deviation:.1f}%)")
        results.append(f"üì¶ –ó–∞–∫–∞–∑—ã: {day_data['total_orders']} (Grab: {day_data['grab_orders']}, Gojek: {day_data['gojek_orders']})")
        results.append(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {sales/day_data['total_orders']:,.0f} IDR" if day_data['total_orders'] > 0 else "üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: –Ω/–¥")
        results.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
        factors = []
        impact_score = 0
        
        # 1. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        operational_factors, op_score = self._analyze_operational_issues(day_data)
        factors.extend(operational_factors)
        impact_score += op_score
        
        # 2. –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        external_factors, ext_score = self._analyze_external_factors(restaurant_name, date)
        factors.extend(external_factors)
        impact_score += ext_score
        
        # 3. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∫–∞—á–µ—Å—Ç–≤–æ
        marketing_factors, mk_score = self._analyze_marketing_quality(day_data)
        factors.extend(marketing_factors)
        impact_score += mk_score
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã
        if factors:
            results.append("üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            for j, factor in enumerate(factors, 1):
                results.append(f"   {j}. {factor}")
        else:
            results.append("üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ò–ß–ò–ù–´: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        
        results.append("")
        
        # –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if impact_score >= 80:
            severity = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï"
            recommendation = "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
        elif impact_score >= 50:
            severity = "üü† –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï"
            recommendation = "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ä—ã"
        elif impact_score >= 30:
            severity = "üü° –£–ú–ï–†–ï–ù–ù–û–ï"
            recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        else:
            severity = "üü¢ –ù–ò–ó–ö–û–ï"
            recommendation = "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è"
        
        results.append(f"üìä –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è: {severity} (–±–∞–ª–ª: {impact_score})")
        results.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
        
        return results
    
    def _get_day_detailed_data(self, restaurant_name: str, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            with sqlite3.connect('database.sqlite') as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return None
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Grab
                grab_query = f"""
                SELECT 
                    COALESCE(sales, 0) as grab_sales,
                    COALESCE(orders, 0) as grab_orders,
                    COALESCE(cancelled_orders, 0) as grab_cancelled,
                    COALESCE(rating, 0) as grab_rating,
                    COALESCE(ads_spend, 0) as grab_ads_spend,
                    COALESCE(ads_sales, 0) as grab_ads_sales,
                    COALESCE(offline_rate, 0) as grab_offline_rate,
                    COALESCE(driver_waiting_time, 0) as grab_driver_waiting
                FROM grab_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date = '{date}'
                """
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Gojek
                gojek_query = f"""
                SELECT 
                    COALESCE(sales, 0) as gojek_sales,
                    COALESCE(orders, 0) as gojek_orders,
                    COALESCE(cancelled_orders, 0) as gojek_cancelled,
                    COALESCE(lost_orders, 0) as gojek_lost,
                    COALESCE(rating, 0) as gojek_rating,
                    COALESCE(ads_spend, 0) as gojek_ads_spend,
                    COALESCE(ads_sales, 0) as gojek_ads_sales,
                    COALESCE(close_time, 0) as gojek_close_time,
                    COALESCE(preparation_time, '00:00:00') as gojek_preparation_time,
                    COALESCE(delivery_time, '00:00:00') as gojek_delivery_time,
                    COALESCE(driver_waiting, 0) as gojek_driver_waiting
                FROM gojek_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date = '{date}'
                """
                
                grab_df = pd.read_sql_query(grab_query, conn)
                gojek_df = pd.read_sql_query(gojek_query, conn)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                result = {}
                
                if not grab_df.empty:
                    grab_data = grab_df.iloc[0].to_dict()
                    result.update(grab_data)
                else:
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                    for key in ['grab_sales', 'grab_orders', 'grab_cancelled', 'grab_rating', 
                               'grab_ads_spend', 'grab_ads_sales', 'grab_offline_rate', 'grab_driver_waiting']:
                        result[key] = 0
                
                if not gojek_df.empty:
                    gojek_data = gojek_df.iloc[0].to_dict()
                    result.update(gojek_data)
                else:
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                    for key in ['gojek_sales', 'gojek_orders', 'gojek_cancelled', 'gojek_lost', 'gojek_rating',
                               'gojek_ads_spend', 'gojek_ads_sales', 'gojek_close_time', 'gojek_driver_waiting']:
                        result[key] = 0
                    # –û—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω
                    for key in ['gojek_preparation_time', 'gojek_delivery_time']:
                        result[key] = '00:00:00'
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                result['total_orders'] = result['grab_orders'] + result['gojek_orders']
                result['total_ads_spend'] = result['grab_ads_spend'] + result['gojek_ads_spend']
                result['total_ads_sales'] = result['grab_ads_sales'] + result['gojek_ads_sales']
                
                return result
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {e}")
            return None
    
    def _analyze_operational_issues(self, day_data: Dict) -> Tuple[List[str], int]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        
        offline_rate –æ—Ç Grab - –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:
        - 0% = –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        - >100% = –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–±–æ–∏ —Å–∏—Å—Ç–µ–º—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        - >300% = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–±–æ–∏ (–∫–∞–∫ –≤ —Å–ª—É—á–∞–µ 357%)
        """
        factors = []
        impact_score = 0
        
        # 1. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        grab_offline = day_data.get('grab_offline_rate', 0)
        if grab_offline > 300:
            factors.append(f"üö® Grab: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ —Å–∏—Å—Ç–µ–º—ã (offline rate {grab_offline:.0f}%)")
            impact_score += 50
        elif grab_offline > 100:
            factors.append(f"üö® Grab: —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (offline rate {grab_offline:.0f}%)")
            impact_score += 40
        elif grab_offline > 50:
            factors.append(f"‚ö†Ô∏è Grab: –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (offline rate {grab_offline:.0f}%)")
            impact_score += 30
        elif grab_offline > 20:
            factors.append(f"‚ö†Ô∏è Grab: —á–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ({grab_offline:.0f}% –≤—Ä–µ–º–µ–Ω–∏)")
            impact_score += 20
        
        # 2. –í—ã–∫–ª—é—á–µ–Ω–∏–µ Gojek (close_time - –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞)
        gojek_close_time_raw = day_data.get('gojek_close_time', 0)
        
        # close_time –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "H:MM:SS" –∏–ª–∏ —á–∏—Å–ª–æ–º
        close_time_str = str(gojek_close_time_raw) if gojek_close_time_raw else "0:0:0"
        
        if close_time_str not in ["0:0:0", "0", "None"] and gojek_close_time_raw:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            try:
                if ":" in close_time_str:
                    parts = close_time_str.split(":")
                    hours = int(parts[0]) if parts[0] else 0
                    minutes = int(parts[1]) if len(parts) > 1 and parts[1] else 0
                    
                    if hours < 12:  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —É—Ç—Ä–æ–º –∫—Ä–∏—Ç–∏—á–Ω–æ
                        factors.append(f"üö® –ü—Ä–æ–≥—Ä–∞–º–º–∞ Gojek –≤—ã–∫–ª—é—á–µ–Ω–∞ –≤ {hours:02d}:{minutes:02d}")
                        impact_score += 45
                    else:  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                        factors.append(f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ Gojek –≤—ã–∫–ª—é—á–µ–Ω–∞ –≤ {hours:02d}:{minutes:02d}")
                        impact_score += 25
                else:
                    # –ï—Å–ª–∏ —á–∏—Å–ª–æ - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–∏–Ω—É—Ç—ã
                    total_minutes = int(float(close_time_str))
                    if total_minutes > 0:
                        hours = total_minutes // 60
                        minutes = total_minutes % 60
                        factors.append(f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ Gojek –≤—ã–∫–ª—é—á–µ–Ω–∞ ({hours}—á {minutes}–º)")
                        impact_score += 30
            except:
                factors.append(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã Gojek")
                impact_score += 20
        
        # 3. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        prep_time = self._time_to_minutes(day_data.get('gojek_preparation_time', '00:00:00'))
        if prep_time > 30:
            factors.append(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–∫–∞: {prep_time} –º–∏–Ω—É—Ç")
            impact_score += 15
        
        delivery_time = self._time_to_minutes(day_data.get('gojek_delivery_time', '00:00:00'))
        if delivery_time > 45:
            factors.append(f"üöö –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {delivery_time} –º–∏–Ω—É—Ç")
            impact_score += 15
        
        # 4. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        grab_waiting_raw = day_data.get('grab_driver_waiting', 0)
        gojek_waiting_raw = day_data.get('gojek_driver_waiting', 0)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ gojek_waiting
        try:
            gojek_waiting = int(gojek_waiting_raw) if gojek_waiting_raw else 0
        except:
            gojek_waiting = 0
        
        # Grab driver_waiting_time –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
        grab_waiting = 0
        try:
            if grab_waiting_raw and str(grab_waiting_raw) != '0':
                import json
                if isinstance(grab_waiting_raw, str):
                    grab_data = json.loads(grab_waiting_raw)
                    if isinstance(grab_data, dict) and 'average' in grab_data:
                        grab_waiting = float(grab_data['average']) / 60  # —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
                    elif isinstance(grab_data, (int, float)):
                        grab_waiting = float(grab_data) / 60  # —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
                elif isinstance(grab_waiting_raw, (int, float)):
                    grab_waiting = float(grab_waiting_raw) / 60  # —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
        except:
            grab_waiting = 0
        
        if grab_waiting > 15:  # > 15 –º–∏–Ω—É—Ç
            factors.append(f"‚è∞ –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π Grab: {grab_waiting:.1f} –º–∏–Ω")
            impact_score += 10
        elif grab_waiting > 10:  # > 10 –º–∏–Ω—É—Ç
            factors.append(f"‚è∞ –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π Grab: {grab_waiting:.1f} –º–∏–Ω")
            impact_score += 5
        
        if gojek_waiting > 15:
            factors.append(f"‚è∞ –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π Gojek: {gojek_waiting} –º–∏–Ω")
            impact_score += 10
        
        # 5. –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        grab_cancelled = day_data.get('grab_cancelled', 0)
        gojek_cancelled = day_data.get('gojek_cancelled', 0)
        gojek_lost = day_data.get('gojek_lost', 0)
        
        total_orders = day_data.get('total_orders', 0)
        if total_orders > 0:
            cancellation_rate = (grab_cancelled + gojek_cancelled + gojek_lost) / total_orders * 100
            if cancellation_rate > 15:
                factors.append(f"üìâ –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {cancellation_rate:.1f}%")
                impact_score += 20
            elif cancellation_rate > 10:
                factors.append(f"‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã: {cancellation_rate:.1f}%")
                impact_score += 10
        
        return factors, impact_score
    
    def _analyze_external_factors(self, restaurant_name: str, date: str) -> Tuple[List[str], int]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã"""
        factors = []
        impact_score = 0
        
        # 1. –ü–æ–≥–æ–¥–∞
        weather_data = self._get_weather_data(restaurant_name, date)
        if weather_data:
            precipitation = weather_data.get('precipitation', 0)
            temperature = weather_data.get('temperature', 27)
            
            if precipitation > 10:
                factors.append(f"üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å: {precipitation:.1f}–º–º")
                impact_score += 25
            elif precipitation > 5:
                factors.append(f"üå¶Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å: {precipitation:.1f}–º–º")
                impact_score += 15
            elif precipitation > 1:
                factors.append(f"üå§Ô∏è –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å: {precipitation:.1f}–º–º")
                impact_score += 5
            
            if temperature < 22 or temperature > 35:
                factors.append(f"üå°Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f}¬∞C")
                impact_score += 10
        
        # 2. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_info = self._check_holiday(date)
        if holiday_info:
            factors.append(f"üéâ {holiday_info}")
            impact_score += 15
        
        # 3. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        date_obj = datetime.strptime(date, '%Y-%m-%d')
        weekday = date_obj.weekday()
        
        if weekday == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            factors.append("üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–æ–±—ã—á–Ω–æ —Å–ª–∞–±—ã–π –¥–µ–Ω—å)")
            impact_score += 5
        elif weekday == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            factors.append("üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏)")
            impact_score += 3
        
        return factors, impact_score
    
    def _analyze_marketing_quality(self, day_data: Dict) -> Tuple[List[str], int]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∫–∞—á–µ—Å—Ç–≤–æ"""
        factors = []
        impact_score = 0
        
        # 1. ROAS –∞–Ω–∞–ª–∏–∑
        grab_spend = day_data.get('grab_ads_spend', 0)
        grab_sales = day_data.get('grab_ads_sales', 0)
        gojek_spend = day_data.get('gojek_ads_spend', 0)
        gojek_sales = day_data.get('gojek_ads_sales', 0)
        
        if grab_spend > 0:
            grab_roas = grab_sales / grab_spend
            if grab_roas < 2:
                factors.append(f"üìâ –ù–∏–∑–∫–∏–π ROAS Grab: {grab_roas:.1f}")
                impact_score += 20
            elif grab_roas > 10:
                factors.append(f"üìà –û—Ç–ª–∏—á–Ω—ã–π ROAS Grab: {grab_roas:.1f}")
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ impact_score
        
        if gojek_spend > 0:
            gojek_roas = gojek_sales / gojek_spend
            if gojek_roas < 2:
                factors.append(f"üìâ –ù–∏–∑–∫–∏–π ROAS Gojek: {gojek_roas:.1f}")
                impact_score += 20
            elif gojek_roas > 10:
                factors.append(f"üìà –û—Ç–ª–∏—á–Ω—ã–π ROAS Gojek: {gojek_roas:.1f}")
        
        # 2. –†–µ–π—Ç–∏–Ω–≥–∏
        grab_rating = day_data.get('grab_rating', 0)
        gojek_rating = day_data.get('gojek_rating', 0)
        
        if grab_rating > 0 and grab_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Grab: {grab_rating:.2f}")
            impact_score += 15
        
        if gojek_rating > 0 and gojek_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Gojek: {gojek_rating:.2f}")
            impact_score += 15
        
        return factors, impact_score
    
    def _generate_executive_summary(self, problem_days: List[Tuple], period_stats: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
        results = []
        
        results.append("üìã –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê")
        results.append("=" * 80)
        results.append("")
        
        if not problem_days:
            results.append("‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
            results.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            return results
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        critical_days = [d for d in problem_days if d[4] == "critical"]
        total_lost_revenue = sum([period_stats['avg_daily_sales'] - d[1] for d in problem_days])
        
        results.append("üîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
        results.append(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ {len(problem_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –∏–∑ {period_stats['total_days']:.0f}")
        results.append(f"   ‚Ä¢ {len(critical_days)} –¥–Ω–µ–π —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        results.append(f"   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {total_lost_revenue:,.0f} IDR")
        results.append("")
        
        # –ì–ª–∞–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        results.append("üí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        results.append("   1. üîß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º (Grab/Gojek)")
        results.append("   2. ‚è±Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        results.append("   3. üå§Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
        results.append("   4. üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
        results.append("")
        
        # ROI –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
        potential_recovery = total_lost_revenue * 0.7  # 70% –ø–æ—Ç–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        results.append(f"üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –≠–§–§–ï–ö–¢: +{potential_recovery:,.0f} IDR/–º–µ—Å—è—Ü")
        
        return results
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _load_holidays(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        try:
            with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return {}
    
    def _load_locations(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                locations = {}
                if 'restaurants' in data:
                    for restaurant in data['restaurants']:
                        locations[restaurant['name']] = {
                            'latitude': restaurant['latitude'],
                            'longitude': restaurant['longitude'],
                            'location': restaurant['location']
                        }
                return locations
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π: {e}")
            return {}
    
    def _get_weather_data(self, restaurant_name: str, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        if restaurant_name not in self.locations_data:
            return None
        
        try:
            location = self.locations_data[restaurant_name]
            lat = location['latitude']
            lon = location['longitude']
            
            url = f"https://api.open-meteo.com/v1/forecast"
            params = {
                'latitude': lat,
                'longitude': lon,
                'daily': 'precipitation_sum,temperature_2m_mean',
                'start_date': date,
                'end_date': date,
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'daily' in data and data['daily']['time']:
                    return {
                        'precipitation': data['daily']['precipitation_sum'][0] or 0,
                        'temperature': data['daily']['temperature_2m_mean'][0] or 27
                    }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        
        return None
    
    def _check_holiday(self, date: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"""
        if date in self.holidays_data:
            holiday = self.holidays_data[date]
            return f"{holiday.get('name', '–ü—Ä–∞–∑–¥–Ω–∏–∫')} ({holiday.get('type', 'local')})"
        return None
    
    def _time_to_minutes(self, time_str: str) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è HH:MM:SS –≤ –º–∏–Ω—É—Ç—ã"""
        if not time_str or time_str in ['00:00:00', '0:0:0', '0:00:00', '00:0:0']:
            return 0
        
        try:
            parts = time_str.split(':')
            hours = int(parts[0]) if parts[0] else 0
            minutes = int(parts[1]) if len(parts) > 1 and parts[1] else 0
            return hours * 60 + minutes
        except:
            return 0