#!/usr/bin/env python3
"""
üéØ –ü–†–û–î–ê–ö–®–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–û–î–ê–ñ –î–õ–Ø REPLIT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ main.py

‚úÖ –í–ö–õ–Æ–ß–ê–ï–¢ –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:
- –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã—Ö
- ROAS –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã
- Driver Waiting Time, Preparation Time, Delivery Time
- Close Time (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
- –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
"""

import sqlite3
import pandas as pd
import json
import requests
from datetime import datetime, timedelta
import warnings
import sys
import os
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ fake_orders_filter
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
try:
    from src.utils.fake_orders_filter import get_fake_orders_filter
    FAKE_ORDERS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Fake orders filter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    FAKE_ORDERS_AVAILABLE = False

class ProductionSalesAnalyzer:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self):
        self.holidays_data = self._load_holidays()
        self.locations_data = self._load_locations()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML
        self.ml_available = self._check_ml_availability()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fake orders filter
        if FAKE_ORDERS_AVAILABLE:
            self.fake_orders_filter = get_fake_orders_filter()
            print(f"‚úÖ Fake orders filter –∑–∞–≥—Ä—É–∂–µ–Ω: {len(self.fake_orders_filter.fake_orders_data)} –∑–∞–ø–∏—Å–µ–π")
        else:
            self.fake_orders_filter = None
        
    def _check_ml_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        try:
            import sklearn
            import shap
            return True
        except ImportError:
            return False
        
    def _load_holidays(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        try:
            with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get('results', {})
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {e}")
            return {}
    
    def _load_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å name -> location
                locations = {}
                if 'restaurants' in data:
                    for restaurant in data['restaurants']:
                        locations[restaurant['name']] = {
                            'latitude': restaurant['latitude'],
                            'longitude': restaurant['longitude'],
                            'location': restaurant['location']
                        }
                return locations
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return {}
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date, use_ml=True):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å main.py
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞  
            use_ml: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        """
        
        # –ï—Å–ª–∏ ML –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∑–∞–ø—Ä–æ—à–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if use_ml and self.ml_available:
            try:
                from .integrated_ml_detective import IntegratedMLDetective
                print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º ML-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
                
                ml_detective = IntegratedMLDetective()
                return ml_detective.analyze_with_ml_explanations(
                    restaurant_name, start_date, end_date
                )
            except Exception as e:
                print(f"‚ö†Ô∏è ML –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print("üìä –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É...")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return self._standard_detective_analysis(restaurant_name, start_date, end_date)
    
    def _standard_detective_analysis(self, restaurant_name, start_date, end_date):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ ML"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
            bad_days = self._find_bad_days(restaurant_name, start_date, end_date)
            
            if not bad_days:
                return [
                    f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –£ {restaurant_name} –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂",
                    f"üìä –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} - {end_date}",
                    f"üéØ –í—Å–µ –¥–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É"
                ]
            
            results = []
            results.append(f"üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name}")
            results.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            results.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(bad_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
            results.append("")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–µ–Ω—å
            for i, bad_day_info in enumerate(bad_days[:5], 1):  # –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –¥–Ω–µ–π
                date = bad_day_info[0]
                problem_percent = bad_day_info[1]
                problem_type = bad_day_info[2] if len(bad_day_info) > 2 else 'relative_drop'
                
                day_analysis = self._analyze_specific_day(restaurant_name, date)
                
                results.append(f"üìâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨ #{i}: {date}")
                
                if problem_type == 'absolute_low':
                    results.append(f"   üìâ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {problem_percent:.1f}% –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã")
                else:
                    results.append(f"   üíî –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {problem_percent:.1f}%")
                results.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                for line in day_analysis:
                    results.append(f"   {line}")
                results.append("")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            results.extend(self._generate_general_recommendations(bad_days))
            
            return results
            
        except Exception as e:
            return [
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {restaurant_name}: {e}",
                "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑..."
            ]
    
    def _find_bad_days(self, restaurant_name, start_date, end_date):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂"""
        with sqlite3.connect('database.sqlite') as conn:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return []
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            query = f"""
            WITH all_dates AS (
                SELECT stat_date FROM grab_stats 
                WHERE restaurant_id = {restaurant_id} 
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                UNION 
                SELECT stat_date FROM gojek_stats 
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
            ),
            combined_sales AS (
                SELECT 
                    ad.stat_date,
                    COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales
                FROM all_dates ad
                LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
                LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
            )
            SELECT * FROM combined_sales 
            ORDER BY stat_date
            """
            
            df = pd.read_sql_query(query, conn)
        
        if len(df) < 7:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        df['sales_7day_avg'] = df['total_sales'].rolling(window=7, center=True).mean()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –ø–∞–¥–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ 20%
        bad_days = []
        for _, row in df.iterrows():
            if pd.isna(row['sales_7day_avg']) or row['sales_7day_avg'] == 0:
                continue
                
            drop_percent = ((row['sales_7day_avg'] - row['total_sales']) / row['sales_7day_avg']) * 100
            if drop_percent >= 20:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 20%
                bad_days.append((row['stat_date'], drop_percent, 'relative_drop'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–º–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
        median_sales = df['total_sales'].median()
        low_threshold = median_sales * 0.7  # 70% –æ—Ç –º–µ–¥–∏–∞–Ω—ã
        
        for _, row in df.iterrows():
            if row['total_sales'] < low_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                if not any(day[0] == row['stat_date'] for day in bad_days):
                    below_median_percent = ((median_sales - row['total_sales']) / median_sales) * 100
                    bad_days.append((row['stat_date'], below_median_percent, 'absolute_low'))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –ø—Ä–æ–±–ª–µ–º—ã
        bad_days.sort(key=lambda x: x[1], reverse=True)
        return bad_days
    
    def _analyze_specific_day(self, restaurant_name, target_date):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
        day_data = self._get_day_data(restaurant_name, target_date)
        if not day_data:
            return ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        monthly_averages = self._get_monthly_averages(restaurant_name, target_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_data = self._get_weather_data(restaurant_name, target_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_info = self.holidays_data.get(target_date)
        
        results = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        results.append(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day_data['total_sales']:,.0f} IDR ({day_data['total_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü¢ Grab: {day_data['grab_sales']:,.0f} IDR ({day_data['grab_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü† Gojek: {day_data['gojek_sales']:,.0f} IDR ({day_data['gojek_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors = []
        impact_score = 0
        critical_issues = []
        
        # Fake orders —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑—é–º–µ, –∑–¥–µ—Å—å –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        
        # 1. –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if day_data.get('gojek_close_time', '00:00:00') != '00:00:00':
            outage_seconds = self._parse_time_string(day_data['gojek_close_time'])
            if outage_seconds >= 18000:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Gojek")
            elif outage_seconds >= 3600:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 30
        
        if day_data.get('grab_offline_rate', 0) > 0:
            offline_rate = day_data['grab_offline_rate']
            if offline_rate >= 300:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Grab offline {offline_rate:.1f}%")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Grab")
            elif offline_rate >= 60:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Grab offline {offline_rate:.1f}%")
                impact_score += 30
        
        # 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
        time_impact = self._analyze_time_factors(day_data, monthly_averages, factors, critical_issues)
        impact_score += time_impact
        
        # 3. –†–µ–∫–ª–∞–º–∞ –∏ ROAS
        ads_impact = self._analyze_advertising(day_data, factors, critical_issues)
        impact_score += ads_impact
        
        # 4. –ü–æ–≥–æ–¥–∞
        if weather_data:
            if weather_data['precipitation'] > 10:
                factors.append(f"üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 25
            elif weather_data['precipitation'] > 5:
                factors.append(f"üå¶Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 15
            elif weather_data['precipitation'] > 0:
                factors.append(f"üå§Ô∏è –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 5
        
        # 5. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if holiday_info:
            factors.append(f"üéâ {holiday_info.get('name', '–ü—Ä–∞–∑–¥–Ω–∏–∫')}")
            impact_score += 25
        
        # 6. –†–µ–π—Ç–∏–Ω–≥–∏
        gojek_rating = day_data.get('gojek_rating', 0)
        grab_rating = day_data.get('grab_rating', 0)
        
        if gojek_rating > 0 and gojek_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Gojek: {gojek_rating}")
            impact_score += 20
        elif gojek_rating > 0 and gojek_rating < 4.7:
            factors.append(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Gojek: {gojek_rating}")
            impact_score += 10
            
        if grab_rating > 0 and grab_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Grab: {grab_rating}")
            impact_score += 20
        elif grab_rating > 0 and grab_rating < 4.7:
            factors.append(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Grab: {grab_rating}")
            impact_score += 10
        
        # 7. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = pd.to_datetime(target_date).strftime('%A')
        if weekday in ['Sunday', 'Monday']:
            factors.append(f"üìÖ –°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({weekday})")
            impact_score += 5
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã
        if factors:
            results.append("")
            results.append("üîç –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(factors[:5], 1):  # –¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                results.append(f"   {i}. {factor}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if critical_issues:
            results.append("")
            results.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in critical_issues:
                results.append(f"   ‚Ä¢ {issue}")
        
        # –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è
        results.append("")
        if impact_score >= 70:
            results.append("üìä –û–¶–ï–ù–ö–ê: üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        elif impact_score >= 40:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü° –í–´–°–û–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ") 
        elif impact_score >= 20:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü† –°–†–ï–î–ù–ï–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        else:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü¢ –ù–ò–ó–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        
        return results
    
    def _apply_fake_orders_filter(self, restaurant_name, date, day_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä fake orders –∫ –¥–∞–Ω–Ω—ã–º"""
        if not self.fake_orders_filter or not day_data:
            return day_data, None
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        grab_sales = day_data.get('grab_sales', 0)
        grab_orders = day_data.get('grab_orders', 0)
        gojek_sales = day_data.get('gojek_sales', 0)
        gojek_orders = day_data.get('gojek_orders', 0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
        adjustment = self.fake_orders_filter.adjust_sales_data(
            restaurant_name, date, grab_sales, grab_orders, gojek_sales, gojek_orders
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        day_data['grab_sales'] = adjustment['grab_sales_adjusted']
        day_data['grab_orders'] = adjustment['grab_orders_adjusted']
        day_data['gojek_sales'] = adjustment['gojek_sales_adjusted']
        day_data['gojek_orders'] = adjustment['gojek_orders_adjusted']
        day_data['total_sales'] = day_data['grab_sales'] + day_data['gojek_sales']
        day_data['total_orders'] = day_data['grab_orders'] + day_data['gojek_orders']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ
        fake_info = adjustment['fake_orders_removed']
        if (fake_info['grab_fake_orders'] > 0 or fake_info['gojek_fake_orders'] > 0):
            return day_data, fake_info
        
        return day_data, None

    def _get_day_data(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        with sqlite3.connect('database.sqlite') as conn:
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return None
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Grab
            grab_query = f"""
            SELECT 
                stat_date,
                COALESCE(sales, 0) as grab_sales,
                COALESCE(orders, 0) as grab_orders,
                COALESCE(offline_rate, 0) as grab_offline_rate,
                COALESCE(driver_waiting_time, 0) / 60.0 as grab_driver_waiting_min,
                COALESCE(ads_spend, 0) as grab_ads_spend,
                COALESCE(ads_sales, 0) as grab_ads_sales,
                COALESCE(rating, 0) as grab_rating
            FROM grab_stats
            WHERE restaurant_id = {restaurant_id} AND stat_date = '{target_date}'
            """
            grab_df = pd.read_sql_query(grab_query, conn)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Gojek
            gojek_query = f"""
            SELECT 
                stat_date,
                COALESCE(sales, 0) as gojek_sales,
                COALESCE(orders, 0) as gojek_orders,
                COALESCE(close_time, '00:00:00') as gojek_close_time,
                COALESCE(preparation_time, '00:00:00') as gojek_preparation_time,
                COALESCE(delivery_time, '00:00:00') as gojek_delivery_time,
                COALESCE(driver_waiting, 0) as gojek_driver_waiting_min,
                COALESCE(ads_spend, 0) as gojek_ads_spend,
                COALESCE(ads_sales, 0) as gojek_ads_sales,
                COALESCE(rating, 0) as gojek_rating
            FROM gojek_stats
            WHERE restaurant_id = {restaurant_id} AND stat_date = '{target_date}'
            """
            gojek_df = pd.read_sql_query(gojek_query, conn)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
            if grab_df.empty and gojek_df.empty:
                return None
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            result = {
                'stat_date': target_date,
                'grab_sales': grab_df.iloc[0]['grab_sales'] if not grab_df.empty else 0,
                'gojek_sales': gojek_df.iloc[0]['gojek_sales'] if not gojek_df.empty else 0,
                'grab_orders': grab_df.iloc[0]['grab_orders'] if not grab_df.empty else 0,
                'gojek_orders': gojek_df.iloc[0]['gojek_orders'] if not gojek_df.empty else 0,
                'grab_offline_rate': grab_df.iloc[0]['grab_offline_rate'] if not grab_df.empty else 0,
                'gojek_close_time': gojek_df.iloc[0]['gojek_close_time'] if not gojek_df.empty else '00:00:00',
                'gojek_preparation_time': gojek_df.iloc[0]['gojek_preparation_time'] if not gojek_df.empty else '00:00:00',
                'gojek_delivery_time': gojek_df.iloc[0]['gojek_delivery_time'] if not gojek_df.empty else '00:00:00',
                'gojek_driver_waiting_min': gojek_df.iloc[0]['gojek_driver_waiting_min'] if not gojek_df.empty else 0,
                'grab_driver_waiting_min': grab_df.iloc[0]['grab_driver_waiting_min'] if not grab_df.empty else 0,
                'grab_ads_spend': grab_df.iloc[0]['grab_ads_spend'] if not grab_df.empty else 0,
                'grab_ads_sales': grab_df.iloc[0]['grab_ads_sales'] if not grab_df.empty else 0,
                'gojek_ads_spend': gojek_df.iloc[0]['gojek_ads_spend'] if not gojek_df.empty else 0,
                'gojek_ads_sales': gojek_df.iloc[0]['gojek_ads_sales'] if not gojek_df.empty else 0,
                'grab_rating': grab_df.iloc[0]['grab_rating'] if not grab_df.empty else 0,
                'gojek_rating': gojek_df.iloc[0]['gojek_rating'] if not gojek_df.empty else 0
            }
            
            result['total_sales'] = result['grab_sales'] + result['gojek_sales']
            result['total_orders'] = result['grab_orders'] + result['gojek_orders']
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä fake orders
            result, fake_info = self._apply_fake_orders_filter(restaurant_name, target_date, result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ fake orders –µ—Å–ª–∏ –µ—Å—Ç—å
            if fake_info:
                result['fake_orders_detected'] = fake_info
            
            return result
    
    def _get_monthly_averages(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        target_month = target_date[:7]  # YYYY-MM
        
        with sqlite3.connect('database.sqlite') as conn:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return {'avg_prep_time': 0, 'avg_delivery_time': 0, 'avg_gojek_waiting': 0, 'avg_grab_waiting': 0}
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            query = f"""
            WITH all_dates AS (
                SELECT stat_date FROM grab_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date LIKE '{target_month}%'
                UNION 
                SELECT stat_date FROM gojek_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date LIKE '{target_month}%'
            )
            SELECT 
                AVG(CASE WHEN gj.preparation_time IS NOT NULL AND gj.preparation_time != '00:00:00' 
                    THEN (CAST(substr(gj.preparation_time, 1, 2) AS INTEGER) * 60 + 
                          CAST(substr(gj.preparation_time, 4, 2) AS INTEGER) + 
                          CAST(substr(gj.preparation_time, 7, 2) AS INTEGER) / 60.0) 
                    ELSE NULL END) as avg_prep_time,
                AVG(CASE WHEN gj.delivery_time IS NOT NULL AND gj.delivery_time != '00:00:00' 
                    THEN (CAST(substr(gj.delivery_time, 1, 2) AS INTEGER) * 60 + 
                          CAST(substr(gj.delivery_time, 4, 2) AS INTEGER) + 
                          CAST(substr(gj.delivery_time, 7, 2) AS INTEGER) / 60.0) 
                    ELSE NULL END) as avg_delivery_time,
                AVG(CASE WHEN gj.driver_waiting > 0 THEN gj.driver_waiting ELSE NULL END) as avg_gojek_waiting,
                AVG(CASE WHEN g.driver_waiting_time > 0 THEN g.driver_waiting_time / 60.0 ELSE NULL END) as avg_grab_waiting
            FROM all_dates ad
            LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
            LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
            """
            
            df = pd.read_sql_query(query, conn)
            
        if len(df) > 0:
            return {
                'avg_prep_time': df['avg_prep_time'].iloc[0] or 0,
                'avg_delivery_time': df['avg_delivery_time'].iloc[0] or 0,
                'avg_gojek_waiting': df['avg_gojek_waiting'].iloc[0] or 0,
                'avg_grab_waiting': df['avg_grab_waiting'].iloc[0] or 0
            }
        return {'avg_prep_time': 0, 'avg_delivery_time': 0, 'avg_gojek_waiting': 0, 'avg_grab_waiting': 0}
    
    def _get_weather_data(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        location = self.locations_data.get(restaurant_name)
        if not location:
            return None
            
        try:
            url = f"https://archive-api.open-meteo.com/v1/era5"
            params = {
                'latitude': location['latitude'],
                'longitude': location['longitude'],
                'start_date': date,
                'end_date': date,
                'daily': ['precipitation_sum', 'temperature_2m_mean'],
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'daily' in data:
                    return {
                        'precipitation': data['daily']['precipitation_sum'][0] or 0,
                        'temperature': data['daily']['temperature_2m_mean'][0] or 27
                    }
        except:
            pass
        
        return None
    
    def _analyze_time_factors(self, day_data, monthly_averages, factors, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏"""
        impact_score = 0
        
        # Preparation Time
        prep_time_str = day_data.get('gojek_preparation_time', '00:00:00')
        if prep_time_str and prep_time_str != '00:00:00':
            prep_minutes = self._parse_time_to_minutes(prep_time_str)
            avg_prep = monthly_averages['avg_prep_time']
            
            if avg_prep > 0:
                prep_deviation = ((prep_minutes - avg_prep) / avg_prep) * 100
                if prep_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ Gojek")
                    impact_score += 30
                elif prep_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
        
        # Delivery Time
        delivery_time_str = day_data.get('gojek_delivery_time', '00:00:00')
        if delivery_time_str and delivery_time_str != '00:00:00':
            delivery_minutes = self._parse_time_to_minutes(delivery_time_str)
            avg_delivery = monthly_averages['avg_delivery_time']
            
            if avg_delivery > 0:
                delivery_deviation = ((delivery_minutes - avg_delivery) / avg_delivery) * 100
                if delivery_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ Gojek")
                    impact_score += 30
                elif delivery_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
        
        # Driver Waiting Time
        gojek_waiting = day_data.get('gojek_driver_waiting_min', 0)
        if gojek_waiting > 0:
            avg_gojek_waiting = monthly_averages['avg_gojek_waiting']
            if avg_gojek_waiting > 0:
                waiting_deviation = ((gojek_waiting - avg_gojek_waiting) / avg_gojek_waiting) * 100
                if waiting_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Gojek")
                    impact_score += 30
                elif waiting_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
                    
        return impact_score
    
    def _analyze_advertising(self, day_data, factors, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        grab_ads_spend = day_data.get('grab_ads_spend', 0)
        grab_ads_sales = day_data.get('grab_ads_sales', 0)
        gojek_ads_spend = day_data.get('gojek_ads_spend', 0)
        gojek_ads_sales = day_data.get('gojek_ads_sales', 0)
        
        ads_working = False
        impact_score = 0
        
        if grab_ads_spend > 0:
            grab_roas = grab_ads_sales / grab_ads_spend
            ads_working = True
            if grab_roas >= 10:
                factors.append(f"‚úÖ Grab ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {grab_roas:.1f}")
            elif grab_roas >= 3:
                factors.append(f"üü¢ Grab ROAS —Ö–æ—Ä–æ—à–∏–π: {grab_roas:.1f}")
            elif grab_roas < 1:
                factors.append(f"üö® Grab ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {grab_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Grab")
                impact_score += 40
                
        if gojek_ads_spend > 0:
            gojek_roas = gojek_ads_sales / gojek_ads_spend
            ads_working = True
            if gojek_roas >= 10:
                factors.append(f"‚úÖ Gojek ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {gojek_roas:.1f}")
            elif gojek_roas >= 3:
                factors.append(f"üü¢ Gojek ROAS —Ö–æ—Ä–æ—à–∏–π: {gojek_roas:.1f}")
            elif gojek_roas < 1:
                factors.append(f"üö® Gojek ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {gojek_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Gojek")
                impact_score += 40
        
        if not ads_working:
            factors.append("‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
            impact_score += 20
            
        return impact_score
    
    def _generate_general_recommendations(self, bad_days):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        results = []
        results.append("üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        results.append("")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        weekend_issues = sum(1 for bad_day_info in bad_days if pd.to_datetime(bad_day_info[0]).strftime('%A') in ['Sunday', 'Monday'])
        
        if weekend_issues > len(bad_days) * 0.5:
            results.append("üìÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏:")
            results.append("   ‚Ä¢ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º")
            results.append("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        
        results.append("üîß –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        results.append("   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        results.append("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        results.append("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ROAS")
        results.append("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        results.append("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è")
        
        return results
    
    def _parse_time_string(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2])
        except:
            pass
        return 0
    
    def _parse_time_to_minutes(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 60 + int(parts[1]) + int(parts[2]) / 60.0
        except:
            pass
        return 0
    
    def _format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 3600:
            minutes = seconds // 60
            return f"{minutes}–º"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{hours}—á"

    def get_period_statistics_with_corrections(self, restaurant_name, start_date, end_date):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏:
        –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ = –ò—Å—Ö–æ–¥–Ω—ã–µ - –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ - –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ - –§–µ–π–∫–æ–≤—ã–µ
        """
        try:
            with sqlite3.connect('database.sqlite') as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return None
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Grab
                grab_query = f"""
                SELECT 
                    SUM(COALESCE(sales, 0)) as original_sales,
                    SUM(COALESCE(orders, 0)) as original_orders,
                    SUM(COALESCE(cancelled_orders, 0)) as cancelled_orders,
                    SUM(COALESCE(ads_spend, 0)) as ads_spend,
                    SUM(COALESCE(ads_sales, 0)) as ads_sales,
                    SUM(COALESCE(payouts, 0)) as payouts,
                    SUM(COALESCE(new_customers, 0)) as new_customers,
                    SUM(COALESCE(repeated_customers, 0)) as repeated_customers,
                    SUM(COALESCE(reactivated_customers, 0)) as reactivated_customers
                FROM grab_stats
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                """
                grab_df = pd.read_sql_query(grab_query, conn)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Gojek
                gojek_query = f"""
                SELECT 
                    SUM(COALESCE(sales, 0)) as original_sales,
                    SUM(COALESCE(orders, 0)) as original_orders,
                    SUM(COALESCE(cancelled_orders, 0)) as cancelled_orders,
                    SUM(COALESCE(potential_lost, 0)) as potential_lost,
                    SUM(COALESCE(ads_spend, 0)) as ads_spend,
                    SUM(COALESCE(ads_sales, 0)) as ads_sales,
                    SUM(COALESCE(new_client, 0)) as new_clients,
                    SUM(COALESCE(active_client, 0)) as active_clients,
                    SUM(COALESCE(returned_client, 0)) as returned_clients
                FROM gojek_stats
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                """
                gojek_df = pd.read_sql_query(gojek_query, conn)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                fake_stats = self._get_fake_orders_for_period(restaurant_name, start_date, end_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'restaurant_name': restaurant_name,
                    'period': f"{start_date} ‚Äî {end_date}",
                    
                    # Grab –¥–∞–Ω–Ω—ã–µ
                    'grab_original_orders': int(grab_df.iloc[0]['original_orders']) if not grab_df.empty else 0,
                    'grab_original_sales': int(grab_df.iloc[0]['original_sales']) if not grab_df.empty else 0,
                    'grab_cancelled_orders': int(grab_df.iloc[0]['cancelled_orders']) if not grab_df.empty else 0,
                    'grab_fake_orders': fake_stats['grab_fake_orders'],
                    'grab_fake_amount': fake_stats['grab_fake_amount'],
                    
                    # Gojek –¥–∞–Ω–Ω—ã–µ
                    'gojek_original_orders': int(gojek_df.iloc[0]['original_orders']) if not gojek_df.empty else 0,
                    'gojek_original_sales': int(gojek_df.iloc[0]['original_sales']) if not gojek_df.empty else 0,
                    'gojek_cancelled_orders': int(gojek_df.iloc[0]['cancelled_orders']) if not gojek_df.empty else 0,
                    'gojek_potential_lost': int(gojek_df.iloc[0]['potential_lost']) if not gojek_df.empty else 0,
                    'gojek_fake_orders': fake_stats['gojek_fake_orders'],
                    'gojek_fake_amount': fake_stats['gojek_fake_amount'],
                    
                    # –†–µ–∫–ª–∞–º–∞
                    'grab_ads_spend': int(grab_df.iloc[0]['ads_spend']) if not grab_df.empty else 0,
                    'grab_ads_sales': int(grab_df.iloc[0]['ads_sales']) if not grab_df.empty else 0,
                    'gojek_ads_spend': int(gojek_df.iloc[0]['ads_spend']) if not gojek_df.empty else 0,
                    'gojek_ads_sales': int(gojek_df.iloc[0]['ads_sales']) if not gojek_df.empty else 0,
                    
                    # –í—ã–ø–ª–∞—Ç—ã
                    'grab_payouts': int(grab_df.iloc[0]['payouts']) if not grab_df.empty else 0,
                    
                    # –ö–ª–∏–µ–Ω—Ç—ã
                    'grab_new_customers': int(grab_df.iloc[0]['new_customers']) if not grab_df.empty else 0,
                    'grab_repeated_customers': int(grab_df.iloc[0]['repeated_customers']) if not grab_df.empty else 0,
                    'grab_reactivated_customers': int(grab_df.iloc[0]['reactivated_customers']) if not grab_df.empty else 0,
                    'gojek_new_clients': int(gojek_df.iloc[0]['new_clients']) if not gojek_df.empty else 0,
                    'gojek_active_clients': int(gojek_df.iloc[0]['active_clients']) if not gojek_df.empty else 0,
                    'gojek_returned_clients': int(gojek_df.iloc[0]['returned_clients']) if not gojek_df.empty else 0,
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ (–æ—á–∏—â–µ–Ω–Ω—ã–µ) –¥–∞–Ω–Ω—ã–µ
                result['grab_final_orders'] = (result['grab_original_orders'] - 
                                             result['grab_cancelled_orders'] - 
                                             result['grab_fake_orders'])
                result['gojek_final_orders'] = (result['gojek_original_orders'] - 
                                              result['gojek_cancelled_orders'] - 
                                              result['gojek_fake_orders'])
                
                result['grab_final_sales'] = result['grab_original_sales'] - result['grab_fake_amount']
                result['gojek_final_sales'] = (result['gojek_original_sales'] - 
                                             result['gojek_fake_amount'] - 
                                             result['gojek_potential_lost'])
                
                # –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                result['total_final_orders'] = result['grab_final_orders'] + result['gojek_final_orders']
                result['total_final_sales'] = result['grab_final_sales'] + result['gojek_final_sales']
                result['total_ads_spend'] = result['grab_ads_spend'] + result['gojek_ads_spend']
                result['total_ads_sales'] = result['grab_ads_sales'] + result['gojek_ads_sales']
                
                # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
                result['grab_avg_check'] = (result['grab_final_sales'] / result['grab_final_orders'] 
                                          if result['grab_final_orders'] > 0 else 0)
                result['gojek_avg_check'] = (result['gojek_final_sales'] / result['gojek_final_orders'] 
                                           if result['gojek_final_orders'] > 0 else 0)
                
                # ROAS
                result['grab_roas'] = (result['grab_ads_sales'] / result['grab_ads_spend'] 
                                     if result['grab_ads_spend'] > 0 else 0)
                result['gojek_roas'] = (result['gojek_ads_sales'] / result['gojek_ads_spend'] 
                                      if result['gojek_ads_spend'] > 0 else 0)
                
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def _get_fake_orders_for_period(self, restaurant_name, start_date, end_date):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if not self.fake_orders_filter:
            return {'grab_fake_orders': 0, 'gojek_fake_orders': 0, 
                   'grab_fake_amount': 0, 'gojek_fake_amount': 0}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç fake orders (DD/MM/YYYY)
        from datetime import datetime
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        
        grab_fakes = 0
        gojek_fakes = 0
        grab_fake_amount = 0
        gojek_fake_amount = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        for order in self.fake_orders_filter.fake_orders_data:
            if order.get('restaurant') == restaurant_name:
                try:
                    order_date_str = order.get('date', '')
                    if '/' in order_date_str:
                        order_dt = datetime.strptime(order_date_str, '%d/%m/%Y')
                        
                        if start_dt <= order_dt <= end_dt:
                            quantity = int(order.get('quantity', 0))
                            amount = int(order.get('amount', 0))
                            
                            if order.get('platform') == 'Grab':
                                grab_fakes += quantity
                                grab_fake_amount += amount
                            elif order.get('platform') == 'Gojek':
                                gojek_fakes += quantity
                                gojek_fake_amount += amount
                except:
                    continue
        
        return {
            'grab_fake_orders': grab_fakes,
            'gojek_fake_orders': gojek_fakes,
            'grab_fake_amount': grab_fake_amount,
            'gojek_fake_amount': gojek_fake_amount
        }

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å main.py
class ProperMLDetectiveAnalysis:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py"""
    
    def __init__(self):
        self.analyzer = ProductionSalesAnalyzer()
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ main.py"""
        return self.analyzer.analyze_restaurant_performance(restaurant_name, start_date, end_date)

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analyzer = ProductionSalesAnalyzer()
    results = analyzer.analyze_restaurant_performance("Only Eggs", "2025-04-01", "2025-05-31")
    for result in results:
        print(result)