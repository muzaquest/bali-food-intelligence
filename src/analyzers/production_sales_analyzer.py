#!/usr/bin/env python3
"""
üéØ –ü–†–û–î–ê–ö–®–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–û–î–ê–ñ –î–õ–Ø REPLIT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ main.py

‚úÖ –í–ö–õ–Æ–ß–ê–ï–¢ –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:
- –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã—Ö
- ROAS –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã
- Driver Waiting Time, Preparation Time, Delivery Time
- Close Time (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
- –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
"""

import sqlite3
import pandas as pd
import json
import requests
from datetime import datetime, timedelta
import warnings
import sys
import os
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ fake_orders_filter
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
try:
    from src.utils.fake_orders_filter import get_fake_orders_filter
    FAKE_ORDERS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Fake orders filter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    FAKE_ORDERS_AVAILABLE = False

class ProductionSalesAnalyzer:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self):
        self.holidays_data = self._load_holidays()
        self.locations_data = self._load_locations()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML
        self.ml_available = self._check_ml_availability()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fake orders filter
        if FAKE_ORDERS_AVAILABLE:
            self.fake_orders_filter = get_fake_orders_filter()
            print(f"‚úÖ Fake orders filter –∑–∞–≥—Ä—É–∂–µ–Ω: {len(self.fake_orders_filter.fake_orders_data)} –∑–∞–ø–∏—Å–µ–π")
        else:
            self.fake_orders_filter = None
        
    def _check_ml_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        try:
            import sklearn
            import shap
            return True
        except ImportError:
            return False
        
    def _load_holidays(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        try:
            with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get('results', {})
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {e}")
            return {}
    
    def _load_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å name -> location
                locations = {}
                if 'restaurants' in data:
                    for restaurant in data['restaurants']:
                        locations[restaurant['name']] = {
                            'latitude': restaurant['latitude'],
                            'longitude': restaurant['longitude'],
                            'location': restaurant['location']
                        }
                return locations
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return {}
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date, use_ml=True):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å main.py
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞  
            use_ml: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        """
        
        # –ï—Å–ª–∏ ML –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∑–∞–ø—Ä–æ—à–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if use_ml and self.ml_available:
            try:
                from .integrated_ml_detective import IntegratedMLDetective
                print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º ML-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
                
                ml_detective = IntegratedMLDetective()
                return ml_detective.analyze_with_ml_explanations(
                    restaurant_name, start_date, end_date
                )
            except Exception as e:
                print(f"‚ö†Ô∏è ML –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print("üìä –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É...")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return self._standard_detective_analysis(restaurant_name, start_date, end_date)
    
    def _standard_detective_analysis(self, restaurant_name, start_date, end_date):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ ML"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
            bad_days = self._find_bad_days(restaurant_name, start_date, end_date)
            
            if not bad_days:
                return [
                    f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –£ {restaurant_name} –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂",
                    f"üìä –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} - {end_date}",
                    f"üéØ –í—Å–µ –¥–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É"
                ]
            
            results = []
            results.append(f"üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name}")
            results.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            results.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(bad_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
            results.append("")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–µ–Ω—å
            for i, bad_day_info in enumerate(bad_days[:5], 1):  # –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –¥–Ω–µ–π
                date = bad_day_info[0]
                problem_percent = bad_day_info[1]
                problem_type = bad_day_info[2] if len(bad_day_info) > 2 else 'relative_drop'
                
                day_analysis = self._analyze_specific_day(restaurant_name, date)
                
                results.append(f"üìâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨ #{i}: {date}")
                
                if problem_type == 'absolute_low':
                    results.append(f"   üìâ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {problem_percent:.1f}% –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã")
                else:
                    results.append(f"   üíî –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {problem_percent:.1f}%")
                results.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                for line in day_analysis:
                    results.append(f"   {line}")
                results.append("")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            results.extend(self._generate_general_recommendations(bad_days))
            
            return results
            
        except Exception as e:
            return [
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {restaurant_name}: {e}",
                "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑..."
            ]
    
    def _find_bad_days(self, restaurant_name, start_date, end_date):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂"""
        with sqlite3.connect('database.sqlite') as conn:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return []
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            query = f"""
            WITH all_dates AS (
                SELECT stat_date FROM grab_stats 
                WHERE restaurant_id = {restaurant_id} 
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                UNION 
                SELECT stat_date FROM gojek_stats 
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
            ),
            combined_sales AS (
                SELECT 
                    ad.stat_date,
                    COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales
                FROM all_dates ad
                LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
                LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
            )
            SELECT * FROM combined_sales 
            ORDER BY stat_date
            """
            
            df = pd.read_sql_query(query, conn)
        
        if len(df) < 7:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        df['sales_7day_avg'] = df['total_sales'].rolling(window=7, center=True).mean()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –ø–∞–¥–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ 20%
        bad_days = []
        for _, row in df.iterrows():
            if pd.isna(row['sales_7day_avg']) or row['sales_7day_avg'] == 0:
                continue
                
            drop_percent = ((row['sales_7day_avg'] - row['total_sales']) / row['sales_7day_avg']) * 100
            if drop_percent >= 20:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 20%
                bad_days.append((row['stat_date'], drop_percent, 'relative_drop'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–º–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
        median_sales = df['total_sales'].median()
        low_threshold = median_sales * 0.7  # 70% –æ—Ç –º–µ–¥–∏–∞–Ω—ã
        
        for _, row in df.iterrows():
            if row['total_sales'] < low_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                if not any(day[0] == row['stat_date'] for day in bad_days):
                    below_median_percent = ((median_sales - row['total_sales']) / median_sales) * 100
                    bad_days.append((row['stat_date'], below_median_percent, 'absolute_low'))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –ø—Ä–æ–±–ª–µ–º—ã
        bad_days.sort(key=lambda x: x[1], reverse=True)
        return bad_days
    
    def _analyze_specific_day(self, restaurant_name, target_date):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
        day_data = self._get_day_data(restaurant_name, target_date)
        if not day_data:
            return ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        monthly_averages = self._get_monthly_averages(restaurant_name, target_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_data = self._get_weather_data(restaurant_name, target_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_info = self.holidays_data.get(target_date)
        
        results = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        results.append(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day_data['total_sales']:,.0f} IDR ({day_data['total_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü¢ Grab: {day_data['grab_sales']:,.0f} IDR ({day_data['grab_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü† Gojek: {day_data['gojek_sales']:,.0f} IDR ({day_data['gojek_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors = []
        impact_score = 0
        critical_issues = []
        
        # Fake orders —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑—é–º–µ, –∑–¥–µ—Å—å –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        
        # 1. –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if day_data.get('gojek_close_time', '00:00:00') != '00:00:00':
            outage_seconds = self._parse_time_string(day_data['gojek_close_time'])
            if outage_seconds >= 18000:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Gojek")
            elif outage_seconds >= 3600:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 30
        
        if day_data.get('grab_offline_rate', 0) > 0:
            offline_rate = day_data['grab_offline_rate']
            if offline_rate >= 300:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Grab offline {offline_rate:.1f}%")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Grab")
            elif offline_rate >= 60:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Grab offline {offline_rate:.1f}%")
                impact_score += 30
        
        # 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
        time_impact = self._analyze_time_factors(day_data, monthly_averages, factors, critical_issues)
        impact_score += time_impact
        
        # 3. –†–µ–∫–ª–∞–º–∞ –∏ ROAS
        ads_impact = self._analyze_advertising(day_data, factors, critical_issues)
        impact_score += ads_impact
        
        # 4. –ü–æ–≥–æ–¥–∞
        if weather_data:
            if weather_data['precipitation'] > 10:
                factors.append(f"üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 25
            elif weather_data['precipitation'] > 5:
                factors.append(f"üå¶Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 15
            elif weather_data['precipitation'] > 0:
                factors.append(f"üå§Ô∏è –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 5
        
        # 5. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if holiday_info:
            factors.append(f"üéâ {holiday_info.get('name', '–ü—Ä–∞–∑–¥–Ω–∏–∫')}")
            impact_score += 25
        
        # 6. –†–µ–π—Ç–∏–Ω–≥–∏
        gojek_rating = day_data.get('gojek_rating', 0)
        grab_rating = day_data.get('grab_rating', 0)
        
        if gojek_rating > 0 and gojek_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Gojek: {gojek_rating}")
            impact_score += 20
        elif gojek_rating > 0 and gojek_rating < 4.7:
            factors.append(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Gojek: {gojek_rating}")
            impact_score += 10
            
        if grab_rating > 0 and grab_rating < 4.5:
            factors.append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Grab: {grab_rating}")
            impact_score += 20
        elif grab_rating > 0 and grab_rating < 4.7:
            factors.append(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ Grab: {grab_rating}")
            impact_score += 10
        
        # 7. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = pd.to_datetime(target_date).strftime('%A')
        if weekday in ['Sunday', 'Monday']:
            factors.append(f"üìÖ –°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({weekday})")
            impact_score += 5
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã
        if factors:
            results.append("")
            results.append("üîç –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(factors[:5], 1):  # –¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                results.append(f"   {i}. {factor}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if critical_issues:
            results.append("")
            results.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in critical_issues:
                results.append(f"   ‚Ä¢ {issue}")
        
        # –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è
        results.append("")
        if impact_score >= 70:
            results.append("üìä –û–¶–ï–ù–ö–ê: üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        elif impact_score >= 40:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü° –í–´–°–û–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ") 
        elif impact_score >= 20:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü† –°–†–ï–î–ù–ï–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        else:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü¢ –ù–ò–ó–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        
        return results
    
    def _apply_fake_orders_filter(self, restaurant_name, date, day_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä fake orders –∫ –¥–∞–Ω–Ω—ã–º"""
        if not self.fake_orders_filter or not day_data:
            return day_data, None
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        grab_sales = day_data.get('grab_sales', 0)
        grab_orders = day_data.get('grab_orders', 0)
        gojek_sales = day_data.get('gojek_sales', 0)
        gojek_orders = day_data.get('gojek_orders', 0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
        adjustment = self.fake_orders_filter.adjust_sales_data(
            restaurant_name, date, grab_sales, grab_orders, gojek_sales, gojek_orders
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        day_data['grab_sales'] = adjustment['grab_sales_adjusted']
        day_data['grab_orders'] = adjustment['grab_orders_adjusted']
        day_data['gojek_sales'] = adjustment['gojek_sales_adjusted']
        day_data['gojek_orders'] = adjustment['gojek_orders_adjusted']
        day_data['total_sales'] = day_data['grab_sales'] + day_data['gojek_sales']
        day_data['total_orders'] = day_data['grab_orders'] + day_data['gojek_orders']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ
        fake_info = adjustment['fake_orders_removed']
        if (fake_info['grab_fake_orders'] > 0 or fake_info['gojek_fake_orders'] > 0):
            return day_data, fake_info
        
        return day_data, None

    def _get_day_data(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        with sqlite3.connect('database.sqlite') as conn:
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return None
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Grab
            grab_query = f"""
            SELECT 
                stat_date,
                COALESCE(sales, 0) as grab_sales,
                COALESCE(orders, 0) as grab_orders,
                COALESCE(offline_rate, 0) as grab_offline_rate,
                COALESCE(driver_waiting_time, 0) / 60.0 as grab_driver_waiting_min,
                COALESCE(ads_spend, 0) as grab_ads_spend,
                COALESCE(ads_sales, 0) as grab_ads_sales,
                COALESCE(rating, 0) as grab_rating
            FROM grab_stats
            WHERE restaurant_id = {restaurant_id} AND stat_date = '{target_date}'
            """
            grab_df = pd.read_sql_query(grab_query, conn)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Gojek
            gojek_query = f"""
            SELECT 
                stat_date,
                COALESCE(sales, 0) as gojek_sales,
                COALESCE(orders, 0) as gojek_orders,
                COALESCE(close_time, '00:00:00') as gojek_close_time,
                COALESCE(preparation_time, '00:00:00') as gojek_preparation_time,
                COALESCE(delivery_time, '00:00:00') as gojek_delivery_time,
                COALESCE(driver_waiting, 0) as gojek_driver_waiting_min,
                COALESCE(ads_spend, 0) as gojek_ads_spend,
                COALESCE(ads_sales, 0) as gojek_ads_sales,
                COALESCE(rating, 0) as gojek_rating
            FROM gojek_stats
            WHERE restaurant_id = {restaurant_id} AND stat_date = '{target_date}'
            """
            gojek_df = pd.read_sql_query(gojek_query, conn)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
            if grab_df.empty and gojek_df.empty:
                return None
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            result = {
                'stat_date': target_date,
                'grab_sales': grab_df.iloc[0]['grab_sales'] if not grab_df.empty else 0,
                'gojek_sales': gojek_df.iloc[0]['gojek_sales'] if not gojek_df.empty else 0,
                'grab_orders': grab_df.iloc[0]['grab_orders'] if not grab_df.empty else 0,
                'gojek_orders': gojek_df.iloc[0]['gojek_orders'] if not gojek_df.empty else 0,
                'grab_offline_rate': grab_df.iloc[0]['grab_offline_rate'] if not grab_df.empty else 0,
                'gojek_close_time': gojek_df.iloc[0]['gojek_close_time'] if not gojek_df.empty else '00:00:00',
                'gojek_preparation_time': gojek_df.iloc[0]['gojek_preparation_time'] if not gojek_df.empty else '00:00:00',
                'gojek_delivery_time': gojek_df.iloc[0]['gojek_delivery_time'] if not gojek_df.empty else '00:00:00',
                'gojek_driver_waiting_min': gojek_df.iloc[0]['gojek_driver_waiting_min'] if not gojek_df.empty else 0,
                'grab_driver_waiting_min': grab_df.iloc[0]['grab_driver_waiting_min'] if not grab_df.empty else 0,
                'grab_ads_spend': grab_df.iloc[0]['grab_ads_spend'] if not grab_df.empty else 0,
                'grab_ads_sales': grab_df.iloc[0]['grab_ads_sales'] if not grab_df.empty else 0,
                'gojek_ads_spend': gojek_df.iloc[0]['gojek_ads_spend'] if not gojek_df.empty else 0,
                'gojek_ads_sales': gojek_df.iloc[0]['gojek_ads_sales'] if not gojek_df.empty else 0,
                'grab_rating': grab_df.iloc[0]['grab_rating'] if not grab_df.empty else 0,
                'gojek_rating': gojek_df.iloc[0]['gojek_rating'] if not gojek_df.empty else 0
            }
            
            result['total_sales'] = result['grab_sales'] + result['gojek_sales']
            result['total_orders'] = result['grab_orders'] + result['gojek_orders']
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä fake orders
            result, fake_info = self._apply_fake_orders_filter(restaurant_name, target_date, result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ fake orders –µ—Å–ª–∏ –µ—Å—Ç—å
            if fake_info:
                result['fake_orders_detected'] = fake_info
            
            return result
    
    def _get_monthly_averages(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        target_month = target_date[:7]  # YYYY-MM
        
        with sqlite3.connect('database.sqlite') as conn:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            restaurant_df = pd.read_sql_query(restaurant_query, conn)
            
            if restaurant_df.empty:
                return {'avg_prep_time': 0, 'avg_delivery_time': 0, 'avg_gojek_waiting': 0, 'avg_grab_waiting': 0}
                
            restaurant_id = restaurant_df.iloc[0]['id']
            
            query = f"""
            WITH all_dates AS (
                SELECT stat_date FROM grab_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date LIKE '{target_month}%'
                UNION 
                SELECT stat_date FROM gojek_stats 
                WHERE restaurant_id = {restaurant_id} AND stat_date LIKE '{target_month}%'
            )
            SELECT 
                AVG(CASE WHEN gj.preparation_time IS NOT NULL AND gj.preparation_time != '00:00:00' 
                    THEN (CAST(substr(gj.preparation_time, 1, 2) AS INTEGER) * 60 + 
                          CAST(substr(gj.preparation_time, 4, 2) AS INTEGER) + 
                          CAST(substr(gj.preparation_time, 7, 2) AS INTEGER) / 60.0) 
                    ELSE NULL END) as avg_prep_time,
                AVG(CASE WHEN gj.delivery_time IS NOT NULL AND gj.delivery_time != '00:00:00' 
                    THEN (CAST(substr(gj.delivery_time, 1, 2) AS INTEGER) * 60 + 
                          CAST(substr(gj.delivery_time, 4, 2) AS INTEGER) + 
                          CAST(substr(gj.delivery_time, 7, 2) AS INTEGER) / 60.0) 
                    ELSE NULL END) as avg_delivery_time,
                AVG(CASE WHEN gj.driver_waiting > 0 THEN gj.driver_waiting ELSE NULL END) as avg_gojek_waiting,
                AVG(CASE WHEN g.driver_waiting_time > 0 THEN g.driver_waiting_time / 60.0 ELSE NULL END) as avg_grab_waiting
            FROM all_dates ad
            LEFT JOIN grab_stats g ON ad.stat_date = g.stat_date AND g.restaurant_id = {restaurant_id}
            LEFT JOIN gojek_stats gj ON ad.stat_date = gj.stat_date AND gj.restaurant_id = {restaurant_id}
            """
            
            df = pd.read_sql_query(query, conn)
            
        if len(df) > 0:
            return {
                'avg_prep_time': df['avg_prep_time'].iloc[0] or 0,
                'avg_delivery_time': df['avg_delivery_time'].iloc[0] or 0,
                'avg_gojek_waiting': df['avg_gojek_waiting'].iloc[0] or 0,
                'avg_grab_waiting': df['avg_grab_waiting'].iloc[0] or 0
            }
        return {'avg_prep_time': 0, 'avg_delivery_time': 0, 'avg_gojek_waiting': 0, 'avg_grab_waiting': 0}
    
    def _get_weather_data(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        location = self.locations_data.get(restaurant_name)
        if not location:
            return None
            
        try:
            url = f"https://archive-api.open-meteo.com/v1/era5"
            params = {
                'latitude': location['latitude'],
                'longitude': location['longitude'],
                'start_date': date,
                'end_date': date,
                'daily': ['precipitation_sum', 'temperature_2m_mean'],
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'daily' in data:
                    return {
                        'precipitation': data['daily']['precipitation_sum'][0] or 0,
                        'temperature': data['daily']['temperature_2m_mean'][0] or 27
                    }
        except:
            pass
        
        return None
    
    def _analyze_time_factors(self, day_data, monthly_averages, factors, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏"""
        impact_score = 0
        
        # Preparation Time
        prep_time_str = day_data.get('gojek_preparation_time', '00:00:00')
        if prep_time_str and prep_time_str != '00:00:00':
            prep_minutes = self._parse_time_to_minutes(prep_time_str)
            avg_prep = monthly_averages['avg_prep_time']
            
            if avg_prep > 0:
                prep_deviation = ((prep_minutes - avg_prep) / avg_prep) * 100
                if prep_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ Gojek")
                    impact_score += 30
                elif prep_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
        
        # Delivery Time
        delivery_time_str = day_data.get('gojek_delivery_time', '00:00:00')
        if delivery_time_str and delivery_time_str != '00:00:00':
            delivery_minutes = self._parse_time_to_minutes(delivery_time_str)
            avg_delivery = monthly_averages['avg_delivery_time']
            
            if avg_delivery > 0:
                delivery_deviation = ((delivery_minutes - avg_delivery) / avg_delivery) * 100
                if delivery_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ Gojek")
                    impact_score += 30
                elif delivery_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
        
        # Driver Waiting Time
        gojek_waiting = day_data.get('gojek_driver_waiting_min', 0)
        if gojek_waiting > 0:
            avg_gojek_waiting = monthly_averages['avg_gojek_waiting']
            if avg_gojek_waiting > 0:
                waiting_deviation = ((gojek_waiting - avg_gojek_waiting) / avg_gojek_waiting) * 100
                if waiting_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Gojek")
                    impact_score += 30
                elif waiting_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}% –≤—ã—à–µ)")
                    impact_score += 15
                    
        return impact_score
    
    def _analyze_advertising(self, day_data, factors, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        grab_ads_spend = day_data.get('grab_ads_spend', 0)
        grab_ads_sales = day_data.get('grab_ads_sales', 0)
        gojek_ads_spend = day_data.get('gojek_ads_spend', 0)
        gojek_ads_sales = day_data.get('gojek_ads_sales', 0)
        
        ads_working = False
        impact_score = 0
        
        if grab_ads_spend > 0:
            grab_roas = grab_ads_sales / grab_ads_spend
            ads_working = True
            if grab_roas >= 10:
                factors.append(f"‚úÖ Grab ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {grab_roas:.1f}")
            elif grab_roas >= 3:
                factors.append(f"üü¢ Grab ROAS —Ö–æ—Ä–æ—à–∏–π: {grab_roas:.1f}")
            elif grab_roas < 1:
                factors.append(f"üö® Grab ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {grab_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Grab")
                impact_score += 40
                
        if gojek_ads_spend > 0:
            gojek_roas = gojek_ads_sales / gojek_ads_spend
            ads_working = True
            if gojek_roas >= 10:
                factors.append(f"‚úÖ Gojek ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {gojek_roas:.1f}")
            elif gojek_roas >= 3:
                factors.append(f"üü¢ Gojek ROAS —Ö–æ—Ä–æ—à–∏–π: {gojek_roas:.1f}")
            elif gojek_roas < 1:
                factors.append(f"üö® Gojek ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {gojek_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Gojek")
                impact_score += 40
        
        if not ads_working:
            factors.append("‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
            impact_score += 20
            
        return impact_score
    
    def _generate_general_recommendations(self, bad_days):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        results = []
        results.append("üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        results.append("")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        weekend_issues = sum(1 for bad_day_info in bad_days if pd.to_datetime(bad_day_info[0]).strftime('%A') in ['Sunday', 'Monday'])
        
        if weekend_issues > len(bad_days) * 0.5:
            results.append("üìÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏:")
            results.append("   ‚Ä¢ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º")
            results.append("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        
        results.append("üîß –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        results.append("   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        results.append("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        results.append("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ROAS")
        results.append("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        results.append("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è")
        
        return results
    
    def _parse_time_string(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2])
        except:
            pass
        return 0
    
    def _parse_time_to_minutes(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 60 + int(parts[1]) + int(parts[2]) / 60.0
        except:
            pass
        return 0
    
    def _format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 3600:
            minutes = seconds // 60
            return f"{minutes}–º"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{hours}—á"

    def get_period_statistics_with_corrections(self, restaurant_name, start_date, end_date):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏:
        –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ = –ò—Å—Ö–æ–¥–Ω—ã–µ - –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ - –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ - –§–µ–π–∫–æ–≤—ã–µ
        """
        try:
            with sqlite3.connect('database.sqlite') as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return None
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Grab
                grab_query = f"""
                SELECT 
                    SUM(COALESCE(sales, 0)) as original_sales,
                    SUM(COALESCE(orders, 0)) as original_orders,
                    SUM(COALESCE(cancelled_orders, 0)) as cancelled_orders,
                    SUM(COALESCE(ads_spend, 0)) as ads_spend,
                    SUM(COALESCE(ads_sales, 0)) as ads_sales,
                    SUM(COALESCE(payouts, 0)) as payouts,
                    SUM(COALESCE(new_customers, 0)) as new_customers,
                    SUM(COALESCE(repeated_customers, 0)) as repeated_customers,
                    SUM(COALESCE(reactivated_customers, 0)) as reactivated_customers
                FROM grab_stats
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                """
                grab_df = pd.read_sql_query(grab_query, conn)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Gojek
                gojek_query = f"""
                SELECT 
                    SUM(COALESCE(sales, 0)) as original_sales,
                    SUM(COALESCE(orders, 0)) as original_orders,
                    SUM(COALESCE(cancelled_orders, 0)) as cancelled_orders,
                    SUM(COALESCE(potential_lost, 0)) as potential_lost,
                    SUM(COALESCE(ads_spend, 0)) as ads_spend,
                    SUM(COALESCE(ads_sales, 0)) as ads_sales,
                    SUM(COALESCE(new_client, 0)) as new_clients,
                    SUM(COALESCE(active_client, 0)) as active_clients,
                    SUM(COALESCE(returned_client, 0)) as returned_clients
                FROM gojek_stats
                WHERE restaurant_id = {restaurant_id}
                AND stat_date BETWEEN '{start_date}' AND '{end_date}'
                """
                gojek_df = pd.read_sql_query(gojek_query, conn)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                fake_stats = self._get_fake_orders_for_period(restaurant_name, start_date, end_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'restaurant_name': restaurant_name,
                    'period': f"{start_date} ‚Äî {end_date}",
                    
                    # Grab –¥–∞–Ω–Ω—ã–µ
                    'grab_original_orders': int(grab_df.iloc[0]['original_orders']) if not grab_df.empty else 0,
                    'grab_original_sales': int(grab_df.iloc[0]['original_sales']) if not grab_df.empty else 0,
                    'grab_cancelled_orders': int(grab_df.iloc[0]['cancelled_orders']) if not grab_df.empty else 0,
                    'grab_fake_orders': fake_stats['grab_fake_orders'],
                    'grab_fake_amount': fake_stats['grab_fake_amount'],
                    
                    # Gojek –¥–∞–Ω–Ω—ã–µ
                    'gojek_original_orders': int(gojek_df.iloc[0]['original_orders']) if not gojek_df.empty else 0,
                    'gojek_original_sales': int(gojek_df.iloc[0]['original_sales']) if not gojek_df.empty else 0,
                    'gojek_cancelled_orders': int(gojek_df.iloc[0]['cancelled_orders']) if not gojek_df.empty else 0,
                    'gojek_potential_lost': int(gojek_df.iloc[0]['potential_lost']) if not gojek_df.empty else 0,
                    'gojek_fake_orders': fake_stats['gojek_fake_orders'],
                    'gojek_fake_amount': fake_stats['gojek_fake_amount'],
                    
                    # –†–µ–∫–ª–∞–º–∞
                    'grab_ads_spend': int(grab_df.iloc[0]['ads_spend']) if not grab_df.empty else 0,
                    'grab_ads_sales': int(grab_df.iloc[0]['ads_sales']) if not grab_df.empty else 0,
                    'gojek_ads_spend': int(gojek_df.iloc[0]['ads_spend']) if not gojek_df.empty else 0,
                    'gojek_ads_sales': int(gojek_df.iloc[0]['ads_sales']) if not gojek_df.empty else 0,
                    
                    # –í—ã–ø–ª–∞—Ç—ã
                    'grab_payouts': int(grab_df.iloc[0]['payouts']) if not grab_df.empty else 0,
                    
                    # –ö–ª–∏–µ–Ω—Ç—ã
                    'grab_new_customers': int(grab_df.iloc[0]['new_customers']) if not grab_df.empty else 0,
                    'grab_repeated_customers': int(grab_df.iloc[0]['repeated_customers']) if not grab_df.empty else 0,
                    'grab_reactivated_customers': int(grab_df.iloc[0]['reactivated_customers']) if not grab_df.empty else 0,
                    'gojek_new_clients': int(gojek_df.iloc[0]['new_clients']) if not gojek_df.empty else 0,
                    'gojek_active_clients': int(gojek_df.iloc[0]['active_clients']) if not gojek_df.empty else 0,
                    'gojek_returned_clients': int(gojek_df.iloc[0]['returned_clients']) if not gojek_df.empty else 0,
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ (–æ—á–∏—â–µ–Ω–Ω—ã–µ) –¥–∞–Ω–Ω—ã–µ
                result['grab_final_orders'] = (result['grab_original_orders'] - 
                                             result['grab_cancelled_orders'] - 
                                             result['grab_fake_orders'])
                result['gojek_final_orders'] = (result['gojek_original_orders'] - 
                                              result['gojek_cancelled_orders'] - 
                                              result['gojek_fake_orders'])
                
                result['grab_final_sales'] = result['grab_original_sales'] - result['grab_fake_amount']
                result['gojek_final_sales'] = (result['gojek_original_sales'] - 
                                             result['gojek_fake_amount'] - 
                                             result['gojek_potential_lost'])
                
                # –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                result['total_final_orders'] = result['grab_final_orders'] + result['gojek_final_orders']
                result['total_final_sales'] = result['grab_final_sales'] + result['gojek_final_sales']
                result['total_ads_spend'] = result['grab_ads_spend'] + result['gojek_ads_spend']
                result['total_ads_sales'] = result['grab_ads_sales'] + result['gojek_ads_sales']
                
                # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
                result['grab_avg_check'] = (result['grab_final_sales'] / result['grab_final_orders'] 
                                          if result['grab_final_orders'] > 0 else 0)
                result['gojek_avg_check'] = (result['gojek_final_sales'] / result['gojek_final_orders'] 
                                           if result['gojek_final_orders'] > 0 else 0)
                
                # ROAS
                result['grab_roas'] = (result['grab_ads_sales'] / result['grab_ads_spend'] 
                                     if result['grab_ads_spend'] > 0 else 0)
                result['gojek_roas'] = (result['gojek_ads_sales'] / result['gojek_ads_spend'] 
                                      if result['gojek_ads_spend'] > 0 else 0)
                
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def _get_fake_orders_for_period(self, restaurant_name, start_date, end_date):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if not self.fake_orders_filter:
            return {'grab_fake_orders': 0, 'gojek_fake_orders': 0, 
                   'grab_fake_amount': 0, 'gojek_fake_amount': 0}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç fake orders (DD/MM/YYYY)
        from datetime import datetime
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        
        grab_fakes = 0
        gojek_fakes = 0
        grab_fake_amount = 0
        gojek_fake_amount = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        for order in self.fake_orders_filter.fake_orders_data:
            if order.get('restaurant') == restaurant_name:
                try:
                    order_date_str = order.get('date', '')
                    if '/' in order_date_str:
                        order_dt = datetime.strptime(order_date_str, '%d/%m/%Y')
                        
                        if start_dt <= order_dt <= end_dt:
                            quantity = int(order.get('quantity', 0))
                            amount = int(order.get('amount', 0))
                            
                            platform = order.get('platform', '').lower()
                            if platform == 'grab':
                                grab_fakes += quantity
                                grab_fake_amount += amount
                            elif platform == 'gojek':
                                gojek_fakes += quantity
                                gojek_fake_amount += amount
                except:
                    continue
        
        return {
            'grab_fake_orders': grab_fakes,
            'gojek_fake_orders': gojek_fakes,
            'grab_fake_amount': grab_fake_amount,
            'gojek_fake_amount': gojek_fake_amount
        }

    def generate_executive_summary(self, restaurant_name, start_date, end_date):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ:
        - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: —Å —É–∫–∞–∑–∞–Ω–∏–µ–º fake orders
        - –ú–µ—Ç—Ä–∏–∫–∏: –∑–∞ –≤—ã—á–µ—Ç–æ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∏ fake
        """
        stats = self.get_period_statistics_with_corrections(restaurant_name, start_date, end_date)
        if not stats:
            return ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"]
        
        results = []
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ –±–∞–∑–µ)
        total_raw_sales = stats['grab_original_sales'] + stats['gojek_original_sales']
        total_raw_orders = stats['grab_original_orders'] + stats['gojek_original_orders']
        
        # –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–∑–∞ –≤—ã—á–µ—Ç–æ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö, fake)
        successful_orders = stats['total_final_orders']
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –≤—ã—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
        avg_check = stats['total_final_sales'] / successful_orders if successful_orders > 0 else 0
        grab_avg_check = stats['grab_final_sales'] / stats['grab_final_orders'] if stats['grab_final_orders'] > 0 else 0
        gojek_avg_check = stats['gojek_final_sales'] / stats['gojek_final_orders'] if stats['gojek_final_orders'] > 0 else 0
        
        # –î–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
        from datetime import datetime
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        days_count = (end_dt - start_dt).days + 1
        daily_revenue = total_raw_sales / days_count
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        total_grab_clients = stats['grab_new_customers'] + stats['grab_repeated_customers'] + stats['grab_reactivated_customers']
        total_gojek_clients = stats['gojek_new_clients'] + stats['gojek_active_clients'] + stats['gojek_returned_clients']
        total_clients = total_grab_clients + total_gojek_clients
        
        # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è Gojek (–∏–∑ —Å—É–º–º—ã –ø–æ—Ç–µ—Ä—å)
        gojek_lost_orders = int(stats['gojek_potential_lost'] / 150000) if stats['gojek_potential_lost'] > 0 else 0  # –ü—Ä–∏–º–µ—Ä–Ω–æ 150k –∑–∞ –∑–∞–∫–∞–∑
        
        # –†–µ–π—Ç–∏–Ω–≥ (–Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑ –±–∞–∑—ã)
        avg_rating = self._get_average_rating(restaurant_name, start_date, end_date)
        
        results.append("üìä 1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï")
        results.append("----------------------------------------")
        results.append(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_raw_sales:,} IDR (GRAB: {stats['grab_original_sales']:,} + GOJEK: {stats['gojek_original_sales']:,})")
        results.append(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_raw_orders:,}")
        results.append(f"   ‚îú‚îÄ‚îÄ üì± GRAB: {stats['grab_original_orders']:,} (—É—Å–ø–µ—à–Ω–æ: {stats['grab_final_orders']:,}, –æ—Ç–º–µ–Ω–µ–Ω–æ: {stats['grab_cancelled_orders']}, fake: {stats['grab_fake_orders']})")
        results.append(f"   ‚îî‚îÄ‚îÄ üõµ GOJEK: {stats['gojek_original_orders']:,} (—É—Å–ø–µ—à–Ω–æ: {stats['gojek_final_orders']:,}, –æ—Ç–º–µ–Ω–µ–Ω–æ: {stats['gojek_cancelled_orders']}, –ø–æ—Ç–µ—Ä—è–Ω–æ: {gojek_lost_orders}, fake: {stats['gojek_fake_orders']})")
        results.append(f"   üí° –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {successful_orders:,}")
        results.append(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:,.0f} IDR")
        results.append(f"   ‚îú‚îÄ‚îÄ üì± GRAB: {grab_avg_check:,.0f} IDR ({stats['grab_final_sales']:,} √∑ {stats['grab_final_orders']:,})")
        results.append(f"   ‚îî‚îÄ‚îÄ üõµ GOJEK: {gojek_avg_check:,.0f} IDR ({stats['gojek_final_sales']:,} √∑ {stats['gojek_final_orders']:,})")
        results.append(f"üìä –î–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {daily_revenue:,.0f} IDR (—Å—Ä–µ–¥–Ω—è—è –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º)")
        results.append(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
        results.append(f"üë• –û–±—Å–ª—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients:,}")
        results.append(f"   ‚îú‚îÄ‚îÄ üì± GRAB: {total_grab_clients:,} (–Ω–æ–≤—ã–µ: {stats['grab_new_customers']}, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ: {stats['grab_repeated_customers']}, —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {stats['grab_reactivated_customers']})")
        results.append(f"   ‚îî‚îÄ‚îÄ üõµ GOJEK: {total_gojek_clients:,} (–Ω–æ–≤—ã–µ: {stats['gojek_new_clients']}, –∞–∫—Ç–∏–≤–Ω—ã–µ: {stats['gojek_active_clients']}, –≤–æ–∑–≤—Ä–∞—Ç–∏–≤—à–∏–µ—Å—è: {stats['gojek_returned_clients']})")
        results.append(f"   üí° –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_clients:,} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        results.append(f"üí∏ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç: {stats['total_ads_spend']:,} IDR ({stats['total_ads_spend']/stats['total_final_sales']*100:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏)")
        
        # –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ç—Ä–µ—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        grab_percent_total = stats['grab_ads_spend']/stats['total_final_sales']*100
        gojek_percent_total = stats['gojek_ads_spend']/stats['total_final_sales']*100
        
        grab_percent_own = stats['grab_ads_spend']/stats['grab_final_sales']*100 if stats['grab_final_sales'] > 0 else 0
        gojek_percent_own = stats['gojek_ads_spend']/stats['gojek_final_sales']*100 if stats['gojek_final_sales'] > 0 else 0
        
        grab_percent_ads = stats['grab_ads_spend']/stats['grab_ads_sales']*100 if stats['grab_ads_sales'] > 0 else 0
        gojek_percent_ads = stats['gojek_ads_spend']/stats['gojek_ads_sales']*100 if stats['gojek_ads_sales'] > 0 else 0
        
        results.append("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç:")
        results.append("   ‚îå‚îÄ üì± GRAB:")
        results.append(f"   ‚îÇ  üí∞ –ë—é–¥–∂–µ—Ç: {stats['grab_ads_spend']:,} IDR ({stats['grab_ads_spend']/stats['total_ads_spend']*100:.1f}% –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞)")
        results.append(f"   ‚îÇ  üìà {grab_percent_total:.1f}% –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏ | {grab_percent_own:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏ GRAB | {grab_percent_ads:.1f}% –æ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
        results.append("   ‚îî‚îÄ üõµ GOJEK:")
        results.append(f"      üí∞ –ë—é–¥–∂–µ—Ç: {stats['gojek_ads_spend']:,} IDR ({stats['gojek_ads_spend']/stats['total_ads_spend']*100:.1f}% –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞)")
        results.append(f"      üìà {gojek_percent_total:.1f}% –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏ | {gojek_percent_own:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏ GOJEK | {gojek_percent_ads:.1f}% –æ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
        results.append("")
        results.append("üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫:")
        results.append("   ‚Ä¢ % –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏ ‚Üí —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å")
        results.append("   ‚Ä¢ % –æ—Ç –≤—ã—Ä—É—á–∫–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        results.append("   ‚Ä¢ % –æ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∫–∞–Ω–∞–ª–∞ ‚Üí —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        results.append("")
        results.append("üéØ ROAS –ê–ù–ê–õ–ò–ó:")
        results.append(f"‚îú‚îÄ‚îÄ üì± GRAB: {stats['grab_roas']:.2f}x (–ø—Ä–æ–¥–∞–∂–∏: {stats['grab_ads_sales']:,} IDR / –±—é–¥–∂–µ—Ç: {stats['grab_ads_spend']:,} IDR)")
        results.append(f"‚îú‚îÄ‚îÄ üõµ GOJEK: {stats['gojek_roas']:.2f}x (–ø—Ä–æ–¥–∞–∂–∏: {stats['gojek_ads_sales']:,} IDR / –±—é–¥–∂–µ—Ç: {stats['gojek_ads_spend']:,} IDR)")
        
        total_roas = stats['total_ads_sales'] / stats['total_ads_spend'] if stats['total_ads_spend'] > 0 else 0
        results.append(f"‚îî‚îÄ‚îÄ üéØ –û–ë–©–ò–ô: {total_roas:.2f}x (–ø—Ä–æ–¥–∞–∂–∏: {stats['total_ads_sales']:,} IDR / –±—é–¥–∂–µ—Ç: {stats['total_ads_spend']:,} IDR)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
        results.append("")
        sales_trends = self._get_sales_trends_analysis(restaurant_name, start_date, end_date)
        results.extend(sales_trends)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
        results.append("")
        customer_analysis = self._get_customer_base_analysis(restaurant_name, start_date, end_date)
        results.extend(customer_analysis)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ—Ä–æ–Ω–∫—É
        results.append("")
        marketing_analysis = self._get_marketing_effectiveness_analysis(restaurant_name, start_date, end_date)
        results.extend(marketing_analysis)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        results.append("")
        financial_metrics = self._get_financial_metrics(restaurant_name, start_date, end_date)
        results.extend(financial_metrics)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        results.append("")
        operational_metrics = self._get_operational_metrics(restaurant_name, start_date, end_date)
        results.extend(operational_metrics)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–±–æ–∏
        results.append("")
        operational_issues = self._get_operational_issues_analysis(restaurant_name, start_date, end_date)
        results.extend(operational_issues)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        results.append("")
        ratings_analysis = self._get_ratings_analysis(restaurant_name, start_date, end_date)
        results.extend(ratings_analysis)
        
        # –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó - –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨!
        results.append("")
        results.append("üîç 5. –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú")
        results.append("----------------------------------------")
        detective_analysis = self.generate_detective_analysis(restaurant_name, start_date, end_date)
        results.extend(detective_analysis)
        
        return results
    
    def generate_detective_analysis(self, restaurant_name, start_date, end_date):
        """
        –ü–£–ë–õ–ò–ß–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨!
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω
        """
        return self.analyze_restaurant_performance(restaurant_name, start_date, end_date, use_ml=False)
    
    def _get_average_rating(self, restaurant_name, start_date, end_date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            with sqlite3.connect('database.sqlite') as conn:
                restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
                restaurant_df = pd.read_sql_query(restaurant_query, conn)
                if restaurant_df.empty:
                    return 4.5
                
                restaurant_id = restaurant_df.iloc[0]['id']
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
                query = f"""
                SELECT 
                    AVG(CASE WHEN g.rating > 0 THEN g.rating ELSE NULL END) as grab_avg,
                    AVG(CASE WHEN gj.rating > 0 THEN gj.rating ELSE NULL END) as gojek_avg,
                    COUNT(CASE WHEN g.rating > 0 THEN 1 END) as grab_days,
                    COUNT(CASE WHEN gj.rating > 0 THEN 1 END) as gojek_days
                FROM 
                    (SELECT DISTINCT stat_date FROM grab_stats 
                     WHERE restaurant_id = {restaurant_id} 
                     AND stat_date BETWEEN '{start_date}' AND '{end_date}') dates
                LEFT JOIN grab_stats g ON g.restaurant_id = {restaurant_id} 
                    AND g.stat_date = dates.stat_date
                LEFT JOIN gojek_stats gj ON gj.restaurant_id = {restaurant_id} 
                    AND gj.stat_date = dates.stat_date
                """
                
                df = pd.read_sql_query(query, conn)
                if not df.empty:
                    grab_avg = df.iloc[0]['grab_avg'] or 0
                    gojek_avg = df.iloc[0]['gojek_avg'] or 0
                    grab_days = df.iloc[0]['grab_days'] or 0
                    gojek_days = df.iloc[0]['gojek_days'] or 0
                    
                    # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                    if grab_days + gojek_days > 0:
                        total_rating = (grab_avg * grab_days + gojek_avg * gojek_days) / (grab_days + gojek_days)
                        return total_rating if total_rating > 0 else 4.5
                    
                return 4.5
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            return 4.5

    def _get_operational_issues_analysis(self, restaurant_name, start_date, end_date):
        """–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—å
            stats = self.get_period_statistics_with_corrections(restaurant_name, start_date, end_date)
            total_sales = stats['grab_final_sales'] + stats['gojek_final_sales']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
            from datetime import datetime, timedelta
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
            days_count = (end_dt - start_dt).days + 1
            
            # –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è –∏ —Å—Ä–µ–¥–Ω–µ—á–∞—Å–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
            daily_avg = total_sales / days_count
            hourly_avg = daily_avg / 24
            
            # –î–æ–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
            grab_share = stats['grab_final_sales'] / total_sales if total_sales > 0 else 0
            gojek_share = stats['gojek_final_sales'] / total_sales if total_sales > 0 else 0
            
            # –ß–∞—Å–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            grab_hourly = hourly_avg * grab_share
            gojek_hourly = hourly_avg * gojek_share
            
            # –ê–Ω–∞–ª–∏–∑ GRAB —Å–±–æ–µ–≤
            cursor.execute('''
            SELECT stat_date, offline_rate 
            FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            AND offline_rate > 60
            ORDER BY offline_rate DESC
            ''', (restaurant_id, start_date, end_date))
            grab_issues = cursor.fetchall()
            
            # –ê–Ω–∞–ª–∏–∑ GOJEK —Å–±–æ–µ–≤ (close_time –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS, –∏—â–µ–º >1 —á–∞—Å–∞)
            cursor.execute('''
            SELECT stat_date, close_time 
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            AND close_time IS NOT NULL AND close_time != ''
            AND (CAST(substr(close_time, 1, instr(close_time, ':')-1) AS INTEGER) > 0 
                 OR (CAST(substr(close_time, 1, instr(close_time, ':')-1) AS INTEGER) = 1 
                     AND CAST(substr(close_time, instr(close_time, ':')+1, 2) AS INTEGER) > 0))
            ORDER BY close_time DESC
            ''', (restaurant_id, start_date, end_date))
            gojek_issues = cursor.fetchall()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å–±–æ–µ–≤ –∏ –ø–æ—Ç–µ—Ä–∏
            grab_total_hours = 0
            gojek_total_hours = 0
            
            for date, rate in grab_issues:
                total_minutes = rate
                hours = total_minutes / 60
                grab_total_hours += hours
                
            for date, close_time_str in gojek_issues:
                # –ü–∞—Ä—Å–∏–º HH:MM:SS
                time_parts = close_time_str.split(':')
                hours = int(time_parts[0]) + int(time_parts[1])/60 + int(time_parts[2])/3600
                gojek_total_hours += hours
            
            grab_losses = grab_total_hours * grab_hourly
            gojek_losses = gojek_total_hours * gojek_hourly
            total_losses = grab_losses + gojek_losses
            
            results = []
            results.append("üîß –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –°–ë–û–ò –ü–õ–ê–¢–§–û–†–ú:")
            results.append(f"‚îú‚îÄ‚îÄ üì± GRAB: {len(grab_issues)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–Ω—è ({grab_total_hours:.2f}—á –æ–±—â–µ–µ –≤—Ä–µ–º—è)")
            results.append(f"‚îú‚îÄ‚îÄ üõµ GOJEK: {len(gojek_issues)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–Ω—è ({gojek_total_hours:.2f}—á –æ–±—â–µ–µ –≤—Ä–µ–º—è)")
            results.append(f"‚îî‚îÄ‚îÄ üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {total_losses:,.0f} IDR ({total_losses/total_sales*100:.2f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏)")
            results.append(f"   ‚îú‚îÄ‚îÄ üì± GRAB –ø–æ—Ç–µ—Ä–∏: {grab_losses:,.0f} IDR ({grab_total_hours:.2f}—á √ó {grab_hourly:,.0f} IDR/—á)")
            results.append(f"   ‚îî‚îÄ‚îÄ üõµ GOJEK –ø–æ—Ç–µ—Ä–∏: {gojek_losses:,.0f} IDR ({gojek_total_hours:.2f}—á √ó {gojek_hourly:,.0f} IDR/—á)")
            results.append("")
            
            if grab_issues or gojek_issues:
                results.append("üö® –ö–†–ò–¢–ò–ß–ù–´–ï –°–ë–û–ò (>1 —á–∞—Å–∞):")
                
                issue_num = 1
                for date, rate in grab_issues[:5]:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: offline_rate% / 60 = —á–∞—Å—ã
                    total_minutes = rate
                    hours = int(total_minutes // 60)
                    minutes = int(total_minutes % 60)
                    loss = (total_minutes / 60) * grab_hourly
                    results.append(f"   {issue_num}. {date}: GRAB offline {hours}:{minutes:02d}:00 (–ø–æ—Ç–µ—Ä–∏: ~{loss:,.0f} IDR)")
                    issue_num += 1
                    
                for date, close_time_str in gojek_issues[:5]:
                    # close_time —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
                    time_parts = close_time_str.split(':')
                    hours_decimal = int(time_parts[0]) + int(time_parts[1])/60 + int(time_parts[2])/3600
                    loss = hours_decimal * gojek_hourly
                    results.append(f"   {issue_num}. {date}: GOJEK offline {close_time_str} (–ø–æ—Ç–µ—Ä–∏: ~{loss:,.0f} IDR)")
                    issue_num += 1
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ–µ–≤: {e}"]
    
    def _get_ratings_analysis(self, restaurant_name, start_date, end_date):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö GOJEK
            cursor.execute('''
            SELECT 
                SUM(one_star_ratings) as stars_1,
                SUM(two_star_ratings) as stars_2,
                SUM(three_star_ratings) as stars_3,
                SUM(four_star_ratings) as stars_4,
                SUM(five_star_ratings) as stars_5,
                SUM(orders) as total_orders_raw,
                SUM(cancelled_orders) as cancelled_orders,
                SUM(potential_lost) as potential_lost
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            
            ratings_data = cursor.fetchone()
            conn.close()
            
            if not ratings_data or not any(ratings_data[:5]):
                return ["‚≠ê –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
            
            stars_1, stars_2, stars_3, stars_4, stars_5, total_orders_raw, cancelled_orders, potential_lost = ratings_data
            total_ratings = sum(ratings_data[:5])
            
            if total_ratings == 0:
                return ["‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"]
            
            # –ü–æ–ª—É—á–∞–µ–º fake orders –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            if hasattr(self, 'fake_orders_filter') and self.fake_orders_filter:
                fake_stats = self._get_fake_orders_for_period(restaurant_name, start_date, end_date)
                gojek_fake_orders = fake_stats.get('gojek_fake_orders', 0)
            else:
                gojek_fake_orders = 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–∑–∞ –≤—ã—á–µ—Ç–æ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∏ fake)
            lost_orders = int(potential_lost / 150000) if potential_lost else 0  # –ø—Ä–∏–º–µ—Ä–Ω–æ 150k –∑–∞ –∑–∞–∫–∞–∑
            successful_orders = total_orders_raw - cancelled_orders - lost_orders - gojek_fake_orders
            
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
            avg_rating = (1*stars_1 + 2*stars_2 + 3*stars_3 + 4*stars_4 + 5*stars_5) / total_ratings
            
            results = []
            results.append("‚≠ê –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ò –£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ù–û–°–¢–¨ (GOJEK)")
            results.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            results.append(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ (–≤—Å–µ–≥–æ: {total_ratings}):")
            results.append(f"  ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑–≤–µ–∑–¥: {stars_5} ({stars_5/total_ratings*100:.1f}%)")
            results.append(f"  ‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑–≤–µ–∑–¥—ã: {stars_4} ({stars_4/total_ratings*100:.1f}%)")
            results.append(f"  ‚≠ê‚≠ê‚≠ê 3 –∑–≤–µ–∑–¥—ã: {stars_3} ({stars_3/total_ratings*100:.1f}%)")
            results.append(f"  ‚≠ê‚≠ê 2 –∑–≤–µ–∑–¥—ã: {stars_2} ({stars_2/total_ratings*100:.1f}%)")
            results.append(f"  ‚≠ê 1 –∑–≤–µ–∑–¥–∞: {stars_1} ({stars_1/total_ratings*100:.1f}%)")
            results.append("")
            results.append(f"üìà –ò–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {avg_rating:.2f}/5.0")
            results.append(f"üö® –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (1-2‚òÖ): {stars_1 + stars_2} ({(stars_1 + stars_2)/total_ratings*100:.1f}%)")
            results.append("")
            
            bad_ratings = total_ratings - stars_5
            if bad_ratings > 0 and successful_orders > 0:
                orders_per_bad_rating = successful_orders / bad_ratings
                results.append("üìä –ß–∞—Å—Ç–æ—Ç–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫ (–Ω–µ 5‚òÖ):")
                results.append(f"  üìà –ü–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫ –≤—Å–µ–≥–æ: {bad_ratings} –∏–∑ {total_ratings} ({bad_ratings/total_ratings*100:.1f}%)")
                results.append(f"  üì¶ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ GOJEK –Ω–∞ 1 –ø–ª–æ—Ö—É—é –æ—Ü–µ–Ω–∫—É: {orders_per_bad_rating:.1f}")
                results.append(f"  üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –∫–∞–∂–¥—ã–π {int(orders_per_bad_rating)}-–π —É—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑ GOJEK –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–µ 5‚òÖ")
                results.append(f"  üîß –†–∞—Å—á–µ—Ç: {successful_orders} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∑–∞ –≤—ã—á–µ—Ç–æ–º {cancelled_orders} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö + {lost_orders} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö + {gojek_fake_orders} fake)")
            
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}"]

    def _get_financial_metrics(self, restaurant_name, start_date, end_date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            results = []
            results.append("üí≥ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
            results.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
            cursor.execute('''
            SELECT SUM(payouts) FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            grab_payouts = cursor.fetchone()[0] or 0
            
            cursor.execute('''
            SELECT SUM(payouts) FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            gojek_payouts = cursor.fetchone()[0] or 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ROAS
            stats = self.get_period_statistics_with_corrections(restaurant_name, start_date, end_date)
            
            results.append("üí∞ –í—ã–ø–ª–∞—Ç—ã:")
            results.append(f"‚îú‚îÄ‚îÄ üì± GRAB: {grab_payouts:,} IDR")
            if gojek_payouts > 0:
                results.append(f"‚îî‚îÄ‚îÄ üõµ GOJEK: {gojek_payouts:,} IDR")
            else:
                results.append("‚îî‚îÄ‚îÄ üõµ GOJEK: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            results.append("")
            results.append("üìä –†–µ–∫–ª–∞–º–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
            results.append(f"‚îú‚îÄ‚îÄ üí∞ –û–±—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['total_ads_sales']:,} IDR")
            total_sales = stats['grab_final_sales'] + stats['gojek_final_sales']
            results.append(f"‚îú‚îÄ‚îÄ üìà –î–æ–ª—è –æ—Ç –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂: {stats['total_ads_sales']/total_sales*100:.1f}%")
            results.append(f"‚îú‚îÄ‚îÄ üéØ GRAB ROAS: {stats['grab_roas']:.2f}x ({'–æ—Ç–ª–∏—á–Ω–∞—è' if stats['grab_roas'] > 10 else '—Ö–æ—Ä–æ—à–∞—è' if stats['grab_roas'] > 5 else '–Ω–∏–∑–∫–∞—è'} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")
            results.append(f"‚îî‚îÄ‚îÄ üéØ GOJEK ROAS: {stats['gojek_roas']:.2f}x ({'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è' if stats['gojek_roas'] > 20 else '–æ—Ç–ª–∏—á–Ω–∞—è' if stats['gojek_roas'] > 10 else '—Ö–æ—Ä–æ—à–∞—è'} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")
            
            results.append("")
            results.append("üíµ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:")
            
            # –†–∞—Å—á–µ—Ç –¥–ª—è GRAB
            grab_platform_commission = stats['grab_final_sales'] - grab_payouts - stats['grab_ads_spend']
            grab_total_deduction = stats['grab_final_sales'] - grab_payouts
            grab_commission_rate = grab_total_deduction / stats['grab_final_sales'] * 100
            grab_platform_rate = grab_platform_commission / stats['grab_final_sales'] * 100
            grab_ads_rate = stats['grab_ads_spend'] / stats['grab_final_sales'] * 100
            
            # –†–∞—Å—á–µ—Ç –¥–ª—è GOJEK  
            gojek_platform_commission = stats['gojek_final_sales'] - gojek_payouts - stats['gojek_ads_spend']
            gojek_total_deduction = stats['gojek_final_sales'] - gojek_payouts
            gojek_commission_rate = gojek_total_deduction / stats['gojek_final_sales'] * 100
            gojek_platform_rate = gojek_platform_commission / stats['gojek_final_sales'] * 100
            gojek_ads_rate = stats['gojek_ads_spend'] / stats['gojek_final_sales'] * 100
            
            total_receipts = grab_payouts + gojek_payouts
            results.append(f"üí∞ –û–±—â–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {total_receipts:,} IDR")
            results.append(f"‚îú‚îÄ‚îÄ üì± GRAB: {grab_payouts:,} IDR (–≤—ã—Ä—É—á–∫–∞: {stats['grab_final_sales']:,} - —É–¥–µ—Ä–∂–∞–Ω–∏—è: {grab_commission_rate:.1f}%)")
            results.append(f"‚îÇ   ‚îú‚îÄ‚îÄ üèõÔ∏è –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {grab_platform_commission:,} IDR ({grab_platform_rate:.1f}%)")
            results.append(f"‚îÇ   ‚îî‚îÄ‚îÄ üìà –†–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç: {stats['grab_ads_spend']:,} IDR ({grab_ads_rate:.1f}%)")
            results.append(f"‚îî‚îÄ‚îÄ üõµ GOJEK: {gojek_payouts:,} IDR (–≤—ã—Ä—É—á–∫–∞: {stats['gojek_final_sales']:,} - —É–¥–µ—Ä–∂–∞–Ω–∏—è: {gojek_commission_rate:.1f}%)")
            results.append(f"    ‚îú‚îÄ‚îÄ üèõÔ∏è –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {gojek_platform_commission:,} IDR ({gojek_platform_rate:.1f}%)")
            results.append(f"    ‚îî‚îÄ‚îÄ üìà –†–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç: {stats['gojek_ads_spend']:,} IDR ({gojek_ads_rate:.1f}%)")
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {e}"]
    
    def _get_operational_metrics(self, restaurant_name, start_date, end_date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            results = []
            results.append("‚è∞ –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò")
            results.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            
            # GRAB –º–µ—Ç—Ä–∏–∫–∏ (driver_waiting_time —ç—Ç–æ JSON)
            cursor.execute('''
            SELECT driver_waiting_time FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            AND driver_waiting_time IS NOT NULL AND driver_waiting_time != ''
            ''', (restaurant_id, start_date, end_date))
            grab_waiting_results = cursor.fetchall()
            
            # –ü–∞—Ä—Å–∏–º JSON –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è GRAB
            grab_waiting_times = []
            for row in grab_waiting_results:
                try:
                    import json
                    if row[0]:
                        data = json.loads(row[0])
                        if isinstance(data, dict) and 'min' in data:
                            grab_waiting_times.append(float(data['min']))
                        elif isinstance(data, (int, float)):
                            grab_waiting_times.append(float(data))
                except:
                    continue
            
            grab_waiting = sum(grab_waiting_times) / len(grab_waiting_times) if grab_waiting_times else 0
            
            # GOJEK –º–µ—Ç—Ä–∏–∫–∏ (–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TIME: HH:MM:SS, driver_waiting –≤ –º–∏–Ω—É—Ç–∞—Ö)
            cursor.execute('''
            SELECT preparation_time, delivery_time, driver_waiting 
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            AND preparation_time IS NOT NULL
            ''', (restaurant_id, start_date, end_date))
            gojek_results = cursor.fetchall()
            
            gojek_prep_times = []
            gojek_delivery_times = []
            gojek_waiting_times = []
            
            for row in gojek_results:
                try:
                    # –ü–∞—Ä—Å–∏–º TIME –ø–æ–ª—è (HH:MM:SS -> –º–∏–Ω—É—Ç—ã)
                    if row[0]:  # preparation_time
                        prep_parts = str(row[0]).split(':')
                        prep_minutes = int(prep_parts[0]) * 60 + int(prep_parts[1]) + int(prep_parts[2]) / 60
                        gojek_prep_times.append(prep_minutes)
                    
                    if row[1]:  # delivery_time  
                        del_parts = str(row[1]).split(':')
                        del_minutes = int(del_parts[0]) * 60 + int(del_parts[1]) + int(del_parts[2]) / 60
                        gojek_delivery_times.append(del_minutes)
                    
                    if row[2] is not None:  # driver_waiting (—É–∂–µ –≤ –º–∏–Ω—É—Ç–∞—Ö)
                        gojek_waiting_times.append(float(row[2]))
                except:
                    continue
            
            gojek_prep = sum(gojek_prep_times) / len(gojek_prep_times) if gojek_prep_times else 0
            gojek_delivery = sum(gojek_delivery_times) / len(gojek_delivery_times) if gojek_delivery_times else 0
            gojek_waiting = sum(gojek_waiting_times) / len(gojek_waiting_times) if gojek_waiting_times else 0
            
            results.append("üü¢ GRAB:")
            results.append(f"‚îî‚îÄ‚îÄ ‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {grab_waiting:.1f} –º–∏–Ω")
            results.append("")
            results.append("üü† GOJEK:")
            results.append(f"‚îú‚îÄ‚îÄ ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {gojek_prep:.1f} –º–∏–Ω")
            results.append(f"‚îú‚îÄ‚îÄ üöó –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {gojek_delivery:.1f} –º–∏–Ω")
            results.append(f"‚îî‚îÄ‚îÄ ‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {gojek_waiting:.1f} –º–∏–Ω")
            results.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –ø–æ—Ç–µ—Ä–∏)
            stats = self.get_period_statistics_with_corrections(restaurant_name, start_date, end_date)
            
            results.append("‚ö†Ô∏è –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
            results.append("üö´ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
            results.append(f"‚îú‚îÄ‚îÄ üì± GRAB: {stats['grab_cancelled_orders']} –∑–∞–∫–∞–∑–∞ (–æ—Ç–º–µ–Ω–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É)")
            results.append(f"‚îî‚îÄ‚îÄ üõµ GOJEK: {stats['gojek_cancelled_orders']} –∑–∞–∫–∞–∑–∞ (–¥–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞)")
            total_cancelled = stats['grab_cancelled_orders'] + stats['gojek_cancelled_orders']
            total_orders = stats['grab_original_orders'] + stats['gojek_original_orders']
            results.append(f"üí° –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {total_cancelled} –∑–∞–∫–∞–∑–æ–≤ ({total_cancelled/total_orders*100:.1f}% –æ—Ç –æ–±—â–∏—Ö)")
            results.append("")
            
            results.append("üíî –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
            # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—å GRAB –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            grab_avg_check = stats['grab_final_sales'] / stats['grab_final_orders'] if stats['grab_final_orders'] > 0 else 0
            grab_cancelled_losses = stats['grab_cancelled_orders'] * grab_avg_check
            
            results.append(f"‚îú‚îÄ‚îÄ üí∏ GRAB –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {grab_cancelled_losses:,.0f} IDR ({stats['grab_cancelled_orders']} √ó {grab_avg_check:,.0f} —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫)")
            results.append(f"‚îú‚îÄ‚îÄ üí∏ GOJEK –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ: {stats['gojek_potential_lost']:,} IDR (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã)")
            
            total_losses = grab_cancelled_losses + stats['gojek_potential_lost']
            total_sales = stats['grab_final_sales'] + stats['gojek_final_sales']
            results.append(f"‚îî‚îÄ‚îÄ üìä –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {total_losses:,.0f} IDR ({total_losses/total_sales*100:.2f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏)")
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}"]

    def _get_sales_trends_analysis(self, restaurant_name, start_date, end_date):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            results = []
            results.append("üìà 2. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –ò –¢–†–ï–ù–î–û–í")
            results.append("----------------------------------------")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º (–æ–±—ä–µ–¥–∏–Ω—è–µ–º GRAB –∏ GOJEK –ø–æ –¥–∞—Ç–∞–º)
            cursor.execute('''
            SELECT 
                stat_date,
                SUM(grab_sales + gojek_sales) as daily_total
            FROM (
                SELECT 
                    stat_date,
                    SUM(sales) as grab_sales,
                    0 as gojek_sales
                FROM grab_stats 
                WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
                GROUP BY stat_date
                UNION ALL
                SELECT 
                    stat_date,
                    0 as grab_sales,
                    SUM(sales) as gojek_sales
                FROM gojek_stats 
                WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
                GROUP BY stat_date
            ) combined
            GROUP BY stat_date
            ORDER BY stat_date
            ''', (restaurant_id, start_date, end_date, restaurant_id, start_date, end_date))
            
            daily_data = cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
            from datetime import datetime
            monthly_sales = {}
            monthly_days = {}
            weekend_sales = []
            weekday_sales = []
            all_sales = []
            
            for date_str, sales in daily_data:
                all_sales.append(sales)
                
                # –ú–µ—Å—è—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                month_key = date_obj.strftime('%Y-%m')
                if month_key not in monthly_sales:
                    monthly_sales[month_key] = 0
                    monthly_days[month_key] = 0
                monthly_sales[month_key] += sales
                monthly_days[month_key] += 1
                
                # –í—ã—Ö–æ–¥–Ω—ã–µ vs –±—É–¥–Ω–∏
                weekday = date_obj.weekday()
                if weekday >= 5:  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    weekend_sales.append(sales)
                else:
                    weekday_sales.append(sales)
            
            # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            results.append("üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            for month_key in sorted(monthly_sales.keys()):
                month_name = '–ê–ø—Ä–µ–ª—å' if month_key == '2025-04' else '–ú–∞–π'
                avg_daily = monthly_sales[month_key] / monthly_days[month_key]
                results.append(f"  {month_name}: {monthly_sales[month_key]:,} IDR ({monthly_days[month_key]} –¥–Ω–µ–π, {avg_daily:,.0f} IDR/–¥–µ–Ω—å)")
            
            results.append("")
            
            # –í—ã—Ö–æ–¥–Ω—ã–µ vs –±—É–¥–Ω–∏
            avg_weekend = sum(weekend_sales) / len(weekend_sales) if weekend_sales else 0
            avg_weekday = sum(weekday_sales) / len(weekday_sales) if weekday_sales else 0
            weekend_effect = (avg_weekend - avg_weekday) / avg_weekday * 100 if avg_weekday > 0 else 0
            
            results.append("üóìÔ∏è –í—ã—Ö–æ–¥–Ω—ã–µ vs –ë—É–¥–Ω–∏:")
            results.append(f"  üìÖ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ: {avg_weekend:,.0f} IDR")
            results.append(f"  üìÖ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –±—É–¥–Ω–∏: {avg_weekday:,.0f} IDR")
            results.append(f"  üìä –≠—Ñ—Ñ–µ–∫—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö: {weekend_effect:+.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            days_count = len(all_sales)
            if not all_sales:
                return [f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}"]
            
            max_sales = max(all_sales)
            min_sales = min(all_sales)
            avg_sales = sum(all_sales) / days_count
            range_percent = (max_sales - min_sales) / min_sales * 100 if min_sales > 0 else 0
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
            import statistics
            cv = statistics.stdev(all_sales) / avg_sales * 100 if avg_sales > 0 else 0
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—ã –ª—É—á—à–µ–≥–æ –∏ —Ö—É–¥—à–µ–≥–æ –¥–Ω—è
            best_day = max(daily_data, key=lambda x: x[1])
            worst_day = min(daily_data, key=lambda x: x[1])
            
            results.append(f"üìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–ß–ò–• –î–ù–ï–ô ({days_count} –¥–Ω–µ–π):")
            results.append(f"üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_day[0]} - {best_day[1]:,} IDR")
            results.append(f"üìâ –•—É–¥—à–∏–π –¥–µ–Ω—å: {worst_day[0]} - {worst_day[1]:,} IDR")
            results.append(f"üìä –†–∞–∑–±—Ä–æ—Å –ø—Ä–æ–¥–∞–∂: {range_percent:.1f}% (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)")
            results.append(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR/–¥–µ–Ω—å")
            results.append(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}% (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂)")
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}"]

    def _get_customer_base_analysis(self, restaurant_name, start_date, end_date):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            results = []
            results.append("üë• 3. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ë–ê–ó–´")
            results.append("----------------------------------------")
            
            # GRAB –∫–ª–∏–µ–Ω—Ç—ã
            cursor.execute('''
            SELECT 
                SUM(new_customers) as new_customers,
                SUM(repeated_customers) as repeated_customers, 
                SUM(reactivated_customers) as reactivated_customers,
                SUM(earned_new_customers) as earned_new,
                SUM(earned_repeated_customers) as earned_repeated,
                SUM(earned_reactivated_customers) as earned_reactivated
            FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            
            grab_result = cursor.fetchone()
            grab_new = grab_result[0] or 0
            grab_repeat = grab_result[1] or 0
            grab_react = grab_result[2] or 0
            grab_new_earned = grab_result[3] or 0
            grab_repeat_earned = grab_result[4] or 0
            grab_react_earned = grab_result[5] or 0
            
            # GOJEK –∫–ª–∏–µ–Ω—Ç—ã
            cursor.execute('''
            SELECT 
                SUM(new_client) as new_clients,
                SUM(active_client) as active_clients,
                SUM(returned_client) as returned_clients
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            
            gojek_result = cursor.fetchone()
            gojek_new = gojek_result[0] or 0
            gojek_active = gojek_result[1] or 0
            gojek_returned = gojek_result[2] or 0
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_new = grab_new + gojek_new
            total_repeat = grab_repeat + gojek_active
            total_reactivated = grab_react + gojek_returned
            total_clients = total_new + total_repeat + total_reactivated
            
            results.append("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã (GRAB + GOJEK):")
            results.append(f"  üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {total_new:,} ({total_new/total_clients*100:.1f}%)")
            results.append(f"    üì± GRAB: {grab_new:,} | üõµ GOJEK: {gojek_new:,}")
            results.append(f"  üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {total_repeat:,} ({total_repeat/total_clients*100:.1f}%)")
            results.append(f"    üì± GRAB: {grab_repeat:,} | üõµ GOJEK: {gojek_active:,}")
            results.append(f"  üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {total_reactivated:,} ({total_reactivated/total_clients*100:.1f}%)")
            results.append(f"    üì± GRAB: {grab_react:,} | üõµ GOJEK: {gojek_returned:,}")
            results.append("")
            
            # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ GRAB —Å —Ä–µ–∫–ª–∞–º—ã)
            grab_new_avg = grab_new_earned / grab_new if grab_new > 0 else 0
            grab_repeat_avg = grab_repeat_earned / grab_repeat if grab_repeat > 0 else 0
            grab_react_avg = grab_react_earned / grab_react if grab_react > 0 else 0
            
            results.append("üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ GRAB, —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∫–ª–∞–º—ã):")
            results.append(f"  üÜï –ù–æ–≤—ã–µ: {grab_new_earned:,} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {grab_new_avg:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_new:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            results.append(f"  üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ: {grab_repeat_earned:,} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {grab_repeat_avg:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_repeat:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            results.append(f"  üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {grab_react_earned:,} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {grab_react_avg:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_react:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            results.append("")
            results.append(f"  ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –æ—Ç {gojek_new + gojek_active + gojek_returned:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ GOJEK –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            results.append("  üìä –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π")
            results.append("")
            
            # –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
            cursor.execute('''
            SELECT 
                strftime('%Y-%m', stat_date) as month,
                SUM(grab_new + gojek_new) as monthly_new
            FROM (
                SELECT stat_date, new_customers as grab_new, 0 as gojek_new FROM grab_stats 
                WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
                UNION ALL
                SELECT stat_date, 0 as grab_new, new_client as gojek_new FROM gojek_stats 
                WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ) monthly
            GROUP BY month
            ORDER BY month
            ''', (restaurant_id, start_date, end_date, restaurant_id, start_date, end_date))
            
            monthly_new = cursor.fetchall()
            results.append("üìà –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            for month, new_count in monthly_new:
                month_name = '–ê–ø—Ä–µ–ª—å' if month == '2025-04' else '–ú–∞–π'
                results.append(f"  {month_name}: {new_count:,} –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã: {e}"]

    def _get_marketing_effectiveness_analysis(self, restaurant_name, start_date, end_date):
        """–ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            conn = sqlite3.connect('database.sqlite')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º restaurant_id
            restaurant_query = f"SELECT id FROM restaurants WHERE name = '{restaurant_name}'"
            cursor.execute(restaurant_query)
            restaurant_result = cursor.fetchone()
            if not restaurant_result:
                return []
                
            restaurant_id = restaurant_result[0]
            
            results = []
            results.append("üìà 4. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ò –í–û–†–û–ù–ö–ê")
            results.append("----------------------------------------")
            
            # GRAB –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞
            cursor.execute('''
            SELECT 
                SUM(impressions) as total_impressions,
                SUM(unique_menu_visits) as menu_visits,
                SUM(unique_add_to_carts) as add_to_carts,
                SUM(ads_orders) as ads_orders,
                SUM(ads_spend) as ads_spend
            FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            ''', (restaurant_id, start_date, end_date))
            
            grab_funnel = cursor.fetchone()
            impressions = grab_funnel[0] or 0
            menu_visits = grab_funnel[1] or 0
            add_to_carts = grab_funnel[2] or 0
            ads_orders = grab_funnel[3] or 0
            ads_spend = grab_funnel[4] or 0
            
            results.append("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ GRAB - GOJEK –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏):")
            results.append(f"  üëÅÔ∏è –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã: {impressions:,}")
            
            if impressions > 0 and menu_visits > 0:
                ctr = menu_visits / impressions * 100
                results.append(f"  üîó –ü–æ—Å–µ—â–µ–Ω–∏—è –º–µ–Ω—é: {menu_visits:,} (CTR: {ctr:.2f}%)")
                
                if add_to_carts > 0:
                    visit_to_cart = add_to_carts / menu_visits * 100
                    results.append(f"  üõí –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {add_to_carts:,} (–∫–æ–Ω–≤–µ—Ä—Å–∏—è: {visit_to_cart:.2f}% –æ—Ç –∫–ª–∏–∫–æ–≤)")
                    
                    if ads_orders > 0:
                        cart_to_order = ads_orders / add_to_carts * 100
                        results.append(f"  üì¶ –ó–∞–∫–∞–∑—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã: {ads_orders:,} (–∫–æ–Ω–≤–µ—Ä—Å–∏—è: {cart_to_order:.1f}% –æ—Ç –∫–æ—Ä–∑–∏–Ω—ã)")
                        
                        results.append("")
                        results.append("  üìä –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–í–ï–†–°–ò–ò:")
                        
                        impression_to_order = ads_orders / impressions * 100
                        click_to_order = ads_orders / menu_visits * 100
                        
                        results.append(f"  ‚Ä¢ üéØ –ü–æ–∫–∞–∑ ‚Üí –ó–∞–∫–∞–∑: {impression_to_order:.2f}% (–æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")
                        results.append(f"  ‚Ä¢ üîó –ö–ª–∏–∫ ‚Üí –ó–∞–∫–∞–∑: {click_to_order:.1f}% (–∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞)")
                        results.append(f"  ‚Ä¢ üõí –ö–æ—Ä–∑–∏–Ω–∞ ‚Üí –ó–∞–∫–∞–∑: {cart_to_order:.1f}% (–∫–∞—á–µ—Å—Ç–≤–æ UX)")
            
            results.append("")
            results.append("üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ GRAB):")
            
            if menu_visits > 0:
                cost_per_click = ads_spend / menu_visits
                results.append(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞: {cost_per_click:,.0f} IDR")
                
            if ads_orders > 0:
                cost_per_order = ads_spend / ads_orders
                results.append(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cost_per_order:,.0f} IDR")
            
            # ROAS –ø–æ –º–µ—Å—è—Ü–∞–º
            results.append("üéØ ROAS –ø–æ –º–µ—Å—è—Ü–∞–º (GRAB + GOJEK):")
            
            # GRAB –ø–æ –º–µ—Å—è—Ü–∞–º
            cursor.execute('''
            SELECT 
                strftime('%Y-%m', stat_date) as month,
                SUM(ads_sales) as monthly_ads_sales,
                SUM(ads_spend) as monthly_ads_spend
            FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            GROUP BY strftime('%Y-%m', stat_date)
            ORDER BY month
            ''', (restaurant_id, start_date, end_date))
            
            grab_monthly = cursor.fetchall()
            grab_dict = {month: (sales, spend) for month, sales, spend in grab_monthly}
            
            # GOJEK –ø–æ –º–µ—Å—è—Ü–∞–º
            cursor.execute('''
            SELECT 
                strftime('%Y-%m', stat_date) as month,
                SUM(ads_sales) as monthly_ads_sales,
                SUM(ads_spend) as monthly_ads_spend
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
            GROUP BY strftime('%Y-%m', stat_date)
            ORDER BY month
            ''', (restaurant_id, start_date, end_date))
            
            gojek_monthly = cursor.fetchall()
            gojek_dict = {month: (sales, spend) for month, sales, spend in gojek_monthly}
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for month in ['2025-04', '2025-05']:
                month_name = '–ê–ø—Ä–µ–ª—å' if month == '2025-04' else '–ú–∞–π'
                grab_sales, grab_spend = grab_dict.get(month, (0, 0))
                gojek_sales, gojek_spend = gojek_dict.get(month, (0, 0))
                
                total_sales = grab_sales + gojek_sales
                total_spend = grab_spend + gojek_spend
                total_roas = total_sales / total_spend if total_spend > 0 else 0
                
                grab_roas = grab_sales / grab_spend if grab_spend > 0 else 0
                gojek_roas = gojek_sales / gojek_spend if gojek_spend > 0 else 0
                
                results.append(f"  {month_name}: {total_roas:.2f}x")
                results.append(f"    üì± GRAB: {grab_roas:.2f}x (–ø—Ä–æ–¥–∞–∂–∏: {grab_sales:,} / –±—é–¥–∂–µ—Ç: {grab_spend:,.0f})")
                results.append(f"    üõµ GOJEK: {gojek_roas:.2f}x (–ø—Ä–æ–¥–∞–∂–∏: {gojek_sales:,} / –±—é–¥–∂–µ—Ç: {gojek_spend:,.0f})")
            
            conn.close()
            return results
            
        except Exception as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}"]

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å main.py
class ProperMLDetectiveAnalysis:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py"""
    
    def __init__(self):
        self.analyzer = ProductionSalesAnalyzer()
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ main.py"""
        return self.analyzer.analyze_restaurant_performance(restaurant_name, start_date, end_date)

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analyzer = ProductionSalesAnalyzer()
    results = analyzer.analyze_restaurant_performance("Only Eggs", "2025-04-01", "2025-05-31")
    for result in results:
        print(result)