"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å fake orders
–ò—Å–∫–ª—é—á–∞–µ—Ç –Ω–∞–∫—Ä—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import requests
import csv
from io import StringIO
from datetime import datetime
from typing import List, Dict, Set, Tuple
import os


class FakeOrdersFilter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å fake orders"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ fake orders"""
        self.fake_orders_data = []
        self.fake_orders_by_restaurant = {}
        self.fake_orders_by_date = {}
        self.last_update = None
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã Google Sheets
        self.sheet_id = '1LRkQeh6lzgRY96HECT5nc5cZKjA475LZHcuRipX14qM'
        self.gid = '1724820690'
        self.csv_url = f'https://docs.google.com/spreadsheets/d/{self.sheet_id}/export?format=csv&gid={self.gid}'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self._load_fake_orders()
    
    def _load_fake_orders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ fake orders"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists('fake_orders_data.json'):
                with open('fake_orders_data.json', 'r', encoding='utf-8') as f:
                    self.fake_orders_data = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.fake_orders_data)} fake orders –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Google Sheets
                self._download_fake_orders()
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            self._index_fake_orders()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fake orders: {e}")
            self.fake_orders_data = []
    
    def _download_fake_orders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        try:
            print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º fake orders –∏–∑ Google Sheets...")
            
            response = requests.get(self.csv_url, timeout=15)
            if response.status_code == 200:
                content = response.content.decode('utf-8')
                csv_reader = csv.reader(StringIO(content))
                rows = list(csv_reader)
                
                fake_orders = []
                for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if len(row) >= 6 and row[1].strip():  # –ï—Å—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                        fake_order = {
                            'timestamp': row[0].strip(),
                            'restaurant': row[1].strip(),
                            'date': row[2].strip(),
                            'quantity': row[3].strip(),
                            'amount': row[4].strip(),
                            'platform': row[5].strip()
                        }
                        fake_orders.append(fake_order)
                
                self.fake_orders_data = fake_orders
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                with open('fake_orders_data.json', 'w', encoding='utf-8') as f:
                    json.dump(fake_orders, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fake_orders)} fake orders –∏–∑ Google Sheets")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
    
    def _index_fake_orders(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self.fake_orders_by_restaurant = {}
        self.fake_orders_by_date = {}
        
        for order in self.fake_orders_data:
            restaurant = order['restaurant']
            date = self._normalize_date(order['date'])
            platform = order['platform']
            quantity = int(order['quantity']) if order['quantity'].isdigit() else 0
            amount = float(order['amount']) if order['amount'].replace('.', '').isdigit() else 0
            
            # –ò–Ω–¥–µ–∫—Å –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
            if restaurant not in self.fake_orders_by_restaurant:
                self.fake_orders_by_restaurant[restaurant] = {}
            
            if date not in self.fake_orders_by_restaurant[restaurant]:
                self.fake_orders_by_restaurant[restaurant][date] = {
                    'Grab': {'quantity': 0, 'amount': 0},
                    'Gojek': {'quantity': 0, 'amount': 0}
                }
            
            if platform in ['Grab', 'Gojek']:
                self.fake_orders_by_restaurant[restaurant][date][platform]['quantity'] += quantity
                self.fake_orders_by_restaurant[restaurant][date][platform]['amount'] += amount
            
            # –ò–Ω–¥–µ–∫—Å –ø–æ –¥–∞—Ç–∞–º
            if date not in self.fake_orders_by_date:
                self.fake_orders_by_date[date] = {}
            
            if restaurant not in self.fake_orders_by_date[date]:
                self.fake_orders_by_date[date][restaurant] = {
                    'Grab': {'quantity': 0, 'amount': 0},
                    'Gojek': {'quantity': 0, 'amount': 0}
                }
            
            if platform in ['Grab', 'Gojek']:
                self.fake_orders_by_date[date][restaurant][platform]['quantity'] += quantity
                self.fake_orders_by_date[date][restaurant][platform]['amount'] += amount
    
    def _normalize_date(self, date_str):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            formats = ['%d/%m/%Y', '%Y-%m-%d', '%d.%m.%Y']
            
            for fmt in formats:
                try:
                    date_obj = datetime.strptime(date_str, fmt)
                    return date_obj.strftime('%Y-%m-%d')
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return date_str
            
        except:
            return date_str
    
    def get_fake_orders_for_restaurant_date(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç fake orders –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –¥–∞—Ç—ã"""
        normalized_date = self._normalize_date(date)
        
        if restaurant_name in self.fake_orders_by_restaurant:
            if normalized_date in self.fake_orders_by_restaurant[restaurant_name]:
                return self.fake_orders_by_restaurant[restaurant_name][normalized_date]
        
        return {'Grab': {'quantity': 0, 'amount': 0}, 'Gojek': {'quantity': 0, 'amount': 0}}
    
    def adjust_sales_data(self, restaurant_name, date, grab_sales, grab_orders, gojek_sales, gojek_orders):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, –∏—Å–∫–ª—é—á–∞—è fake orders"""
        fake_orders = self.get_fake_orders_for_restaurant_date(restaurant_name, date)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º Grab –¥–∞–Ω–Ω—ã–µ
        adjusted_grab_sales = max(0, grab_sales - fake_orders['Grab']['amount'])
        adjusted_grab_orders = max(0, grab_orders - fake_orders['Grab']['quantity'])
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º Gojek –¥–∞–Ω–Ω—ã–µ
        adjusted_gojek_sales = max(0, gojek_sales - fake_orders['Gojek']['amount'])
        adjusted_gojek_orders = max(0, gojek_orders - fake_orders['Gojek']['quantity'])
        
        return {
            'grab_sales_original': grab_sales,
            'grab_sales_adjusted': adjusted_grab_sales,
            'grab_orders_original': grab_orders,
            'grab_orders_adjusted': adjusted_grab_orders,
            'gojek_sales_original': gojek_sales,
            'gojek_sales_adjusted': adjusted_gojek_sales,
            'gojek_orders_original': gojek_orders,
            'gojek_orders_adjusted': adjusted_gojek_orders,
            'fake_orders_removed': {
                'grab_fake_orders': fake_orders['Grab']['quantity'],
                'grab_fake_amount': fake_orders['Grab']['amount'],
                'gojek_fake_orders': fake_orders['Gojek']['quantity'],
                'gojek_fake_amount': fake_orders['Gojek']['amount']
            }
        }
    
    def get_fake_orders_summary(self, restaurant_name=None, start_date=None, end_date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ fake orders"""
        summary = {
            'total_fake_orders': 0,
            'total_fake_amount': 0,
            'by_platform': {'Grab': 0, 'Gojek': 0},
            'by_restaurant': {},
            'affected_dates': set()
        }
        
        for order in self.fake_orders_data:
            order_restaurant = order['restaurant']
            order_date = self._normalize_date(order['date'])
            order_platform = order['platform']
            order_quantity = int(order['quantity']) if order['quantity'].isdigit() else 0
            order_amount = float(order['amount']) if order['amount'].replace('.', '').isdigit() else 0
            
            # –§–∏–ª—å—Ç—Ä—ã
            if restaurant_name and order_restaurant != restaurant_name:
                continue
            
            if start_date and order_date < start_date:
                continue
                
            if end_date and order_date > end_date:
                continue
            
            # –ü–æ–¥—Å—á–µ—Ç
            summary['total_fake_orders'] += order_quantity
            summary['total_fake_amount'] += order_amount
            
            if order_platform in summary['by_platform']:
                summary['by_platform'][order_platform] += order_quantity
            
            if order_restaurant not in summary['by_restaurant']:
                summary['by_restaurant'][order_restaurant] = 0
            summary['by_restaurant'][order_restaurant] += order_quantity
            
            summary['affected_dates'].add(order_date)
        
        summary['affected_dates'] = sorted(list(summary['affected_dates']))
        
        return summary
    
    def has_fake_orders(self, restaurant_name, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ fake orders –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        fake_orders = self.get_fake_orders_for_restaurant_date(restaurant_name, date)
        return (fake_orders['Grab']['quantity'] > 0 or 
                fake_orders['Gojek']['quantity'] > 0)
    
    def get_all_restaurants_with_fake_orders(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å fake orders"""
        return list(self.fake_orders_by_restaurant.keys())
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        try:
            self._download_fake_orders()
            self._index_fake_orders()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ fake orders –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è fake orders: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
fake_orders_filter = FakeOrdersFilter()


def get_fake_orders_filter():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞ fake orders"""
    return fake_orders_filter


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    filter_instance = FakeOrdersFilter()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FAKE ORDERS FILTER")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    summary = filter_instance.get_fake_orders_summary()
    print(f"üìä –í—Å–µ–≥–æ fake orders: {summary['total_fake_orders']}")
    print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_fake_amount']:,.0f} IDR")
    print(f"üöó –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º: {summary['by_platform']}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    test_restaurant = "Only Eggs"
    test_date = "2025-05-15"
    
    fake_data = filter_instance.get_fake_orders_for_restaurant_date(test_restaurant, test_date)
    print(f"\nüçΩÔ∏è Fake orders –¥–ª—è {test_restaurant} –Ω–∞ {test_date}:")
    print(f"   Grab: {fake_data['Grab']['quantity']} –∑–∞–∫–∞–∑–æ–≤, {fake_data['Grab']['amount']:,.0f} IDR")
    print(f"   Gojek: {fake_data['Gojek']['quantity']} –∑–∞–∫–∞–∑–æ–≤, {fake_data['Gojek']['amount']:,.0f} IDR")
    
    # –¢–µ—Å—Ç 3: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    adjusted = filter_instance.adjust_sales_data(test_restaurant, test_date, 1000000, 50, 500000, 25)
    print(f"\nüîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {test_restaurant}:")
    print(f"   Grab: {adjusted['grab_sales_original']:,} ‚Üí {adjusted['grab_sales_adjusted']:,} IDR")
    print(f"   Gojek: {adjusted['gojek_sales_original']:,} ‚Üí {adjusted['gojek_sales_adjusted']:,} IDR")