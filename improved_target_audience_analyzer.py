#!/usr/bin/env python3
"""
üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ç—É—Ä–∏—Å—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
"""

import sqlite3
import pandas as pd
import numpy as np
from scipy.stats import pearsonr

def analyze_target_audience_improved(restaurant_name):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
    
    print(f"üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò: {restaurant_name}")
    print("=" * 70)
    
    try:
        conn = sqlite3.connect('database.sqlite')
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_query = "SELECT id, name FROM restaurants WHERE LOWER(name) LIKE ?"
        restaurant_result = pd.read_sql_query(restaurant_query, conn, params=[f'%{restaurant_name.lower()}%'])
        
        if restaurant_result.empty:
            return f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        restaurant_id = int(restaurant_result.iloc[0]['id'])
        actual_name = restaurant_result.iloc[0]['name']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        detailed_query = """
            SELECT 
                strftime('%Y-%m', stat_date) as month,
                strftime('%Y', stat_date) as year,
                CAST(strftime('%m', stat_date) AS INTEGER) as month_num,
                AVG(CASE WHEN orders > 0 THEN sales/orders ELSE 0 END) as avg_check,
                SUM(sales) as total_sales,
                SUM(orders) as total_orders
            FROM (
                SELECT stat_date, sales, orders FROM grab_stats WHERE restaurant_id = ? AND sales > 0
                UNION ALL
                SELECT stat_date, sales, orders FROM gojek_stats WHERE restaurant_id = ? AND sales > 0
            )
            GROUP BY strftime('%Y-%m', stat_date)
            ORDER BY month
        """
        
        data = pd.read_sql_query(detailed_query, conn, params=[restaurant_id, restaurant_id])
        conn.close()
        
        if data.empty or len(data) < 3:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {actual_name}"
        
        # 1. –ê–ù–ê–õ–ò–ó –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê
        avg_check_analysis = analyze_average_check(data)
        
        # 2. –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò
        seasonality_analysis = analyze_seasonality(data)
        
        # 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò
        target_audience = determine_target_audience_improved(avg_check_analysis, seasonality_analysis, data)
        
        # 4. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê
        return format_improved_analysis_result(actual_name, data, avg_check_analysis, seasonality_analysis, target_audience)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

def analyze_average_check(data):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    avg_checks = data['avg_check'].dropna()
    overall_avg_check = avg_checks.mean()
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if overall_avg_check >= 400000:  # 400k+ IDR
        check_category = "premium_tourists"
        check_description = "–ü—Ä–µ–º–∏—É–º —Ç—É—Ä–∏—Å—Ç—ã"
        confidence = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
    elif overall_avg_check >= 300000:  # 300-400k IDR
        check_category = "tourists"
        check_description = "–¢—É—Ä–∏—Å—Ç—ã —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞"
        confidence = "–≤—ã—Å–æ–∫–∞—è"
    elif overall_avg_check >= 200000:  # 200-300k IDR
        check_category = "mixed"
        check_description = "–°–º–µ—à–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"
        confidence = "—Å—Ä–µ–¥–Ω—è—è"
    else:  # <200k IDR
        check_category = "locals"
        check_description = "–ú–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"
        confidence = "–≤—ã—Å–æ–∫–∞—è"
    
    return {
        'average_check': overall_avg_check,
        'category': check_category,
        'description': check_description,
        'confidence': confidence,
        'trend': analyze_check_trend(data)
    }

def analyze_check_trend(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞"""
    
    if len(data) < 6:
        return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
    recent_checks = data.tail(6)['avg_check'].mean()
    early_checks = data.head(6)['avg_check'].mean()
    
    if recent_checks > early_checks * 1.1:
        return "—Ä–∞—Å—Ç–µ—Ç (–ø—Ä–µ–º–∏—É–º–∏–∑–∞—Ü–∏—è)"
    elif recent_checks < early_checks * 0.9:
        return "–ø–∞–¥–∞–µ—Ç (—É—Ö–æ–¥ –¶–ê)"
    else:
        return "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"

def analyze_seasonality(data):
    """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ä–∏—Å—Ç–æ–≤"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_data = data.groupby('month_num').agg({
        'total_sales': 'mean',
        'avg_check': 'mean'
    }).reset_index()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∏–º–Ω–∏–µ vs –ª–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã
    winter_months = [12, 1, 2]  # –ü–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤
    summer_months = [6, 7, 8]   # –°–ø–∞–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤
    
    winter_data = data[data['month_num'].isin(winter_months)]
    summer_data = data[data['month_num'].isin(summer_months)]
    
    seasonality_result = {
        'pattern': 'unknown',
        'confidence': '–Ω–∏–∑–∫–∞—è',
        'description': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
    }
    
    if len(winter_data) > 0 and len(summer_data) > 0:
        winter_avg = winter_data['total_sales'].mean()
        summer_avg = summer_data['total_sales'].mean()
        
        if winter_avg > summer_avg * 1.15:  # –ó–∏–º–∞ –Ω–∞ 15%+ –≤—ã—à–µ
            seasonality_result = {
                'pattern': 'russian_tourists',
                'confidence': '–≤—ã—Å–æ–∫–∞—è',
                'description': f'–ó–∏–º–Ω–∏–π –ø–∏–∫ (+{((winter_avg/summer_avg-1)*100):.1f}%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤',
                'winter_avg': winter_avg,
                'summer_avg': summer_avg
            }
        elif summer_avg > winter_avg * 1.15:  # –õ–µ—Ç–æ –Ω–∞ 15%+ –≤—ã—à–µ
            seasonality_result = {
                'pattern': 'european_tourists',
                'confidence': '–≤—ã—Å–æ–∫–∞—è', 
                'description': f'–õ–µ—Ç–Ω–∏–π –ø–∏–∫ (+{((summer_avg/winter_avg-1)*100):.1f}%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤',
                'winter_avg': winter_avg,
                'summer_avg': summer_avg
            }
        else:
            seasonality_result = {
                'pattern': 'stable_local',
                'confidence': '—Å—Ä–µ–¥–Ω—è—è',
                'description': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–µ–∑–æ–Ω–∞–º —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é',
                'winter_avg': winter_avg,
                'summer_avg': summer_avg
            }
    
    return seasonality_result

def determine_target_audience_improved(avg_check_analysis, seasonality_analysis, data):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    check_category = avg_check_analysis['category']
    seasonal_pattern = seasonality_analysis['pattern']
    
    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¶–ê
    if check_category in ['premium_tourists', 'tourists']:
        if seasonal_pattern == 'russian_tourists':
            return {
                'primary_audience': '–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç—É—Ä–∏—Å—Ç—ã',
                'confidence': '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è',
                'evidence': [
                    f"–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_check_analysis['average_check']:,.0f} IDR",
                    seasonality_analysis['description'],
                    "–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –ë–∞–ª–∏"
                ],
                'recommendations': [
                    "–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –º–µ–Ω—é –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª",
                    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö",
                    "–ê–∫—Ü–∏–∏ –≤ –∑–∏–º–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (–ø–∏–∫ —Å–µ–∑–æ–Ω–∞)",
                    "–£—á–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–π"
                ]
            }
        elif seasonal_pattern == 'european_tourists':
            return {
                'primary_audience': '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Ç—É—Ä–∏—Å—Ç—ã',
                'confidence': '–≤—ã—Å–æ–∫–∞—è',
                'evidence': [
                    f"–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_check_analysis['average_check']:,.0f} IDR",
                    seasonality_analysis['description'],
                    "–õ–µ—Ç–Ω–∏–π –ø–∏–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Ü–µ–≤"
                ],
                'recommendations': [
                    "–ê–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã",
                    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –Ω–∞ –ª–µ—Ç–æ",
                    "–£—á–µ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –∫–∞–Ω–∏–∫—É–ª"
                ]
            }
        else:
            return {
                'primary_audience': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç—ã',
                'confidence': '—Å—Ä–µ–¥–Ω—è—è',
                'evidence': [
                    f"–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_check_analysis['average_check']:,.0f} IDR —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤",
                    "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–∞ —á–µ—Ç–∫–æ"
                ],
                'recommendations': [
                    "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—É—Ö–Ω—è",
                    "–ì–∏–±–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"
                ]
            }
    else:
        return {
            'primary_audience': '–ú–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏',
            'confidence': '–≤—ã—Å–æ–∫–∞—è',
            'evidence': [
                f"–ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_check_analysis['average_check']:,.0f} IDR",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"
            ],
            'recommendations': [
                "–õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "–ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è –∫—É—Ö–Ω—è",
                "–ê–∫—Ü–∏–∏ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏"
            ]
        }

def format_improved_analysis_result(restaurant_name, data, avg_check_analysis, seasonality_analysis, target_audience):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    total_sales = data['total_sales'].sum()
    period = f"{data['month'].min()} - {data['month'].max()}"
    
    result = f"""
üéØ **–£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò**

üè™ **–†–µ—Å—Ç–æ—Ä–∞–Ω:** {restaurant_name}
üìÖ **–ü–µ—Ä–∏–æ–¥:** {period}
üí∞ **–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏:** {total_sales:,.0f} IDR
üìä **–ú–µ—Å—è—Ü–µ–≤ –¥–∞–Ω–Ω—ã—Ö:** {len(data)}

üí≥ **–ê–ù–ê–õ–ò–ó –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê:**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí∞ **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {avg_check_analysis['average_check']:,.0f} IDR
üéØ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {avg_check_analysis['description']}
üìà **–¢—Ä–µ–Ω–¥:** {avg_check_analysis['trend']}
üé™ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {avg_check_analysis['confidence']}

üå°Ô∏è **–ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò:**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä **–ü–∞—Ç—Ç–µ—Ä–Ω:** {seasonality_analysis['description']}
üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {seasonality_analysis['confidence']}
"""
    
    if 'winter_avg' in seasonality_analysis:
        result += f"""
‚ùÑÔ∏è **–ó–∏–º–∞:** {seasonality_analysis['winter_avg']:,.0f} IDR
‚òÄÔ∏è **–õ–µ—Ç–æ:** {seasonality_analysis['summer_avg']:,.0f} IDR
"""
    
    result += f"""
üéØ **–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üë• **–û—Å–Ω–æ–≤–Ω–∞—è –¶–ê:** {target_audience['primary_audience']}
üé™ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {target_audience['confidence']}

üìã **–î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:**
"""
    
    for evidence in target_audience['evidence']:
        result += f"   ‚úÖ {evidence}\n"
    
    result += f"""
üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
"""
    
    for recommendation in target_audience['recommendations']:
        result += f"   üöÄ {recommendation}\n"
    
    return result

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Ika Kero
    result = analyze_target_audience_improved("Ika Kero")
    print(result)