#!/usr/bin/env python3
"""
üèñÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò
–ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import sqlite3

def analyze_excel_structure():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_no_header = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', header=None)
        print(f"‚úÖ –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {df_no_header.shape[0]} —Å—Ç—Ä–æ–∫, {df_no_header.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –º–µ—Å—è—Ü–∞–º–∏
        print("\nüîç –ü–û–ò–°–ö –°–¢–†–û–ö–ò –° –ú–ï–°–Ø–¶–ê–ú–ò:")
        print("-" * 40)
        
        month_patterns = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec',
                         'januari', 'februari', 'maret', 'april', 'mei', 'juni', 'juli', 'agustus', 'september', 'oktober', 'november', 'desember']
        
        header_row = None
        
        for idx, row in df_no_header.iterrows():
            row_text = ' '.join([str(cell).lower() for cell in row if pd.notna(cell)])
            month_count = sum(1 for pattern in month_patterns if pattern in row_text)
            
            if month_count >= 3:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 3+ –º–µ—Å—è—Ü–∞
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Å—è—Ü–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: {month_count} –º–µ—Å—è—Ü–µ–≤")
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {list(row)[:10]}...")
                header_row = idx
                break
        
        if header_row is not None:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', header=header_row)
            print(f"\n‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ —Å—Ç—Ä–æ–∫–µ {header_row}")
            print(f"   –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            
            return df, header_row
        else:
            print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Å—è—Ü–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
            return df_no_header, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return None, None

def find_data_patterns(df):
    """–ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ"""
    
    print("\nüîç –ü–û–ò–°–ö –ü–ê–¢–¢–ï–†–ù–û–í –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    try:
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç—É—Ä–∏—Å—Ç—ã)
        numeric_rows = []
        
        for idx, row in df.iterrows():
            numeric_values = []
            for cell in row:
                try:
                    val = pd.to_numeric(cell, errors='coerce')
                    if pd.notna(val) and val > 1000:  # –ë–æ–ª—å—à–µ 1000 - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç—É—Ä–∏—Å—Ç—ã
                        numeric_values.append(val)
                except:
                    continue
            
            if len(numeric_values) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —á–∏—Å–ª–∞
                numeric_rows.append({
                    'row_index': idx,
                    'values': numeric_values,
                    'total': sum(numeric_values),
                    'count': len(numeric_values)
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(numeric_rows)} —Å—Ç—Ä–æ–∫ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
        numeric_rows.sort(key=lambda x: x['total'], reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å—Ç—Ä–æ–∫
        print("\nüìä –¢–û–ü-5 –°–¢–†–û–ö –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú–ò –ß–ò–°–õ–ê–ú–ò:")
        print("-" * 50)
        
        for i, row_data in enumerate(numeric_rows[:5]):
            print(f"{i+1}. –°—Ç—Ä–æ–∫–∞ {row_data['row_index']:3d}: {row_data['count']} –∑–Ω–∞—á–µ–Ω–∏–π, —Å—É–º–º–∞: {row_data['total']:>10,.0f}")
            print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {[int(v) for v in row_data['values'][:10]]}")
        
        return numeric_rows
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return []

def extract_monthly_data_smart(df, numeric_rows):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüß† –£–ú–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        if not numeric_rows:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
            return None
        
        # –ë–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π (–≤–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        best_row_data = numeric_rows[0]
        best_row_idx = best_row_data['row_index']
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {best_row_idx} —Å —Å—É–º–º–æ–π {best_row_data['total']:,.0f}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        row = df.iloc[best_row_idx]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 1000
        monthly_data = {}
        values = []
        
        for col_idx, cell in enumerate(row):
            try:
                val = pd.to_numeric(cell, errors='coerce')
                if pd.notna(val) and val > 1000:
                    values.append((col_idx, int(val)))
            except:
                continue
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å 12 –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–µ—Å—è—Ü—ã
        if len(values) == 12:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ 12 –∑–Ω–∞—á–µ–Ω–∏–π - –≤–µ—Ä–æ—è—Ç–Ω–æ, –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            
            for i, (col_idx, value) in enumerate(values):
                month_num = i + 1
                monthly_data[month_num] = {
                    'tourists': value,
                    'column_index': col_idx,
                    'source': f'–°—Ç—Ä–æ–∫–∞ {best_row_idx}, —Å—Ç–æ–ª–±–µ—Ü {col_idx}'
                }
        
        # –ï—Å–ª–∏ –Ω–µ 12, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        elif len(values) > 6:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(values)} –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–µ 12)")
            print("   –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º...")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 12 –∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            for i, (col_idx, value) in enumerate(values[:12]):
                month_num = i + 1
                monthly_data[month_num] = {
                    'tourists': value,
                    'column_index': col_idx,
                    'source': f'–°—Ç—Ä–æ–∫–∞ {best_row_idx}, —Å—Ç–æ–ª–±–µ—Ü {col_idx} (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ)'
                }
        
        if monthly_data:
            print(f"\nüìä –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –ú–ï–°–Ø–ß–ù–´–ï –î–ê–ù–ù–´–ï:")
            print("-" * 50)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            total_tourists = sum(data['tourists'] for data in monthly_data.values())
            
            for month_num in sorted(monthly_data.keys()):
                data = monthly_data[month_num]
                month_name = month_names[month_num - 1]
                tourists = data['tourists']
                percentage = (tourists / total_tourists) * 100 if total_tourists > 0 else 0
                
                print(f"{month_num:2d}. {month_name:10} | {tourists:>10,} | {percentage:5.1f}%")
            
            print(f"\nüìà –ò–¢–û–ì–û: {total_tourists:,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
            
            return monthly_data
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_tourist_correlations(monthly_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
    
    print("\nüîó –°–û–ó–î–ê–ù–ò–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ô –° –ü–†–û–î–ê–ñ–ê–ú–ò")
    print("=" * 50)
    
    if not monthly_data:
        print("‚ùå –ù–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
        conn = sqlite3.connect('database.sqlite')
        
        query = """
        SELECT 
            stat_date as date,
            sales
        FROM (
            SELECT stat_date, sales FROM grab_stats WHERE sales > 0
            UNION ALL
            SELECT stat_date, sales FROM gojek_stats WHERE sales > 0
        )
        ORDER BY date
        """
        
        sales_df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sales_df['sales'] = pd.to_numeric(sales_df['sales'], errors='coerce')
        sales_df = sales_df.dropna(subset=['sales'])
        sales_df['date'] = pd.to_datetime(sales_df['date'])
        sales_df['month'] = sales_df['date'].dt.month
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = sales_df.groupby('month')['sales'].mean().reset_index()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –ø–æ {len(monthly_sales)} –º–µ—Å—è—Ü–∞–º")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        correlation_data = []
        
        for month_num in range(1, 13):
            tourists = monthly_data.get(month_num, {}).get('tourists', 0)
            sales_data = monthly_sales[monthly_sales['month'] == month_num]
            avg_sales = sales_data['sales'].iloc[0] if len(sales_data) > 0 else 0
            
            if tourists > 0 and avg_sales > 0:
                correlation_data.append({
                    'month': month_num,
                    'tourists': tourists,
                    'avg_sales': avg_sales
                })
        
        if len(correlation_data) >= 3:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            df_corr = pd.DataFrame(correlation_data)
            correlation = df_corr['tourists'].corr(df_corr['avg_sales'])
            
            print(f"üîó –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –¢–£–†–ò–°–¢–´ ‚Üî –ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            total_tourists = sum(item['tourists'] for item in correlation_data)
            avg_tourists = total_tourists / len(correlation_data)
            
            tourist_coefficients = {}
            
            for item in correlation_data:
                month_num = item['month']
                tourists = item['tourists']
                coefficient = tourists / avg_tourists
                
                tourist_coefficients[month_num] = {
                    'coefficient': coefficient,
                    'tourists': tourists,
                    'avg_sales': item['avg_sales']
                }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω—ã
            coefficients = [data['coefficient'] for data in tourist_coefficients.values()]
            mean_coeff = np.mean(coefficients)
            std_coeff = np.std(coefficients)
            
            high_threshold = mean_coeff + 0.3 * std_coeff
            low_threshold = mean_coeff - 0.3 * std_coeff
            
            seasons = {
                '–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0},
                '—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0},
                '–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0}
            }
            
            for month_num, data in tourist_coefficients.items():
                coeff = data['coefficient']
                
                if coeff >= high_threshold:
                    seasons['–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                elif coeff <= low_threshold:
                    seasons['–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                else:
                    seasons['—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            
            # –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
            for season_name, season_data in seasons.items():
                if season_data['–º–µ—Å—è—Ü—ã']:
                    season_coeffs = [tourist_coefficients[month]['coefficient'] for month in season_data['–º–µ—Å—è—Ü—ã']]
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = float(np.mean(season_coeffs))
                else:
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = 1.0
            
            print("\n‚úÖ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–ó–û–ù–û–í (–†–ï–ê–õ–¨–ù–´–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï):")
            print("-" * 60)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            for season_name, season_data in seasons.items():
                months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã']]
                print(f"{season_name.upper():15} | {season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']:5.2f} | {', '.join(months_names)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {
                'seasonal_patterns': seasons,
                'monthly_coefficients': tourist_coefficients,
                'correlation_tourists_sales': float(correlation),
                'analysis_metadata': {
                    'source': 'Real tourist arrivals (Kunjungan_Wisatawan_Bali_2025.xls)',
                    'total_tourists': total_tourists,
                    'months_analyzed': len(correlation_data),
                    'correlation_strength': 'Strong' if abs(correlation) > 0.7 else 'Moderate' if abs(correlation) > 0.4 else 'Weak',
                    'created_at': datetime.now().isoformat()
                }
            }
            
            with open('real_tourist_correlations.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ real_tourist_correlations.json")
            
            return result
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèñÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò")
    print("=" * 70)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    df, header_row = analyze_excel_structure()
    
    if df is not None:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö
        numeric_rows = find_data_patterns(df)
        
        if numeric_rows:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            monthly_data = extract_monthly_data_smart(df, numeric_rows)
            
            if monthly_data:
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                result = create_tourist_correlations(monthly_data)
                
                if result:
                    print("\nüéâ –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
                    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    print("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
                    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—É—á–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
                    
                    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                    print(f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {result['correlation_tourists_sales']:.3f}")
                    print(f"   –°–∏–ª–∞ —Å–≤—è–∑–∏: {result['analysis_metadata']['correlation_strength']}")
                    print(f"   –¢—É—Ä–∏—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['analysis_metadata']['total_tourists']:,}")
                    
                    return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
    return False

if __name__ == "__main__":
    main()