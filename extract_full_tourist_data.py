#!/usr/bin/env python3
"""
üèñÔ∏è –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–û–õ–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê 12 –ú–ï–°–Ø–¶–ï–í
–ò—â–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤ –∏–∑ —Ñ–∞–π–ª–∞
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import sqlite3

def find_complete_monthly_data():
    """–ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤"""
    
    print("üîç –ü–û–ò–°–ö –ü–û–õ–ù–´–• –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–• (12 –ú–ï–°–Ø–¶–ï–í)")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', header=2)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìä –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ò—â–µ–º –º–µ—Å—è—á–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        month_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JULY', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
        available_months = [col for col in month_columns if col in df.columns]
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—è—á–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {len(available_months)}")
        print(f"   –ú–µ—Å—è—Ü—ã: {available_months}")
        
        if len(available_months) < 12:
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è...")
            
            # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            alt_month_patterns = {
                'JAN': ['jan', 'january', '—è–Ω–≤–∞—Ä—å'],
                'FEB': ['feb', 'february', '—Ñ–µ–≤—Ä–∞–ª—å'],
                'MAR': ['mar', 'march', '–º–∞—Ä—Ç'],
                'APR': ['apr', 'april', '–∞–ø—Ä–µ–ª—å'],
                'MAY': ['may', '–º–∞–π'],
                'JUN': ['jun', 'june', '–∏—é–Ω—å'],
                'JUL': ['jul', 'july', '–∏—é–ª—å'],
                'AUG': ['aug', 'august', '–∞–≤–≥—É—Å—Ç'],
                'SEP': ['sep', 'september', '—Å–µ–Ω—Ç—è–±—Ä—å'],
                'OCT': ['oct', 'october', '–æ–∫—Ç—è–±—Ä—å'],
                'NOV': ['nov', 'november', '–Ω–æ—è–±—Ä—å'],
                'DEC': ['dec', 'december', '–¥–µ–∫–∞–±—Ä—å']
            }
            
            for col in df.columns:
                col_lower = str(col).lower()
                for month_key, patterns in alt_month_patterns.items():
                    if any(pattern in col_lower for pattern in patterns):
                        if month_key not in available_months and col not in available_months:
                            available_months.append(col)
                            print(f"   –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Å—è—Ü: {col} -> {month_key}")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
        complete_rows = []
        
        for idx, row in df.iterrows():
            monthly_values = []
            
            for month_col in available_months:
                try:
                    val = pd.to_numeric(row[month_col], errors='coerce')
                    if pd.notna(val) and val > 0:
                        monthly_values.append(val)
                    else:
                        break  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
                except:
                    break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
            if len(monthly_values) == len(available_months):
                complete_rows.append({
                    'row_index': idx,
                    'nationality': str(row.get('NATIONALITY', 'Unknown')),
                    'values': monthly_values,
                    'total': sum(monthly_values),
                    'months_count': len(monthly_values)
                })
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(complete_rows)} —Å—Ç—Ä–æ–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        if complete_rows:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
            complete_rows.sort(key=lambda x: x['total'], reverse=True)
            
            print("\nüìä –¢–û–ü-10 –°–¢–†–ê–ù/–°–¢–†–û–ö –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –¢–£–†–ò–°–¢–û–í:")
            print("-" * 70)
            
            for i, row_data in enumerate(complete_rows[:10]):
                nationality = row_data['nationality'][:20]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                print(f"{i+1:2d}. {nationality:20} | {row_data['total']:>10,} | {row_data['months_count']} –º–µ—Å—è—Ü–µ–≤")
        
        return complete_rows, available_months
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return [], []

def create_aggregated_monthly_data(complete_rows, available_months):
    """–°–æ–∑–¥–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    print(f"\nüîÑ –°–û–ó–î–ê–ù–ò–ï –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–• –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    if not complete_rows:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        return None
    
    try:
        # –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        month_totals = {}
        
        for month_idx, month_col in enumerate(available_months):
            month_num = month_idx + 1
            total_tourists = sum(row['values'][month_idx] for row in complete_rows)
            
            month_totals[month_num] = {
                'tourists': int(total_tourists),
                'month_name': month_col,
                'countries_count': len(complete_rows)
            }
        
        print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(month_totals)} –º–µ—Å—è—Ü–∞–º")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ü–û –ú–ï–°–Ø–¶–ê–ú:")
        print("-" * 70)
        
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        total_tourists = sum(data['tourists'] for data in month_totals.values())
        
        for month_num in sorted(month_totals.keys()):
            data = month_totals[month_num]
            month_name = month_names[month_num - 1] if month_num <= 12 else f"–ú–µ—Å—è—Ü {month_num}"
            tourists = data['tourists']
            percentage = (tourists / total_tourists) * 100 if total_tourists > 0 else 0
            
            print(f"{month_num:2d}. {month_name:10} | {tourists:>10,} | {percentage:5.1f}% | {data['countries_count']} —Å—Ç—Ä–∞–Ω")
        
        print(f"\nüìà –ò–¢–û–ì–û: {total_tourists:,} —Ç—É—Ä–∏—Å—Ç–æ–≤ –∑–∞ {len(month_totals)} –º–µ—Å—è—Ü–µ–≤")
        
        return month_totals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_real_tourist_correlations_full(month_totals):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print(f"\nüîó –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 60)
    
    if not month_totals:
        print("‚ùå –ù–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
        conn = sqlite3.connect('database.sqlite')
        
        query = """
        SELECT 
            stat_date as date,
            sales
        FROM (
            SELECT stat_date, sales FROM grab_stats WHERE sales > 0
            UNION ALL
            SELECT stat_date, sales FROM gojek_stats WHERE sales > 0
        )
        ORDER BY date
        """
        
        sales_df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sales_df['sales'] = pd.to_numeric(sales_df['sales'], errors='coerce')
        sales_df = sales_df.dropna(subset=['sales'])
        sales_df['date'] = pd.to_datetime(sales_df['date'])
        sales_df['month'] = sales_df['date'].dt.month
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = sales_df.groupby('month')['sales'].mean().reset_index()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –ø–æ {len(monthly_sales)} –º–µ—Å—è—Ü–∞–º")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        correlation_data = []
        
        for month_num, tourist_data in month_totals.items():
            tourists = tourist_data['tourists']
            sales_data = monthly_sales[monthly_sales['month'] == month_num]
            avg_sales = sales_data['sales'].iloc[0] if len(sales_data) > 0 else 0
            
            if tourists > 0 and avg_sales > 0:
                correlation_data.append({
                    'month': month_num,
                    'tourists': tourists,
                    'avg_sales': avg_sales
                })
        
        if len(correlation_data) >= 3:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            df_corr = pd.DataFrame(correlation_data)
            correlation = df_corr['tourists'].corr(df_corr['avg_sales'])
            
            print(f"üîó –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –¢–£–†–ò–°–¢–´ ‚Üî –ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            total_tourists = sum(item['tourists'] for item in correlation_data)
            avg_tourists = total_tourists / len(correlation_data)
            
            tourist_coefficients = {}
            
            for item in correlation_data:
                month_num = item['month']
                tourists = item['tourists']
                coefficient = tourists / avg_tourists
                
                tourist_coefficients[month_num] = {
                    'coefficient': coefficient,
                    'tourists': tourists,
                    'avg_sales': item['avg_sales']
                }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω—ã
            coefficients = [data['coefficient'] for data in tourist_coefficients.values()]
            mean_coeff = np.mean(coefficients)
            std_coeff = np.std(coefficients)
            
            high_threshold = mean_coeff + 0.3 * std_coeff
            low_threshold = mean_coeff - 0.3 * std_coeff
            
            seasons = {
                '–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ü–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'},
                '—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'},
                '–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'}
            }
            
            for month_num, data in tourist_coefficients.items():
                coeff = data['coefficient']
                
                if coeff >= high_threshold:
                    seasons['–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                elif coeff <= low_threshold:
                    seasons['–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                else:
                    seasons['—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            
            # –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
            for season_name, season_data in seasons.items():
                if season_data['–º–µ—Å—è—Ü—ã']:
                    season_coeffs = [tourist_coefficients[month]['coefficient'] for month in season_data['–º–µ—Å—è—Ü—ã']]
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = float(np.mean(season_coeffs))
                else:
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = 1.0
            
            print("\n‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–ó–û–ù–û–í (–ü–û–õ–ù–´–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï):")
            print("-" * 70)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            for season_name, season_data in seasons.items():
                months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã'] if month <= 12]
                print(f"{season_name.upper():15} | {season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']:5.2f} | {', '.join(months_names)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {
                'seasonal_patterns': seasons,
                'monthly_coefficients': tourist_coefficients,
                'correlation_tourists_sales': float(correlation),
                'analysis_metadata': {
                    'source': 'Complete tourist arrivals data (Kunjungan_Wisatawan_Bali_2025.xls)',
                    'total_tourists': total_tourists,
                    'months_analyzed': len(correlation_data),
                    'correlation_strength': 'Strong' if abs(correlation) > 0.7 else 'Moderate' if abs(correlation) > 0.4 else 'Weak',
                    'countries_included': len([row for row in correlation_data]),
                    'created_at': datetime.now().isoformat()
                }
            }
            
            with open('real_tourist_correlations.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –ü–æ–ª–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_tourist_correlations.json")
            
            return result
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèñÔ∏è –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–û–õ–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò")
    print("=" * 70)
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    complete_rows, available_months = find_complete_monthly_data()
    
    if complete_rows and available_months:
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        month_totals = create_aggregated_monthly_data(complete_rows, available_months)
        
        if month_totals:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            result = create_real_tourist_correlations_full(month_totals)
            
            if result:
                print("\nüéâ –ê–ù–ê–õ–ò–ó –ü–û–õ–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
                print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Å—è—Ü–∞–º")
                print("‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º")
                print("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
                print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—É—á–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
                
                print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                print(f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {result['correlation_tourists_sales']:.3f}")
                print(f"   –°–∏–ª–∞ —Å–≤—è–∑–∏: {result['analysis_metadata']['correlation_strength']}")
                print(f"   –¢—É—Ä–∏—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['analysis_metadata']['total_tourists']:,}")
                print(f"   –ú–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['analysis_metadata']['months_analyzed']}")
                
                return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    return False

if __name__ == "__main__":
    main()