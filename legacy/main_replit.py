#!/usr/bin/env python3
"""
üçΩÔ∏è –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´ –î–õ–Ø REPLIT
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è Replit
"""

import sqlite3
import pandas as pd
import json
from datetime import datetime

def connect_database():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('database.sqlite')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def get_restaurants(conn):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    try:
        query = "SELECT DISTINCT name, city FROM restaurants LIMIT 10"
        df = pd.read_sql_query(query, conn)
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return None

def analyze_restaurant(conn, restaurant_name):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    try:
        query = f"""
        SELECT * FROM restaurants 
        WHERE name = '{restaurant_name}'
        LIMIT 1
        """
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            return "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        restaurant = df.iloc[0]
        
        report = f"""
üçΩÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–ê: {restaurant_name}
{'=' * 50}

üìç –õ–æ–∫–∞—Ü–∏—è: {restaurant.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {restaurant.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {restaurant.get('platform', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ü—Ä–æ–¥–∞–∂–∏: ${restaurant.get('sales', 0):,.2f}
- –ó–∞–∫–∞–∑—ã: {restaurant.get('orders', 0):,}
- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${restaurant.get('avg_order_value', 0):.2f}

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- –°—Ä–∞–≤–Ω–∏—Ç—å —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        """
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í (REPLIT)")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_database()
    if not conn:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    restaurants = get_restaurants(conn)
    if restaurants is None:
        return
    
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´:")
    for idx, row in restaurants.iterrows():
        print(f"{idx + 1}. {row['name']} ({row['city']})")
    
    # –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    try:
        choice = input("\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ")
        idx = int(choice) - 1
        
        if 0 <= idx < len(restaurants):
            restaurant_name = restaurants.iloc[idx]['name']
            
            # –ê–Ω–∞–ª–∏–∑
            print("\nüîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...")
            report = analyze_restaurant(conn, restaurant_name)
            print(report)
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    finally:
        conn.close()

if __name__ == "__main__":
    main()