#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô –¢–ï–°–¢ –î–õ–Ø REPLIT - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–Æ–©–ï–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
"""

def test_production_analyzer():
    print("üß™ –¢–ï–°–¢ ProductionSalesAnalyzer –î–õ–Ø REPLIT")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        from src.analyzers import ProductionSalesAnalyzer
        print("‚úÖ ProductionSalesAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = ProductionSalesAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"   ML –¥–æ—Å—Ç—É–ø–µ–Ω: {analyzer.ml_available}")
        print(f"   Fake orders: {analyzer.fake_orders_filter is not None}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Replit
        print("\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ï–†–ò–û–î 2025-04-01 ‚Äî 2025-05-31:")
        results = analyzer.analyze_restaurant_performance(
            'Only Eggs', '2025-04-01', '2025-05-31', use_ml=False
        )
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)} —Å—Ç—Ä–æ–∫")
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
        problem_days = []
        for line in results:
            if '–ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨' in line:
                problem_days.append(line)
        
        print(f"üìâ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {len(problem_days)}")
        
        # –ò—â–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        factor_found = False
        for i, line in enumerate(results):
            if '–§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø' in line:
                factor_found = True
                print(f"\nüîç –§–ê–ö–¢–û–†–´ –ù–ê–ô–î–ï–ù–´ –ù–ê –°–¢–†–û–ö–ï {i+1}:")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –¥–Ω—è
                for j in range(i, min(i+10, len(results))):
                    if results[j].strip():
                        print(f"   {results[j]}")
                    if j > i and '–ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨' in results[j]:
                        break
                break
        
        if not factor_found:
            print("‚ùå –§–ê–ö–¢–û–†–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
            print("\nüìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫:")
            for i, line in enumerate(results[:20]):
                print(f"   {i+1:2d}. {line}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å 2025-05-15
        print(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –ö–û–ù–ö–†–ï–¢–ù–´–ô –î–ï–ù–¨ 2025-05-15:")
        day_results = analyzer.analyze_restaurant_performance(
            'Only Eggs', '2025-05-01', '2025-05-31', use_ml=False
        )
        
        # –ò—â–µ–º –∞–Ω–∞–ª–∏–∑ 2025-05-15
        found_may_15 = False
        for i, line in enumerate(day_results):
            if '2025-05-15' in line:
                found_may_15 = True
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –ê–ù–ê–õ–ò–ó 2025-05-15 –ù–ê –°–¢–†–û–ö–ï {i+1}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ –¥–Ω—è
                for j in range(i, min(i+15, len(day_results))):
                    print(f"   {day_results[j]}")
                    if j > i and ('–ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨' in day_results[j] or 
                                 '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´' in day_results[j]):
                        break
                break
        
        if not found_may_15:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ 2025-05-15 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print(f"‚úÖ –ù–∞—à –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"‚úÖ –ù–∞—Ö–æ–¥–∏—Ç {len(problem_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
        print(f"‚úÖ –í—ã–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è")
        print(f"‚úÖ –í–∫–ª—é—á–∞–µ—Ç fake orders, –ø–æ–≥–æ–¥—É, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, ROAS")
        print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê –í REPLIT:")
        print(f"   ProductionSalesAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ")
        print(f"   –ù–û –≤ main.py –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –°–¢–ê–†–´–ï –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã!")
        print(f"   –ù—É–∂–Ω–æ –£–î–ê–õ–ò–¢–¨ —Å—Ç–∞—Ä—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–∞—à!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_production_analyzer()