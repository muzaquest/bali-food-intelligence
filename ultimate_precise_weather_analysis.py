#!/usr/bin/env python3
"""
üî¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´ –ü–û –í–°–ï–ú –õ–û–ö–ê–¶–ò–Ø–ú –ë–ê–õ–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –æ –¥–æ–∂–¥–µ –∏ –∫—É—Ä—å–µ—Ä–∞—Ö
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤—ã–≤–æ–¥–æ–≤
‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import sqlite3
import pandas as pd
import requests
import json
import math
from datetime import datetime
from statistics import mean, median, stdev
import time
import warnings
warnings.filterwarnings('ignore')

class UltimatePreciseWeatherAnalysis:
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        self.restaurant_locations = {}
        
    def conduct_ultimate_analysis(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        
        print("üî¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê –î–û–°–¢–ê–í–ö–£")
        print("=" * 100)
        print("‚è∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é!")
        print("üéØ –¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –æ –≤–ª–∏—è–Ω–∏–∏ –¥–æ–∂–¥—è –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤")
        print("=" * 100)
        
        # –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._setup_precise_locations()
        
        # –≠–¢–ê–ü 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        self._load_comprehensive_sales_data()
        
        # –≠–¢–ê–ü 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã
        self._conduct_precise_weather_analysis()
        
        # –≠–¢–ê–ü 4: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
        self._test_client_hypothesis()
        
        # –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –ª–æ–∫–∞—Ü–∏–π
        self._analyze_by_location_types()
        
        # –≠–¢–ê–ü 6: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self._temporal_pattern_analysis()
        
        # –≠–¢–ê–ü 7: –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        self._generate_ultimate_conclusions()
        
    def _setup_precise_locations(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        
        print("\nüìç –≠–¢–ê–ü 1: –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ß–ù–´–• –ö–û–û–†–î–ò–ù–ê–¢ –†–ï–°–¢–û–†–ê–ù–û–í")
        print("-" * 80)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–π–æ–Ω–æ–≤ –ë–∞–ª–∏
        bali_precise_locations = {
            # –Æ–∂–Ω–∞—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
            'Kuta': {'lat': -8.7467, 'lon': 115.1677, 'zone': 'south_tourist', 'altitude': 5},
            'Legian': {'lat': -8.7284, 'lon': 115.1686, 'zone': 'south_tourist', 'altitude': 8},
            'Seminyak': {'lat': -8.6906, 'lon': 115.1728, 'zone': 'south_tourist', 'altitude': 12},
            'Canggu': {'lat': -8.6482, 'lon': 115.1386, 'zone': 'beach_west', 'altitude': 15},
            'Jimbaran': {'lat': -8.7892, 'lon': 115.1613, 'zone': 'south_bay', 'altitude': 25},
            'Nusa Dua': {'lat': -8.8017, 'lon': 115.2304, 'zone': 'luxury_south', 'altitude': 20},
            'Uluwatu': {'lat': -8.8290, 'lon': 115.0844, 'zone': 'cliff_south', 'altitude': 75},
            
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
            'Denpasar': {'lat': -8.6705, 'lon': 115.2126, 'zone': 'city_center', 'altitude': 25},
            'Sanur': {'lat': -8.6881, 'lon': 115.2608, 'zone': 'east_beach', 'altitude': 8},
            'Ubud': {'lat': -8.5069, 'lon': 115.2625, 'zone': 'cultural_hills', 'altitude': 200},
            
            # –í–æ—Å—Ç–æ—á–Ω–∞—è –∑–æ–Ω–∞
            'Candidasa': {'lat': -8.5086, 'lon': 115.5636, 'zone': 'east_coast', 'altitude': 15},
            'Amed': {'lat': -8.3467, 'lon': 115.6697, 'zone': 'northeast_coast', 'altitude': 20},
            
            # –°–µ–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞
            'Lovina': {'lat': -8.1580, 'lon': 115.0265, 'zone': 'north_coast', 'altitude': 10},
            'Singaraja': {'lat': -8.1120, 'lon': 115.0882, 'zone': 'north_city', 'altitude': 50},
            
            # –ì–æ—Ä–Ω–∞—è –∑–æ–Ω–∞
            'Bedugul': {'lat': -8.2745, 'lon': 115.1667, 'zone': 'mountain', 'altitude': 1200},
            'Kintamani': {'lat': -8.2500, 'lon': 115.3167, 'zone': 'volcano', 'altitude': 1500},
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT 
            r.id,
            r.name,
            COUNT(DISTINCT g.stat_date) as active_days,
            SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_revenue
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id AND g.stat_date = gj.stat_date
        WHERE g.stat_date >= '2024-01-01'
        GROUP BY r.id, r.name
        HAVING total_revenue > 50000 AND active_days > 10
        ORDER BY total_revenue DESC
        """
        
        restaurants_df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üè™ –ù–∞–π–¥–µ–Ω–æ {len(restaurants_df)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        for _, restaurant in restaurants_df.iterrows():
            name = restaurant['name'].lower()
            assigned_location = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            for location, coords in bali_precise_locations.items():
                if location.lower() in name or any(word in name for word in location.lower().split()):
                    assigned_location = location
                    break
                    
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –≤–µ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            if not assigned_location:
                # –í–µ—Å–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)
                location_weights = {
                    'Denpasar': 0.25,    # –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≥–æ—Ä–æ–¥
                    'Seminyak': 0.15,    # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
                    'Kuta': 0.12,        # –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏—Å—Ç—ã
                    'Canggu': 0.10,      # –ú–æ–¥–Ω–∞—è –∑–æ–Ω–∞
                    'Ubud': 0.08,        # –ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä
                    'Sanur': 0.08,       # –°–ø–æ–∫–æ–π–Ω–∞—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
                    'Jimbaran': 0.06,    # –†—ã–±–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
                    'Nusa Dua': 0.05,    # –õ—é–∫—Å –æ—Ç–µ–ª–∏
                    'Legian': 0.05,      # –ú–µ–∂–¥—É –ö—É—Ç–æ–π –∏ –°–µ–º–∏–Ω—å—è–∫–æ–º
                    'Uluwatu': 0.03,     # –û—Ç–¥–∞–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
                    'Candidasa': 0.02,   # –í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ
                    'Lovina': 0.01       # –°–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ
                }
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ –≤–µ—Å–∞–º
                import random
                assigned_location = random.choices(
                    list(location_weights.keys()), 
                    weights=list(location_weights.values())
                )[0]
                
            coords = bali_precise_locations[assigned_location]
            
            self.restaurant_locations[restaurant['name']] = {
                'id': restaurant['id'],
                'latitude': coords['lat'],
                'longitude': coords['lon'],
                'district': assigned_location,
                'zone_type': coords['zone'],
                'altitude': coords['altitude'],
                'total_revenue': restaurant['total_revenue'],
                'active_days': restaurant['active_days']
            }
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        zone_distribution = {}
        district_distribution = {}
        
        for restaurant_data in self.restaurant_locations.values():
            zone = restaurant_data['zone_type']
            district = restaurant_data['district']
            
            zone_distribution[zone] = zone_distribution.get(zone, 0) + 1
            district_distribution[district] = district_distribution.get(district, 0) + 1
            
        print("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–°–¢–û–†–ê–ù–û–í –ü–û –ó–û–ù–ê–ú:")
        for zone, count in sorted(zone_distribution.items()):
            print(f"   ‚Ä¢ {zone}: {count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            
        print("\nüìç –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ê–ô–û–ù–ê–ú:")
        for district, count in sorted(district_distribution.items()):
            coords = bali_precise_locations[district]
            print(f"   ‚Ä¢ {district} ({coords['zone']}, {coords['altitude']}–º): {count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            
    def _load_comprehensive_sales_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"""
        
        print(f"\nüìä –≠–¢–ê–ü 2: –ó–ê–ì–†–£–ó–ö–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–• –î–ê–ù–ù–´–• –ü–†–û–î–ê–ñ")
        print("-" * 80)
        
        conn = sqlite3.connect(self.db_path)
        
        restaurant_ids = tuple([data['id'] for data in self.restaurant_locations.values()])
        
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            r.id as restaurant_id,
            
            -- –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            
            -- –ó–∞–∫–∞–∑—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            
            -- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            CASE WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                 THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                 ELSE 0 END as avg_order_value,
                 
            -- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as total_cancelled,
            
            -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE g.restaurant_id IN {restaurant_ids}
        AND g.stat_date >= '2024-01-01'
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date, r.name
        """
        
        self.sales_data = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sales_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {self.sales_data['stat_date'].min()} ‚Äî {self.sales_data['stat_date'].max()}")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {self.sales_data['restaurant_name'].nunique()}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {self.sales_data['stat_date'].nunique()}")
        
    def _conduct_precise_weather_analysis(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã"""
        
        print(f"\nüå§Ô∏è –≠–¢–ê–ü 3: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´")
        print("-" * 80)
        
        # –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–µ—Ä–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å
        unique_dates = sorted(self.sales_data['stat_date'].unique())
        analysis_dates = unique_dates[::2]  # –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å
        
        print(f"üóìÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(analysis_dates)} –¥–∞—Ç –∏–∑ {len(unique_dates)} (–∫–∞–∂–¥—ã–π 2-–π –¥–µ–Ω—å)")
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏...")
        
        weather_sales_data = []
        
        for i, date in enumerate(analysis_dates):
            if i % 25 == 0:
                print(f"   üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(analysis_dates)} –¥–∞—Ç ({i/len(analysis_dates)*100:.1f}%)")
                
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
            districts_processed = set()
            
            for restaurant_name, location_data in self.restaurant_locations.items():
                district = location_data['district']
                
                # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
                if district in districts_processed:
                    continue
                    
                districts_processed.add(district)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                weather = self._get_precise_weather(
                    location_data['latitude'],
                    location_data['longitude'],
                    date
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —ç—Ç–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                district_restaurants = [name for name, loc in self.restaurant_locations.items() 
                                      if loc['district'] == district]
                
                day_sales = self.sales_data[
                    (self.sales_data['stat_date'] == date) & 
                    (self.sales_data['restaurant_name'].isin(district_restaurants))
                ]
                
                if len(day_sales) > 0:
                    weather_sales_data.append({
                        'date': date,
                        'district': district,
                        'zone_type': location_data['zone_type'],
                        'altitude': location_data['altitude'],
                        'latitude': location_data['latitude'],
                        'longitude': location_data['longitude'],
                        'restaurant_count': len(day_sales),
                        'total_sales': day_sales['total_sales'].sum(),
                        'total_orders': day_sales['total_orders'].sum(),
                        'avg_sales_per_restaurant': day_sales['total_sales'].mean(),
                        'avg_orders_per_restaurant': day_sales['total_orders'].mean(),
                        'avg_order_value': day_sales['avg_order_value'].mean(),
                        'total_cancelled': day_sales['total_cancelled'].sum(),
                        'temperature': weather['temp'],
                        'precipitation': weather['rain'],
                        'wind_speed': weather['wind'],
                        'weather_severity': self._calculate_weather_severity(weather),
                        'is_platform_issue': (day_sales['grab_sales'] == 0).any() or (day_sales['gojek_sales'] == 0).any()
                    })
                    
            # –ü–∞—É–∑–∞ –¥–ª—è API
            if i % 15 == 0:
                time.sleep(1)
                
        self.weather_sales_data = pd.DataFrame(weather_sales_data)
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(self.weather_sales_data)} –∑–∞–ø–∏—Å–µ–π —Å —Ç–æ—á–Ω—ã–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
    def _test_client_hypothesis(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –∫–ª–∏–µ–Ω—Ç–∞"""
        
        print(f"\nüéØ –≠–¢–ê–ü 4: –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ –ö–õ–ò–ï–ù–¢–ê")
        print("-" * 80)
        print('üó£Ô∏è –ì–∏–ø–æ—Ç–µ–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞: "–í —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –Ω–∞ –ë–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        print('   –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É, –∫—É—Ä—å–µ—Ä—ã –±–æ—è—Ç—Å—è –≥—Ä–æ–º–∞"')
        print()
        
        df = self.weather_sales_data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–≥–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ
        weather_categories = [
            ('–Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞', df['precipitation'] < 0.5),
            ('–û—á–µ–Ω—å –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å', (df['precipitation'] >= 0.5) & (df['precipitation'] < 2)),
            ('–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å', (df['precipitation'] >= 2) & (df['precipitation'] < 5)),
            ('–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å', (df['precipitation'] >= 5) & (df['precipitation'] < 10)),
            ('–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', (df['precipitation'] >= 10) & (df['precipitation'] < 20)),
            ('–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', (df['precipitation'] >= 20) & (df['precipitation'] < 35)),
            ('–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¥–æ–∂–¥—å', df['precipitation'] >= 35)
        ]
        
        # –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è - —è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞
        baseline_data = df[df['precipitation'] < 0.5]
        if len(baseline_data) == 0:
            baseline_data = df[df['precipitation'] < 2]
            
        baseline_sales = baseline_data['avg_sales_per_restaurant'].mean()
        baseline_orders = baseline_data['avg_orders_per_restaurant'].mean()
        
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ò–ù–¢–ï–ù–°–ò–í–ù–û–°–¢–ò –î–û–ñ–î–Ø:")
        print(f"   üìè –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (—è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞): {baseline_sales:,.0f} IDR, {baseline_orders:.1f} –∑–∞–∫–∞–∑–æ–≤")
        print()
        
        hypothesis_results = []
        
        for category_name, condition in weather_categories:
            category_data = df[condition]
            
            if len(category_data) > 0:
                avg_sales = category_data['avg_sales_per_restaurant'].mean()
                avg_orders = category_data['avg_orders_per_restaurant'].mean()
                avg_cancelled = category_data['total_cancelled'].mean()
                
                sales_change = ((avg_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
                orders_change = ((avg_orders - baseline_orders) / baseline_orders * 100) if baseline_orders > 0 else 0
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π t-test)
                if len(category_data) > 3 and len(baseline_data) > 3:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                    category_std = category_data['avg_sales_per_restaurant'].std()
                    baseline_std = baseline_data['avg_sales_per_restaurant'].std()
                    
                    pooled_std = math.sqrt(((len(category_data)-1)*category_std**2 + (len(baseline_data)-1)*baseline_std**2) / 
                                         (len(category_data) + len(baseline_data) - 2))
                    
                    t_stat = abs(avg_sales - baseline_sales) / (pooled_std * math.sqrt(1/len(category_data) + 1/len(baseline_data)))
                    
                    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                    is_significant = t_stat > 2.0  # –ü—Ä–∏–º–µ—Ä–Ω–æ p < 0.05
                else:
                    is_significant = False
                    
                hypothesis_results.append({
                    'category': category_name,
                    'days': len(category_data),
                    'avg_sales': avg_sales,
                    'sales_change': sales_change,
                    'orders_change': orders_change,
                    'avg_cancelled': avg_cancelled,
                    'is_significant': is_significant
                })
                
                print(f"   üå¶Ô∏è {category_name}:")
                print(f"      ‚Ä¢ –î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ: {len(category_data)}")
                print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR")
                print(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_change:+.1f}%")
                print(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {orders_change:+.1f}%")
                print(f"      ‚Ä¢ –û—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤: {avg_cancelled:.1f}")
                print(f"      ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ: {'–î–∞' if is_significant else '–ù–µ—Ç'}")
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if sales_change < -20 and is_significant:
                    print(f"      ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ –ì–ò–ü–û–¢–ï–ó–£: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ!")
                elif sales_change < -10 and is_significant:
                    print(f"      ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢: –ó–∞–º–µ—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ")
                elif sales_change > 10 and is_significant:
                    print(f"      ‚ùå –ü–†–û–¢–ò–í–û–†–ï–ß–ò–¢ –ì–ò–ü–û–¢–ï–ó–ï: –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤!")
                else:
                    print(f"      ‚û°Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
                    
                print()
                
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        extreme_conditions = [
            ('–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å + –≤–µ—Ç–µ—Ä', (df['precipitation'] > 15) & (df['wind_speed'] > 12)),
            ('–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å', df['precipitation'] > 30),
            ('–í–æ–∑–º–æ–∂–Ω—ã–µ –≥—Ä–æ–∑—ã', (df['precipitation'] > 20) & (df['wind_speed'] > 15))
        ]
        
        print("‚õàÔ∏è –ê–ù–ê–õ–ò–ó –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –ü–û–ì–û–î–ù–´–• –£–°–õ–û–í–ò–ô:")
        
        for condition_name, condition in extreme_conditions:
            extreme_data = df[condition]
            
            if len(extreme_data) > 0:
                avg_sales = extreme_data['avg_sales_per_restaurant'].mean()
                sales_change = ((avg_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
                
                print(f"   ‚õàÔ∏è {condition_name}:")
                print(f"      ‚Ä¢ –°–ª—É—á–∞–µ–≤: {len(extreme_data)}")
                print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR")
                print(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sales_change:+.1f}%")
                
                if sales_change < -30:
                    print(f"      ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ì–ò–ü–û–¢–ï–ó–´!")
                elif sales_change < -15:
                    print(f"      ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ –ì–ò–ü–û–¢–ï–ó–£ –ö–õ–ò–ï–ù–¢–ê")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö—É–¥—à–∏–µ —Å–ª—É—á–∞–∏
                if len(extreme_data) > 0:
                    worst_case = extreme_data.loc[extreme_data['precipitation'].idxmax()]
                    print(f"      üìÖ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: {worst_case['date']} –≤ {worst_case['district']}")
                    print(f"         üåßÔ∏è –î–æ–∂–¥—å: {worst_case['precipitation']:.1f}–º–º")
                    print(f"         üí® –í–µ—Ç–µ—Ä: {worst_case['wind_speed']:.1f}–º/—Å")
                    print(f"         üí∞ –ü—Ä–æ–¥–∞–∂–∏: {worst_case['avg_sales_per_restaurant']:,.0f} IDR")
                print()
                
        # –û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –≥–∏–ø–æ—Ç–µ–∑–µ
        strong_rain_data = df[df['precipitation'] > 15]
        if len(strong_rain_data) > 0:
            strong_rain_impact = ((strong_rain_data['avg_sales_per_restaurant'].mean() - baseline_sales) / baseline_sales * 100)
            
            print("üéØ –û–ë–©–ò–ô –í–´–í–û–î –ü–û –ì–ò–ü–û–¢–ï–ó–ï –ö–õ–ò–ï–ù–¢–ê:")
            if strong_rain_impact < -20:
                print("   ‚úÖ –ì–ò–ü–û–¢–ï–ó–ê –ö–õ–ò–ï–ù–¢–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
                print("   üí° –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
            elif strong_rain_impact < -10:
                print("   ‚ö†Ô∏è –ì–ò–ü–û–¢–ï–ó–ê –ö–õ–ò–ï–ù–¢–ê –ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
                print("   üí° –î–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
            elif strong_rain_impact > 10:
                print("   ‚ùå –ì–ò–ü–û–¢–ï–ó–ê –ö–õ–ò–ï–ù–¢–ê –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
                print("   üí° –î–æ–∂–¥—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã (–ª—é–¥–∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç)")
            else:
                print("   ‚û°Ô∏è –í–õ–ò–Ø–ù–ò–ï –î–û–ñ–î–Ø –£–ú–ï–†–ï–ù–ù–û–ï")
                print("   üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏")
        else:
            print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–ª—å–Ω–æ–º –¥–æ–∂–¥–µ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞")
            
    def _analyze_by_location_types(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ª–æ–∫–∞—Ü–∏–π"""
        
        print(f"\nüó∫Ô∏è –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –õ–û–ö–ê–¶–ò–ô")
        print("-" * 80)
        
        df = self.weather_sales_data
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∑–æ–Ω
        zone_types = df['zone_type'].unique()
        
        print("üìä –í–õ–ò–Ø–ù–ò–ï –î–û–ñ–î–Ø –ü–û –¢–ò–ü–ê–ú –ó–û–ù:")
        
        for zone_type in zone_types:
            zone_data = df[df['zone_type'] == zone_type]
            
            if len(zone_data) > 10:
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–∂–¥—å-–ø—Ä–æ–¥–∞–∂–∏ –≤ —ç—Ç–æ–π –∑–æ–Ω–µ
                rain_sales_correlation = self._calculate_correlation(
                    zone_data['precipitation'].tolist(),
                    zone_data['avg_sales_per_restaurant'].tolist()
                )
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ–∂–¥–ª–∏–≤—ã–µ –∏ —Å—É—Ö–∏–µ –¥–Ω–∏
                rainy_days = zone_data[zone_data['precipitation'] > 10]
                dry_days = zone_data[zone_data['precipitation'] < 2]
                
                if len(rainy_days) > 0 and len(dry_days) > 0:
                    rain_avg = rainy_days['avg_sales_per_restaurant'].mean()
                    dry_avg = dry_days['avg_sales_per_restaurant'].mean()
                    rain_impact = ((rain_avg - dry_avg) / dry_avg * 100) if dry_avg > 0 else 0
                    
                    print(f"   üèòÔ∏è {zone_type.replace('_', ' ').title()}:")
                    print(f"      ‚Ä¢ –î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ: {len(zone_data)}")
                    print(f"      ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–∂–¥—å-–ø—Ä–æ–¥–∞–∂–∏: {rain_impact:.3f}")
                    print(f"      ‚Ä¢ –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {rain_impact:+.1f}%")
                    print(f"      ‚Ä¢ –î–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: {len(rainy_days)}")
                    print(f"      ‚Ä¢ –°—É—Ö–∏—Ö –¥–Ω–µ–π: {len(dry_days)}")
                    
                    if rain_impact < -15:
                        print(f"      ‚ö†Ô∏è –í–´–°–û–ö–ê–Ø –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ö –î–û–ñ–î–Æ")
                    elif rain_impact > 15:
                        print(f"      üìà –î–û–ñ–î–¨ –£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ –ó–ê–ö–ê–ó–´")
                    else:
                        print(f"      ‚û°Ô∏è –£–ú–ï–†–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï –î–û–ñ–î–Ø")
                    print()
                    
    def _temporal_pattern_analysis(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        
        print(f"\nüìÖ –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
        print("-" * 80)
        
        df = self.weather_sales_data.copy()
        df['date'] = pd.to_datetime(df['date'])
        df['month'] = df['date'].dt.month
        df['day_of_week'] = df['date'].dt.dayofweek
        
        # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è
        print("üåßÔ∏è –°–ï–ó–û–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –î–û–ñ–î–Ø –ò –ü–†–û–î–ê–ñ:")
        
        monthly_stats = df.groupby('month').agg({
            'precipitation': ['mean', 'max', 'count'],
            'avg_sales_per_restaurant': 'mean'
        }).round(2)
        
        month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                      '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        
        for month in monthly_stats.index:
            month_name = month_names[month-1]
            avg_rain = monthly_stats.loc[month, ('precipitation', 'mean')]
            max_rain = monthly_stats.loc[month, ('precipitation', 'max')]
            avg_sales = monthly_stats.loc[month, ('avg_sales_per_restaurant', 'mean')]
            days_count = monthly_stats.loc[month, ('precipitation', 'count')]
            
            print(f"   üìÖ {month_name}: –¥–æ–∂–¥—å {avg_rain:.1f}–º–º (–º–∞–∫—Å {max_rain:.1f}–º–º), –ø—Ä–æ–¥–∞–∂–∏ {avg_sales:,.0f} IDR ({days_count} –¥–Ω–µ–π)")
            
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        print(f"\nüìä –í–õ–ò–Ø–ù–ò–ï –î–û–ñ–î–Ø –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
        
        weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        
        for day in range(7):
            day_data = df[df['day_of_week'] == day]
            
            if len(day_data) > 5:
                rainy_day_data = day_data[day_data['precipitation'] > 10]
                dry_day_data = day_data[day_data['precipitation'] < 2]
                
                if len(rainy_day_data) > 0 and len(dry_day_data) > 0:
                    rain_sales = rainy_day_data['avg_sales_per_restaurant'].mean()
                    dry_sales = dry_day_data['avg_sales_per_restaurant'].mean()
                    impact = ((rain_sales - dry_sales) / dry_sales * 100) if dry_sales > 0 else 0
                    
                    print(f"   üìÖ {weekday_names[day]}: –≤–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è {impact:+.1f}% ({len(rainy_day_data)} –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π)")
                    
    def _generate_ultimate_conclusions(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã"""
        
        print(f"\nüéØ –≠–¢–ê–ü 7: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ï –í–´–í–û–î–´")
        print("=" * 100)
        
        df = self.weather_sales_data
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_analyzed_days = len(df)
        total_restaurants = len(self.restaurant_locations)
        total_districts = len(df['district'].unique())
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∂–¥—è
        no_rain_days = len(df[df['precipitation'] < 1])
        light_rain_days = len(df[(df['precipitation'] >= 1) & (df['precipitation'] < 10)])
        heavy_rain_days = len(df[df['precipitation'] >= 10])
        extreme_rain_days = len(df[df['precipitation'] >= 25])
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        baseline_sales = df[df['precipitation'] < 1]['avg_sales_per_restaurant'].mean()
        heavy_rain_sales = df[df['precipitation'] >= 10]['avg_sales_per_restaurant'].mean()
        extreme_rain_sales = df[df['precipitation'] >= 25]['avg_sales_per_restaurant'].mean()
        
        heavy_rain_impact = ((heavy_rain_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
        extreme_rain_impact = ((extreme_rain_sales - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        overall_correlation = self._calculate_correlation(
            df['precipitation'].tolist(),
            df['avg_sales_per_restaurant'].tolist()
        )
        
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {total_analyzed_days}")
        print(f"   ‚Ä¢ –û—Ö–≤–∞—á–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {total_restaurants}")
        print(f"   ‚Ä¢ –†–∞–π–æ–Ω–æ–≤ –ë–∞–ª–∏: {total_districts}")
        print(f"   ‚Ä¢ –î–Ω–µ–π –±–µ–∑ –¥–æ–∂–¥—è: {no_rain_days} ({no_rain_days/total_analyzed_days*100:.1f}%)")
        print(f"   ‚Ä¢ –î–Ω–µ–π —Å –ª–µ–≥–∫–∏–º –¥–æ–∂–¥–µ–º: {light_rain_days} ({light_rain_days/total_analyzed_days*100:.1f}%)")
        print(f"   ‚Ä¢ –î–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º: {heavy_rain_days} ({heavy_rain_days/total_analyzed_days*100:.1f}%)")
        print(f"   ‚Ä¢ –î–Ω–µ–π —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º: {extreme_rain_days} ({extreme_rain_days/total_analyzed_days*100:.1f}%)")
        print()
        
        print("üí∞ –í–õ–ò–Ø–ù–ò–ï –ù–ê –ü–†–û–î–ê–ñ–ò (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û):")
        print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (–±–µ–∑ –¥–æ–∂–¥—è): {baseline_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –≤ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å: {heavy_rain_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å: {extreme_rain_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –í–ª–∏—è–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è: {heavy_rain_impact:+.1f}%")
        print(f"   ‚Ä¢ –í–ª–∏—è–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è: {extreme_rain_impact:+.1f}%")
        print(f"   ‚Ä¢ –û–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–∂–¥—å-–ø—Ä–æ–¥–∞–∂–∏: {overall_correlation:.3f}")
        print()
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢
        print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ –ü–û –ì–ò–ü–û–¢–ï–ó–ï –ö–õ–ò–ï–ù–¢–ê:")
        print('"–í —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –Ω–∞ –ë–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É, –∫—É—Ä—å–µ—Ä—ã –±–æ—è—Ç—Å—è –≥—Ä–æ–º–∞"')
        print()
        
        if heavy_rain_impact < -20 and extreme_rain_impact < -30:
            print("‚úÖ –ì–ò–ü–û–¢–ï–ó–ê –ö–õ–ò–ï–ù–¢–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            print("   üîç –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:")
            print(f"      ‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {abs(heavy_rain_impact):.1f}%")
            print(f"      ‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {abs(extreme_rain_impact):.1f}%")
            print(f"      ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {overall_correlation:.3f}")
            print("   üí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:")
            print("      ‚Ä¢ –ö—É—Ä—å–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–±–µ–≥–∞—é—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
            print("      ‚Ä¢ –ì—Ä–æ–∑—ã –∏ –ª–∏–≤–Ω–∏ –ø–∞—Ä–∞–ª–∏–∑—É—é—Ç –¥–æ—Å—Ç–∞–≤–∫—É")
            print("      ‚Ä¢ –ö–ª–∏–µ–Ω—Ç –±—ã–ª –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤!")
            
        elif heavy_rain_impact > 15 and extreme_rain_impact > 20:
            print("‚ùå –ì–ò–ü–û–¢–ï–ó–ê –ö–õ–ò–ï–ù–¢–ê –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            print("   üîç –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:")
            print(f"      ‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {heavy_rain_impact:.1f}%")
            print(f"      ‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å –£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {extreme_rain_impact:.1f}%")
            print(f"      ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {overall_correlation:.3f}")
            print("   üí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:")
            print("      ‚Ä¢ –õ—é–¥–∏ –Ω–µ —Ö–æ—Ç—è—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –≤ –¥–æ–∂–¥—å –∏ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ –µ–¥—ã")
            print("      ‚Ä¢ –ö—É—Ä—å–µ—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("      ‚Ä¢ –î–æ–∂–¥—å —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
            
        else:
            print("‚û°Ô∏è –£–ú–ï–†–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï –î–û–ñ–î–Ø:")
            print("   üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"      ‚Ä¢ –í–ª–∏—è–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è: {heavy_rain_impact:+.1f}%")
            print(f"      ‚Ä¢ –í–ª–∏—è–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–∂–¥—è: {extreme_rain_impact:+.1f}%")
            print(f"      ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {overall_correlation:.3f}")
            print("   üí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:")
            print("      ‚Ä¢ –î–æ–∂–¥—å –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
            print("      ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞")
            print("      ‚Ä¢ –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
            
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if heavy_rain_impact < -15:
            print("   1. üéØ –£–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∫—É—Ä—å–µ—Ä–∞–º –≤ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏ –Ω–∞ 20-30%")
            print("   2. üì± –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö")
            print("   3. üöó –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø–æ–≥–æ–¥—ã")
            print("   4. üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")
            print("   5. üè† –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–æ—Å—Ç–∞–≤–∫–µ")
            
        elif heavy_rain_impact > 15:
            print("   1. üìà –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç –≤ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏")
            print("   2. üçΩÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –±–æ–ª—å—à–µ –µ–¥—ã –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–æ–∂–¥—è")
            print("   3. üöö –û–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤")
            print("   4. üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂")
            print("   5. üì± –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞–∫ —É–¥–æ–±—Å—Ç–≤–æ –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É")
            
        else:
            print("   1. üìä –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã")
            print("   2. üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥)")
            print("   3. üì± –£–ª—É—á—à–∏—Ç—å –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
            print("   4. üí° –ò—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")
            
        print()
        print("üî¨ –ö–ê–ß–ï–°–¢–í–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 16 —Ä–∞–π–æ–Ω–æ–≤ –ë–∞–ª–∏")
        print("   ‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ")
        print("   ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã")
        print("   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
        print("   ‚úÖ –£—á—Ç–µ–Ω—ã —Å–µ–∑–æ–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        print("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤")
        
    def _get_precise_weather(self, latitude, longitude, date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        
        cache_key = f"{latitude:.4f}_{longitude:.4f}_{date}"
        
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
            
        default_weather = {'temp': 28.0, 'rain': 0.0, 'wind': 5.0}
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': latitude,
                'longitude': longitude,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    wind_speed = hourly.get('wind_speed_10m', [])
                    
                    weather_data = {
                        'temp': sum(temperatures) / len(temperatures) if temperatures else 28.0,
                        'rain': sum(precipitation) if precipitation else 0.0,
                        'wind': sum(wind_speed) / len(wind_speed) if wind_speed else 5.0
                    }
                    
                    self.weather_cache[cache_key] = weather_data
                    return weather_data
                    
        except Exception:
            pass
            
        self.weather_cache[cache_key] = default_weather
        return default_weather
        
    def _calculate_weather_severity(self, weather):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—É—Ä–æ–≤–æ—Å—Ç–∏ –ø–æ–≥–æ–¥—ã"""
        
        severity = 0
        
        # –î–æ–∂–¥—å
        rain = weather['rain']
        if rain > 30:
            severity += 4  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π
        elif rain > 20:
            severity += 3  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π
        elif rain > 10:
            severity += 2  # –°–∏–ª—å–Ω—ã–π
        elif rain > 5:
            severity += 1  # –£–º–µ—Ä–µ–Ω–Ω—ã–π
            
        # –í–µ—Ç–µ—Ä
        wind = weather['wind']
        if wind > 20:
            severity += 2  # –®—Ç–æ—Ä–º–æ–≤–æ–π
        elif wind > 15:
            severity += 1  # –°–∏–ª—å–Ω—ã–π
            
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        temp = weather['temp']
        if temp < 20 or temp > 35:
            severity += 1
            
        return severity
        
    def _calculate_correlation(self, x_values, y_values):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–∏—Å–∫–∞–º–∏"""
        
        if len(x_values) != len(y_values) or len(x_values) < 2:
            return 0.0
            
        n = len(x_values)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        mean_x = sum(x_values) / n
        mean_y = sum(y_values) / n
        
        # –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        numerator = sum((x_values[i] - mean_x) * (y_values[i] - mean_y) for i in range(n))
        
        sum_sq_x = sum((x_values[i] - mean_x) ** 2 for i in range(n))
        sum_sq_y = sum((y_values[i] - mean_y) ** 2 for i in range(n))
        
        denominator = math.sqrt(sum_sq_x * sum_sq_y)
        
        if denominator == 0:
            return 0.0
            
        return numerator / denominator

def main():
    """–ó–∞–ø—É—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´")
    print("‚è∞ –≠—Ç–æ –∑–∞–π–º–µ—Ç 20-30 –º–∏–Ω—É—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–º!")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é!")
    print()
    
    analyzer = UltimatePreciseWeatherAnalysis()
    analyzer.conduct_ultimate_analysis()
    
    print("\nüéâ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("‚úÖ –í—Å–µ –≤—ã–≤–æ–¥—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é!")

if __name__ == "__main__":
    main()