import sqlite3
import pandas as pd
import json
from datetime import datetime, timedelta
import numpy as np

class ComprehensiveHolidayAnalyzer:
    """
    –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –í–°–ï–• —Ç–∏–ø–æ–≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤:
    - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ (–ù–æ–≤—ã–π –≥–æ–¥, –†–æ–∂–¥–µ—Å—Ç–≤–æ)
    - –ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ (–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º, –ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º, –ú–∞–≤–ª–∏–¥)
    - –ë–∞–ª–∏–π—Å–∫–∏–µ/–ò–Ω–¥—É–∏—Å—Ç—Å–∫–∏–µ (Nyepi, Galungan, Kuningan, Purnama, Tilem)
    - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ (–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –î–µ–Ω—å —Ç—Ä—É–¥–∞)
    - –ö–∏—Ç–∞–π—Å–∫–∏–µ (–ö–∏—Ç–∞–π—Å–∫–∏–π –ù–ì, –§–µ—Å—Ç–∏–≤–∞–ª—å –ª—É–Ω—ã)
    """
    
    def __init__(self):
        self.db_path = 'database.sqlite'
        
    def get_comprehensive_holiday_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect(self.db_path)
        date_range_query = """
            SELECT MIN(stat_date) as min_date, MAX(stat_date) as max_date 
            FROM (
                SELECT stat_date FROM grab_stats
                UNION ALL
                SELECT stat_date FROM gojek_stats
            )
        """
        date_ranges = pd.read_sql_query(date_range_query, conn)
        conn.close()
        
        min_date = date_ranges['min_date'].iloc[0]
        max_date = date_ranges['max_date'].iloc[0]
        
        print(f"üìÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {min_date} ‚Üí {max_date}")
        
        # –ü–û–õ–ù–ê–Ø –ë–ê–ó–ê –ü–†–ê–ó–î–ù–ò–ö–û–í –ó–ê –í–°–ï –ì–û–î–´
        all_holidays = {}
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≥–æ–¥–∞–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        start_year = int(min_date[:4])
        end_year = int(max_date[:4])
        
        for year in range(start_year, end_year + 1):
            year_holidays = self._get_holidays_for_year(year)
            all_holidays.update(year_holidays)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞–Ω–Ω—ã—Ö
        filtered_holidays = {}
        for date, info in all_holidays.items():
            if min_date <= date <= max_date:
                filtered_holidays[date] = info
        
        print(f"üéâ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: {len(filtered_holidays)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        types_count = {}
        for holiday in filtered_holidays.values():
            holiday_type = holiday['type']
            types_count[holiday_type] = types_count.get(holiday_type, 0) + 1
        
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        for holiday_type, count in types_count.items():
            print(f"   {holiday_type}: {count} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
        
        return filtered_holidays, min_date, max_date
    
    def _get_holidays_for_year(self, year):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞"""
        holidays = {}
        
        # üåç –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ï –ü–†–ê–ó–î–ù–ò–ö–ò
        holidays.update({
            f"{year}-01-01": {
                'name': 'New Year\'s Day',
                'type': 'international',
                'category': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π',
                'religion': 'secular',
                'description': '–ù–æ–≤—ã–π –≥–æ–¥ –ø–æ –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é'
            },
            f"{year}-12-25": {
                'name': 'Christmas Day',
                'type': 'international',
                'category': '–•—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∏–π',
                'religion': 'christian',
                'description': '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ'
            },
            f"{year}-12-31": {
                'name': 'New Year\'s Eve',
                'type': 'international',
                'category': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π',
                'religion': 'secular',
                'description': '–ö–∞–Ω—É–Ω –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞'
            }
        })
        
        # üá®üá≥ –ö–ò–¢–ê–ô–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò
        chinese_new_years = {
            2023: "01-22", 2024: "02-10", 2025: "01-29", 2026: "02-17"
        }
        if year in chinese_new_years:
            cny_date = f"{year}-{chinese_new_years[year]}"
            holidays[cny_date] = {
                'name': 'Chinese New Year',
                'type': 'chinese',
                'category': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
                'religion': 'traditional',
                'description': '–ö–∏—Ç–∞–π—Å–∫–∏–π –ù–æ–≤—ã–π –≥–æ–¥ (–í–µ—Å–µ–Ω–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å)'
            }
            
            # –î–µ–Ω—å –ø–æ—Å–ª–µ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –ù–ì
            cny_next = datetime.strptime(cny_date, "%Y-%m-%d") + timedelta(days=1)
            holidays[cny_next.strftime("%Y-%m-%d")] = {
                'name': 'Chinese New Year Holiday',
                'type': 'chinese',
                'category': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
                'religion': 'traditional',
                'description': '–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞'
            }
        
        # üïå –ú–£–°–£–õ–¨–ú–ê–ù–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã)
        islamic_holidays = self._get_islamic_holidays_for_year(year)
        holidays.update(islamic_holidays)
        
        # üáÆüá© –ù–ê–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–†–ê–ó–î–ù–ò–ö–ò –ò–ù–î–û–ù–ï–ó–ò–ò
        holidays.update({
            f"{year}-08-17": {
                'name': 'Independence Day',
                'type': 'national',
                'category': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π',
                'religion': 'secular',
                'description': '–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏'
            },
            f"{year}-05-01": {
                'name': 'Labor Day',
                'type': 'national',
                'category': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π', 
                'religion': 'secular',
                'description': '–î–µ–Ω—å —Ç—Ä—É–¥–∞'
            },
            f"{year}-06-01": {
                'name': 'Pancasila Day',
                'type': 'national',
                'category': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π',
                'religion': 'secular',
                'description': '–î–µ–Ω—å –ü–∞–Ω—á–∞—Å–∏–ª—ã'
            }
        })
        
        # üèùÔ∏è –ë–ê–õ–ò–ô–°–ö–ò–ï/–ò–ù–î–£–ò–°–¢–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò
        balinese_holidays = self._get_balinese_holidays_for_year(year)
        holidays.update(balinese_holidays)
        
        return holidays
    
    def _get_islamic_holidays_for_year(self, year):
        """–ò—Å–ª–∞–º—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –≥–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã)"""
        islamic_dates = {
            2023: {
                "eid_fitr": "04-22", "eid_fitr_2": "04-23",
                "eid_adha": "06-29", "muharram": "07-19",
                "mawlid": "09-28", "isra_miraj": "02-18"
            },
            2024: {
                "eid_fitr": "04-10", "eid_fitr_2": "04-11", 
                "eid_adha": "06-17", "muharram": "07-07",
                "mawlid": "09-16", "isra_miraj": "02-08"
            },
            2025: {
                "eid_fitr": "03-31", "eid_fitr_2": "04-01",
                "eid_adha": "06-06", "muharram": "06-26", 
                "mawlid": "09-05", "isra_miraj": "01-27"
            },
            2026: {
                "eid_fitr": "03-20", "eid_fitr_2": "03-21",
                "eid_adha": "05-26", "muharram": "06-15",
                "mawlid": "08-25", "isra_miraj": "01-16"
            }
        }
        
        holidays = {}
        if year in islamic_dates:
            dates = islamic_dates[year]
            
            holidays.update({
                f"{year}-{dates['eid_fitr']}": {
                    'name': 'Eid al-Fitr',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –†–∞–º–∞–¥–∞–Ω–∞)'
                },
                f"{year}-{dates['eid_fitr_2']}": {
                    'name': 'Eid al-Fitr Holiday',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å –£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º–∞'
                },
                f"{year}-{dates['eid_adha']}": {
                    'name': 'Eid al-Adha',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º'
                },
                f"{year}-{dates['muharram']}": {
                    'name': 'Islamic New Year',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π –ù–æ–≤—ã–π –≥–æ–¥'
                },
                f"{year}-{dates['mawlid']}": {
                    'name': 'Mawlid an-Nabi',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ä–æ–∫–∞ –ú—É—Ö–∞–º–º–µ–¥–∞'
                },
                f"{year}-{dates['isra_miraj']}": {
                    'name': 'Isra and Miraj',
                    'type': 'islamic',
                    'category': '–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π',
                    'religion': 'islam',
                    'description': '–í–æ–∑–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–æ—Ä–æ–∫–∞ –ú—É—Ö–∞–º–º–µ–¥–∞'
                }
            })
        
        return holidays
    
    def _get_balinese_holidays_for_year(self, year):
        """–ë–∞–ª–∏–π—Å–∫–∏–µ/–∏–Ω–¥—É–∏—Å—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –≥–æ–¥–∞"""
        holidays = {}
        
        # Nyepi (–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã) - –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥
        nyepi_dates = {
            2023: "03-22", 2024: "03-11", 2025: "03-29", 2026: "03-19"
        }
        if year in nyepi_dates:
            holidays[f"{year}-{nyepi_dates[year]}"] = {
                'name': 'Nyepi (Day of Silence)',
                'type': 'balinese',
                'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                'religion': 'hindu',
                'description': '–ù–æ–≤—ã–π –≥–æ–¥ –ø–æ –±–∞–ª–∏–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –¥–µ–Ω—å —Ç–∏—à–∏–Ω—ã'
            }
        
        # Galungan –∏ Kuningan (—Ü–∏–∫–ª 210 –¥–Ω–µ–π)
        galungan_dates = self._calculate_galungan_kuningan_for_year(year)
        holidays.update(galungan_dates)
        
        # Vesak Day (–î–µ–Ω—å –ë—É–¥–¥—ã)
        vesak_dates = {
            2023: "06-04", 2024: "05-23", 2025: "05-12", 2026: "05-31"
        }
        if year in vesak_dates:
            holidays[f"{year}-{vesak_dates[year]}"] = {
                'name': 'Vesak Day',
                'type': 'buddhist',
                'category': '–ë—É–¥–¥–∏—Å—Ç—Å–∫–∏–π',
                'religion': 'buddhist',
                'description': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è –∏ —Å–º–µ—Ä—Ç–∏ –ë—É–¥–¥—ã'
            }
        
        # –ü–æ–ª–Ω–æ–ª—É–Ω–∏—è (Purnama) –∏ –ù–æ–≤–æ–ª—É–Ω–∏—è (Tilem) - –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        moon_holidays = self._calculate_moon_phases_for_year(year)
        holidays.update(moon_holidays)
        
        # –û–¥–∞–ª–∞–Ω—ã (—Ö—Ä–∞–º–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏) - –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏
        odalan_holidays = self._calculate_odalan_for_year(year)
        holidays.update(odalan_holidays)
        
        return holidays
    
    def _calculate_galungan_kuningan_for_year(self, year):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—ã Galungan –∏ Kuningan (—Ü–∏–∫–ª 210 –¥–Ω–µ–π)"""
        holidays = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞—Ç—ã Galungan –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        galungan_base = {
            2023: ["04-22", "11-18"],
            2024: ["06-05", "12-31"], 
            2025: ["04-16", "11-12"],
            2026: ["06-04", "12-31"]
        }
        
        if year in galungan_base:
            for galungan_date in galungan_base[year]:
                # Galungan
                holidays[f"{year}-{galungan_date}"] = {
                    'name': 'Galungan',
                    'type': 'balinese',
                    'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                    'religion': 'hindu',
                    'description': '–ü–æ–±–µ–¥–∞ –¥–æ–±—Ä–∞ –Ω–∞–¥ –∑–ª–æ–º, —Å–µ–º–µ–π–Ω—ã–µ –∑–∞—Å—Ç–æ–ª—å—è'
                }
                
                # Kuningan (—á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ Galungan)
                galungan_dt = datetime.strptime(f"{year}-{galungan_date}", "%Y-%m-%d")
                kuningan_dt = galungan_dt + timedelta(days=10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Kuningan –≤ —Ç–æ–º –∂–µ –≥–æ–¥—É
                if kuningan_dt.year == year:
                    holidays[kuningan_dt.strftime("%Y-%m-%d")] = {
                        'name': 'Kuningan',
                        'type': 'balinese',
                        'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                        'religion': 'hindu',
                        'description': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Galungan, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏'
                    }
        
        return holidays
    
    def _calculate_moon_phases_for_year(self, year):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è –∏ –Ω–æ–≤–æ–ª—É–Ω–∏—è –¥–ª—è –≥–æ–¥–∞"""
        holidays = {}
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã –ø–æ–ª–Ω–æ–ª—É–Ω–∏–π –∏ –Ω–æ–≤–æ–ª—É–Ω–∏–π –¥–ª—è –≥–æ–¥–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã, –∑–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        for month in range(1, 13):
            # –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 15 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)
            purnama_day = 13 + (month % 3)  # –í–∞—Ä—å–∏—Ä—É–µ–º –º–µ–∂–¥—É 13-15
            if purnama_day <= 28:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                holidays[f"{year}-{month:02d}-{purnama_day:02d}"] = {
                    'name': 'Purnama (Full Moon)',
                    'type': 'balinese',
                    'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                    'religion': 'hindu',
                    'description': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –¥–µ–Ω—å'
                }
            
            # –ù–æ–≤–æ–ª—É–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 29-30 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)
            tilem_day = 28 + (month % 3)  # –í–∞—Ä—å–∏—Ä—É–µ–º –º–µ–∂–¥—É 28-30
            if month == 2 and tilem_day > 28:  # –§–µ–≤—Ä–∞–ª—å
                tilem_day = 28
            elif tilem_day > 30 and month in [4, 6, 9, 11]:  # 30-–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã
                tilem_day = 30
            elif tilem_day > 31:  # 31-–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã
                tilem_day = 30
                
            holidays[f"{year}-{month:02d}-{tilem_day:02d}"] = {
                'name': 'Tilem (New Moon)',
                'type': 'balinese',
                'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                'religion': 'hindu',
                'description': '–ù–æ–≤–æ–ª—É–Ω–∏–µ, –¥–µ–Ω—å –æ—á–∏—â–µ–Ω–∏—è'
            }
        
        return holidays
    
    def _calculate_odalan_for_year(self, year):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ö—Ä–∞–º–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–û–¥–∞–ª–∞–Ω—ã) –¥–ª—è –≥–æ–¥–∞"""
        holidays = {}
        
        # –û–¥–∞–ª–∞–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ö—Ä–∞–º–∞—Ö
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –û–¥–∞–ª–∞–Ω–∞ –≤ –º–µ—Å—è—Ü
        
        for month in range(1, 13):
            # –ü–µ—Ä–≤—ã–π –û–¥–∞–ª–∞–Ω –º–µ—Å—è—Ü–∞
            odalan1_day = 7 + (month % 3)
            holidays[f"{year}-{month:02d}-{odalan1_day:02d}"] = {
                'name': 'Odalan Temple Festival',
                'type': 'balinese',
                'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                'religion': 'hindu',
                'description': '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Ö—Ä–∞–º–∞, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ö—Ä–∞–º–∞'
            }
            
            # –í—Ç–æ—Ä–æ–π –û–¥–∞–ª–∞–Ω –º–µ—Å—è—Ü–∞
            odalan2_day = 21 + (month % 3)
            if odalan2_day <= 28 or (month != 2 and odalan2_day <= 30) or (month in [1,3,5,7,8,10,12] and odalan2_day <= 31):
                holidays[f"{year}-{month:02d}-{odalan2_day:02d}"] = {
                    'name': 'Odalan Temple Festival',
                    'type': 'balinese', 
                    'category': '–ë–∞–ª–∏–π—Å–∫–∏–π',
                    'religion': 'hindu',
                    'description': '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Ö—Ä–∞–º–∞, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ö—Ä–∞–º–∞'
                }
        
        return holidays
    
    def analyze_comprehensive_holiday_impact(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –í–°–ï–• –ü–†–ê–ó–î–ù–ò–ö–û–í")
        print("=" * 55)
        
        holidays, min_date, max_date = self.get_comprehensive_holiday_list()
        
        if not holidays:
            print("‚ùå –ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–∏–æ–¥–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
        conn = sqlite3.connect(self.db_path)
        query = """
            SELECT 
                g.stat_date as date,
                SUM(g.sales + COALESCE(gj.sales, 0)) as daily_total
            FROM grab_stats g
            JOIN restaurants r ON g.restaurant_id = r.id
            LEFT JOIN gojek_stats gj ON gj.restaurant_id = r.id AND gj.stat_date = g.stat_date
            WHERE g.stat_date BETWEEN ? AND ?
            GROUP BY g.stat_date
        """
        
        market_daily = pd.read_sql_query(query, conn, params=[min_date, max_date])
        conn.close()
        
        print(f"üìä –î–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º: {len(market_daily)}")
        
        # –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –≤—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
        holiday_dates = list(holidays.keys())
        regular_days = market_daily[~market_daily['date'].isin(holiday_dates)]
        baseline_avg = regular_days['daily_total'].mean() if len(regular_days) > 0 else 0
        
        print(f"üìà –ë–∞–∑–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ (–±–µ–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤): {baseline_avg:,.0f} IDR")
        print(f"üìä –û–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π: {len(regular_days)}, –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π: {len(holiday_dates)}")
        
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫
        results = {}
        type_impacts = {}
        
        for holiday_date, holiday_info in holidays.items():
            holiday_sales = market_daily[market_daily['date'] == holiday_date]['daily_total']
            
            if len(holiday_sales) > 0:
                holiday_total = holiday_sales.iloc[0]
                impact_percent = ((holiday_total - baseline_avg) / baseline_avg * 100) if baseline_avg > 0 else 0
                
                results[holiday_date] = {
                    'name': holiday_info['name'],
                    'type': holiday_info['type'],
                    'category': holiday_info['category'],
                    'religion': holiday_info['religion'],
                    'description': holiday_info['description'],
                    'sales': float(holiday_total),
                    'impact_percent': float(impact_percent)
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
                holiday_type = holiday_info['type']
                if holiday_type not in type_impacts:
                    type_impacts[holiday_type] = []
                type_impacts[holiday_type].append(impact_percent)
            else:
                results[holiday_date] = {
                    'name': holiday_info['name'],
                    'type': holiday_info['type'],
                    'category': holiday_info['category'], 
                    'religion': holiday_info['religion'],
                    'description': holiday_info['description'],
                    'sales': 0,
                    'impact_percent': 0
                }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –ü–†–ê–ó–î–ù–ò–ö–û–í:")
        print("=" * 35)
        
        for ptype, impacts in type_impacts.items():
            if impacts:
                avg_impact = np.mean(impacts)
                count = len(impacts)
                
                if avg_impact > 10:
                    trend = "üî• –û–ß–ï–ù–¨ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï"
                elif avg_impact > 0:
                    trend = "üìà –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï"
                elif avg_impact > -10:
                    trend = "üìâ –ù–ï–ì–ê–¢–ò–í–ù–û–ï"
                else:
                    trend = "üí• –û–ß–ï–ù–¨ –ù–ï–ì–ê–¢–ò–í–ù–û–ï"
                
                print(f"üè∑Ô∏è {ptype.upper()}:")
                print(f"   {trend} –≤–ª–∏—è–Ω–∏–µ: {avg_impact:+.1f}% (—Å—Ä–µ–¥–Ω–µ–µ)")
                print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
                print(f"   üìà –î–∏–∞–ø–∞–∑–æ–Ω: {min(impacts):+.1f}% ‚Üí {max(impacts):+.1f}%")
                print()
        
        # –¢–û–ü –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ –≤–ª–∏—è–Ω–∏—é
        self._print_top_holidays(results)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        self._analyze_special_categories(results)
        
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = 'data/comprehensive_holiday_analysis.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                'analysis_period': {'start': min_date, 'end': max_date},
                'baseline_average': float(baseline_avg),
                'total_holidays': len(holidays),
                'holidays_with_data': len([r for r in results.values() if r['impact_percent'] != 0]),
                'results': results,
                'type_averages': {ptype: float(np.mean(impacts)) for ptype, impacts in type_impacts.items()},
                'methodology': {
                    'baseline_calculation': 'Average sales on non-holiday days',
                    'impact_formula': '((Holiday_Sales - Baseline) / Baseline) * 100',
                    'data_source': 'database.sqlite (Grab + Gojek combined)',
                    'regular_days_count': len(regular_days),
                    'holiday_days_count': len(holiday_dates)
                }
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        
        return results
    
    def _print_top_holidays(self, results):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø–æ –≤–ª–∏—è–Ω–∏—é"""
        print("\nüèÜ –¢–û–ü-10 –õ–£–ß–®–ò–• –ü–†–ê–ó–î–ù–ò–ö–û–í –î–õ–Ø –ü–†–û–î–ê–ñ:")
        print("=" * 40)
        
        sorted_results = sorted(results.items(), key=lambda x: x[1]['impact_percent'], reverse=True)
        
        for i, (date, data) in enumerate(sorted_results[:10], 1):
            if data['impact_percent'] != 0:
                emoji = "üî•" if data['impact_percent'] > 50 else "üìà"
                print(f"{i:2d}. {emoji} {data['name']} ({date})")
                print(f"     {data['category']} | –í–ª–∏—è–Ω–∏–µ: {data['impact_percent']:+.1f}%")
                print(f"     {data['description']}")
                print()
        
        print("\nüí• –¢–û–ü-10 –•–£–î–®–ò–• –ü–†–ê–ó–î–ù–ò–ö–û–í –î–õ–Ø –ü–†–û–î–ê–ñ:")
        print("=" * 40)
        
        worst_holidays = [item for item in sorted_results if item[1]['impact_percent'] < 0][-10:]
        
        for i, (date, data) in enumerate(reversed(worst_holidays), 1):
            emoji = "üí•" if data['impact_percent'] < -50 else "üìâ"
            print(f"{i:2d}. {emoji} {data['name']} ({date})")
            print(f"     {data['category']} | –í–ª–∏—è–Ω–∏–µ: {data['impact_percent']:+.1f}%")
            print(f"     {data['description']}")
            print()
    
    def _analyze_special_categories(self, results):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
        print("\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        print("=" * 40)
        
        # –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        new_year_holidays = [r for r in results.values() if 'new year' in r['name'].lower() or '–Ω–æ–≤—ã–π –≥–æ–¥' in r['description'].lower()]
        if new_year_holidays:
            ny_impacts = [h['impact_percent'] for h in new_year_holidays if h['impact_percent'] != 0]
            if ny_impacts:
                print(f"üéä –ù–û–í–û–ì–û–î–ù–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò:")
                print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ: {np.mean(ny_impacts):+.1f}%")
                print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(ny_impacts)}")
                print()
        
        # –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        religious_types = ['islamic', 'christian', 'hindu', 'buddhist']
        for religion in religious_types:
            religious_holidays = [r for r in results.values() if r['religion'] == religion and r['impact_percent'] != 0]
            if religious_holidays:
                impacts = [h['impact_percent'] for h in religious_holidays]
                religion_names = {'islamic': 'üïå –ú–£–°–£–õ–¨–ú–ê–ù–°–ö–ò–ï', 'christian': '‚úùÔ∏è –•–†–ò–°–¢–ò–ê–ù–°–ö–ò–ï', 
                                'hindu': 'üïâÔ∏è –ò–ù–î–£–ò–°–¢–°–ö–ò–ï', 'buddhist': '‚ò∏Ô∏è –ë–£–î–î–ò–°–¢–°–ö–ò–ï'}
                print(f"{religion_names[religion]} –ü–†–ê–ó–î–ù–ò–ö–ò:")
                print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ: {np.mean(impacts):+.1f}%")
                print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(impacts)}")
                print()

def main():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    analyzer = ComprehensiveHolidayAnalyzer()
    
    print("üéâ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –í–°–ï–• –ü–†–ê–ó–î–ù–ò–ö–û–í")
    print("=" * 60)
    print("üéØ –í–ö–õ–Æ–ß–ê–ï–¢:")
    print("   üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ (–ù–æ–≤—ã–π –≥–æ–¥, –†–æ–∂–¥–µ—Å—Ç–≤–æ)")
    print("   üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–µ (–ö–∏—Ç–∞–π—Å–∫–∏–π –ù–ì)")  
    print("   üïå –ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ (–£—Ä–∞–∑–∞/–ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º, –ú–∞–≤–ª–∏–¥)")
    print("   üáÆüá© –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏")
    print("   üèùÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–µ/–ò–Ω–¥—É–∏—Å—Ç—Å–∫–∏–µ (Nyepi, Galungan, Purnama)")
    print("   ‚ò∏Ô∏è –ë—É–¥–¥–∏—Å—Ç—Å–∫–∏–µ (Vesak Day)")
    print()
    
    results = analyzer.analyze_comprehensive_holiday_impact()
    
    print("\nüèÅ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("‚úÖ –¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –õ–Æ–ë–û–ô –ø—Ä–∞–∑–¥–Ω–∏–∫")
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö")
    print("‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏")

if __name__ == "__main__":
    main()