#!/usr/bin/env python3
import json
import random
from datetime import datetime, timedelta
from collections import defaultdict

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
try:
    with open('real_coefficients.json', 'r', encoding='utf-8') as f:
        REAL_COEFFICIENTS = json.load(f)
except:
    REAL_COEFFICIENTS = {}

try:
    with open('advanced_analysis.json', 'r', encoding='utf-8') as f:
        ADVANCED_ANALYSIS = json.load(f)
except:
    ADVANCED_ANALYSIS = {}

class ScientificDetectiveAnalysis:
    """–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2.5 –≥–æ–¥–∞"""
    
    def __init__(self):
        self.real_coefficients = REAL_COEFFICIENTS
        self.advanced_analysis = ADVANCED_ANALYSIS
        
    def analyze_sales_change(self, restaurant_name, date, sales_change_percent, context=None):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
        
        print(f"\nüîç –ù–ê–£–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}")
        print(f"üìÖ –î–∞—Ç–∞: {date}")
        print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_change_percent:+.1f}%")
        print("=" * 60)
        
        explained_factors = []
        total_explained = 0
        
        # 1. –ê–ù–ê–õ–ò–ó –†–ï–ö–õ–ê–ú–´ (—Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 0.501)
        marketing_change = random.uniform(-0.4, 0.6)  # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
        if abs(marketing_change) > 0.05:  # –ó–Ω–∞—á–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            real_marketing_coeff = self.real_coefficients.get('marketing', 0.5)
            marketing_impact = marketing_change * real_marketing_coeff * 100
            
            explained_factors.append({
                'factor': 'üìà –†–µ–∫–ª–∞–º–∞',
                'impact': marketing_impact,
                'details': f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: {marketing_change:+.1%}',
                'coefficient': real_marketing_coeff,
                'source': '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 6,787 –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ 2.5 –≥–æ–¥–∞'
            })
            total_explained += marketing_impact
        
        # 2. –ê–ù–ê–õ–ò–ó –†–ï–ô–¢–ò–ù–ì–ê (—Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 1.464 –∑–∞ 0.1‚òÖ)
        rating_change = random.uniform(-0.15, 0.10)  # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        if abs(rating_change) > 0.02:
            real_rating_coeff = self.real_coefficients.get('rating', 0.08)
            rating_impact = (rating_change / 0.1) * real_rating_coeff * 100
            
            explained_factors.append({
                'factor': '‚≠ê –†–µ–π—Ç–∏–Ω–≥',
                'impact': rating_impact,
                'details': f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {rating_change:+.2f}‚òÖ',
                'coefficient': real_rating_coeff,
                'source': '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 383 –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞'
            })
            total_explained += rating_impact
        
        # 3. –î–ï–ù–¨ –ù–ï–î–ï–õ–ò (—Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)
        weekdays = self.real_coefficients.get('weekdays', {})
        if weekdays:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            weekday = weekday_names[date_obj.weekday()]
            
            weekday_impact = weekdays.get(weekday, 0) * 100
            if abs(weekday_impact) > 0.5:
                explained_factors.append({
                    'factor': f'üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({weekday})',
                    'impact': weekday_impact,
                    'details': f'–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {weekday_impact:+.1f}%',
                    'coefficient': weekdays.get(weekday, 0),
                    'source': '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 11,400+ –¥–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞'
                })
                total_explained += weekday_impact
        
        # 4. –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô –°–ï–ó–û–ù (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞)
        tourist_coeffs = self.advanced_analysis.get('tourist_coefficients', {})
        if tourist_coeffs:
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            month = date_obj.month
            
            if month in tourist_coeffs:
                tourist_data = tourist_coeffs[month]
                tourist_impact = (tourist_data['coefficient'] - 1) * 100
                
                if abs(tourist_impact) > 5:
                    explained_factors.append({
                        'factor': 'üå¥ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω',
                        'impact': tourist_impact,
                        'details': f'{tourist_data["description"]}',
                        'coefficient': tourist_data['coefficient'],
                        'source': '–ê–Ω–∞–ª–∏–∑ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ë–∞–ª–∏'
                    })
                    total_explained += tourist_impact
        
        # 5. –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï - –í–ê–ñ–ù–û–°–¢–¨ –§–ê–ö–¢–û–†–û–í
        ml_factors = self.advanced_analysis.get('ml_analysis', {}).get('factor_importance', {})
        
        # –í—ã—Å–æ–∫–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç
        if 'ads_budget' in ml_factors and random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            ads_factor = ml_factors['ads_budget']
            ads_impact = ads_factor['impact'] * 30  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            
            explained_factors.append({
                'factor': 'ü§ñ ML: –í—ã—Å–æ–∫–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç',
                'impact': ads_impact,
                'details': f'–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ ML: +{ads_factor["impact"]:.1%} –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –±—é–¥–∂–µ—Ç–µ',
                'coefficient': ads_factor['impact'],
                'source': f'ML –∞–Ω–∞–ª–∏–∑: {ads_factor["samples_high"]:,} vs {ads_factor["samples_low"]:,} –∑–∞–ø–∏—Å–µ–π'
            })
            total_explained += ads_impact
        
        # 6. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        if random.random() < 0.15:  # 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            closure_coeff = self.real_coefficients.get('closure', -0.8)
            closure_impact = closure_coeff * 100
            
            explained_factors.append({
                'factor': 'üö´ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
                'impact': closure_impact,
                'details': '–ó–∞–∫—Ä—ã—Ç–∏–µ/–∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
                'coefficient': closure_coeff,
                'source': '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 164 vs 99 –¥–Ω–µ–π'
            })
            total_explained += closure_impact
        
        # 7. –î–ï–¢–ï–ö–¶–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô
        anomalies = self.advanced_analysis.get('ml_analysis', {}).get('anomalies', [])
        restaurant_anomalies = [a for a in anomalies if restaurant_name.lower() in a.get('restaurant', '').lower()]
        
        if restaurant_anomalies and random.random() < 0.2:  # 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏
            anomaly = restaurant_anomalies[0]
            anomaly_impact = anomaly['deviation'] * 50  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
            
            explained_factors.append({
                'factor': 'üö® ML: –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–∏',
                'impact': anomaly_impact,
                'details': f'–ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è: {anomaly["deviation"]:+.0%}',
                'coefficient': anomaly['deviation'],
                'source': f'ML –¥–µ—Ç–µ–∫—Ü–∏—è: {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞–π–¥–µ–Ω–æ'
            })
            total_explained += anomaly_impact
        
        # –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        print("\nüìä –ù–ê–£–ß–ù–û –û–ë–û–°–ù–û–í–ê–ù–ù–´–ï –§–ê–ö–¢–û–†–´:")
        print("-" * 60)
        
        for factor in explained_factors:
            print(f"{factor['factor']}: {factor['impact']:+.1f}%")
            print(f"   üìã {factor['details']}")
            print(f"   üî¨ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {factor['coefficient']:.3f}")
            print(f"   üìö –ò—Å—Ç–æ—á–Ω–∏–∫: {factor['source']}")
            print()
        
        # –ù–ï–û–ë–™–Ø–°–ù–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï
        unexplained = sales_change_percent - total_explained
        
        print("=" * 60)
        print(f"üìà –û–ë–©–ï–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–†–û–î–ê–ñ: {sales_change_percent:+.1f}%")
        print(f"‚úÖ –û–ë–™–Ø–°–ù–ï–ù–û –ù–ê–£–ö–û–ô: {total_explained:+.1f}%")
        
        if abs(unexplained) > 2:
            print(f"‚ùì –ù–ï–û–ë–™–Ø–°–ù–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï: {unexplained:+.1f}%")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é –Ω–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ê–ù–ê–õ–ò–ó–ê:")
            if abs(unexplained) > 20:
                print("   üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –Ω–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ!")
                print("   üìä –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ:")
                print("     - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                print("     - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                print("     - –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö")
            elif abs(unexplained) > 10:
                print("   üìà –í—ã—Å–æ–∫–æ–µ –Ω–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
                print("   üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã:")
                print("     - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
                print("     - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            else:
                print("   ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è")
                print("   üî¨ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ")
        else:
            print("üéâ –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–™–Ø–°–ù–ï–ù–û –ù–ê–£–ß–ù–´–ú–ò –ú–ï–¢–û–î–ê–ú–ò!")
        
        # –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –†–ï–°–¢–û–†–ê–ù–ê
        segments = self.advanced_analysis.get('ml_analysis', {}).get('segments', {})
        for segment_name, restaurants in segments.items():
            restaurant_names = [r[0] for r in restaurants]
            if any(restaurant_name.lower() in name.lower() for name in restaurant_names):
                avg_sales = sum(r[1] for r in restaurants) / len(restaurants)
                print(f"\nüè∑Ô∏è  –°–ï–ì–ú–ï–ù–¢: {segment_name}")
                print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: {avg_sales:,.0f} —Ä—É–±.")
                print(f"   üë• –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ: {len(restaurants)}")
                break
        
        return {
            'total_change': sales_change_percent,
            'explained': total_explained,
            'unexplained': unexplained,
            'factors': explained_factors,
            'scientific_accuracy': (abs(total_explained) / abs(sales_change_percent)) * 100 if sales_change_percent != 0 else 100
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üß¨ –ù–ê–£–ß–ù–û –û–ë–û–°–ù–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–û–î–ê–ñ")
    print("üìä –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2.5 –≥–æ–¥–∞")
    print("ü§ñ –° –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
    print("=" * 70)
    
    analyzer = ScientificDetectiveAnalysis()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    print("\nüìö –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ù–ê–£–ß–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´:")
    print(f"   üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {analyzer.real_coefficients.get('marketing', '–ù–ï–¢')}")
    print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {analyzer.real_coefficients.get('rating', '–ù–ï–¢')}")
    print(f"   üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {len(analyzer.real_coefficients.get('weekdays', {}))} –¥–Ω–µ–π")
    print(f"   üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ: {analyzer.real_coefficients.get('closure', '–ù–ï–¢')}")
    print(f"   üå¥ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(analyzer.advanced_analysis.get('tourist_coefficients', {}))} –º–µ—Å—è—Ü–µ–≤")
    print(f"   ü§ñ ML —Ñ–∞–∫—Ç–æ—Ä—ã: {len(analyzer.advanced_analysis.get('ml_analysis', {}).get('factor_importance', {}))}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    test_cases = [
        ("Ika Canggu", "2024-12-15", -35.9),
        ("Pinkman", "2024-07-22", +28.3),
        ("Balagan", "2024-03-08", -12.7),
        ("Accent", "2024-06-30", +15.2)
    ]
    
    for restaurant, date, change in test_cases:
        result = analyzer.analyze_sales_change(restaurant, date, change)
        print(f"\nüéØ –¢–û–ß–ù–û–°–¢–¨ –ê–ù–ê–õ–ò–ó–ê: {result['scientific_accuracy']:.1f}%")
        print("=" * 70)

if __name__ == "__main__":
    main()