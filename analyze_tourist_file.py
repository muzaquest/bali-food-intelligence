#!/usr/bin/env python3
"""
üèñÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Kunjungan_Wisatawan_Bali_2025.xls –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—É—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import sqlite3

def analyze_tourist_excel_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üèñÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò")
    print("=" * 70)
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Kunjungan_Wisatawan_Bali_2025.xls...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º openpyxl
            df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', engine='openpyxl')
        except:
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º xlrd
                df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', engine='xlrd')
            except:
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', sheet_name=0)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:")
        print("-" * 50)
        print("–°—Ç–æ–ª–±—Ü—ã:", list(df.columns))
        print("\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
        print(df.head())
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –º–µ—Å—è—Ü–∞–º–∏ –∏–ª–∏ –¥–∞—Ç–∞–º–∏
        month_columns = []
        date_columns = []
        
        for col in df.columns:
            col_str = str(col).lower()
            if any(month in col_str for month in ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 
                                                  'jul', 'aug', 'sep', 'oct', 'nov', 'dec',
                                                  'januari', 'februari', 'maret', 'april', 'mei', 'juni',
                                                  'juli', 'agustus', 'september', 'oktober', 'november', 'desember']):
                month_columns.append(col)
            elif any(date_word in col_str for date_word in ['date', 'tanggal', 'bulan', 'month']):
                date_columns.append(col)
        
        print(f"\nüóìÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –º–µ—Å—è—Ü–∞–º–∏: {len(month_columns)}")
        if month_columns:
            print("   ", month_columns[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            
        print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏: {len(date_columns)}")
        if date_columns:
            print("   ", date_columns)
        
        return df, month_columns, date_columns
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None, [], []

def extract_monthly_tourist_data(df, month_columns):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–∏—Å—Ç–∞—Ö"""
    
    print("\nüîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–• –û –¢–£–†–ò–°–¢–ê–•")
    print("=" * 60)
    
    try:
        if not month_columns:
            print("‚ö†Ô∏è –ú–µ—Å—è—á–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            return analyze_alternative_structure(df)
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å —Å—É–º–º–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        tourist_data = {}
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (Total, Jumlah, Sum –∏ —Ç.–¥.)
        total_rows = df[df.iloc[:, 0].astype(str).str.contains('total|jumlah|sum|–≤—Å–µ–≥–æ', case=False, na=False)]
        
        if len(total_rows) > 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(total_rows)} —Å—Ç—Ä–æ–∫ —Å —Å—É–º–º–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Å—É–º–º–∞–º–∏
            total_row = total_rows.iloc[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            for col in month_columns:
                try:
                    value = pd.to_numeric(total_row[col], errors='coerce')
                    if pd.notna(value) and value > 0:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–æ–ª–±—Ü–∞
                        month_num = get_month_number_from_column(col)
                        if month_num:
                            tourist_data[month_num] = {
                                'tourists': int(value),
                                'column_name': col,
                                'source': '–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞'
                            }
                except:
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É–º–º–∞—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–±—É–µ–º —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        if not tourist_data:
            print("‚ö†Ô∏è –°—É–º–º–∞—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ...")
            
            for col in month_columns:
                try:
                    # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ
                    numeric_values = pd.to_numeric(df[col], errors='coerce')
                    total_value = numeric_values.sum()
                    
                    if total_value > 0:
                        month_num = get_month_number_from_column(col)
                        if month_num:
                            tourist_data[month_num] = {
                                'tourists': int(total_value),
                                'column_name': col,
                                'source': '–°—É–º–º–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É'
                            }
                except:
                    continue
        
        if tourist_data:
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(tourist_data)} –º–µ—Å—è—Ü–∞–º")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ü–û –ú–ï–°–Ø–¶–ê–ú:")
            print("-" * 60)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            total_tourists = sum(data['tourists'] for data in tourist_data.values())
            
            for month_num in sorted(tourist_data.keys()):
                data = tourist_data[month_num]
                month_name = month_names[month_num - 1]
                tourists = data['tourists']
                percentage = (tourists / total_tourists) * 100 if total_tourists > 0 else 0
                
                print(f"{month_num:2d}. {month_name:10} | {tourists:>10,} —Ç—É—Ä–∏—Å—Ç–æ–≤ | {percentage:5.1f}% | {data['source']}")
            
            print(f"\nüìà –ò–¢–û–ì–û: {total_tourists:,} —Ç—É—Ä–∏—Å—Ç–æ–≤ –∑–∞ –≥–æ–¥")
            
            return tourist_data
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_month_number_from_column(col_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–æ–ª–±—Ü–∞"""
    
    col_str = str(col_name).lower()
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
    en_months = {
        'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
        'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
    }
    
    # –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
    id_months = {
        'januari': 1, 'februari': 2, 'maret': 3, 'april': 4, 'mei': 5, 'juni': 6,
        'juli': 7, 'agustus': 8, 'september': 9, 'oktober': 10, 'november': 11, 'desember': 12
    }
    
    # –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
    ru_months = {
        '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4, '–º–∞–π': 5, '–∏—é–Ω—å': 6,
        '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
    }
    
    all_months = {**en_months, **id_months, **ru_months}
    
    for month_name, month_num in all_months.items():
        if month_name in col_str:
            return month_num
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ (1-12)
    import re
    numbers = re.findall(r'\b(\d{1,2})\b', col_str)
    for num_str in numbers:
        num = int(num_str)
        if 1 <= num <= 12:
            return num
    
    return None

def analyze_alternative_structure(df):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞"""
    
    print("\nüîç –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê")
    print("=" * 60)
    
    # –ò—â–µ–º –ª—é–±—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏
    numeric_columns = df.select_dtypes(include=[np.number]).columns
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(numeric_columns)} —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
    
    if len(numeric_columns) > 0:
        print("–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", list(numeric_columns))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ß–ò–°–õ–û–í–´–ú –î–ê–ù–ù–´–ú:")
        print(df[numeric_columns].describe())
    
    # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç—É—Ä–∏—Å—Ç—ã)
    potential_tourist_columns = []
    
    for col in numeric_columns:
        max_val = df[col].max()
        if pd.notna(max_val) and max_val > 1000:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç—É—Ä–∏—Å—Ç–æ–≤ –±–æ–ª—å—à–µ 1000
            potential_tourist_columns.append(col)
    
    print(f"\nüèñÔ∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {potential_tourist_columns}")
    
    return None

def create_real_tourist_correlations(tourist_data):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
    
    print("\nüî¨ –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 60)
    
    if not tourist_data:
        print("‚ùå –ù–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('database.sqlite')
        
        query = """
        SELECT 
            stat_date as date,
            sales
        FROM (
            SELECT stat_date, sales FROM grab_stats WHERE sales > 0
            UNION ALL
            SELECT stat_date, sales FROM gojek_stats WHERE sales > 0
        )
        ORDER BY date
        """
        
        sales_df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sales_df['sales'] = pd.to_numeric(sales_df['sales'], errors='coerce')
        sales_df = sales_df.dropna(subset=['sales'])
        sales_df['date'] = pd.to_datetime(sales_df['date'])
        sales_df['month'] = sales_df['date'].dt.month
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = sales_df.groupby('month')['sales'].mean().reset_index()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥–∞–∂ –ø–æ {len(monthly_sales)} –º–µ—Å—è—Ü–∞–º")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        correlation_data = []
        
        for month_num in range(1, 13):
            tourists = tourist_data.get(month_num, {}).get('tourists', 0)
            sales_data = monthly_sales[monthly_sales['month'] == month_num]
            avg_sales = sales_data['sales'].iloc[0] if len(sales_data) > 0 else 0
            
            if tourists > 0 and avg_sales > 0:
                correlation_data.append({
                    'month': month_num,
                    'tourists': tourists,
                    'avg_sales': avg_sales
                })
        
        if len(correlation_data) >= 3:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            df_corr = pd.DataFrame(correlation_data)
            
            correlation = df_corr['tourists'].corr(df_corr['avg_sales'])
            
            print(f"üîó –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –¢–£–†–ò–°–¢–´ ‚Üî –ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            total_tourists = sum(item['tourists'] for item in correlation_data)
            avg_tourists_per_month = total_tourists / len(correlation_data)
            
            real_tourist_coefficients = {}
            
            for item in correlation_data:
                month_num = item['month']
                tourists = item['tourists']
                coefficient = tourists / avg_tourists_per_month  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
                
                real_tourist_coefficients[month_num] = {
                    'coefficient': coefficient,
                    'tourists': tourists,
                    'avg_sales': item['avg_sales']
                }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            coefficients = [data['coefficient'] for data in real_tourist_coefficients.values()]
            mean_coeff = np.mean(coefficients)
            std_coeff = np.std(coefficients)
            
            high_threshold = mean_coeff + 0.3 * std_coeff
            low_threshold = mean_coeff - 0.3 * std_coeff
            
            real_seasons = {
                '–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ü–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'},
                '—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'},
                '–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω': {'–º–µ—Å—è—Ü—ã': [], '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'}
            }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã
            for month_num, data in real_tourist_coefficients.items():
                coeff = data['coefficient']
                
                if coeff >= high_threshold:
                    real_seasons['–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                elif coeff <= low_threshold:
                    real_seasons['–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                else:
                    real_seasons['—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
            for season_name, season_data in real_seasons.items():
                if season_data['–º–µ—Å—è—Ü—ã']:
                    season_coeffs = [real_tourist_coefficients[month]['coefficient'] for month in season_data['–º–µ—Å—è—Ü—ã']]
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = float(np.mean(season_coeffs))
                else:
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = 1.0
            
            print("\n‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–ó–û–ù–û–í (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö):")
            print("-" * 70)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            for season_name, season_data in real_seasons.items():
                months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã']]
                print(f"{season_name.upper():15} | {season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']:5.2f} | {', '.join(months_names)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            real_tourist_data = {
                'seasonal_patterns': real_seasons,
                'monthly_coefficients': real_tourist_coefficients,
                'correlation_tourists_sales': float(correlation),
                'analysis_metadata': {
                    'source': 'Real tourist arrivals data (Kunjungan_Wisatawan_Bali_2025.xls)',
                    'total_tourists_analyzed': total_tourists,
                    'months_with_data': len(correlation_data),
                    'correlation_strength': 'Strong' if abs(correlation) > 0.7 else 'Moderate' if abs(correlation) > 0.4 else 'Weak',
                    'created_at': datetime.now().isoformat()
                }
            }
            
            with open('real_tourist_correlations.json', 'w', encoding='utf-8') as f:
                json.dump(real_tourist_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –†–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_tourist_correlations.json")
            
            return real_tourist_data
            
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    print("üèñÔ∏è –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    df, month_columns, date_columns = analyze_tourist_excel_file()
    
    if df is not None:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        tourist_data = extract_monthly_tourist_data(df, month_columns)
        
        if tourist_data:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
            correlations = create_real_tourist_correlations(tourist_data)
            
            if correlations:
                print("\nüéâ –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
                print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
                print("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç—É—Ä–∏—Å—Ç—ã ‚Üî –ø—Ä–æ–¥–∞–∂–∏")
                print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω—ã —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—É—á–Ω—ã–µ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                print(f"\nüìä –ö–û–†–†–ï–õ–Ø–¶–ò–Ø: {correlations['correlation_tourists_sales']:.3f}")
                print(f"üéØ –°–ò–õ–ê –°–í–Ø–ó–ò: {correlations['analysis_metadata']['correlation_strength']}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            return False
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("3. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç Excel —Ñ–∞–π–ª–∞")