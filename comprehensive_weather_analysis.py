#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô –î–õ–Ø DELIVERY
======================================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –ø–æ–≥–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ delivery:
üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: –∂–∞—Ä–∞/—Ö–æ–ª–æ–¥ ‚Üí –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚òÄÔ∏è –°–û–õ–ù–¶–ï: —è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ ‚Üí –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤
üåßÔ∏è –î–û–ñ–î–¨: –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
üí® –í–ï–¢–ï–†: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–∞–π–∫–µ—Ä–æ–≤
üå´Ô∏è –¢–£–ú–ê–ù: –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
‚õàÔ∏è –ì–†–û–ó–´: —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
üíß –í–õ–ê–ñ–ù–û–°–¢–¨: –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
üåÖ –í–†–ï–ú–Ø –°–£–¢–û–ö: –ø–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤ vs –ø–æ–≥–æ–¥–∞

–¶–ï–õ–¨: –í—ã—è–≤–∏—Ç—å –í–°–ï —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏!
"""

import sqlite3
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from collections import defaultdict
import requests
import os
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

class ComprehensiveWeatherAnalyzer:
    def __init__(self):
        self.db_path = 'database.sqlite'
        self.locations_file = 'data/bali_restaurant_locations.json'
        self.weather_api_url = "https://api.open-meteo.com/v1/forecast"
        self.cache_file = 'data/weather_analysis_cache.json'
        
    def load_restaurant_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return {r['name']: r for r in data['restaurants']}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return {}
    
    def get_comprehensive_delivery_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT 
            r.name as restaurant_name,
            COALESCE(g.stat_date, gj.stat_date) as date,
            
            -- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            
            -- Grab –¥–µ—Ç–∞–ª–∏
            g.sales as grab_sales,
            g.orders as grab_orders,
            g.cancelled_orders as grab_cancelled,
            g.store_is_busy as grab_busy,
            g.store_is_closed as grab_closed,
            g.out_of_stock as grab_out_of_stock,
            
            -- Gojek –¥–µ—Ç–∞–ª–∏
            gj.sales as gojek_sales,
            gj.orders as gojek_orders,
            gj.accepting_time as gojek_accepting_time,
            gj.preparation_time as gojek_prep_time,
            
            -- –†–µ–π—Ç–∏–Ω–≥–∏
            COALESCE(g.rating, gj.rating) as rating,
            
            -- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            CASE 
                WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                ELSE 0 
            END as avg_order_value,
            
            -- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            CASE CAST(strftime('%w', COALESCE(g.stat_date, gj.stat_date)) AS INTEGER)
                WHEN 0 THEN 'Sunday'
                WHEN 1 THEN 'Monday'
                WHEN 2 THEN 'Tuesday'
                WHEN 3 THEN 'Wednesday'
                WHEN 4 THEN 'Thursday'
                WHEN 5 THEN 'Friday'
                WHEN 6 THEN 'Saturday'
            END as day_of_week
            
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
        WHERE (g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL)
          AND (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) > 0
        ORDER BY r.name, date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–ê–ì–†–£–ñ–ï–ù–û –î–ê–ù–ù–´–• –î–õ–Ø –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {df['restaurant_name'].nunique()}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} ‚Üí {df['date'].max()}")
        print(f"   ‚Ä¢ –î–Ω–µ–π –Ω–µ–¥–µ–ª–∏: {df['day_of_week'].value_counts().to_dict()}")
        
        return df
    
    def get_comprehensive_weather(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ü–û–õ–ù–£–Æ –ø–æ–≥–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': [
                    'temperature_2m', 'precipitation', 'weather_code',
                    'wind_speed_10m', 'wind_direction_10m', 'relative_humidity_2m',
                    'cloud_cover', 'visibility', 'pressure_msl',
                    'apparent_temperature', 'uv_index'
                ],
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(self.weather_api_url, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
                    temps = hourly.get('temperature_2m', [28])
                    apparent_temps = hourly.get('apparent_temperature', [28])
                    precipitation = hourly.get('precipitation', [0])
                    weather_codes = hourly.get('weather_code', [0])
                    wind_speeds = hourly.get('wind_speed_10m', [5])
                    wind_directions = hourly.get('wind_direction_10m', [0])
                    humidity = hourly.get('relative_humidity_2m', [75])
                    cloud_cover = hourly.get('cloud_cover', [50])
                    visibility = hourly.get('visibility', [10000])
                    pressure = hourly.get('pressure_msl', [1013])
                    uv_index = hourly.get('uv_index', [5])
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    weather_summary = {
                        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        'avg_temp': np.mean(temps) if temps else 28,
                        'max_temp': max(temps) if temps else 28,
                        'min_temp': min(temps) if temps else 28,
                        'temp_range': (max(temps) - min(temps)) if temps else 0,
                        'feels_like': np.mean(apparent_temps) if apparent_temps else 28,
                        
                        # –û—Å–∞–¥–∫–∏ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                        'total_rain': sum(precipitation) if precipitation else 0,
                        'max_rain_hour': max(precipitation) if precipitation else 0,
                        'rain_hours': sum(1 for p in precipitation if p > 0.1),
                        'avg_humidity': np.mean(humidity) if humidity else 75,
                        
                        # –í–µ—Ç–µ—Ä
                        'avg_wind': np.mean(wind_speeds) if wind_speeds else 5,
                        'max_wind': max(wind_speeds) if wind_speeds else 5,
                        'wind_direction': np.mean(wind_directions) if wind_directions else 0,
                        
                        # –û–±–ª–∞—á–Ω–æ—Å—Ç—å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
                        'avg_cloud_cover': np.mean(cloud_cover) if cloud_cover else 50,
                        'min_visibility': min(visibility) if visibility else 10000,
                        'avg_pressure': np.mean(pressure) if pressure else 1013,
                        'max_uv': max(uv_index) if uv_index else 5,
                        
                        # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                        'weather_code': max(set(weather_codes), key=weather_codes.count) if weather_codes else 0,
                        'condition': self._weather_code_to_condition(max(set(weather_codes), key=weather_codes.count) if weather_codes else 0)
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
                    try:
                        weather_summary.update({
                            'heat_index': self._calculate_heat_index(weather_summary),
                            'comfort_index': self._calculate_comfort_index(weather_summary),
                            'courier_safety': self._calculate_courier_safety(weather_summary),
                            'customer_mood': self._calculate_customer_mood(weather_summary)
                        })
                    except Exception as e:
                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–µ–∫—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        weather_summary.update({
                            'heat_index': 3,
                            'comfort_index': 3,
                            'courier_safety': 7,
                            'customer_mood': 5
                        })
                    
                    return weather_summary
            
            return None
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return None
    
    def _weather_code_to_condition(self, code):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        conditions = {
            0: 'Clear_Sky',
            1: 'Mainly_Clear', 2: 'Partly_Cloudy', 3: 'Overcast',
            45: 'Fog', 48: 'Depositing_Rime_Fog',
            51: 'Light_Drizzle', 53: 'Moderate_Drizzle', 55: 'Dense_Drizzle',
            56: 'Light_Freezing_Drizzle', 57: 'Dense_Freezing_Drizzle',
            61: 'Slight_Rain', 63: 'Moderate_Rain', 65: 'Heavy_Rain',
            66: 'Light_Freezing_Rain', 67: 'Heavy_Freezing_Rain',
            71: 'Slight_Snow', 73: 'Moderate_Snow', 75: 'Heavy_Snow',
            77: 'Snow_Grains',
            80: 'Slight_Rain_Showers', 81: 'Moderate_Rain_Showers', 82: 'Violent_Rain_Showers',
            85: 'Slight_Snow_Showers', 86: 'Heavy_Snow_Showers',
            95: 'Thunderstorm', 96: 'Thunderstorm_Light_Hail', 99: 'Thunderstorm_Heavy_Hail'
        }
        return conditions.get(code, 'Unknown')
    
    def _calculate_heat_index(self, weather):
        """–ò–Ω–¥–µ–∫—Å –∂–∞—Ä—ã (–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å)"""
        temp = weather.get('feels_like', weather.get('avg_temp', 28))
        
        if temp < 26:
            return 1  # –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –≤—ã—Ö–æ–¥—è—Ç
        elif temp < 30:
            return 2  # –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ
        elif temp < 34:
            return 3  # –¢–µ–ø–ª–æ - –Ω–∞—á–∏–Ω–∞—é—Ç –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?
        elif temp < 38:
            return 4  # –ñ–∞—Ä–∫–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ
        else:
            return 5  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∂–∞—Ä–∫–æ
    
    def _calculate_comfort_index(self, weather):
        """–û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–æ–º—Ñ–æ—Ä—Ç–∞"""
        score = 5  # –ë–∞–∑–æ–≤—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp = weather.get('avg_temp', 28)
        if temp < 22 or temp > 35:
            score -= 2
        elif temp < 24 or temp > 32:
            score -= 1
            
        # –í–ª–∞–∂–Ω–æ—Å—Ç—å
        humidity = weather.get('avg_humidity', 75)
        if humidity > 85:
            score -= 1
        elif humidity > 90:
            score -= 2
            
        # –î–æ–∂–¥—å
        rain = weather.get('total_rain', 0)
        if rain > 10:
            score -= 2
        elif rain > 2:
            score -= 1
            
        # –í–µ—Ç–µ—Ä
        wind = weather.get('max_wind', 5)
        if wind > 25:
            score -= 1
            
        return max(1, score)
    
    def _calculate_courier_safety(self, weather):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ (1-10)"""
        safety = 10
        
        # –î–æ–∂–¥—å - –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å
        rain = weather.get('total_rain', 0)
        if rain > 15:
            safety -= 4
        elif rain > 5:
            safety -= 2
        elif rain > 1:
            safety -= 1
            
        # –í–µ—Ç–µ—Ä
        wind = weather.get('max_wind', 5)
        if wind > 30:
            safety -= 3
        elif wind > 20:
            safety -= 2
        elif wind > 15:
            safety -= 1
            
        # –í–∏–¥–∏–º–æ—Å—Ç—å
        visibility = weather.get('min_visibility', 10000)
        if visibility < 1000:
            safety -= 2
        elif visibility < 5000:
            safety -= 1
            
        # –ì—Ä–æ–∑—ã
        condition = weather.get('condition', 'Clear_Sky')
        if 'Thunderstorm' in condition:
            safety -= 3
            
        return max(1, safety)
    
    def _calculate_customer_mood(self, weather):
        """–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑—ã)"""
        mood = 5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
        
        # –•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ = –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        condition = weather.get('condition', 'Clear_Sky')
        if condition == 'Clear_Sky':
            mood += 2
        elif condition == 'Mainly_Clear':
            mood += 1
            
        # –ñ–∞—Ä–∞ = –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–º–æ–π
        heat_index = weather.get('heat_index', 3)
        if heat_index >= 4:
            mood += 1  # –ñ–∞—Ä–∫–æ = –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ
            
        # –î–æ–∂–¥—å = —Å–∏–¥—è—Ç –¥–æ–º–∞
        rain = weather.get('total_rain', 0)
        if rain > 5:
            mood += 1  # –î–æ–∂–¥—å = –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
        elif rain > 15:
            mood += 2  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å = —Ç–æ—á–Ω–æ –¥–æ–º–∞
            
        # –ü–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
        visibility = weather.get('min_visibility', 10000)
        if visibility < 5000:
            mood -= 1
            
        return max(1, min(10, mood))
    
    def run_comprehensive_analysis(self, sample_size=3000):
        """
        –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô
        """
        print("üåç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        locations = self.load_restaurant_locations()
        delivery_data = self.get_comprehensive_delivery_data()
        
        if not locations:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        restaurants_with_coords = [name for name in delivery_data['restaurant_name'].unique() 
                                 if name in locations]
        
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(restaurants_with_coords)}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É
        filtered_data = delivery_data[delivery_data['restaurant_name'].isin(restaurants_with_coords)]
        
        if len(filtered_data) > sample_size:
            sample_data = filtered_data.sample(n=sample_size, random_state=42)
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–∫—É: {sample_size:,} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(filtered_data):,}")
        else:
            sample_data = filtered_data
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {len(sample_data):,} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        comprehensive_data = []
        processed = 0
        
        print("üå§Ô∏è –°–±–æ—Ä –ü–û–õ–ù–´–• –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        for _, row in sample_data.iterrows():
            restaurant_name = row['restaurant_name']
            date = row['date']
            
            if restaurant_name in locations:
                location = locations[restaurant_name]
                weather = self.get_comprehensive_weather(
                    location['latitude'], 
                    location['longitude'], 
                    date
                )
                
                if weather:
                    record = {
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        'restaurant': restaurant_name,
                        'date': date,
                        'zone': location.get('zone', 'Unknown'),
                        'area': location.get('area', 'Unknown'),
                        'day_of_week': row['day_of_week'],
                        
                        # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
                        'total_sales': row['total_sales'],
                        'total_orders': row['total_orders'],
                        'avg_order_value': row['avg_order_value'],
                        'grab_sales': row['grab_sales'] or 0,
                        'gojek_sales': row['gojek_sales'] or 0,
                        'cancelled_orders': row['grab_cancelled'] or 0,
                        'rating': row['rating'] or 0,
                        
                        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        'busy_day': row['grab_busy'] or 0,
                        'closed_day': row['grab_closed'] or 0,
                        'out_of_stock': row['grab_out_of_stock'] or 0,
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    record.update(weather)
                    comprehensive_data.append(record)
            
            processed += 1
            if processed % 500 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed:,}/{len(sample_data):,}")
        
        if not comprehensive_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df = pd.DataFrame(comprehensive_data)
        print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ü–û–õ–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        
        return self._analyze_all_weather_patterns(df)
    
    def _analyze_all_weather_patterns(self, df):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –ø–æ–≥–æ–¥–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏"""
        print("\nüåç –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô")
        print("=" * 50)
        
        results = {}
        
        # 1. –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        print(f"üí∞ –ë–ê–ó–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        avg_sales = df['total_sales'].mean()
        avg_orders = df['total_orders'].mean()
        avg_aov = df['avg_order_value'].mean()
        
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:,.0f} IDR/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã: {avg_orders:.1f}/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_aov:,.0f} IDR")
        
        # 2. –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó
        print(f"\nüå°Ô∏è –í–õ–ò–Ø–ù–ò–ï –¢–ï–ú–ü–ï–†–ê–¢–£–†–´:")
        temp_analysis = {}
        
        temp_ranges = [
            (0, 24, "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ"),
            (24, 28, "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ"), 
            (28, 32, "–¢–µ–ø–ª–æ"),
            (32, 36, "–ñ–∞—Ä–∫–æ"),
            (36, 50, "–û—á–µ–Ω—å –∂–∞—Ä–∫–æ")
        ]
        
        for min_temp, max_temp, desc in temp_ranges:
            temp_data = df[(df['avg_temp'] >= min_temp) & (df['avg_temp'] < max_temp)]
            if len(temp_data) >= 10:
                temp_avg_sales = temp_data['total_sales'].mean()
                temp_avg_orders = temp_data['total_orders'].mean()
                sales_impact = ((temp_avg_sales - avg_sales) / avg_sales * 100)
                orders_impact = ((temp_avg_orders - avg_orders) / avg_orders * 100)
                
                temp_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'orders_impact': orders_impact,
                    'count': len(temp_data),
                    'avg_temp': temp_data['avg_temp'].mean()
                }
                
                print(f"   üå°Ô∏è {desc} ({temp_data['avg_temp'].mean():.1f}¬∞C): –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}%, –∑–∞–∫–∞–∑—ã {orders_impact:+.1f}% ({len(temp_data)} –¥–Ω–µ–π)")
        
        # 3. –ê–ù–ê–õ–ò–ó –î–û–ñ–î–Ø (–î–ï–¢–ê–õ–¨–ù–´–ô)
        print(f"\nüåßÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–û–ñ–î–Ø:")
        rain_analysis = {}
        
        rain_ranges = [
            (0, 0.1, "–°—É—Ö–æ"),
            (0.1, 2, "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å"),
            (2, 8, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å"),
            (8, 20, "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"),
            (20, 100, "–õ–∏–≤–µ–Ω—å")
        ]
        
        for min_rain, max_rain, desc in rain_ranges:
            rain_data = df[(df['total_rain'] >= min_rain) & (df['total_rain'] < max_rain)]
            if len(rain_data) >= 5:
                rain_avg_sales = rain_data['total_sales'].mean()
                rain_avg_cancelled = rain_data['cancelled_orders'].mean()
                sales_impact = ((rain_avg_sales - avg_sales) / avg_sales * 100)
                
                rain_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'avg_cancelled': rain_avg_cancelled,
                    'count': len(rain_data)
                }
                
                print(f"   üåßÔ∏è {desc}: –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}%, –æ—Ç–º–µ–Ω—ã {rain_avg_cancelled:.1f}/–¥–µ–Ω—å ({len(rain_data)} –¥–Ω–µ–π)")
        
        # 4. –ê–ù–ê–õ–ò–ó –í–ï–¢–†–ê
        print(f"\nüí® –í–õ–ò–Ø–ù–ò–ï –í–ï–¢–†–ê:")
        wind_analysis = {}
        
        wind_ranges = [
            (0, 10, "–®—Ç–∏–ª—å"),
            (10, 20, "–õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä"),
            (20, 30, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä"),
            (30, 50, "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä")
        ]
        
        for min_wind, max_wind, desc in wind_ranges:
            wind_data = df[(df['max_wind'] >= min_wind) & (df['max_wind'] < max_wind)]
            if len(wind_data) >= 10:
                wind_avg_sales = wind_data['total_sales'].mean()
                sales_impact = ((wind_avg_sales - avg_sales) / avg_sales * 100)
                
                wind_analysis[desc] = {
                    'sales_impact': sales_impact,
                    'count': len(wind_data)
                }
                
                print(f"   üí® {desc}: –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}% ({len(wind_data)} –¥–Ω–µ–π)")
        
        # 5. –ê–ù–ê–õ–ò–ó –ö–û–ú–§–û–†–¢–ê
        print(f"\nüòä –ò–ù–î–ï–ö–° –ö–û–ú–§–û–†–¢–ê VS –ü–†–û–î–ê–ñ–ò:")
        comfort_analysis = {}
        
        for comfort_level in range(1, 6):
            comfort_data = df[df['comfort_index'] == comfort_level]
            if len(comfort_data) >= 5:
                comfort_avg_sales = comfort_data['total_sales'].mean()
                sales_impact = ((comfort_avg_sales - avg_sales) / avg_sales * 100)
                
                comfort_analysis[comfort_level] = {
                    'sales_impact': sales_impact,
                    'count': len(comfort_data)
                }
                
                comfort_desc = ["", "–û—á–µ–Ω—å –Ω–µ–∫–æ–º.", "–ù–µ–∫–æ–º.", "–ù–æ—Ä–º.", "–ö–æ–º—Ñ.", "–û—Ç–ª–∏—á–Ω–æ"][comfort_level]
                print(f"   üòä {comfort_level}/5 ({comfort_desc}): –ø—Ä–æ–¥–∞–∂–∏ {sales_impact:+.1f}% ({len(comfort_data)} –¥–Ω–µ–π)")
        
        # 6. –ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–û–í
        print(f"\nüé≠ –ù–ê–°–¢–†–û–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–û–í VS –ó–ê–ö–ê–ó–´:")
        mood_analysis = {}
        
        for mood_level in range(1, 11):
            mood_data = df[df['customer_mood'] == mood_level]
            if len(mood_data) >= 3:
                mood_avg_orders = mood_data['total_orders'].mean()
                orders_impact = ((mood_avg_orders - avg_orders) / avg_orders * 100)
                
                mood_analysis[mood_level] = {
                    'orders_impact': orders_impact,
                    'count': len(mood_data)
                }
                
                if len(mood_data) >= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ
                    print(f"   üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_level}/10: –∑–∞–∫–∞–∑—ã {orders_impact:+.1f}% ({len(mood_data)} –¥–Ω–µ–π)")
        
        # 7. –ê–ù–ê–õ–ò–ó –ü–û –ó–û–ù–ê–ú
        print(f"\nüåç –ü–û–ì–û–î–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø –ü–û –ó–û–ù–ê–ú:")
        zone_analysis = {}
        
        for zone in df['zone'].unique():
            zone_data = df[df['zone'] == zone]
            if len(zone_data) >= 30:
                print(f"\n   üìç {zone} –ó–û–ù–ê ({len(zone_data)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π):")
                
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–æ–Ω—ã
                zone_temp_corr = zone_data['avg_temp'].corr(zone_data['total_sales'])
                zone_rain_corr = zone_data['total_rain'].corr(zone_data['total_sales'])
                zone_wind_corr = zone_data['max_wind'].corr(zone_data['total_sales'])
                
                print(f"      üå°Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {zone_temp_corr:.3f}")
                print(f"      üåßÔ∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–∂–¥—è: {zone_rain_corr:.3f}")
                print(f"      üí® –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤–µ—Ç—Ä–∞: {zone_wind_corr:.3f}")
                
                zone_analysis[zone] = {
                    'temp_correlation': zone_temp_corr,
                    'rain_correlation': zone_rain_corr,
                    'wind_correlation': zone_wind_corr,
                    'observations': len(zone_data)
                }
        
        # 8. –î–ï–ù–¨ –ù–ï–î–ï–õ–ò + –ü–û–ì–û–î–ê
        print(f"\nüìÖ –ü–û–ì–û–î–ê VS –î–ï–ù–¨ –ù–ï–î–ï–õ–ò:")
        weekday_weather = {}
        
        for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
            day_data = df[df['day_of_week'] == day]
            if len(day_data) >= 20:
                # –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                day_rainy = day_data[day_data['total_rain'] > 2]
                day_dry = day_data[day_data['total_rain'] <= 2]
                
                if len(day_rainy) >= 5 and len(day_dry) >= 5:
                    rain_impact = ((day_rainy['total_sales'].mean() - day_dry['total_sales'].mean()) / 
                                 day_dry['total_sales'].mean() * 100)
                    
                    weekday_weather[day] = rain_impact
                    print(f"   üìÖ {day}: –¥–æ–∂–¥—å –≤–ª–∏—è–µ—Ç –Ω–∞ {rain_impact:+.1f}%")
        
        # 9. –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó
        print(f"\nüìä –ö–û–†–†–ï–õ–Ø–¶–ò–ò (–í–°–ï –§–ê–ö–¢–û–†–´):")
        correlations = {
            'temperature_sales': df['avg_temp'].corr(df['total_sales']),
            'temperature_orders': df['avg_temp'].corr(df['total_orders']),
            'rain_sales': df['total_rain'].corr(df['total_sales']),
            'rain_cancelled': df['total_rain'].corr(df['cancelled_orders']),
            'wind_sales': df['max_wind'].corr(df['total_sales']),
            'humidity_sales': df['avg_humidity'].corr(df['total_sales']),
            'comfort_sales': df['comfort_index'].corr(df['total_sales']),
            'mood_orders': df['customer_mood'].corr(df['total_orders']),
            'heat_index_sales': df['heat_index'].corr(df['total_sales']),
            'courier_safety_sales': df['courier_safety'].corr(df['total_sales'])
        }
        
        for corr_name, corr_value in correlations.items():
            if abs(corr_value) > 0.05:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                print(f"   üìä {corr_name}: {corr_value:.3f}")
        
        # 10. –¢–û–ü –ù–ê–•–û–î–ö–ò
        print(f"\nüîç –¢–û–ü –ü–û–ì–û–î–ù–´–ï –ù–ê–•–û–î–ö–ò:")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        findings = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for temp_desc, temp_data in temp_analysis.items():
            if abs(temp_data['sales_impact']) > 10:
                findings.append(f"üå°Ô∏è {temp_desc}: {temp_data['sales_impact']:+.1f}% –ø—Ä–æ–¥–∞–∂")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∂–¥–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã  
        for rain_desc, rain_data in rain_analysis.items():
            if abs(rain_data['sales_impact']) > 15:
                findings.append(f"üåßÔ∏è {rain_desc}: {rain_data['sales_impact']:+.1f}% –ø—Ä–æ–¥–∞–∂")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ç—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for wind_desc, wind_data in wind_analysis.items():
            if abs(wind_data['sales_impact']) > 8:
                findings.append(f"üí® {wind_desc}: {wind_data['sales_impact']:+.1f}% –ø—Ä–æ–¥–∞–∂")
        
        for i, finding in enumerate(findings[:5], 1):
            print(f"   {i}. {finding}")
        
        if not findings:
            print("   üí° –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É–º–µ—Ä–µ–Ω–Ω—ã–µ - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'temperature_analysis': temp_analysis,
            'rain_analysis': rain_analysis,
            'wind_analysis': wind_analysis,
            'comfort_analysis': comfort_analysis,
            'mood_analysis': mood_analysis,
            'zone_analysis': zone_analysis,
            'weekday_weather': weekday_weather,
            'correlations': correlations,
            'top_findings': findings,
            'total_observations': len(df),
            'restaurants_analyzed': df['restaurant'].nunique(),
            'date_range': (df['date'].min(), df['date'].max())
        }
        
        return results

def main():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = ComprehensiveWeatherAnalyzer()
    
    print("üåç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–ì–û–î–ù–´–• –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô")
    print("–í—ã—è–≤–ª—è–µ–º –í–°–ï —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ delivery!")
    print("=" * 65)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results = analyzer.run_comprehensive_analysis(sample_size=2000)
    
    if results:
        print("\nüéâ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['total_observations']:,} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {results['restaurants_analyzed']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {results['date_range'][0]} ‚Üí {results['date_range'][1]}")
        
        print(f"\nüîç –ù–ê–ô–î–ï–ù–û –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô: {len(results['top_findings'])}")
        
        print("\nüí° –¢–ï–ü–ï–†–¨ –ú–´ –ó–ù–ê–ï–ú:")
        print("   üå°Ô∏è –ö–∞–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å")
        print("   üåßÔ∏è –î–µ—Ç–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∂–¥—è")
        print("   üí® –ö–∞–∫ –≤–µ—Ç–µ—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∏")
        print("   üòä –°–≤—è–∑—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–≥–æ–¥—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print("   üåç –†–∞–∑–ª–∏—á–∏—è –ø–æ –∑–æ–Ω–∞–º –ë–∞–ª–∏")
        print("   üìÖ –ö–∞–∫ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/comprehensive_weather_analysis.json', 'w', encoding='utf-8') as f:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy —Ç–∏–ø—ã –¥–ª—è JSON
                def convert_numpy(obj):
                    if isinstance(obj, np.integer):
                        return int(obj)
                    elif isinstance(obj, np.floating):
                        return float(obj)
                    elif isinstance(obj, np.ndarray):
                        return obj.tolist()
                    return obj
                
                import json
                json.dump(results, f, ensure_ascii=False, indent=2, default=convert_numpy)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: data/comprehensive_weather_analysis.json")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()