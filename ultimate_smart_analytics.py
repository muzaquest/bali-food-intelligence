#!/usr/bin/env python3
"""
üß† –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ú–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê MUZAQUEST
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ + –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥

–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:
- 32 –ø–æ–ª—è –∏–∑ GRAB_STATS (–ø—Ä–æ–¥–∞–∂–∏, —Ä–µ–∫–ª–∞–º–∞, —Ä–µ–π—Ç–∏–Ω–≥–∏, –∑–∞–∫—Ä—ã—Ç–∏—è, –∫–ª–∏–µ–Ω—Ç—ã)
- 33 –ø–æ–ª—è –∏–∑ GOJEK_STATS (–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –æ—Ç–∑—ã–≤—ã, close_time)
- –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Open-Meteo API)
- 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–±–∞–ª–∏–π—Å–∫–∏–µ + –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ)
- –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (–¥—Ä—É–≥–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∫–∞–∫ –±–µ–Ω—á–º–∞—Ä–∫)
- –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Ç—É—Ä–∏—Å—Ç–æ–≤
"""

import sqlite3
import json
import requests
from datetime import datetime, timedelta
from statistics import mean, median
import math

class UltimateSmartAnalytics:
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï —Ñ–∞–∫—Ç–æ—Ä—ã"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        
        # –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏)
        self.balinese_holidays = {
            '2025-04-16': 'Galungan - —Å–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
            '2025-04-26': 'Kuningan - —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏', 
            '2025-05-12': 'Purnama - –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
            '2025-03-31': 'Nyepi - –¥–µ–Ω—å —Ç–∏—à–∏–Ω—ã',
            '2025-01-25': 'Imlek - –∫–∏—Ç–∞–π—Å–∫–∏–π –Ω–æ–≤—ã–π –≥–æ–¥',
            '2025-12-25': 'Christmas - —Ä–æ–∂–¥–µ—Å—Ç–≤–æ'
        }
        
        # –°–µ–∑–æ–Ω—ã —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –ë–∞–ª–∏
        self.tourist_seasons = {
            'high': [6, 7, 8, 12, 1],  # –ò—é–Ω—å-–ê–≤–≥—É—Å—Ç, –î–µ–∫–∞–±—Ä—å-–Ø–Ω–≤–∞—Ä—å
            'medium': [4, 5, 9, 10],   # –ê–ø—Ä–µ–ª—å-–ú–∞–π, –°–µ–Ω—Ç—è–±—Ä—å-–û–∫—Ç—è–±—Ä—å
            'low': [2, 3, 11]          # –§–µ–≤—Ä–∞–ª—å-–ú–∞—Ä—Ç, –ù–æ—è–±—Ä—å
        }
        
    def analyze_restaurant_comprehensive(self, restaurant_name, start_date, end_date):
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–æ –í–°–ï–ú–ò —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
        
        print(f"\nüß† –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ú–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
        print("=" * 60)
        print(f"üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}")
        print("=" * 60)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_data = self._load_comprehensive_data(restaurant_name, start_date, end_date)
        if not restaurant_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        competitors_data = self._load_competitors_data(restaurant_name, start_date, end_date)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω–æ
        daily_analysis = []
        for day in restaurant_data:
            day_analysis = self._analyze_single_day_comprehensive(day, competitors_data)
            daily_analysis.append(day_analysis)
            
        # 4. –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏
        patterns = self._find_patterns_and_anomalies(daily_analysis)
        
        # 5. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._generate_comprehensive_report(restaurant_name, daily_analysis, patterns)
        
    def _load_comprehensive_data(self, restaurant_name, start_date, end_date):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        cursor.execute("SELECT id FROM restaurants WHERE name = ?", (restaurant_name,))
        restaurant_result = cursor.fetchone()
        if not restaurant_result:
            return []
            
        restaurant_id = restaurant_result[0]
        
        # –ú–ï–ì–ê-–ó–ê–ü–†–û–°: –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
        query = """
        SELECT 
            g.stat_date,
            
            -- –ü–†–û–î–ê–ñ–ò –ò –ó–ê–ö–ê–ó–´
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            
            -- –°–†–ï–î–ù–ò–ô –ß–ï–ö
            CASE WHEN (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) > 0 
                 THEN (COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) / (COALESCE(g.orders, 0) + COALESCE(gj.orders, 0))
                 ELSE 0 END as avg_order_value,
            
            -- –†–ï–ô–¢–ò–ù–ì–ò
            COALESCE(g.rating, 0) as grab_rating,
            COALESCE(gj.rating, 0) as gojek_rating,
            CASE 
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5 
            END as avg_rating,
            
            -- –†–ï–ö–õ–ê–ú–ê –ò –ú–ê–†–ö–ï–¢–ò–ù–ì
            COALESCE(g.ads_spend, 0) as grab_ads_spend,
            COALESCE(gj.ads_spend, 0) as gojek_ads_spend,
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as total_ads_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as total_ads_sales,
            COALESCE(g.ads_orders, 0) + COALESCE(gj.ads_orders, 0) as total_ads_orders,
            
            -- ROAS (Return on Ad Spend)
            CASE WHEN (COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0)) > 0
                 THEN (COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0)) / (COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0))
                 ELSE 0 END as roas,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.store_is_busy, 0) as grab_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_busy,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            
            -- –û–¢–ú–ï–ù–´ –ò –ü–û–¢–ï–†–ò
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            COALESCE(gj.lost_orders, 0) as gojek_lost_orders,
            COALESCE(g.cancelation_rate, 0) as grab_cancel_rate,
            
            -- –í–†–ï–ú–Ø –î–û–°–¢–ê–í–ö–ò (—Ç–æ–ª—å–∫–æ GOJEK)
            COALESCE(gj.accepting_time, '00:00:00') as accepting_time,
            COALESCE(gj.preparation_time, '00:00:00') as preparation_time,
            COALESCE(gj.delivery_time, '00:00:00') as delivery_time,
            COALESCE(gj.close_time, 0) as close_time_minutes,
            
            -- –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–ó–´–í–´ (—Ç–æ–ª—å–∫–æ GOJEK)
            COALESCE(gj.one_star_ratings, 0) as one_star,
            COALESCE(gj.two_star_ratings, 0) as two_star,
            COALESCE(gj.three_star_ratings, 0) as three_star,
            COALESCE(gj.four_star_ratings, 0) as four_star,
            COALESCE(gj.five_star_ratings, 0) as five_star,
            
            -- –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ë–ê–ó–ê
            COALESCE(g.new_customers, 0) + COALESCE(gj.new_client, 0) as new_customers,
            COALESCE(g.repeated_customers, 0) + COALESCE(gj.returned_client, 0) as returning_customers,
            COALESCE(g.total_customers, 0) + COALESCE(gj.active_client, 0) as total_customers,
            COALESCE(gj.potential_lost, 0) as potential_lost_customers,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò (—Ç–æ–ª—å–∫–æ GRAB)
            COALESCE(g.impressions, 0) as impressions,
            COALESCE(g.unique_menu_visits, 0) as menu_visits,
            COALESCE(g.unique_add_to_carts, 0) as add_to_cart,
            COALESCE(g.ads_ctr, 0) as ctr,
            
            -- –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day_of_month
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        WHERE g.restaurant_id = ? 
        AND g.stat_date BETWEEN ? AND ?
        ORDER BY g.stat_date
        """
        
        cursor.execute(query, (restaurant_id, start_date, end_date))
        data = []
        
        columns = [desc[0] for desc in cursor.description]
        for row in cursor.fetchall():
            day_data = dict(zip(columns, row))
            data.append(day_data)
            
        conn.close()
        return data
        
    def _load_competitors_data(self, restaurant_name, start_date, end_date):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        query = """
        SELECT 
            g.stat_date,
            AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_competitor_sales,
            AVG(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as avg_competitor_orders,
            AVG(CASE 
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5 
            END) as avg_competitor_rating,
            AVG(COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0)) as avg_competitor_ads_spend,
            COUNT(DISTINCT r.id) as active_competitors
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name != ? 
        AND g.stat_date BETWEEN ? AND ?
        GROUP BY g.stat_date
        ORDER BY g.stat_date
        """
        
        cursor.execute(query, (restaurant_name, start_date, end_date))
        competitors = {}
        
        for row in cursor.fetchall():
            date = row[0]
            competitors[date] = {
                'avg_sales': row[1] or 0,
                'avg_orders': row[2] or 0,
                'avg_rating': row[3] or 4.5,
                'avg_ads_spend': row[4] or 0,
                'active_competitors': row[5] or 0
            }
            
        conn.close()
        return competitors
        
    def _analyze_single_day_comprehensive(self, day_data, competitors_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å —Å–æ –í–°–ï–ú–ò —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
        
        date = day_data['stat_date']
        analysis = {
            'date': date,
            'total_sales': day_data['total_sales'],
            'factors': [],
            'score': 0,  # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è
            'issues': [],
            'opportunities': []
        }
        
        # 1. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ
        if day_data['total_sales'] == 0:
            analysis['factors'].append("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù—É–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
            analysis['score'] -= 50
            analysis['issues'].append("–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –≤–æ–æ–±—â–µ")
        elif day_data['total_sales'] < 1000000:  # –ú–µ–Ω—å—à–µ 1M IDR
            analysis['factors'].append(f"üîª –ù–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {day_data['total_sales']:,.0f} IDR")
            analysis['score'] -= 20
        elif day_data['total_sales'] > 10000000:  # –ë–æ–ª—å—à–µ 10M IDR
            analysis['factors'].append(f"üöÄ –û—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {day_data['total_sales']:,.0f} IDR")
            analysis['score'] += 20
            
        # 2. –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–§–û–†–ú
        grab_share = (day_data['grab_sales'] / day_data['total_sales'] * 100) if day_data['total_sales'] > 0 else 0
        gojek_share = (day_data['gojek_sales'] / day_data['total_sales'] * 100) if day_data['total_sales'] > 0 else 0
        
        if day_data['grab_sales'] == 0 and day_data['gojek_sales'] > 0:
            analysis['factors'].append("‚ö†Ô∏è GRAB –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
            analysis['score'] -= 30
            analysis['issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å GRAB")
        elif day_data['gojek_sales'] == 0 and day_data['grab_sales'] > 0:
            analysis['factors'].append("‚ö†Ô∏è GOJEK –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞") 
            analysis['score'] -= 30
            analysis['issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å GOJEK")
        elif abs(grab_share - gojek_share) > 30:
            dominant = "GRAB" if grab_share > gojek_share else "GOJEK"
            analysis['factors'].append(f"üìä –î–æ–º–∏–Ω–∏—Ä—É–µ—Ç {dominant}: {max(grab_share, gojek_share):.0f}%")
            
        # 3. –ê–ù–ê–õ–ò–ó –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê
        if day_data['avg_order_value'] > 0:
            if day_data['avg_order_value'] > 200000:  # –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
                analysis['factors'].append(f"üí∞ –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {day_data['avg_order_value']:,.0f} IDR")
                analysis['score'] += 10
            elif day_data['avg_order_value'] < 100000:  # –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
                analysis['factors'].append(f"üìâ –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {day_data['avg_order_value']:,.0f} IDR")
                analysis['score'] -= 10
                
        # 4. –ê–ù–ê–õ–ò–ó –†–ï–ô–¢–ò–ù–ì–ê
        if day_data['avg_rating'] < 4.0:
            analysis['factors'].append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {day_data['avg_rating']:.1f}")
            analysis['score'] -= 15
            analysis['issues'].append("–ü–∞–¥–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        elif day_data['avg_rating'] > 4.5:
            analysis['factors'].append(f"‚≠ê –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {day_data['avg_rating']:.1f}")
            analysis['score'] += 10
            
        # 5. –ê–ù–ê–õ–ò–ó –†–ï–ö–õ–ê–ú–´ –ò ROAS
        if day_data['total_ads_spend'] > 0:
            if day_data['roas'] > 3:  # –•–æ—Ä–æ—à–∏–π ROAS
                analysis['factors'].append(f"üìà –û—Ç–ª–∏—á–Ω—ã–π ROAS: {day_data['roas']:.1f}x")
                analysis['score'] += 15
            elif day_data['roas'] < 1:  # –ü–ª–æ—Ö–æ–π ROAS
                analysis['factors'].append(f"üìâ –ü–ª–æ—Ö–æ–π ROAS: {day_data['roas']:.1f}x")
                analysis['score'] -= 15
                analysis['issues'].append("–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞")
        else:
            analysis['factors'].append("üö´ –†–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            analysis['opportunities'].append("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
            
        # 6. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        if day_data['grab_closed'] or day_data['gojek_closed']:
            analysis['factors'].append("üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç")
            analysis['score'] -= 25
            analysis['issues'].append("–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            
        if day_data['grab_out_of_stock'] or day_data['gojek_out_of_stock']:
            analysis['factors'].append("üì¶ –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞")
            analysis['score'] -= 15
            analysis['issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
            
        if (day_data['grab_cancelled'] + day_data['gojek_cancelled']) > 5:
            analysis['factors'].append(f"‚ùå –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω: {day_data['grab_cancelled'] + day_data['gojek_cancelled']}")
            analysis['score'] -= 10
            
        # 7. –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò –î–û–°–¢–ê–í–ö–ò (GOJEK)
        if day_data['close_time_minutes'] > 60:  # –ë–æ–ª—å—à–µ —á–∞—Å–∞ –∑–∞–∫—Ä—ã—Ç–æ
            analysis['factors'].append(f"‚è∞ –î–æ–ª–≥–æ –∑–∞–∫—Ä—ã—Ç–æ: {day_data['close_time_minutes']} –º–∏–Ω")
            analysis['score'] -= 20
            analysis['issues'].append("–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ")
            
        # 8. –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–û–í (GOJEK)
        total_reviews = day_data['one_star'] + day_data['two_star'] + day_data['three_star'] + day_data['four_star'] + day_data['five_star']
        if total_reviews > 0:
            negative_reviews = day_data['one_star'] + day_data['two_star']
            negative_percentage = (negative_reviews / total_reviews) * 100
            if negative_percentage > 20:
                analysis['factors'].append(f"üòû –ú–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {negative_percentage:.0f}%")
                analysis['score'] -= 15
                analysis['issues'].append("–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º")
                
        # 9. –ê–ù–ê–õ–ò–ó –î–ù–Ø –ù–ï–î–ï–õ–ò
        weekday_names = {0: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 1: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 2: '–í—Ç–æ—Ä–Ω–∏–∫', 3: '–°—Ä–µ–¥–∞', 4: '–ß–µ—Ç–≤–µ—Ä–≥', 5: '–ü—è—Ç–Ω–∏—Ü–∞', 6: '–°—É–±–±–æ—Ç–∞'}
        weekday = weekday_names.get(day_data['day_of_week'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if day_data['day_of_week'] == 1:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            analysis['factors'].append(f"üìÖ {weekday} - –æ–±—ã—á–Ω–æ —Å–ª–∞–±—ã–π –¥–µ–Ω—å")
        elif day_data['day_of_week'] in [5, 6, 0]:  # –ü—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            analysis['factors'].append(f"üìÖ {weekday} - –æ–±—ã—á–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–µ–Ω—å")
            
        # 10. –ê–ù–ê–õ–ò–ó –ü–†–ê–ó–î–ù–ò–ö–û–í
        if date in self.balinese_holidays:
            holiday_name = self.balinese_holidays[date]
            analysis['factors'].append(f"üé≠ –ü—Ä–∞–∑–¥–Ω–∏–∫: {holiday_name}")
            analysis['score'] -= 20
            analysis['issues'].append("–í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
            
        # 11. –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ê –¢–£–†–ò–°–¢–û–í
        month = day_data['month']
        if month in self.tourist_seasons['high']:
            analysis['factors'].append("üèñÔ∏è –í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω")
            analysis['score'] += 10
        elif month in self.tourist_seasons['low']:
            analysis['factors'].append("üèñÔ∏è –ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω")
            analysis['score'] -= 10
            
        # 12. –°–†–ê–í–ù–ï–ù–ò–ï –° –ö–û–ù–ö–£–†–ï–ù–¢–ê–ú–ò
        if date in competitors_data:
            comp = competitors_data[date]
            if day_data['total_sales'] > comp['avg_sales'] * 1.2:
                analysis['factors'].append("üèÜ –û–ø–µ—Ä–µ–∂–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ 20%+")
                analysis['score'] += 15
            elif day_data['total_sales'] < comp['avg_sales'] * 0.8:
                analysis['factors'].append("‚ö†Ô∏è –û—Ç—Å—Ç–∞–µ–º –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ 20%+")
                analysis['score'] -= 15
                analysis['issues'].append("–°–ª–∞–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
                
        # 13. –ü–û–ì–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó (–±–∞–∑–æ–≤—ã–π, –±–µ–∑ API –ø–æ–∫–∞)
        analysis['weather_analyzed'] = False  # –§–ª–∞–≥ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        
        return analysis
        
    def _find_patterns_and_anomalies(self, daily_analysis):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        
        patterns = {
            'best_days': [],
            'worst_days': [],
            'common_issues': {},
            'opportunities': {},
            'trends': []
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ score
        sorted_days = sorted(daily_analysis, key=lambda x: x['score'], reverse=True)
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
        patterns['best_days'] = sorted_days[:3]
        patterns['worst_days'] = sorted_days[-3:]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        for day in daily_analysis:
            for issue in day['issues']:
                patterns['common_issues'][issue] = patterns['common_issues'].get(issue, 0) + 1
                
            for opp in day['opportunities']:
                patterns['opportunities'][opp] = patterns['opportunities'].get(opp, 0) + 1
                
        # –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–∞–∂
        sales_data = [day['total_sales'] for day in daily_analysis]
        if len(sales_data) > 7:
            first_week = mean(sales_data[:7])
            last_week = mean(sales_data[-7:])
            trend_change = ((last_week - first_week) / first_week * 100) if first_week > 0 else 0
            
            if trend_change > 10:
                patterns['trends'].append(f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ {trend_change:.1f}%")
            elif trend_change < -10:
                patterns['trends'].append(f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {abs(trend_change):.1f}%")
            else:
                patterns['trends'].append("‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
                
        return patterns
        
    def _generate_comprehensive_report(self, restaurant_name, daily_analysis, patterns):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_sales = sum(day['total_sales'] for day in daily_analysis)
        avg_daily_sales = total_sales / len(daily_analysis) if daily_analysis else 0
        avg_score = mean([day['score'] for day in daily_analysis]) if daily_analysis else 0
        
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {avg_daily_sales:,.0f} IDR")
        print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π score –¥–Ω—è: {avg_score:.1f}")
        print()
        
        # –¢—Ä–µ–Ω–¥—ã
        print("üìà –¢–†–ï–ù–î–´:")
        for trend in patterns['trends']:
            print(f"   {trend}")
        print()
        
        # –õ—É—á—à–∏–µ –¥–Ω–∏
        print("üèÜ –¢–û–ü-3 –õ–£–ß–®–ò–• –î–ù–Ø:")
        for i, day in enumerate(patterns['best_days'], 1):
            print(f"   {i}. üìÖ {day['date']} (Score: {day['score']})")
            print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day['total_sales']:,.0f} IDR")
            if day['factors']:
                print(f"      üéØ –§–∞–∫—Ç–æ—Ä—ã: {', '.join(day['factors'][:2])}")
        print()
        
        # –•—É–¥—à–∏–µ –¥–Ω–∏
        print("‚ö†Ô∏è –¢–û–ü-3 –ü–†–û–ë–õ–ï–ú–ù–´–• –î–ù–Ø:")
        for i, day in enumerate(patterns['worst_days'], 1):
            print(f"   {i}. üìÖ {day['date']} (Score: {day['score']})")
            print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day['total_sales']:,.0f} IDR")
            if day['issues']:
                print(f"      ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(day['issues'][:2])}")
        print()
        
        # –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if patterns['common_issues']:
            print("üîç –ß–ê–°–¢–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            sorted_issues = sorted(patterns['common_issues'].items(), key=lambda x: x[1], reverse=True)
            for issue, count in sorted_issues[:5]:
                print(f"   ‚Ä¢ {issue}: {count} –¥–Ω–µ–π")
        print()
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if patterns['opportunities']:
            print("üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:")
            sorted_opps = sorted(patterns['opportunities'].items(), key=lambda x: x[1], reverse=True)
            for opp, count in sorted_opps[:3]:
                print(f"   ‚Ä¢ {opp}: {count} –¥–Ω–µ–π")
        print()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._generate_final_recommendations(patterns, daily_analysis)
        
    def _generate_final_recommendations(self, patterns, daily_analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"""
        
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
        print("-" * 50)
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if patterns['common_issues']:
            top_issue = max(patterns['common_issues'].items(), key=lambda x: x[1])
            if top_issue[0] == "–ü—Ä–æ–±–ª–µ–º—ã —Å GRAB":
                recommendations.append("üîß –ü–†–ò–û–†–ò–¢–ï–¢ 1: –†–µ—à–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å GRAB –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π")
            elif top_issue[0] == "–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞":
                recommendations.append("üìà –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ (—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥, –±—é–¥–∂–µ—Ç)")
            elif top_issue[0] == "–ü–∞–¥–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞":
                recommendations.append("‚≠ê –ü–†–ò–û–†–ò–¢–ï–¢ 1: –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞")
                
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ –¥–Ω–∏
        best_day_factors = []
        for day in patterns['best_days']:
            best_day_factors.extend(day['factors'])
            
        if any("–û—Ç–ª–∏—á–Ω—ã–π ROAS" in factor for factor in best_day_factors):
            recommendations.append("üí∞ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
            
        if any("–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫" in factor for factor in best_day_factors):
            recommendations.append("üçΩÔ∏è –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é")
            
        # –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        avg_sales = mean([day['total_sales'] for day in daily_analysis])
        if avg_sales < 5000000:  # –ú–µ–Ω—å—à–µ 5M –≤ –¥–µ–Ω—å
            recommendations.append("üìä –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ–∫–∏–π")
            
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if patterns['common_issues'].get("–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ", 0) > 2:
            recommendations.append("‚è∞ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã - –º–Ω–æ–≥–æ –ø–æ—Ç–µ—Ä—å –∏–∑-–∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–π")
            
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for i, rec in enumerate(recommendations[:5], 1):
            print(f"   {i}. {rec}")
            
        print()
        print("üìû –ì–û–¢–û–í–´–ô –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
        print("=" * 45)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        if patterns['trends']:
            main_trend = patterns['trends'][0]
            if patterns['common_issues']:
                main_issue = max(patterns['common_issues'].items(), key=lambda x: x[1])[0]
                client_answer = f"{main_trend.replace('üìà', '').replace('üìâ', '').strip()} –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑-–∑–∞ {main_issue.lower()}"
            else:
                client_answer = f"{main_trend.replace('üìà', '').replace('üìâ', '').strip()}"
        else:
            client_answer = "–ü—Ä–æ–¥–∞–∂–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"
            
        print(f'"{client_answer}"')
        print("=" * 45)

def main():
    """–ó–∞–ø—É—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    analytics = UltimateSmartAnalytics()
    
    # –¢–µ—Å—Ç –Ω–∞ Only Eggs
    analytics.analyze_restaurant_comprehensive(
        "Only Eggs",
        "2025-04-01", 
        "2025-05-31"
    )

if __name__ == "__main__":
    main()