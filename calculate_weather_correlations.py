#!/usr/bin/env python3
"""
üå§Ô∏è –†–ê–°–ß–ï–¢ –†–ï–ê–õ–¨–ù–´–• –ü–û–ì–û–î–ù–´–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô –ò–ó OPEN-METEO
–ó–∞–º–µ–Ω—è–µ—Ç —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import requests
import sqlite3
import json
from datetime import datetime, timedelta
import pandas as pd
import numpy as np

def get_weather_data_range(start_date, end_date, lat=-8.4095, lon=115.1889):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–∑ Open-Meteo"""
    
    print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {start_date} ‚Üí {end_date}")
    
    try:
        # Open-Meteo Historical Weather API
        params = {
            'latitude': lat,
            'longitude': lon,
            'start_date': start_date,
            'end_date': end_date,
            'daily': 'temperature_2m_mean,precipitation_sum,weather_code',
            'timezone': 'Asia/Jakarta'
        }
        
        response = requests.get('https://archive-api.open-meteo.com/v1/archive', 
                              params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            daily = data.get('daily', {})
            
            weather_data = []
            times = daily.get('time', [])
            temps = daily.get('temperature_2m_mean', [])
            precipitation = daily.get('precipitation_sum', [])
            weather_codes = daily.get('weather_code', [])
            
            for i, date in enumerate(times):
                condition = weather_code_to_condition(weather_codes[i] if i < len(weather_codes) else 0)
                
                weather_data.append({
                    'date': date,
                    'temperature': temps[i] if i < len(temps) else 28,
                    'precipitation': precipitation[i] if i < len(precipitation) else 0,
                    'condition': condition
                })
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(weather_data)} –¥–Ω–µ–π –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return weather_data
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def weather_code_to_condition(code):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WMO –∫–æ–¥ –≤ —É—Å–ª–æ–≤–∏–µ"""
    if code == 0:
        return 'Clear'
    elif code in [1, 2, 3]:
        return 'Clouds'
    elif code in [45, 48]:
        return 'Fog'
    elif code in [51, 53, 55, 56, 57]:
        return 'Drizzle' 
    elif code in [61, 63, 65, 66, 67]:
        return 'Rain'
    elif code in [71, 73, 75, 77, 85, 86]:
        return 'Snow'
    elif code in [80, 81, 82]:
        return 'Rain'
    elif code in [95, 96, 99]:
        return 'Thunderstorm'
    else:
        return 'Clear'

def get_sales_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect('database.sqlite')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Grab –∏ Gojek
        query = """
        SELECT 
            stat_date as date,
            sales,
            'grab' as source
        FROM grab_stats 
        WHERE sales > 0
        
        UNION ALL
        
        SELECT 
            stat_date as date,
            sales,
            'gojek' as source  
        FROM gojek_stats
        WHERE sales > 0
        
        ORDER BY date
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
        daily_sales = df.groupby('date')['sales'].sum().reset_index()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(daily_sales)} –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂")
        return daily_sales.to_dict('records')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: {e}")
        return []

def calculate_weather_correlations():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–≥–æ–¥–∞ ‚Üî –ø—Ä–æ–¥–∞–∂–∏"""
    
    print("\nüßÆ –†–ê–°–ß–ï–¢ –†–ï–ê–õ–¨–ù–´–• –ü–û–ì–û–î–ù–´–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
    sales_data = get_sales_data()
    if not sales_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    dates = [item['date'] for item in sales_data]
    start_date = min(dates)
    end_date = max(dates)
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
    weather_data = get_weather_data_range(start_date, end_date)
    if not weather_data:
        print("‚ùå –ù–µ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ–≥–æ–¥—ã...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–∞—Ç–∞–º
    sales_dict = {item['date']: item['sales'] for item in sales_data}
    
    combined_data = []
    for weather in weather_data:
        date = weather['date']
        if date in sales_dict:
            combined_data.append({
                'date': date,
                'sales': sales_dict[date],
                'temperature': weather['temperature'],
                'precipitation': weather['precipitation'],
                'condition': weather['condition']
            })
    
    print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(combined_data)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
    
    if len(combined_data) < 30:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
    print("\nüìä –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–ù–´–• –£–°–õ–û–í–ò–ô:")
    
    df = pd.DataFrame(combined_data)
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —É—Å–ª–æ–≤–∏—è–º
    condition_stats = df.groupby('condition')['sales'].agg(['mean', 'count']).reset_index()
    overall_mean = df['sales'].mean()
    
    weather_coefficients = {}
    
    for _, row in condition_stats.iterrows():
        condition = row['condition']
        mean_sales = row['mean']
        count = row['count']
        
        if count >= 10:  # –ú–∏–Ω–∏–º—É–º 10 –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
            impact = (mean_sales - overall_mean) / overall_mean
            weather_coefficients[condition] = impact
            
            print(f"   {condition:12}: {impact:+6.1%} (–¥–Ω–µ–π: {count:3d}, –ø—Ä–æ–¥–∞–∂–∏: {mean_sales:,.0f})")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤
    print("\nüåßÔ∏è –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –û–°–ê–î–ö–û–í:")
    
    rainy_days = df[df['precipitation'] > 1]  # –î–Ω–∏ —Å –¥–æ–∂–¥–µ–º >1–º–º
    clear_days = df[df['precipitation'] == 0]  # –Ø—Å–Ω—ã–µ –¥–Ω–∏
    
    if len(rainy_days) >= 10 and len(clear_days) >= 10:
        rainy_mean = rainy_days['sales'].mean()
        clear_mean = clear_days['sales'].mean()
        rain_impact = (rainy_mean - clear_mean) / clear_mean
        
        weather_coefficients['Rain_vs_Clear'] = rain_impact
        
        print(f"   –î–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏: {rainy_mean:,.0f} IDR (–¥–Ω–µ–π: {len(rainy_days)})")
        print(f"   –Ø—Å–Ω—ã–µ –¥–Ω–∏:     {clear_mean:,.0f} IDR (–¥–Ω–µ–π: {len(clear_days)})")
        print(f"   –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {rain_impact:+.1%}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    print("\nüå°Ô∏è –ê–ù–ê–õ–ò–ó –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô:")
    
    temp_corr = df['temperature'].corr(df['sales'])
    print(f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Üî –ø—Ä–æ–¥–∞–∂–∏: {temp_corr:.3f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    
    results = {
        'weather_coefficients': weather_coefficients,
        'temperature_correlation': temp_corr,
        'analysis_period': {
            'start_date': start_date,
            'end_date': end_date,
            'total_days': len(combined_data)
        },
        'data_sources': {
            'weather': 'Open-Meteo (ERA5/ECMWF)',
            'sales': 'Grab + Gojek stats',
            'calculated_at': datetime.now().isoformat()
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open('weather_correlations.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ weather_correlations.json")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º real_coefficients.json
    try:
        with open('real_coefficients.json', 'r', encoding='utf-8') as f:
            coefficients = json.load(f)
    except:
        coefficients = {}
    
    coefficients['weather'] = weather_coefficients
    coefficients['temperature_correlation'] = temp_corr
    
    with open('real_coefficients.json', 'w', encoding='utf-8') as f:
        json.dump(coefficients, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ real_coefficients.json")
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(combined_data)} –¥–Ω–µ–π")
    print(f"üå§Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(weather_coefficients)} –ø–æ–≥–æ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    print("üî¨ –í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Open-Meteo")

if __name__ == "__main__":
    calculate_weather_correlations()