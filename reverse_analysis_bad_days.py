#!/usr/bin/env python3
"""
üîç –û–ë–†–ê–¢–ù–´–ô –ê–ù–ê–õ–ò–ó: –û–¢ –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ –ö –ü–û–ì–û–î–ï
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –±—ã–ª–∞ –≤ —ç—Ç–∏ –¥–Ω–∏
‚úÖ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ "–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –ø—Ä–∏—á–∏–Ω–µ"
‚úÖ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã
"""

import sqlite3
import pandas as pd
import requests
import numpy as np
from datetime import datetime, timedelta
from statistics import mean, median, stdev
import time

class ReverseWeatherAnalysis:
    """–û–±—Ä–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ—Ç –ø–ª–æ—Ö–∏—Ö –ø—Ä–æ–¥–∞–∂ –∫ –ø–æ–≥–æ–¥–µ"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        
    def conduct_reverse_analysis(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        
        print("üîç –û–ë–†–ê–¢–ù–´–ô –ê–ù–ê–õ–ò–ó: –û–¢ –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ –ö –ü–û–ì–û–î–ï")
        print("=" * 80)
        print("üí° –ò–¥–µ—è: –ù–∞–π—Ç–∏ –¥–Ω–∏ —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏")
        print("üåßÔ∏è –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –±—ã–ª–∞ –≤ —ç—Ç–∏ –¥–Ω–∏")
        print("=" * 80)
        
        # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–Ω–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
        self._load_all_daily_sales()
        
        # 2. –í—ã—è–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
        self._identify_bad_sales_days()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
        self._check_weather_on_bad_days()
        
        # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ö–æ—Ä–æ—à–∏–º–∏ –¥–Ω—è–º–∏
        self._compare_with_good_days()
        
        # 5. –î–µ–ª–∞–µ–º –≤—ã–≤–æ–¥—ã
        self._generate_reverse_conclusions()
        
    def _load_all_daily_sales(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏"""
        
        print("\nüìä –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –î–ù–ï–í–ù–´–• –ü–†–û–î–ê–ñ")
        print("-" * 60)
        
        conn = sqlite3.connect(self.db_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Å–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        query = """
        SELECT 
            g.stat_date,
            COUNT(DISTINCT r.id) as restaurant_count,
            SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_daily_sales,
            AVG(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as avg_sales_per_restaurant,
            SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_daily_orders,
            AVG(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as avg_orders_per_restaurant,
            
            -- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            SUM(CASE WHEN COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) = 0 THEN 1 ELSE 0 END) as zero_sales_restaurants,
            SUM(COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0)) as total_cancelled,
            
            -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE g.stat_date >= '2024-01-01'
        AND r.name IS NOT NULL
        GROUP BY g.stat_date
        HAVING restaurant_count >= 10  -- –ú–∏–Ω–∏–º—É–º 10 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –¥–µ–Ω—å
        ORDER BY g.stat_date
        """
        
        self.daily_sales = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.daily_sales)} –¥–Ω–µ–π —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {self.daily_sales['stat_date'].min()} ‚Äî {self.daily_sales['stat_date'].max()}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –¥–µ–Ω—å: {self.daily_sales['restaurant_count'].mean():.0f}")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_daily_sales = self.daily_sales['avg_sales_per_restaurant'].mean()
        std_daily_sales = self.daily_sales['avg_sales_per_restaurant'].std()
        
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –¥–µ–Ω—å: {avg_daily_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_daily_sales:,.0f} IDR")
        
    def _identify_bad_sales_days(self):
        """–í—ã—è–≤–ª—è–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –ø—Ä–æ–¥–∞–∂"""
        
        print(f"\nüîç –≠–¢–ê–ü 2: –í–´–Ø–í–õ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–¨–ù–û –ü–õ–û–•–ò–• –î–ù–ï–ô")
        print("-" * 60)
        
        df = self.daily_sales
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        mean_sales = df['avg_sales_per_restaurant'].mean()
        std_sales = df['avg_sales_per_restaurant'].std()
        median_sales = df['avg_sales_per_restaurant'].median()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è "–ø–ª–æ—Ö–∏—Ö" –¥–Ω–µ–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        threshold_1_std = mean_sales - std_sales  # 1 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        threshold_2_std = mean_sales - 2 * std_sales  # 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        percentile_10 = df['avg_sales_per_restaurant'].quantile(0.1)  # –ù–∏–∂–Ω–∏–µ 10%
        percentile_5 = df['avg_sales_per_restaurant'].quantile(0.05)  # –ù–∏–∂–Ω–∏–µ 5%
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–û–†–û–ì–ò –î–õ–Ø '–ü–õ–û–•–ò–•' –î–ù–ï–ô:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mean_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {median_sales:,.0f} IDR")
        print(f"   ‚Ä¢ 1 œÉ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: {threshold_1_std:,.0f} IDR")
        print(f"   ‚Ä¢ 2 œÉ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: {threshold_2_std:,.0f} IDR")
        print(f"   ‚Ä¢ 10-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {percentile_10:,.0f} IDR")
        print(f"   ‚Ä¢ 5-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {percentile_5:,.0f} IDR")
        print()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏
        categories = [
            ('–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ (< 5%)', df['avg_sales_per_restaurant'] < percentile_5),
            ('–û—á–µ–Ω—å –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ (5-10%)', (df['avg_sales_per_restaurant'] >= percentile_5) & 
                                        (df['avg_sales_per_restaurant'] < percentile_10)),
            ('–ü–ª–æ—Ö–∏–µ –¥–Ω–∏ (< 1œÉ)', (df['avg_sales_per_restaurant'] >= percentile_10) & 
                                  (df['avg_sales_per_restaurant'] < threshold_1_std)),
            ('–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏', df['avg_sales_per_restaurant'] >= threshold_1_std)
        ]
        
        self.bad_days_categories = {}
        
        for category_name, condition in categories:
            category_days = df[condition]
            self.bad_days_categories[category_name] = category_days
            
            print(f"üìÖ {category_name}:")
            print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {len(category_days)}")
            if len(category_days) > 0:
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {category_days['avg_sales_per_restaurant'].mean():,.0f} IDR")
                print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {category_days['avg_sales_per_restaurant'].min():,.0f} - {category_days['avg_sales_per_restaurant'].max():,.0f} IDR")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                if len(category_days) <= 10:
                    print("   ‚Ä¢ –î–∞—Ç—ã:", ", ".join(category_days['stat_date'].tolist()))
                else:
                    sample_dates = category_days['stat_date'].head(5).tolist()
                    print("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç:", ", ".join(sample_dates), "...")
            print()
            
        # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ä–µ–º "–æ—á–µ–Ω—å –ø–ª–æ—Ö–∏–µ" –∏ "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–∏–µ" –¥–Ω–∏
        self.very_bad_days = df[df['avg_sales_per_restaurant'] < percentile_10].copy()
        print(f"üéØ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã –≤—ã–±—Ä–∞–Ω–æ {len(self.very_bad_days)} —Å–∞–º—ã—Ö –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π (–Ω–∏–∂–Ω–∏–µ 10%)")
        
    def _check_weather_on_bad_days(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏"""
        
        print(f"\nüå§Ô∏è –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ü–û–ì–û–î–´ –í –ü–õ–û–•–ò–ï –î–ù–ò")
        print("-" * 60)
        
        bad_days = self.very_bad_days
        
        if len(bad_days) == 0:
            print("‚ùå –ù–µ—Ç –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        print(f"üåßÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è {len(bad_days)} —Å–∞–º—ã—Ö –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂...")
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏
        bali_lat, bali_lon = -8.6705, 115.2126
        
        weather_bad_days = []
        
        for i, (_, day) in enumerate(bad_days.iterrows()):
            if i % 5 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(bad_days)} –¥–Ω–µ–π...")
                
            date = day['stat_date']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
            weather = self._get_weather_for_date(bali_lat, bali_lon, date)
            
            weather_bad_days.append({
                'date': date,
                'avg_sales_per_restaurant': day['avg_sales_per_restaurant'],
                'total_daily_sales': day['total_daily_sales'],
                'restaurant_count': day['restaurant_count'],
                'total_cancelled': day['total_cancelled'],
                'day_of_week': day['day_of_week'],
                'month': day['month'],
                'temperature': weather['temp'],
                'precipitation': weather['rain'],
                'wind_speed': weather['wind'],
                'is_rainy': weather['rain'] > 5,
                'is_heavy_rain': weather['rain'] > 15,
                'is_extreme_rain': weather['rain'] > 25
            })
            
            # –ü–∞—É–∑–∞ –¥–ª—è API
            if i % 3 == 0:
                time.sleep(0.5)
                
        self.bad_days_weather = pd.DataFrame(weather_bad_days)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(self.bad_days_weather)} –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
        print(f"\nüìä –ü–û–ì–û–î–ù–´–ï –£–°–õ–û–í–ò–Ø –í –ü–õ–û–•–ò–ï –î–ù–ò –ü–†–û–î–ê–ñ:")
        
        total_bad_days = len(self.bad_days_weather)
        rainy_bad_days = len(self.bad_days_weather[self.bad_days_weather['is_rainy']])
        heavy_rain_bad_days = len(self.bad_days_weather[self.bad_days_weather['is_heavy_rain']])
        extreme_rain_bad_days = len(self.bad_days_weather[self.bad_days_weather['is_extreme_rain']])
        
        print(f"   üåßÔ∏è –î–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π (>5–º–º): {rainy_bad_days}/{total_bad_days} ({rainy_bad_days/total_bad_days*100:.1f}%)")
        print(f"   ‚õàÔ∏è –î–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º (>15–º–º): {heavy_rain_bad_days}/{total_bad_days} ({heavy_rain_bad_days/total_bad_days*100:.1f}%)")
        print(f"   üåä –î–Ω–µ–π —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º (>25–º–º): {extreme_rain_bad_days}/{total_bad_days} ({extreme_rain_bad_days/total_bad_days*100:.1f}%)")
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_rain = self.bad_days_weather['precipitation'].mean()
        avg_temp = self.bad_days_weather['temperature'].mean()
        avg_wind = self.bad_days_weather['wind_speed'].mean()
        
        print(f"   üìä –°—Ä–µ–¥–Ω–∏–π –¥–æ–∂–¥—å –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏: {avg_rain:.1f}–º–º")
        print(f"   üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C")
        print(f"   üí® –°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä: {avg_wind:.1f}–º/—Å")
        
    def _compare_with_good_days(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ö–æ—Ä–æ—à–∏–º–∏ –¥–Ω—è–º–∏"""
        
        print(f"\nüìà –≠–¢–ê–ü 4: –°–†–ê–í–ù–ï–ù–ò–ï –° –•–û–†–û–®–ò–ú–ò –î–ù–Ø–ú–ò")
        print("-" * 60)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ –¥–Ω–∏ (–≤–µ—Ä—Ö–Ω–∏–µ 20%)
        percentile_80 = self.daily_sales['avg_sales_per_restaurant'].quantile(0.8)
        good_days = self.daily_sales[self.daily_sales['avg_sales_per_restaurant'] >= percentile_80].copy()
        
        print(f"üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {len(self.bad_days_weather)} –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π —Å {len(good_days)} —Ö–æ—Ä–æ—à–∏–º–∏ –¥–Ω—è–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ö–æ—Ä–æ—à–∏—Ö –¥–Ω–µ–π (–∫–∞–∂–¥—ã–π 3-–π –¥–µ–Ω—å)
        good_days_sample = good_days.iloc[::3]  # –∫–∞–∂–¥—ã–π 3-–π –¥–µ–Ω—å
        print(f"üå§Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è {len(good_days_sample)} —Ö–æ—Ä–æ—à–∏—Ö –¥–Ω–µ–π (–≤—ã–±–æ—Ä–∫–∞)...")
        
        bali_lat, bali_lon = -8.6705, 115.2126
        weather_good_days = []
        
        for i, (_, day) in enumerate(good_days_sample.iterrows()):
            if i % 5 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(good_days_sample)} –¥–Ω–µ–π...")
                
            date = day['stat_date']
            weather = self._get_weather_for_date(bali_lat, bali_lon, date)
            
            weather_good_days.append({
                'date': date,
                'avg_sales_per_restaurant': day['avg_sales_per_restaurant'],
                'precipitation': weather['rain'],
                'temperature': weather['temp'],
                'wind_speed': weather['wind'],
                'is_rainy': weather['rain'] > 5,
                'is_heavy_rain': weather['rain'] > 15
            })
            
            if i % 3 == 0:
                time.sleep(0.5)
                
        self.good_days_weather = pd.DataFrame(weather_good_days)
        
        # –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
        print(f"\nüîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´:")
        print("=" * 50)
        
        bad_df = self.bad_days_weather
        good_df = self.good_days_weather
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ–ª—é –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π
        bad_rainy_pct = (bad_df['is_rainy'].sum() / len(bad_df)) * 100
        good_rainy_pct = (good_df['is_rainy'].sum() / len(good_df)) * 100
        
        bad_heavy_rain_pct = (bad_df['is_heavy_rain'].sum() / len(bad_df)) * 100
        good_heavy_rain_pct = (good_df['is_heavy_rain'].sum() / len(good_df)) * 100
        
        print(f"üìä –î–û–õ–Ø –î–û–ñ–î–õ–ò–í–´–• –î–ù–ï–ô:")
        print(f"   üî¥ –ü–ª–æ—Ö–∏–µ –¥–Ω–∏: {bad_rainy_pct:.1f}% –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π")
        print(f"   üü¢ –•–æ—Ä–æ—à–∏–µ –¥–Ω–∏: {good_rainy_pct:.1f}% –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π")
        print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {bad_rainy_pct - good_rainy_pct:+.1f} –ø.–ø.")
        print()
        
        print(f"‚õàÔ∏è –î–û–õ–Ø –î–ù–ï–ô –° –°–ò–õ–¨–ù–´–ú –î–û–ñ–î–ï–ú:")
        print(f"   üî¥ –ü–ª–æ—Ö–∏–µ –¥–Ω–∏: {bad_heavy_rain_pct:.1f}% –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º")
        print(f"   üü¢ –•–æ—Ä–æ—à–∏–µ –¥–Ω–∏: {good_heavy_rain_pct:.1f}% –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º")
        print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {bad_heavy_rain_pct - good_heavy_rain_pct:+.1f} –ø.–ø.")
        print()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        bad_avg_rain = bad_df['precipitation'].mean()
        good_avg_rain = good_df['precipitation'].mean()
        
        bad_avg_temp = bad_df['temperature'].mean()
        good_avg_temp = good_df['temperature'].mean()
        
        print(f"üåßÔ∏è –°–†–ï–î–ù–ò–ï –ü–û–ì–û–î–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"   –î–æ–∂–¥—å:")
        print(f"     üî¥ –ü–ª–æ—Ö–∏–µ –¥–Ω–∏: {bad_avg_rain:.1f}–º–º")
        print(f"     üü¢ –•–æ—Ä–æ—à–∏–µ –¥–Ω–∏: {good_avg_rain:.1f}–º–º")
        print(f"     üìä –†–∞–∑–Ω–∏—Ü–∞: {bad_avg_rain - good_avg_rain:+.1f}–º–º")
        print()
        print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:")
        print(f"     üî¥ –ü–ª–æ—Ö–∏–µ –¥–Ω–∏: {bad_avg_temp:.1f}¬∞C")
        print(f"     üü¢ –•–æ—Ä–æ—à–∏–µ –¥–Ω–∏: {good_avg_temp:.1f}¬∞C")
        print(f"     üìä –†–∞–∑–Ω–∏—Ü–∞: {bad_avg_temp - good_avg_temp:+.1f}¬∞C")
        
    def _generate_reverse_conclusions(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        print(f"\nüéØ –≠–¢–ê–ü 5: –í–´–í–û–î–´ –û–ë–†–ê–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 80)
        
        bad_df = self.bad_days_weather
        good_df = self.good_days_weather
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        bad_rainy_pct = (bad_df['is_rainy'].sum() / len(bad_df)) * 100
        good_rainy_pct = (good_df['is_rainy'].sum() / len(good_df)) * 100
        rain_difference = bad_rainy_pct - good_rainy_pct
        
        bad_heavy_rain_pct = (bad_df['is_heavy_rain'].sum() / len(bad_df)) * 100
        good_heavy_rain_pct = (good_df['is_heavy_rain'].sum() / len(good_df)) * 100
        heavy_rain_difference = bad_heavy_rain_pct - good_heavy_rain_pct
        
        bad_avg_rain = bad_df['precipitation'].mean()
        good_avg_rain = good_df['precipitation'].mean()
        rain_avg_difference = bad_avg_rain - good_avg_rain
        
        print("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π: {len(bad_df)}")
        print(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö –¥–Ω–µ–π: {len(good_df)}")
        print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ–ª–µ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: {rain_difference:+.1f} –ø.–ø.")
        print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ–ª–µ –¥–Ω–µ–π —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º: {heavy_rain_difference:+.1f} –ø.–ø.")
        print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–∂–¥—è: {rain_avg_difference:+.1f}–º–º")
        print()
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢
        print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ –û–ë–†–ê–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 60)
        
        if rain_difference > 15 and heavy_rain_difference > 10:
            print("‚úÖ –î–û–ñ–î–¨ –Ø–í–õ–Ø–ï–¢–°–Ø –ó–ù–ê–ß–ò–ú–û–ô –ü–†–ò–ß–ò–ù–û–ô –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ!")
            print()
            print("üîç –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:")
            print(f"   ‚Ä¢ –í –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –¥–æ–∂–¥—å –∏–¥–µ—Ç –Ω–∞ {rain_difference:.1f}% —á–∞—â–µ")
            print(f"   ‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –Ω–∞ {heavy_rain_difference:.1f}% —á–∞—â–µ")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∂–¥—è –±–æ–ª—å—à–µ –Ω–∞ {rain_avg_difference:.1f}–º–º")
            print()
            print("üí° –í–´–í–û–î: –ì–∏–ø–æ—Ç–µ–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –æ–±—Ä–∞—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º!")
            
        elif rain_difference > 5 and heavy_rain_difference > 5:
            print("‚ö†Ô∏è –î–û–ñ–î–¨ –£–ú–ï–†–ï–ù–ù–û –í–õ–ò–Ø–ï–¢ –ù–ê –ü–õ–û–•–ò–ï –ü–†–û–î–ê–ñ–ò")
            print()
            print("üîç –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:")
            print(f"   ‚Ä¢ –í –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –¥–æ–∂–¥—å –∏–¥–µ—Ç –Ω–∞ {rain_difference:.1f}% —á–∞—â–µ")
            print(f"   ‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ –Ω–∞ {heavy_rain_difference:.1f}% —á–∞—â–µ")
            print()
            print("üí° –í–´–í–û–î: –î–æ–∂–¥—å –≤–ª–∏—è–µ—Ç, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π")
            
        else:
            print("‚ùå –î–û–ñ–î–¨ –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –û–°–ù–û–í–ù–û–ô –ü–†–ò–ß–ò–ù–û–ô –ü–õ–û–•–ò–• –ü–†–û–î–ê–ñ")
            print()
            print("üîç –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:")
            print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ–ª–µ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: –≤—Å–µ–≥–æ {rain_difference:.1f}%")
            print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª—å–Ω–æ–º –¥–æ–∂–¥–µ: –≤—Å–µ–≥–æ {heavy_rain_difference:.1f}%")
            print()
            print("üí° –í–´–í–û–î: –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–ª–æ—Ö–∏—Ö –ø—Ä–æ–¥–∞–∂")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ —Å –ø–æ–≥–æ–¥–æ–π
        print(f"\nüîç –°–ê–ú–´–ï –ü–õ–û–•–ò–ï –î–ù–ò –ò –ò–• –ü–û–ì–û–î–ê:")
        worst_days = bad_df.nsmallest(10, 'avg_sales_per_restaurant')
        
        for _, day in worst_days.iterrows():
            rain_status = ""
            if day['precipitation'] > 25:
                rain_status = "‚õàÔ∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –î–û–ñ–î–¨"
            elif day['precipitation'] > 15:
                rain_status = "üåßÔ∏è –°–ò–õ–¨–ù–´–ô –î–û–ñ–î–¨"
            elif day['precipitation'] > 5:
                rain_status = "üå¶Ô∏è –î–æ–∂–¥—å"
            else:
                rain_status = "‚òÄÔ∏è –ë–µ–∑ –¥–æ–∂–¥—è"
                
            print(f"   üìÖ {day['date']}: {day['avg_sales_per_restaurant']:,.0f} IDR - {rain_status} ({day['precipitation']:.1f}–º–º)")
            
        print()
        print("üî¨ –ö–ê–ß–ï–°–¢–í–û –û–ë–†–ê–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ '–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –ø—Ä–∏—á–∏–Ω–µ'")
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
        print("   ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–æ–π (—Ö–æ—Ä–æ—à–∏–µ –¥–Ω–∏)")
        print("   ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API")
        print("   ‚úÖ –û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –∫–ª–∏–µ–Ω—Ç–∞")
        
    def _get_weather_for_date(self, lat, lon, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –¥–∞—Ç—ã"""
        
        cache_key = f"{lat}_{lon}_{date}"
        
        if cache_key in self.weather_cache:
            return self.weather_cache[cache_key]
            
        default_weather = {'temp': 28.0, 'rain': 0.0, 'wind': 5.0}
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,precipitation,wind_speed_10m',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=8)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly:
                    temperatures = hourly.get('temperature_2m', [])
                    precipitation = hourly.get('precipitation', [])
                    wind_speed = hourly.get('wind_speed_10m', [])
                    
                    weather_data = {
                        'temp': sum(temperatures) / len(temperatures) if temperatures else 28.0,
                        'rain': sum(precipitation) if precipitation else 0.0,
                        'wind': sum(wind_speed) / len(wind_speed) if wind_speed else 5.0
                    }
                    
                    self.weather_cache[cache_key] = weather_data
                    return weather_data
                    
        except Exception:
            pass
            
        self.weather_cache[cache_key] = default_weather
        return default_weather

def main():
    """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    analyzer = ReverseWeatherAnalysis()
    analyzer.conduct_reverse_analysis()
    
    print("\nüéâ –û–ë–†–ê–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É –º–µ—Ç–æ–¥–æ–º '–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –ø—Ä–∏—á–∏–Ω–µ'!")

if __name__ == "__main__":
    main()