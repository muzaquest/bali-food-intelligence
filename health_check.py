#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ MUZAQUEST
===============================================
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã analytics
"""

import sqlite3
import json
import os
import sys
import subprocess
from datetime import datetime, timedelta

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    if not os.path.exists('database.sqlite'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: database.sqlite")
        return False
    
    try:
        conn = sqlite3.connect('database.sqlite')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = {
            'restaurants': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
            'grab_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Grab',
            'gojek_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Gojek'
        }
        
        all_good = True
        total_records = 0
        
        for table, description in tables_to_check.items():
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"‚úÖ {description}: {count:,} –∑–∞–ø–∏—Å–µ–π")
                total_records += count
                
                if count == 0:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–∞–±–ª–∏—Ü–∞ {table} –ø—É—Å—Ç–∞")
                    all_good = False
                    
            except sqlite3.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                all_good = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        try:
            cursor.execute("""
                SELECT 
                    MIN(stat_date) as min_date,
                    MAX(stat_date) as max_date
                FROM (
                    SELECT stat_date FROM grab_stats
                    UNION ALL
                    SELECT stat_date FROM gojek_stats
                )
            """)
            min_date, max_date = cursor.fetchone()
            
            if min_date and max_date:
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {min_date} ‚Üí {max_date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                max_date_obj = datetime.strptime(max_date, '%Y-%m-%d')
                days_old = (datetime.now() - max_date_obj).days
                
                if days_old <= 7:
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã {days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)")
                elif days_old <= 30:
                    print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ ({days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)")
                else:
                    print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–∏ ({days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)")
                    all_good = False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        conn.close()
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records:,}")
        print()
        
        return all_good
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def check_location_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üó∫Ô∏è –ü–†–û–í–ï–†–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ –†–ï–°–¢–û–†–ê–ù–û–í")
    print("-" * 40)
    
    locations_file = 'data/bali_restaurant_locations.json'
    
    if not os.path.exists(locations_file):
        print(f"‚ùå –§–∞–π–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {locations_file}")
        return False
    
    try:
        with open(locations_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        restaurant_count = len(data.get('restaurants', []))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {restaurant_count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        invalid_coords = 0
        for restaurant in data.get('restaurants', []):
            lat = restaurant.get('latitude')
            lon = restaurant.get('longitude')
            
            if not lat or not lon:
                invalid_coords += 1
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ë–∞–ª–∏
            if not (-9.0 <= lat <= -8.0 and 114.5 <= lon <= 116.0):
                print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {restaurant.get('name')}: {lat}, {lon}")
        
        if invalid_coords > 0:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {invalid_coords} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
            return False
        
        last_updated = data.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}")
        print()
        
        return True
        
    except json.JSONDecodeError:
        print(f"‚ùå –§–∞–π–ª {locations_file} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return False

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π"""
    print("üîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô")
    print("-" * 40)
    
    env_file = '.env'
    
    if not os.path.exists(env_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω - API —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        return False
    
    try:
        with open(env_file, 'r') as f:
            env_content = f.read()
        
        required_keys = {
            'OPENAI_API_KEY': 'OpenAI (AI –∞–Ω–∞–ª–∏–∑)',
            'CALENDARIFIC_API_KEY': 'Calendarific (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏)',
            # Weather API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞ (Open-Meteo)
        }
        
        all_keys_present = True
        
        for key, description in required_keys.items():
            if key in env_content and len(env_content.split(f'{key}=')[1].split('\n')[0].strip()) > 10:
                print(f"‚úÖ {description}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"‚ùå {description}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                all_keys_present = False
        
        # Weather API (Open-Meteo) –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
        print(f"‚úÖ Weather API (Open-Meteo): –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞")
        
        print()
        return all_keys_present
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .env: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("-" * 40)
    
    required_packages = {
        'pandas': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
        'sqlite3': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
        'streamlit': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        'requests': 'API –∑–∞–ø—Ä–æ—Å—ã',
        'plotly': '–ì—Ä–∞—Ñ–∏–∫–∏',
        'scikit-learn': 'ML –º–æ–¥–µ–ª–∏',
        'prophet': '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'openpyxl': 'Excel —Ñ–∞–π–ª—ã'
    }
    
    all_installed = True
    
    for package, description in required_packages.items():
        try:
            if package == 'sqlite3':
                import sqlite3
                print(f"‚úÖ {description}: {sqlite3.sqlite_version}")
            else:
                __import__(package)
                try:
                    version = __import__(package).__version__
                    print(f"‚úÖ {description}: v{version}")
                except:
                    print(f"‚úÖ {description}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
        except ImportError:
            print(f"‚ùå {description}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_installed = False
    
    print()
    return all_installed

def check_web_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üåê –ü–†–û–í–ï–†–ö–ê –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("-" * 40)
    
    web_app_file = 'web_app_optimized.py'
    
    if not os.path.exists(web_app_file):
        print(f"‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {web_app_file}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        with open(web_app_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        compile(content, web_app_file, 'exec')
        print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å {web_app_file}: –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if 'load_restaurants' in content:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
        if 'run_analysis' in content:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        
        print()
        return True
        
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {web_app_file}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def check_main_analyzer():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("-" * 40)
    
    main_file = 'main.py'
    
    if not os.path.exists(main_file):
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_file}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_functions = {
            'analyze_restaurant': '–ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
            'analyze_market': '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞',
            'list_restaurants': '–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤'
        }
        
        all_functions_present = True
        
        for func, description in required_functions.items():
            if f'def {func}(' in content:
                print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå {description}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                all_functions_present = False
        
        print()
        return all_functions_present
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ main.py: {e}")
        return False

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("-" * 40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        result = subprocess.run([
            sys.executable, 'main.py', 'list'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            restaurant_lines = [l for l in lines if 'üçΩÔ∏è' in l]
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ {len(restaurant_lines)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {result.stderr}")
            return False
        
        print()
        return True
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üîç MUZAQUEST ANALYTICS - –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    checks = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", check_location_data),
        ("API –∫–ª—é—á–∏", check_api_keys),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_dependencies),
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", check_web_app),
        ("–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", check_main_analyzer),
        ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", run_quick_test)
    ]
    
    results = []
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}")
            results.append((check_name, False))
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–ê"
        print(f"{status:15} | {check_name}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        sys.exit(0)
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        sys.exit(1)
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        sys.exit(2)

if __name__ == "__main__":
    main()