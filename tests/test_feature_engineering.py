"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è feature_engineering
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê DATA LEAKAGE
"""
import pytest
import pandas as pd
import numpy as np
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from feature_engineering import FeatureEngineer


class TestFeatureEngineer:
    
    @pytest.fixture
    def sample_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        np.random.seed(42)
        data = {
            'restaurant_name': ['Restaurant_A'] * 10 + ['Restaurant_B'] * 10,
            'date': pd.date_range('2023-01-01', periods=20),
            'total_sales': np.random.randint(100, 500, 20),
            'rating': np.random.uniform(3.0, 5.0, 20),
            'cancel_rate': np.random.uniform(0.0, 0.3, 20),
            'ads_on': np.random.randint(0, 2, 20),
            'is_holiday': np.random.randint(0, 2, 20)
        }
        return pd.DataFrame(data)
    
    def test_delta_sales_prev_no_leakage(self, sample_data):
        """üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ delta_sales_prev"""
        engineer = FeatureEngineer()
        df_with_features = engineer.create_temporal_features(sample_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ delta_sales_prev –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target
        df_with_target = engineer.create_target_variable(df_with_features)
        
        # delta_sales_prev –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–¥–≤–∏–Ω—É—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ target
        if 'delta_sales_prev' in df_with_target.columns and 'target' in df_with_target.columns:
            # –£–±–∏—Ä–∞–µ–º NaN –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            valid_mask = ~(df_with_target['delta_sales_prev'].isna() | df_with_target['target'].isna())
            if valid_mask.sum() > 0:
                delta_vals = df_with_target.loc[valid_mask, 'delta_sales_prev'].values
                target_vals = df_with_target.loc[valid_mask, 'target'].values
                # –û–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
                assert not np.array_equal(delta_vals, target_vals), "üö® –ö–†–ò–¢–ò–ß–ù–û: delta_sales_prev –∏ target –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –µ—Å—Ç—å data leakage!"
        
    def test_no_future_leakage(self, sample_data):
        """–¢–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        engineer = FeatureEngineer()
        df_features = engineer.create_temporal_features(sample_data)
        
        # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å NaN –≤ delta_sales_prev –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        for restaurant in sample_data['restaurant_name'].unique():
            restaurant_data = df_features[df_features['restaurant_name'] == restaurant].sort_values('date')
            if len(restaurant_data) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NaN
                assert pd.isna(restaurant_data.iloc[0]['delta_sales_prev']), f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è {restaurant} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NaN"
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NaN (–∏—Å–ø–æ–ª—å–∑—É–µ–º shift(1) - shift(2))
                assert pd.isna(restaurant_data.iloc[1]['delta_sales_prev']), f"–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è {restaurant} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NaN"
        
    def test_rolling_means_shifted(self, sample_data):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å–¥–≤–∏–Ω—É—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è data leakage"""
        engineer = FeatureEngineer()
        df_features = engineer.create_temporal_features(sample_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è rolling_mean_3 –∏ rolling_mean_7 - NaN
        for restaurant in sample_data['restaurant_name'].unique():
            restaurant_data = df_features[df_features['restaurant_name'] == restaurant].sort_values('date')
            if len(restaurant_data) >= 1:
                # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å NaN –∏–∑-–∑–∞ shift(1)
                assert pd.isna(restaurant_data.iloc[0]['rolling_mean_3']), f"rolling_mean_3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å NaN –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ {restaurant}"
                assert pd.isna(restaurant_data.iloc[0]['rolling_mean_7']), f"rolling_mean_7 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å NaN –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ {restaurant}"
        
    def test_feature_creation(self, sample_data):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        engineer = FeatureEngineer()
        result = engineer.prepare_features(sample_data)
        
        assert result is not None
        assert len(result) > 0
        assert 'delta_sales_prev' in result.columns
        assert 'target' in result.columns


class TestBasicFunctionality:
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞"""
    
    def test_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            import pandas as pd
            import numpy as np
            import sklearn
            assert True
        except ImportError as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
            
    def test_pandas_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ pandas"""
        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
        assert len(df) == 3
        assert 'A' in df.columns
        assert 'B' in df.columns