"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è model
–ü–†–û–í–ï–†–ö–ê –ù–ê –û–¢–°–£–¢–°–¢–í–ò–ï –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø –ò DATA LEAKAGE
"""
import pytest
import pandas as pd
import numpy as np
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from model import SalesModel
    MODEL_AVAILABLE = True
except ImportError:
    MODEL_AVAILABLE = False


@pytest.mark.skipif(not MODEL_AVAILABLE, reason="–ú–æ–¥—É–ª—å model –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
class TestSalesModel:
    
    @pytest.fixture
    def sample_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        np.random.seed(42)
        data = {
            'restaurant_name': ['Restaurant_A'] * 20 + ['Restaurant_B'] * 20,
            'date': pd.date_range('2023-01-01', periods=40),
            'total_sales': np.random.randint(100, 500, 40),
            'rating': np.random.uniform(3.0, 5.0, 40),
            'cancel_rate': np.random.uniform(0.0, 0.3, 40),
            'ads_on': np.random.randint(0, 2, 40),
            'is_holiday': np.random.randint(0, 2, 40)
        }
        return pd.DataFrame(data)
    
    def test_model_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        model = SalesModel()
        assert model is not None
        assert not model.is_trained
        
    def test_no_perfect_accuracy(self, sample_data):
        """üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ data leakage)"""
        model = SalesModel()
        
        try:
            metrics = model.train(sample_data)
            
            # R2 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ 1.0 (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–ª–æ –±—ã –Ω–∞ data leakage)
            train_r2 = metrics.get('train_r2', 0)
            test_r2 = metrics.get('test_r2', 0)
            
            assert train_r2 < 0.99, f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ data leakage: Train R2 = {train_r2}"
            assert test_r2 < 0.99, f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ data leakage: Test R2 = {test_r2}"
            
            # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π R2 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–º–Ω–æ–≥–æ –≤—ã—à–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
            if train_r2 > 0.1 and test_r2 > 0.1:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                diff = train_r2 - test_r2
                assert diff < 0.5, f"–í–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: —Ä–∞–∑–Ω–∏—Ü–∞ R2 = {diff}"
                
        except Exception as e:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–±—É—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pytest.skip(f"–ú–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–±—É—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")


class TestBasicFunctionality:
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞"""
    
    def test_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            import pandas as pd
            import numpy as np
            import sklearn
            assert True
        except ImportError as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
            
    def test_pandas_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ pandas"""
        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
        assert len(df) == 3
        assert 'A' in df.columns
        assert 'B' in df.columns