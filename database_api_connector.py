#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåê API –ö–û–ù–ù–ï–ö–¢–û–† –ö –û–ë–ù–û–í–õ–Ø–ï–ú–û–ô –ë–ê–ó–ï –î–ê–ù–ù–´–•
==========================================
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–µ–π –ë–î —á–µ—Ä–µ–∑ REST API –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
"""

import requests
import sqlite3
import pandas as pd
import json
import os
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any
import hashlib

class DatabaseAPIConnector:
    """
    –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –ë–î —á–µ—Ä–µ–∑ API
    –ö–µ—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, api_base_url: str, api_key: str = None, cache_ttl: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        
        Args:
            api_base_url: –ë–∞–∑–æ–≤—ã–π URL API (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://api.muzaquest.com/v1)
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.api_base_url = api_base_url.rstrip('/')
        self.api_key = api_key
        self.cache_ttl = cache_ttl
        self.cache_dir = '.cache'
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if api_key:
            self.session.headers.update({
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            })
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–µ—à–∞
        os.makedirs(self.cache_dir, exist_ok=True)
        
        print(f"üåê API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {api_base_url}")
    
    def _get_cache_path(self, cache_key: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–µ—à–∞"""
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–ª—é—á–∞
        safe_key = hashlib.md5(cache_key.encode()).hexdigest()
        return os.path.join(self.cache_dir, f"{safe_key}.json")
    
    def _is_cache_valid(self, cache_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞"""
        if not os.path.exists(cache_path):
            return False
        
        cache_time = os.path.getmtime(cache_path)
        return (time.time() - cache_time) < self.cache_ttl
    
    def _save_cache(self, cache_key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
        try:
            cache_path = self._get_cache_path(cache_key)
            with open(cache_path, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': time.time(),
                    'data': data
                }, f, ensure_ascii=False, default=str)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def _load_cache(self, cache_key: str) -> Optional[Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
        try:
            cache_path = self._get_cache_path(cache_key)
            
            if not self._is_cache_valid(cache_path):
                return None
            
            with open(cache_path, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                return cache_data['data']
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {e}")
            return None
    
    def _api_request(self, endpoint: str, params: dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API"""
        try:
            url = f"{self.api_base_url}{endpoint}"
            
            print(f"üåê API –∑–∞–ø—Ä–æ—Å: {endpoint}")
            
            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {endpoint}: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON {endpoint}: {e}")
            return None
    
    def get_restaurants(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        cache_key = "restaurants_list"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_data = self._load_cache(cache_key)
        if cached_data:
            print(f"üìã –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ ({len(cached_data)} —à—Ç.)")
            return cached_data
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        data = self._api_request('/restaurants')
        if data and 'restaurants' in data:
            restaurants = data['restaurants']
            self._save_cache(cache_key, restaurants)
            print(f"üìã –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ API ({len(restaurants)} —à—Ç.)")
            return restaurants
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        return []
    
    def get_restaurant_stats(self, restaurant_name: str, start_date: str = None, end_date: str = None, platform: str = 'all') -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        
        Args:
            restaurant_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD  
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ('grab', 'gojek', 'all')
        """
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
        cache_key = f"stats_{restaurant_name}_{start_date}_{end_date}_{platform}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_data = self._load_cache(cache_key)
        if cached_data:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {restaurant_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–µ—à–∞")
            return cached_data
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'restaurant': restaurant_name,
            'platform': platform
        }
        
        if start_date:
            params['start_date'] = start_date
        if end_date:
            params['end_date'] = end_date
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        data = self._api_request('/restaurant-stats', params)
        if data and 'stats' in data:
            stats = data['stats']
            self._save_cache(cache_key, stats)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {restaurant_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ API ({len(stats)} –∑–∞–ø–∏—Å–µ–π)")
            return stats
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {restaurant_name}")
        return []
    
    def get_market_overview(self, start_date: str = None, end_date: str = None) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–∑–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É"""
        cache_key = f"market_overview_{start_date}_{end_date}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_data = self._load_cache(cache_key)
        if cached_data:
            print("üåç –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–µ—à–∞")
            return cached_data
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {}
        if start_date:
            params['start_date'] = start_date
        if end_date:
            params['end_date'] = end_date
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        data = self._api_request('/market-overview', params)
        if data:
            self._save_cache(cache_key, data)
            print("üåç –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ API")
            return data
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞")
        return {}
    
    def get_restaurant_location(self, restaurant_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        cache_key = f"location_{restaurant_name}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_data = self._load_cache(cache_key)
        if cached_data:
            return cached_data
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        data = self._api_request(f'/restaurant-location', {'restaurant': restaurant_name})
        if data and 'location' in data:
            location = data['location']
            self._save_cache(cache_key, location)
            return location
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_location = {
            'latitude': -8.4095,
            'longitude': 115.1889,
            'location': 'Denpasar',
            'area': 'Denpasar',
            'zone': 'Central'
        }
        return default_location
    
    def create_local_database(self, output_file: str = 'database.sqlite'):
        """
        –°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é SQLite –±–∞–∑—É –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –∏–ª–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã
        """
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∏–∑ API –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ë–î
            conn = sqlite3.connect(output_file)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS restaurants (
                    id INTEGER PRIMARY KEY,
                    name TEXT UNIQUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS grab_stats (
                    id INTEGER PRIMARY KEY,
                    restaurant_id INTEGER,
                    stat_date DATE,
                    sales REAL,
                    orders INTEGER,
                    rating REAL,
                    -- ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id)
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS gojek_stats (
                    id INTEGER PRIMARY KEY,
                    restaurant_id INTEGER,
                    stat_date DATE,
                    sales REAL,
                    orders INTEGER,
                    rating REAL,
                    -- ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id)
                )
            ''')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            restaurants = self.get_restaurants()
            for restaurant in restaurants:
                cursor.execute(
                    'INSERT OR REPLACE INTO restaurants (name) VALUES (?)',
                    (restaurant['name'],)
                )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            for restaurant in restaurants:
                restaurant_name = restaurant['name']
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Grab
                grab_stats = self.get_restaurant_stats(restaurant_name, platform='grab')
                for stat in grab_stats:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
                    cursor.execute('''
                        INSERT OR REPLACE INTO grab_stats 
                        (restaurant_id, stat_date, sales, orders, rating)
                        VALUES (
                            (SELECT id FROM restaurants WHERE name = ?),
                            ?, ?, ?, ?
                        )
                    ''', (
                        restaurant_name,
                        stat.get('date'),
                        stat.get('sales', 0),
                        stat.get('orders', 0),
                        stat.get('rating', 0)
                    ))
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Gojek
                gojek_stats = self.get_restaurant_stats(restaurant_name, platform='gojek')
                for stat in gojek_stats:
                    cursor.execute('''
                        INSERT OR REPLACE INTO gojek_stats 
                        (restaurant_id, stat_date, sales, orders, rating)
                        VALUES (
                            (SELECT id FROM restaurants WHERE name = ?),
                            ?, ?, ?, ?
                        )
                    ''', (
                        restaurant_name,
                        stat.get('date'),
                        stat.get('sales', 0),
                        stat.get('orders', 0),
                        stat.get('rating', 0)
                    ))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î —Å–æ–∑–¥–∞–Ω–∞: {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            data = self._api_request('/health')
            
            if data:
                print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                if 'version' in data:
                    print(f"üìã –í–µ—Ä—Å–∏—è API: {data['version']}")
                if 'restaurants_count' in data:
                    print(f"üìä –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –±–∞–∑–µ: {data['restaurants_count']}")
                return True
            else:
                print("‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à"""
        try:
            import shutil
            if os.path.exists(self.cache_dir):
                shutil.rmtree(self.cache_dir)
                os.makedirs(self.cache_dir, exist_ok=True)
                print("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")


# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class DatabaseAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∫–∞–∫ –æ–±—ã—á–Ω—É—é SQLite –ë–î
    –ü—Ä–æ–∑—Ä–∞—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    """
    
    def __init__(self, api_connector: DatabaseAPIConnector):
        self.api = api_connector
        self.local_db_path = 'temp_database.sqlite'
    
    def execute_query(self, query: str, params: tuple = None) -> pd.DataFrame:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–ø–æ–¥–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç SQL –≤ API –≤—ã–∑–æ–≤—ã
        """
        try:
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            query_lower = query.lower().strip()
            
            if 'select' in query_lower and 'restaurants' in query_lower:
                # –ó–∞–ø—Ä–æ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                restaurants = self.api.get_restaurants()
                return pd.DataFrame(restaurants)
            
            elif 'grab_stats' in query_lower or 'gojek_stats' in query_lower:
                # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
                if self.api.create_local_database(self.local_db_path):
                    conn = sqlite3.connect(self.local_db_path)
                    result = pd.read_sql_query(query, conn, params=params)
                    conn.close()
                    return result
            
            # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
            if self.api.create_local_database(self.local_db_path):
                conn = sqlite3.connect(self.local_db_path)
                result = pd.read_sql_query(query, conn, params=params)
                conn.close()
                return result
            
            return pd.DataFrame()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return pd.DataFrame()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
def setup_api_database(api_url: str, api_key: str = None) -> DatabaseAPIConnector:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –ë–î
    
    Args:
        api_url: URL API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        api_key: API –∫–ª—é—á (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    """
    connector = DatabaseAPIConnector(api_url, api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if connector.test_connection():
        print("üéâ API –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return connector
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return None


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üåê –¢–ï–°–¢ API –ö–û–ù–ù–ï–ö–¢–û–†–ê")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    API_URL = "https://api.muzaquest.com/v1"
    API_KEY = "your-api-key-here"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    api_db = setup_api_database(API_URL, API_KEY)
    
    if api_db:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        restaurants = api_db.get_restaurants()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants)}")
        
        if restaurants:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            first_restaurant = restaurants[0]['name']
            stats = api_db.get_restaurant_stats(first_restaurant)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {first_restaurant}: {len(stats)} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = DatabaseAdapter(api_db)
        df = adapter.execute_query("SELECT name FROM restaurants LIMIT 5")
        print(f"üîç –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞: {len(df)} —Å—Ç—Ä–æ–∫")