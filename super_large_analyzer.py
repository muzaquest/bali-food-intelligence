#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from simple_large_analyzer import SimpleLargeAnalyzer
import pandas as pd

class SuperLargeAnalyzer(SimpleLargeAnalyzer):
    def run_super_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—É–ø–µ—Ä –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üåç –°–£–ü–ï–† –ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û –í–°–ï–ú–ò –†–ï–°–¢–û–†–ê–ù–ê–ú–ò")
        print("=" * 55)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        locations = self.load_restaurant_locations()
        sales_data = self.get_sample_data(8000)  # –ë–æ–ª—å—à–∞—è –≤—ã–±–æ—Ä–∫–∞
        
        if not locations:
            print("‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        restaurants_with_coords = [name for name in sales_data['restaurant_name'].unique() 
                                  if name in locations]
        
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(restaurants_with_coords)}")
        
        filtered_data = sales_data[sales_data['restaurant_name'].isin(restaurants_with_coords)]
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        weather_data = []
        processed = 0
        
        print("üå§Ô∏è –°–±–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π...")
        
        # –ë–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω-–¥–∞—Ç–∞
        unique_combos = filtered_data[['restaurant_name', 'date']].drop_duplicates()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∏ –≤—Ä–µ–º–µ–Ω–∏
        sample_combos = unique_combos.sample(min(1000, len(unique_combos)), random_state=42)
        
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(sample_combos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ {len(unique_combos)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        for _, row in sample_combos.iterrows():
            restaurant_name = row['restaurant_name']
            date = row['date']
            
            if restaurant_name in locations:
                location = locations[restaurant_name]
                
                weather = self.get_weather(
                    location['latitude'], 
                    location['longitude'], 
                    date
                )
                
                if weather:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                    day_sales = filtered_data[
                        (filtered_data['restaurant_name'] == restaurant_name) & 
                        (filtered_data['date'] == date)
                    ]
                    
                    if not day_sales.empty:
                        record = {
                            'restaurant': restaurant_name,
                            'date': date,
                            'zone': location.get('zone', 'Unknown'),
                            'area': location.get('area', 'Unknown'),
                            'total_sales': day_sales['total_sales'].sum(),
                            'total_orders': day_sales['total_orders'].sum(),
                            'cancelled_orders': day_sales['grab_cancelled'].fillna(0).sum(),
                            'temperature': weather['temperature'],
                            'rain': weather['rain'],
                            'wind': weather['wind']
                        }
                        weather_data.append(record)
            
            processed += 1
            if processed % 100 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(sample_combos)} ({len(weather_data)} —É—Å–ø–µ—à–Ω—ã—Ö)")
                import time
                time.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è API
        
        if not weather_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df = pd.DataFrame(weather_data)
        print(f"
‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–ª—è –°–£–ü–ï–† –∞–Ω–∞–ª–∏–∑–∞: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: {df['restaurant'].nunique()}")
        print(f"üåç –ó–æ–Ω –≤ –∞–Ω–∞–ª–∏–∑–µ: {df['zone'].nunique()}")
        
        self.analyze_patterns(df)

def main():
    analyzer = SuperLargeAnalyzer()
    analyzer.run_super_analysis()

if __name__ == "__main__":
    main()
