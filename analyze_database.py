#!/usr/bin/env python3
import sqlite3
import json
import statistics
from datetime import datetime, timedelta
from collections import defaultdict
import math

def analyze_database():
    """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê 2.5 –ì–û–î–ê")
    print("=" * 50)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.sqlite')
    cursor = conn.cursor()
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    
    for table in tables:
        table_name = table[0]
        print(f"\nüóÇÔ∏è  –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        for col in columns:
            print(f"   - {col[1]} ({col[2]})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        print(f"   üìà –ó–∞–ø–∏—Å–µ–π: {count:,}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã grab_stats
    print("\n" + "=" * 50)
    print("üìà –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• GRAB_STATS")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    cursor.execute("""
        SELECT MIN(stat_date) as min_date, MAX(stat_date) as max_date, COUNT(*) as total_records
        FROM grab_stats
    """)
    date_info = cursor.fetchone()
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_info[0]} - {date_info[1]}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {date_info[2]:,}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    cursor.execute("""
        SELECT DISTINCT r.name, COUNT(*) as records_count
        FROM grab_stats gs 
        JOIN restaurants r ON gs.restaurant_id = r.id 
        GROUP BY gs.restaurant_id, r.name
        ORDER BY r.name
    """)
    restaurants = cursor.fetchall()
    print(f"üè™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants)}")
    print("   –†–µ—Å—Ç–æ—Ä–∞–Ω—ã:")
    for name, count in restaurants[:10]:
        print(f"     - {name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
    if len(restaurants) > 10:
        print(f"     ... –∏ –µ—â–µ {len(restaurants) - 10} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    # 3. –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    print("\nüî¨ –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
    cursor.execute("PRAGMA table_info(grab_stats)")
    columns = [col[1] for col in cursor.fetchall()]
    
    key_fields = {
        'ads_spend': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É',
        'sales': '–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
        'rating': '–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        'ads_ctr': 'CTR —Ä–µ–∫–ª–∞–º—ã',
        'unique_conversion_reach': '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
        'ads_orders': '–ó–∞–∫–∞–∑—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã',
        'store_is_closed': '–°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–∏—è',
        'stat_date': '–î–∞—Ç–∞',
        'orders': '–û–±—â–∏–µ –∑–∞–∫–∞–∑—ã',
        'ads_sales': '–ü—Ä–æ–¥–∞–∂–∏ –æ—Ç —Ä–µ–∫–ª–∞–º—ã',
        'impressions': '–ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã'
    }
    
    available_fields = []
    for field, description in key_fields.items():
        if field in columns:
            available_fields.append(field)
            print(f"‚úÖ {field} - {description}")
        else:
            print(f"‚ùå {field} - {description} (–ù–ï–¢ –î–ê–ù–ù–´–•)")
    
    # 4. –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üßÆ –†–ê–°–ß–ï–¢ –†–ï–ê–õ–¨–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
    print("=" * 50)
    
    coefficients = {}
    
    # –ê) –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ô –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢
    if 'ads_spend' in available_fields and 'sales' in available_fields:
        print("\nüìà –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –†–ï–ö–õ–ê–ú–´:")
        
        cursor.execute("""
            SELECT 
                restaurant_id,
                stat_date,
                ads_spend,
                sales,
                LAG(ads_spend) OVER (PARTITION BY restaurant_id ORDER BY stat_date) as prev_ads_spend,
                LAG(sales) OVER (PARTITION BY restaurant_id ORDER BY stat_date) as prev_sales
            FROM grab_stats 
            WHERE ads_spend IS NOT NULL AND sales IS NOT NULL
            ORDER BY restaurant_id, stat_date
        """)
        
        marketing_data = cursor.fetchall()
        marketing_changes = []
        sales_changes = []
        
        for row in marketing_data:
            if row[4] is not None and row[5] is not None and row[4] > 0 and row[5] > 0:
                marketing_change = (row[2] - row[4]) / row[4]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
                sales_change = (row[3] - row[5]) / row[5]      # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if abs(marketing_change) < 2 and abs(sales_change) < 2:
                    marketing_changes.append(marketing_change)
                    sales_changes.append(sales_change)
        
        if len(marketing_changes) > 50:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            correlation = calculate_correlation(marketing_changes, sales_changes)
            coefficients['marketing'] = correlation
            
            print(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(marketing_changes):,}")
            print(f"   üéØ –†–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {correlation:.3f}")
            print(f"   üìã –ë—ã–ª–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏: 0.500")
            print(f"   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((correlation - 0.5) / 0.5 * 100):+.1f}%")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
    
    # –ë) –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –†–ï–ô–¢–ò–ù–ì–ê
    if 'rating' in available_fields and 'sales' in available_fields:
        print("\n‚≠ê –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –†–ï–ô–¢–ò–ù–ì–ê:")
        
        cursor.execute("""
            SELECT 
                restaurant_id,
                stat_date,
                rating,
                sales,
                LAG(rating) OVER (PARTITION BY restaurant_id ORDER BY stat_date) as prev_rating,
                LAG(sales) OVER (PARTITION BY restaurant_id ORDER BY stat_date) as prev_sales
            FROM grab_stats 
            WHERE rating IS NOT NULL AND sales IS NOT NULL
            ORDER BY restaurant_id, stat_date
        """)
        
        rating_data = cursor.fetchall()
        rating_changes = []
        sales_changes = []
        
        for row in rating_data:
            if row[4] is not None and row[5] is not None and row[5] > 0:
                rating_change = row[2] - row[4]               # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                sales_change = (row[3] - row[5]) / row[5]     # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                if abs(rating_change) >= 0.01 and abs(sales_change) < 2:
                    rating_changes.append(rating_change)
                    sales_changes.append(sales_change)
        
        if len(rating_changes) > 30:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 0.1 –ø—É–Ω–∫—Ç–∞
            correlation = calculate_correlation(rating_changes, sales_changes)
            rating_coefficient = correlation * 10  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ 0.1 –ø—É–Ω–∫—Ç–∞
            coefficients['rating'] = rating_coefficient
            
            print(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(rating_changes):,}")
            print(f"   üéØ –†–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞: {rating_coefficient:.3f} (–∑–∞ 0.1‚òÖ)")
            print(f"   üìã –ë—ã–ª–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏: 0.080")
            print(f"   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((rating_coefficient - 0.08) / 0.08 * 100):+.1f}%")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    
    # –í) –ê–ù–ê–õ–ò–ó –î–ù–ï–ô –ù–ï–î–ï–õ–ò
    print("\nüìÖ –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –î–ù–ï–ô –ù–ï–î–ï–õ–ò:")
    
    cursor.execute("""
        SELECT 
            CASE CAST(strftime('%w', stat_date) AS INTEGER)
                WHEN 0 THEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                WHEN 1 THEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
                WHEN 2 THEN '–í—Ç–æ—Ä–Ω–∏–∫'
                WHEN 3 THEN '–°—Ä–µ–¥–∞'
                WHEN 4 THEN '–ß–µ—Ç–≤–µ—Ä–≥'
                WHEN 5 THEN '–ü—è—Ç–Ω–∏—Ü–∞'
                WHEN 6 THEN '–°—É–±–±–æ—Ç–∞'
            END as day_name,
            AVG(sales) as avg_sales,
            COUNT(*) as count_days
        FROM grab_stats 
        WHERE sales IS NOT NULL
        GROUP BY strftime('%w', stat_date)
        ORDER BY strftime('%w', stat_date)
    """)
    
    weekday_data = cursor.fetchall()
    if weekday_data:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        total_avg = sum(row[1] for row in weekday_data) / len(weekday_data)
        
        coefficients['weekdays'] = {}
        for day_name, avg_sales, count in weekday_data:
            impact = (avg_sales - total_avg) / total_avg
            coefficients['weekdays'][day_name] = impact
            print(f"   {day_name}: {impact:+.1%} (—Å—Ä–µ–¥–Ω–µ–µ: {avg_sales:.0f}, –¥–Ω–µ–π: {count})")
    
    # –ì) –ê–ù–ê–õ–ò–ó –ó–ê–ö–†–´–¢–ò–ô –†–ï–°–¢–û–†–ê–ù–û–í
    if 'store_is_closed' in available_fields:
        print("\nüö´ –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ó–ê–ö–†–´–¢–ò–ô:")
        
        cursor.execute("""
            SELECT 
                AVG(CASE WHEN store_is_closed = 0 THEN sales END) as open_sales,
                AVG(CASE WHEN store_is_closed = 1 THEN sales END) as closed_sales,
                COUNT(CASE WHEN store_is_closed = 0 THEN 1 END) as open_days,
                COUNT(CASE WHEN store_is_closed = 1 THEN 1 END) as closed_days
            FROM grab_stats 
            WHERE sales IS NOT NULL
        """)
        
        closure_data = cursor.fetchone()
        if closure_data[0] and closure_data[1]:
            closure_impact = (closure_data[1] - closure_data[0]) / closure_data[0]
            coefficients['closure'] = closure_impact
            
            print(f"   üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏: {closure_data[2]:,} (—Å—Ä–µ–¥–Ω–µ–µ: {closure_data[0]:.0f})")
            print(f"   üìä –ó–∞–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏: {closure_data[3]:,} (—Å—Ä–µ–¥–Ω–µ–µ: {closure_data[1]:.0f})")
            print(f"   üéØ –†–µ–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è: {closure_impact:.1%}")
            print(f"   üìã –ë—ã–ª–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏: -80%")
    
    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ JSON —Ñ–∞–π–ª
    with open('real_coefficients.json', 'w', encoding='utf-8') as f:
        json.dump(coefficients, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_coefficients.json")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\nüìã –°–í–û–î–ö–ê –†–ï–ê–õ–¨–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    for key, value in coefficients.items():
        if isinstance(value, dict):
            print(f"   {key}:")
            for subkey, subvalue in value.items():
                print(f"     {subkey}: {subvalue:.3f}")
        else:
            print(f"   {key}: {value:.3f}")
    
    conn.close()
    return coefficients

def calculate_correlation(x_values, y_values):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
    if len(x_values) != len(y_values) or len(x_values) < 2:
        return 0
    
    n = len(x_values)
    sum_x = sum(x_values)
    sum_y = sum(y_values)
    sum_xy = sum(x * y for x, y in zip(x_values, y_values))
    sum_x2 = sum(x * x for x in x_values)
    sum_y2 = sum(y * y for y in y_values)
    
    denominator = math.sqrt((n * sum_x2 - sum_x * sum_x) * (n * sum_y2 - sum_y * sum_y))
    
    if denominator == 0:
        return 0
    
    correlation = (n * sum_xy - sum_x * sum_y) / denominator
    return correlation

if __name__ == "__main__":
    try:
        coefficients = analyze_database()
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()