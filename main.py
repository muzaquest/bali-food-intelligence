"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
"""
import argparse
import logging
import sys
from datetime import datetime, timedelta
import json
import os

from model import train_sales_model, load_trained_model
from business_intelligence_system import (
    BusinessIntelligenceSystem,
    analyze_restaurant_performance,
    get_weekly_report,
    get_executive_summary,
    test_business_hypothesis
)
from data_loader import load_data_for_training, get_restaurants_list
from utils import setup_logging, validate_date, format_currency
from config import MODEL_PATH, RESULTS_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

def train_model_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    logger.info("=== –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===")
    
    try:
        predictor = train_sales_model(
            start_date=args.start_date,
            end_date=args.end_date,
            model_type=args.model_type,
            optimize_hyperparams=args.optimize,
            save_model=True
        )
        
        if predictor:
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print(f"R¬≤ score: {predictor.training_metrics.get('test_r2', 'N/A'):.4f}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {predictor.training_metrics.get('feature_count', 'N/A')}")
            return True
        else:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

def analyze_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
    logger.info(f"=== –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–î–∞—Ç–∞: {args.date}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if not validate_date(args.date):
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return False
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –±–∏–∑–Ω–µ—Å-—Å–∏—Å—Ç–µ–º—É
        result = analyze_restaurant_performance(args.restaurant, args.date)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –†–ï–°–¢–û–†–ê–ù–ê")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['analysis_date']}")
        print(f"üìä –ü–µ—Ä–∏–æ–¥: {result['period_analyzed']}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        summary = result['summary']
        print(f"\nüìà –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {summary['sales_change_percent']:+.1f}%")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥: {summary['sales_trend']}")
        print(f"  ‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['latest_period_sales'])}")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['earlier_period_sales'])}")
        print(f"  ‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {format_currency(summary['absolute_change'])}")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if result['key_factors']:
            print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(result['key_factors'], 1):
                impact_emoji = "üìà" if factor['impact'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" else "üìâ"
                print(f"  {i}. {impact_emoji} {factor['factor']}: {factor['change']}")
                print(f"     –í–ª–∏—è–Ω–∏–µ: {factor['impact']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {factor['confidence']})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ö –î–ï–ô–°–¢–í–ò–Æ:")
            for i, rec in enumerate(result['recommendations'], 1):
                priority_emoji = "üî¥" if rec['priority'] == "–í–´–°–û–ö–ò–ô" else "üü°" if rec['priority'] == "–°–†–ï–î–ù–ò–ô" else "üü¢"
                print(f"  {i}. {priority_emoji} {rec['category']}: {rec['action']}")
                print(f"     {rec['description']}")
                print(f"     –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {rec.get('expected_impact', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"     –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {rec.get('implementation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_filename = f"{args.restaurant}_{args.date}_{timestamp}.json"
        result_path = os.path.join(RESULTS_PATH, result_filename)
        
        os.makedirs(RESULTS_PATH, exist_ok=True)
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def weekly_report_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info(f"=== –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–ù–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥: {args.weeks}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result = get_weekly_report(args.restaurant, args.weeks)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üìä –ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        print(f"üìà –ù–µ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['weeks_analyzed']}")
        
        # –°–≤–æ–¥–∫–∞
        summary = result['summary']
        print(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"  ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['total_sales'])}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(summary['average_weekly_sales'])}")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {summary['average_rating']:.2f}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {summary['average_cancel_rate']:.1%}")
        
        # –¢—Ä–µ–Ω–¥—ã
        trends = result['trends']
        print(f"\nüìà –¢–†–ï–ù–î–´:")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂: {trends['trend_direction']} ({trends['sales_trend_percent']:+.1f}%)")
        print(f"  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {trends['stability']} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {trends['volatility_percent']:.1f}%)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(result['recommendations'], 1):
                priority_emoji = "üî¥" if rec['priority'] == "–í–´–°–û–ö–ò–ô" else "üü°" if rec['priority'] == "–°–†–ï–î–ù–ò–ô" else "üü¢"
                print(f"  {i}. {priority_emoji} {rec['category']}: {rec['action']}")
                print(f"     {rec['description']}")
                print(f"     –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {rec.get('implementation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_filename = f"{args.restaurant}_weekly_{timestamp}.json"
        result_path = os.path.join(RESULTS_PATH, result_filename)
        
        os.makedirs(RESULTS_PATH, exist_ok=True)
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def executive_summary_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
    logger.info(f"=== –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        result = get_executive_summary(args.restaurant)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –î–õ–Ø –†–£–ö–û–í–û–î–°–¢–í–ê")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print(f"\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
        print(f"  {result['overall_status']}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = result['key_metrics']
        print(f"\nüìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {metrics['sales_change_percent']:+.1f}%")
        print(f"  ‚Ä¢ –¢—Ä–µ–Ω–¥: {metrics['sales_trend']}")
        print(f"  ‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {format_currency(metrics['latest_period_sales'])}")
        
        # –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞
        if result['top_3_factors']:
            print(f"\nüîç –¢–û–ü-3 –§–ê–ö–¢–û–†–ê –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(result['top_3_factors'], 1):
                impact_emoji = "üìà" if factor['impact'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" else "üìâ"
                print(f"  {i}. {impact_emoji} {factor['factor']}: {factor['change']}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if result['priority_actions']:
            print(f"\nüö® –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for i, action in enumerate(result['priority_actions'], 1):
                print(f"  {i}. {action['category']}: {action['action']}")
                print(f"     {action['description']}")
                print()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def test_hypothesis_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑"""
    logger.info(f"=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã ===")
    logger.info(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {args.restaurant}")
    logger.info(f"–ì–∏–ø–æ—Ç–µ–∑–∞: {args.hypothesis}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
        result = test_business_hypothesis(args.restaurant, args.hypothesis, args.days)
        
        if "error" in result:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {result['error']}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ü–û–¢–ï–ó–´")
        print("="*80)
        print(f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant_name']}")
        print(f"üî¨ –ì–∏–ø–æ—Ç–µ–∑–∞: {result['hypothesis']}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        test_result = result['result']
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  ‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {test_result['conclusion']}")
        
        if 'improvement_percent' in test_result:
            print(f"  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ: {test_result['improvement_percent']:+.1f}%")
        
        if 'confidence' in test_result:
            print(f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_result['confidence']}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
        return False

def deep_analysis_command(args):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–∏—Å–∫–æ–º –∞–Ω–æ–º–∞–ª–∏–π –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    logger.info("=== –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ ===")
    
    try:
        from business_intelligence_system import generate_deep_analytics_report
        
        report = generate_deep_analytics_report(args.restaurant, args.start_date, args.end_date)
        
        if 'error' not in report:
            print(f"\nüîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó: {report['restaurant_name']}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {report['period']}")
            print("=" * 60)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = report['base_statistics']
            print(f"\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['total_sales']:,.0f} IDR")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {stats['avg_daily_sales']:,.0f} IDR")
            print(f"  ‚Ä¢ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {stats['total_orders']:,}")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}")
            print(f"  ‚Ä¢ –î–Ω–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['days_analyzed']}")
            
            # –ê–Ω–æ–º–∞–ª–∏–∏
            if report['anomalies']:
                print(f"\nüö® –ê–ù–û–ú–ê–õ–ò–ò –ò –û–¢–ö–õ–û–ù–ï–ù–ò–Ø (—Ç–æ–ø-5):")
                for i, anomaly in enumerate(report['anomalies'][:5], 1):
                    print(f"  {i}. {anomaly['date']} - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {anomaly['deviation']}")
                    print(f"     –ü—Ä–æ–¥–∞–∂–∏: {anomaly['sales']:,.0f} IDR")
                    if anomaly['possible_causes']:
                        print(f"     –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        for cause in anomaly['possible_causes']:
                            print(f"       ‚Ä¢ {cause}")
                    print()
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlations = report['correlations']
            print(f"\nüîó –°–ò–õ–¨–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
            
            if correlations['strong_positive']:
                print(f"  üìà –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –°–í–Ø–ó–ò:")
                for corr in correlations['strong_positive']:
                    print(f"    ‚Ä¢ {corr['interpretation']} (r={corr['correlation']:.3f})")
            
            if correlations['strong_negative']:
                print(f"  üìâ –û–ë–†–ê–¢–ù–´–ï –°–í–Ø–ó–ò:")
                for corr in correlations['strong_negative']:
                    print(f"    ‚Ä¢ {corr['interpretation']} (r={corr['correlation']:.3f})")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            if correlations['interesting_patterns']:
                print(f"\nüéØ –ò–ù–¢–ï–†–ï–°–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
                for pattern in correlations['interesting_patterns']:
                    print(f"  ‚Ä¢ {pattern['description']}")
            
            # –¢—Ä–µ–Ω–¥—ã
            trends = report['trends']
            if trends:
                print(f"\nüìà –¢–†–ï–ù–î–´ –ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
                if 'monthly' in trends:
                    monthly = trends['monthly']
                    print(f"  ‚Ä¢ –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {monthly['best_month']} ({monthly['best_sales']:,.0f} IDR)")
                    print(f"  ‚Ä¢ –•—É–¥—à–∏–π –º–µ—Å—è—Ü: {monthly['worst_month']} ({monthly['worst_sales']:,.0f} IDR)")
                
                if 'roas_trend' in trends:
                    roas_trend = trends['roas_trend']
                    print(f"  ‚Ä¢ {roas_trend['interpretation']}")
            
            print(f"\nüéâ –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –ò–ù–°–ê–ô–¢–û–í: {report['insights_count']}")
            print(f"üìÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['generated_at']}")
            
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {report['error']}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def info_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    logger.info("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ ===")
    
    try:
        if not os.path.exists(MODEL_PATH):
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"–ü—É—Ç—å: {MODEL_PATH}")
            print("–î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py train")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        predictor = load_trained_model()
        
        if predictor is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
            return False
        
        print("\n" + "="*50)
        print("ü§ñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò")
        print("="*50)
        print(f"üìä –¢–∏–ø –º–æ–¥–µ–ª–∏: {predictor.model_type}")
        print(f"üìà R¬≤ score: {predictor.training_metrics.get('test_r2', 'N/A'):.4f}")
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {predictor.training_metrics.get('feature_count', 'N/A')}")
        print(f"üìÖ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {predictor.training_metrics.get('training_date', 'N/A')}")
        print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(MODEL_PATH) / 1024 / 1024:.1f} MB")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return False

def list_restaurants_command(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    logger.info("=== –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ ===")
    
    try:
        restaurants = get_restaurants_list()
        
        if not restaurants:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            return False
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
        for restaurant in restaurants:
            print(f"  ‚Ä¢ {restaurant}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
  python main.py analyze --restaurant "Canggu Surf Cafe" --date "2023-06-15"

  # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  python main.py weekly --restaurant "Canggu Surf Cafe" --weeks 4

  # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
  python main.py summary --restaurant "Canggu Surf Cafe"

  # –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
  python main.py deep --restaurant "Ika Canggu" --start-date "2024-04-01" --end-date "2024-06-30"

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
  python main.py test --restaurant "Canggu Surf Cafe" --hypothesis "—Ä–µ–∫–ª–∞–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"

  # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
  python main.py train --model-type random_forest

  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
  python main.py info

  # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  python main.py list
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è')
    analyze_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    analyze_parser.add_argument('--date', required=True, help='–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    weekly_parser = subparsers.add_parser('weekly', help='–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    weekly_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    weekly_parser.add_argument('--weeks', type=int, default=4, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    summary_parser = subparsers.add_parser('summary', help='–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞')
    summary_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑')
    test_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    test_parser.add_argument('--hypothesis', required=True, help='–ì–∏–ø–æ—Ç–µ–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    test_parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    deep_parser = subparsers.add_parser('deep', help='–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏')
    deep_parser.add_argument('--restaurant', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    deep_parser.add_argument('--start-date', required=True, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    deep_parser.add_argument('--end-date', required=True, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    train_parser = subparsers.add_parser('train', help='–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    train_parser.add_argument('--model-type', choices=['random_forest', 'xgboost', 'linear'], 
                             default='random_forest', help='–¢–∏–ø –º–æ–¥–µ–ª–∏')
    train_parser.add_argument('--start-date', help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    train_parser.add_argument('--end-date', help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    train_parser.add_argument('--optimize', action='store_true', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    info_parser = subparsers.add_parser('info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    success = False
    
    if args.command == 'analyze':
        success = analyze_command(args)
    elif args.command == 'weekly':
        success = weekly_report_command(args)
    elif args.command == 'summary':
        success = executive_summary_command(args)
    elif args.command == 'test':
        success = test_hypothesis_command(args)
    elif args.command == 'deep':
        success = deep_analysis_command(args)
    elif args.command == 'train':
        success = train_model_command(args)
    elif args.command == 'info':
        success = info_command(args)
    elif args.command == 'list':
        success = list_restaurants_command(args)
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()