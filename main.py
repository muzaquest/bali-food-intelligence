#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô CLI –î–õ–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã: –≥–ª—É–±–æ–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤, –∞–Ω–æ–º–∞–ª–∏–∏
"""

import argparse
import sys
import sqlite3
from datetime import datetime, timedelta
from main.report_generator import generate_restaurant_report, generate_market_report
from main.advanced_analytics import run_advanced_analysis

def list_restaurants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('database.sqlite')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT restaurant_name,
                   COUNT(DISTINCT date) as days_data,
                   MIN(date) as first_date,
                   MAX(date) as last_date,
                   SUM(CASE WHEN platform = 'grab' THEN 1 ELSE 0 END) as grab_records,
                   SUM(CASE WHEN platform = 'gojek' THEN 1 ELSE 0 END) as gojek_records
            FROM restaurant_data
            GROUP BY restaurant_name
            ORDER BY restaurant_name
        ''')
        
        restaurants = cursor.fetchall()
        
        for i, (name, days, first_date, last_date, grab_records, gojek_records) in enumerate(restaurants, 1):
            print(f"{i}. üçΩÔ∏è {name}")
            if days:
                print(f"   üìä –î–∞–Ω–Ω—ã—Ö: {days} –¥–Ω–µ–π ({first_date} ‚Üí {last_date})")
                print(f"   üìà Grab: {grab_records} –∑–∞–ø–∏—Å–µ–π | Gojek: {gojek_records} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"   üìä –î–∞–Ω–Ω—ã—Ö: –Ω–µ—Ç")
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

def generate_full_report(restaurant_name: str, period_start: str = None, period_end: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    print(f"üî¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–õ–Ø: {restaurant_name.upper()}")
    print("=" * 80)
    
    try:
        report = generate_restaurant_report(restaurant_name, period_start, period_end)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/{restaurant_name.replace(' ', '_')}_{timestamp}.txt"
        
        try:
            import os
            os.makedirs('reports', exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def generate_market_overview():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"""
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–ó–û–†–ê –†–´–ù–ö–ê –†–ï–°–¢–û–†–ê–ù–û–í")
    print("=" * 50)
    
    try:
        report = generate_market_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/market_overview_{timestamp}.txt"
        
        try:
            import os
            os.makedirs('reports', exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"üíæ –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∑–æ—Ä –≤ —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")

def quick_analysis(restaurant_name: str):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    print(f"‚ö° –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}")
    print("=" * 50)
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        analysis = run_advanced_analysis(
            restaurant_name, 
            start_date.strftime('%Y-%m-%d'), 
            end_date.strftime('%Y-%m-%d')
        )
        
        if "error" in analysis:
            print(f"‚ùå {analysis['error']}")
            return
        
        stats = analysis['current_stats']
        competitive = analysis['competitive_analysis']
        insights = analysis['business_insights']
        recommendations = analysis['recommendations']
        
        print(f"üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['total_sales']:,.0f} IDR")
        print(f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['total_orders']:,}")
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}/5.0")
        print(f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {stats['avg_delivery_time']:.1f} –º–∏–Ω")
        print(f"üèÜ –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ: #{competitive.get('market_position', '–Ω/–¥')}")
        print(f"üìä –î–æ–ª—è —Ä—ã–Ω–∫–∞: {competitive.get('market_share', 0):.1f}%")
        
        if insights:
            print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
            for insight in insights[:3]:
                print(f"‚Ä¢ {insight}")
        
        if recommendations:
            print(f"\nüí° –¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(recommendations[:3], 1):
                print(f"{i}. {rec}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

def validate_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('data/database.sqlite')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['restaurants', 'restaurant_data']
        missing_tables = [t for t in required_tables if t not in tables]
        
        if missing_tables:
            checks.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
        else:
            checks.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM restaurant_data")
        data_count = cursor.fetchone()[0]
        
        if data_count > 1000:
            checks.append(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {data_count:,} –∑–∞–ø–∏—Å–µ–π")
        else:
            checks.append(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: —Ç–æ–ª—å–∫–æ {data_count:,} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        cursor.execute("SELECT MIN(date), MAX(date) FROM restaurant_data")
        date_range = cursor.fetchone()
        
        if date_range[0] and date_range[1]:
            start_date = datetime.strptime(date_range[0], '%Y-%m-%d')
            end_date = datetime.strptime(date_range[1], '%Y-%m-%d')
            days_total = (end_date - start_date).days + 1
            
            if days_total > 365:
                checks.append(f"‚úÖ –•–æ—Ä–æ—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: {days_total} –¥–Ω–µ–π ({date_range[0]} ‚Üí {date_range[1]})")
            else:
                checks.append(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {days_total} –¥–Ω–µ–π")
        
        conn.close()
        
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    try:
        from main.advanced_analytics import AdvancedRestaurantAnalytics
        checks.append("‚úÖ –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    try:
        from main.report_generator import AdvancedReportGenerator
        checks.append("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for check in checks:
        print(check)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    errors = [c for c in checks if c.startswith('‚ùå')]
    warnings = [c for c in checks if c.startswith('‚ö†Ô∏è')]
    
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(checks) - len(errors) - len(warnings)}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if errors:
        print(f"\nüö® –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        return False
    elif warnings:
        print(f"\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
        return True
    else:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê")
        return True

def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        conn = sqlite3.connect('data/database.sqlite')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM restaurants LIMIT 1")
        test_restaurant = cursor.fetchone()
        conn.close()
        
        if not test_restaurant:
            print("‚ùå –ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_restaurant = test_restaurant[0]
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: {test_restaurant}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
        return False
    
    tests_passed = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑...")
    try:
        quick_analysis(test_restaurant)
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
    try:
        analysis = run_advanced_analysis(test_restaurant)
        if "error" not in analysis:
            print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            tests_passed += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analysis['error']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (–∫—Ä–∞—Ç–∫–∏–π)
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        report = generate_restaurant_report(
            test_restaurant, 
            start_date.strftime('%Y-%m-%d'), 
            end_date.strftime('%Y-%m-%d')
        )
        
        if len(report) > 500:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            tests_passed += 1
        else:
            print("‚ùå –û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_tests - tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –§–£–ù–ö–¶–ò–ò –¢–†–ï–ë–£–Æ–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description='üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º 2.5 –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py list                                    # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  python main.py report "Ika Canggu"                     # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
  python main.py report "Ika Canggu" --start 2024-01-01 --end 2024-06-30
  python main.py quick "Prana Restaurant"                # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
  python main.py market                                  # –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
  python main.py validate                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python main.py test                                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
    )
    
    parser.add_argument('command', choices=['list', 'report', 'quick', 'market', 'validate', 'test'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('restaurant', nargs='?', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    parser.add_argument('--start', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    parser.add_argument('--end', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    args = parser.parse_args()
    
    print("üî¨ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        if args.command == 'list':
            list_restaurants()
            
        elif args.command == 'report':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                parser.print_help()
                return
            generate_full_report(args.restaurant, args.start, args.end)
            
        elif args.command == 'quick':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                parser.print_help()
                return
            quick_analysis(args.restaurant)
            
        elif args.command == 'market':
            generate_market_overview()
            
        elif args.command == 'validate':
            validate_system()
            
        elif args.command == 'test':
            test_system()
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()