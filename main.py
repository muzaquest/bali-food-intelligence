#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô CLI –î–õ–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã: –≥–ª—É–±–æ–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤, –∞–Ω–æ–º–∞–ª–∏–∏
"""

import argparse
import sys
import sqlite3
from datetime import datetime, timedelta
from main.report_generator import generate_restaurant_report, generate_market_report
from main.advanced_analytics import run_advanced_analysis

def list_restaurants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database.sqlite')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT restaurant_name,
                   COUNT(DISTINCT date) as days_data,
                   MIN(date) as first_date,
                   MAX(date) as last_date,
                   SUM(CASE WHEN platform = 'grab' THEN 1 ELSE 0 END) as grab_records,
                   SUM(CASE WHEN platform = 'gojek' THEN 1 ELSE 0 END) as gojek_records
            FROM restaurant_data
            GROUP BY restaurant_name
            ORDER BY restaurant_name
        ''')
        
        restaurants = cursor.fetchall()
        
        for i, (name, days, first_date, last_date, grab_records, gojek_records) in enumerate(restaurants, 1):
            print(f"{i}. üçΩÔ∏è {name}")
            if days:
                print(f"   üìä –î–∞–Ω–Ω—ã—Ö: {days} –¥–Ω–µ–π ({first_date} ‚Üí {last_date})")
                print(f"   üìà Grab: {grab_records} –∑–∞–ø–∏—Å–µ–π | Gojek: {gojek_records} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"   üìä –î–∞–Ω–Ω—ã—Ö: –Ω–µ—Ç")
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

def generate_unified_restaurant_report(restaurant_name: str, period_start: str = None, period_end: str = None):
    """üéØ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ü–û–õ–ù–´–ô —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç - –í–°–Å –í –û–î–ù–û–ú!"""
    
    try:
        from main.unified_restaurant_analyzer import UnifiedRestaurantAnalyzer
        
        print(f"üè™ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–°–¢–û–†–ê–ù–ê: {restaurant_name.upper()}")
        print("=" * 80)
        print("üí° –í–∫–ª—é—á–∞–µ—Ç: –∞–Ω–æ–º–∞–ª–∏–∏, –ø–æ–≥–æ–¥—É, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print()
        
        analyzer = UnifiedRestaurantAnalyzer()
        report = analyzer.generate_full_report(restaurant_name, period_start, period_end)
        
        print(report)
        analyzer.close()
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        generate_full_report(restaurant_name, period_start, period_end)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def generate_full_report(restaurant_name: str, period_start: str = None, period_end: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)"""
    print(f"üî¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–õ–Ø: {restaurant_name.upper()}")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
        try:
            from main.enhanced_report_generator import EnhancedReportGenerator
            enhanced_gen = EnhancedReportGenerator()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            start_date = period_start or '2024-01-01'
            end_date = period_end or '2025-06-30'
            
            report = enhanced_gen.generate_detailed_report(restaurant_name, start_date, end_date)
            print(report)
            
            enhanced_gen.close()
            return
            
        except ImportError as e:
            print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        report = generate_restaurant_report(restaurant_name, period_start, period_end)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/{restaurant_name.replace(' ', '_')}_{timestamp}.txt"
        
        try:
            import os
            os.makedirs('reports', exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def generate_market_overview():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ —Å –≥–ª—É–±–æ–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    print("üè¢ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê")
    print("=" * 50)
    print("üí° –í–∫–ª—é—á–∞–µ—Ç: –∞–Ω–æ–º–∞–ª–∏–∏, –ø–æ–≥–æ–¥—É, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Å–µ–≥–º–µ–Ω—Ç—ã, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–Ω–¥—ã, –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print()
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        try:
            from main.unified_market_analyzer import UnifiedMarketAnalyzer
            analyzer = UnifiedMarketAnalyzer()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç
            full_report = analyzer.generate_full_market_report(start_date, end_date)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
            print(full_report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reports/full_market_analysis_{timestamp}.txt"
            
            import os
            os.makedirs("reports", exist_ok=True)
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(full_report)
            
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
            analyzer.close()
            return
            
        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–æ–≤—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É...")
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        report = generate_market_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/market_overview_{timestamp}.txt"
        
        try:
            import os
            os.makedirs('reports', exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"üíæ –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∑–æ—Ä –≤ —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")

def quick_analysis(restaurant_name: str):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    print(f"‚ö° –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}")
    print("=" * 50)
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        analysis = run_advanced_analysis(
            restaurant_name, 
            start_date.strftime('%Y-%m-%d'), 
            end_date.strftime('%Y-%m-%d')
        )
        
        if "error" in analysis:
            print(f"‚ùå {analysis['error']}")
            return
        
        stats = analysis['current_stats']
        competitive = analysis['competitive_analysis']
        insights = analysis['business_insights']
        recommendations = analysis['recommendations']
        
        print(f"üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['total_sales']:,.0f} IDR")
        print(f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['total_orders']:,}")
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}/5.0")
        print(f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {stats['avg_delivery_time']:.1f} –º–∏–Ω")
        print(f"üèÜ –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ: #{competitive.get('market_position', '–Ω/–¥')}")
        print(f"üìä –î–æ–ª—è —Ä—ã–Ω–∫–∞: {competitive.get('market_share', 0):.1f}%")
        
        if insights:
            print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
            for insight in insights[:3]:
                print(f"‚Ä¢ {insight}")
        
        if recommendations:
            print(f"\nüí° –¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(recommendations[:3], 1):
                print(f"{i}. {rec}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

def validate_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('data/database.sqlite')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['restaurants', 'restaurant_data']
        missing_tables = [t for t in required_tables if t not in tables]
        
        if missing_tables:
            checks.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
        else:
            checks.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM restaurant_data")
        data_count = cursor.fetchone()[0]
        
        if data_count > 1000:
            checks.append(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {data_count:,} –∑–∞–ø–∏—Å–µ–π")
        else:
            checks.append(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: —Ç–æ–ª—å–∫–æ {data_count:,} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        cursor.execute("SELECT MIN(date), MAX(date) FROM restaurant_data")
        date_range = cursor.fetchone()
        
        if date_range[0] and date_range[1]:
            start_date = datetime.strptime(date_range[0], '%Y-%m-%d')
            end_date = datetime.strptime(date_range[1], '%Y-%m-%d')
            days_total = (end_date - start_date).days + 1
            
            if days_total > 365:
                checks.append(f"‚úÖ –•–æ—Ä–æ—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: {days_total} –¥–Ω–µ–π ({date_range[0]} ‚Üí {date_range[1]})")
            else:
                checks.append(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {days_total} –¥–Ω–µ–π")
        
        conn.close()
        
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    try:
        from main.advanced_analytics import AdvancedRestaurantAnalytics
        checks.append("‚úÖ –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    try:
        from main.report_generator import AdvancedReportGenerator
        checks.append("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        checks.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for check in checks:
        print(check)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    errors = [c for c in checks if c.startswith('‚ùå')]
    warnings = [c for c in checks if c.startswith('‚ö†Ô∏è')]
    
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(checks) - len(errors) - len(warnings)}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if errors:
        print(f"\nüö® –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        return False
    elif warnings:
        print(f"\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
        return True
    else:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê")
        return True

def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        conn = sqlite3.connect('data/database.sqlite')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM restaurants LIMIT 1")
        test_restaurant = cursor.fetchone()
        conn.close()
        
        if not test_restaurant:
            print("‚ùå –ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_restaurant = test_restaurant[0]
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: {test_restaurant}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
        return False
    
    tests_passed = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑...")
    try:
        quick_analysis(test_restaurant)
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
    try:
        analysis = run_advanced_analysis(test_restaurant)
        if "error" not in analysis:
            print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            tests_passed += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analysis['error']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (–∫—Ä–∞—Ç–∫–∏–π)
    total_tests += 1
    print(f"\nüß™ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        report = generate_restaurant_report(
            test_restaurant, 
            start_date.strftime('%Y-%m-%d'), 
            end_date.strftime('%Y-%m-%d')
        )
        
        if len(report) > 500:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            tests_passed += 1
        else:
            print("‚ùå –û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_tests - tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –§–£–ù–ö–¶–ò–ò –¢–†–ï–ë–£–Æ–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        return False

def update_weather_data(start_date: str = None, end_date: str = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üå§Ô∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ü–û–ì–û–î–ï –ò –ü–†–ê–ó–î–ù–ò–ö–ê–•")
    print("=" * 60)
    
    try:
        from main.weather_calendar_api import WeatherCalendarAPI
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not start_date:
            start_date = "2025-01-01"
        if not end_date:
            end_date = "2025-06-30"
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {start_date} - {end_date}")
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        weather_api = WeatherCalendarAPI()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if not weather_api.weather_api_key and not weather_api.calendar_api_key:
            print("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("üîß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤—å—Ç–µ:")
            print("   - WEATHER_API_KEY (OpenWeatherMap)")
            print("   - CALENDAR_API_KEY (Calendarific)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        updated_count = weather_api.update_database_with_real_data(start_date, end_date)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {updated_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
        print("\nüîç –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ (–ø—Ä–∏–º–µ—Ä - Ika Canggu):")
        impact = weather_api.analyze_weather_impact("Ika Canggu")
        
        if impact:
            print(f"üåßÔ∏è –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {impact.get('rain_impact_percent', 0):.1f}%")
            print(f"üå°Ô∏è –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {impact.get('temperature_impact_percent', 0):.1f}%")
            print(f"‚òÄÔ∏è –õ—É—á—à–∞—è –ø–æ–≥–æ–¥–∞: {impact.get('best_weather', 'N/A')}")
            print(f"üåßÔ∏è –•—É–¥—à–∞—è –ø–æ–≥–æ–¥–∞: {impact.get('worst_weather', 'N/A')}")
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∞–Ω–æ–º–∞–ª–∏–π!")
        
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å weather_calendar_api –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö API –∫–ª—é—á–µ–π –∏ –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    print("üîë –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê API –ö–õ–Æ–ß–ï–ô")
    print("=" * 60)
    
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    apis = {
        'WEATHER_API_KEY': os.getenv('WEATHER_API_KEY'),
        'CALENDAR_API_KEY': os.getenv('CALENDAR_API_KEY'), 
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY')
    }
    
    print("üìã –°–¢–ê–¢–£–° –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    for api_name, api_key in apis.items():
        status = "‚úÖ –ù–ê–ô–î–ï–ù" if api_key else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        masked_key = f"{api_key[:8]}...{api_key[-4:]}" if api_key else "None"
        print(f"  {api_name}: {status} ({masked_key})")
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:")
    
    # –¢–µ—Å—Ç Weather API
    try:
        from main.weather_calendar_api import WeatherCalendarAPI
        weather_api = WeatherCalendarAPI()
        
        if weather_api.weather_api_key:
            print("üå§Ô∏è  Weather API: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            weather = weather_api.get_historical_weather('2025-05-15')
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {weather['weather_condition']}, {weather['temperature_celsius']:.1f}¬∞C")
        else:
            print("üå§Ô∏è  Weather API: ‚ùå –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        if weather_api.calendar_api_key:
            print("üìÖ Calendar API: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤...")
            holidays = weather_api.get_holidays(2025)
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(holidays)} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
        else:
            print("üìÖ Calendar API: ‚ùå –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Weather/Calendar API: {e}")
    
    # –¢–µ—Å—Ç OpenAI API
    try:
        from main.openai_analytics import OpenAIAnalytics
        openai_api = OpenAIAnalytics()
        
        if openai_api.enabled:
            print("ü§ñ OpenAI API: –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤...")
            test_data = {
                'total_sales': 1000000,
                'roas': 12.5,
                'avg_rating': 4.8,
                'avg_delivery_time': 28
            }
            insights = openai_api.generate_business_insights(test_data)
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ: AI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("ü§ñ OpenAI API: ‚ùå –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API: {e}")
    
    print("\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
    
    if not apis['WEATHER_API_KEY']:
        print("üå§Ô∏è  Weather API (OpenWeatherMap):")
        print("   export WEATHER_API_KEY='your_openweathermap_key'")
        
    if not apis['CALENDAR_API_KEY']: 
        print("üìÖ Calendar API (Calendarific):")
        print("   export CALENDAR_API_KEY='your_calendarific_key'")
        
    if not apis['OPENAI_API_KEY']:
        print("ü§ñ OpenAI API:")
        print("   export OPENAI_API_KEY='your_openai_key'")
    
    print("\nüìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Å–º. WEATHER_API_SETUP.md")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    enabled_apis = sum(1 for key in apis.values() if key)
    total_apis = len(apis)
    
    print(f"\nüìä –ò–¢–û–ì–û: {enabled_apis}/{total_apis} API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    if enabled_apis == 0:
        print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö API (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏)")
    elif enabled_apis == total_apis:
        print("üéâ –í–°–ï API –ù–ê–°–¢–†–û–ï–ù–´ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞!")
    else:
        print("üîß –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ API –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description='üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º 2.5 –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üéØ –ù–û–í–´–ï –£–ü–†–û–©–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:
  python main.py restaurant "Ika Canggu"                 # üè™ –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–í–°–Å –í –û–î–ù–û–ú!)
  python main.py market                                  # üåç –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞

üìã –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  python main.py list                                    # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  python main.py report "Ika Canggu" --start 2024-01-01 # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
  python main.py quick "Prana Restaurant"                # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
  python main.py validate                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python main.py check-apis                              # –°—Ç–∞—Ç—É—Å API
        """
    )
    
    parser.add_argument('command', choices=['list', 'report', 'restaurant', 'quick', 'market', 'compare', 'intelligent', 'validate', 'test', 'update-weather', 'check-apis'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('restaurant', nargs='?', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    parser.add_argument('--start', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    parser.add_argument('--end', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    parser.add_argument('--period1-start', help='–ù–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (YYYY-MM-DD)')
    parser.add_argument('--period1-end', help='–ö–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (YYYY-MM-DD)')
    parser.add_argument('--period2-start', help='–ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (YYYY-MM-DD)')
    parser.add_argument('--period2-end', help='–ö–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (YYYY-MM-DD)')
    
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    args = parser.parse_args()
    
    print("üî¨ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        if args.command == 'list':
            list_restaurants()
            
        elif args.command == 'report':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                parser.print_help()
                return
            generate_full_report(args.restaurant, args.start, args.end)
            
        elif args.command == 'restaurant':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                parser.print_help()
                return
            generate_unified_restaurant_report(args.restaurant, args.start, args.end)
            
        elif args.command == 'quick':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                parser.print_help()
                return
            quick_analysis(args.restaurant)
            
        elif args.command == 'market':
            generate_market_overview()
            
        elif args.command == 'compare':
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            period1_start = getattr(args, 'period1_start', None)
            period1_end = getattr(args, 'period1_end', None)
            period2_start = getattr(args, 'period2_start', None)
            period2_end = getattr(args, 'period2_end', None)
            
            if not period1_start or not period1_end or not period2_start or not period2_end:
                print("‚ùå –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã:")
                print("   python3 main.py compare --period1-start YYYY-MM-DD --period1-end YYYY-MM-DD --period2-start YYYY-MM-DD --period2-end YYYY-MM-DD")
                return
            
            from main.period_comparison_analyzer import PeriodComparisonAnalyzer
            analyzer = PeriodComparisonAnalyzer()
            
            print("üî¨ –°–ò–°–¢–ï–ú–ê –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–ï–†–ò–û–î–û–í")
            print("=" * 50)
            
            report = analyzer.compare_periods(
                period1_start, period1_end,
                period2_start, period2_end
            )
            
            print(report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"reports/period_comparison_{timestamp}.txt"
            
            try:
                import os
                os.makedirs('reports', exist_ok=True)
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                print(f"üíæ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: {e}")
            
        elif args.command == 'intelligent':
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
            start_date = args.start or '2025-04-01'
            end_date = args.end or '2025-06-22'
            
            try:
                from main.intelligent_anomaly_detector import IntelligentAnomalyDetector
                
                detector = IntelligentAnomalyDetector()
                
                print("üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ê–ù–û–ú–ê–õ–ò–ô")
                print("=" * 60)
                print("üéØ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –í–°–Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫!")
                print()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                findings = detector.analyze_everything(start_date, end_date)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                report = detector.generate_intelligent_report(findings)
                print(report)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"reports/intelligent_analysis_{timestamp}.txt"
                
                try:
                    import os
                    os.makedirs('reports', exist_ok=True)
                    
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(report)
                    
                    print(f"\nüíæ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: {e}")
                    
            except ImportError:
                print("‚ùå –î–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
                print("   pip install scikit-learn scipy")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
        elif args.command == 'validate':
            validate_system()
            
        elif args.command == 'test':
            test_system()
            
        elif args.command == 'update-weather':
            update_weather_data(args.start, args.end)
            
        elif args.command == 'check-apis':
            check_api_status()
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()