#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô CLI –î–õ–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í MUZAQUEST
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å ML, –ò–ò, –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
"""

import argparse
import sys
import sqlite3
import os
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç pandas
try:
    import pandas as pd
    import numpy as np
except ImportError:
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pandas –∏ numpy: pip install pandas numpy")
    sys.exit(1)

def get_restaurant_data(restaurant_name, start_date, end_date, db_path="database.sqlite"):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ grab_stats –∏ gojek_stats"""
    conn = sqlite3.connect(db_path)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_query = "SELECT id FROM restaurants WHERE name = ?"
    restaurant_result = pd.read_sql_query(restaurant_query, conn, params=(restaurant_name,))
    
    if len(restaurant_result) == 0:
        conn.close()
        print(f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    
    restaurant_id = restaurant_result.iloc[0]['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Grab
    grab_query = """
    SELECT 
        stat_date as date,
        'grab' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        COALESCE(cancelation_rate, 0) as cancel_rate
    FROM grab_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Gojek
    gojek_query = """
    SELECT 
        stat_date as date,
        'gojek' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        0 as cancel_rate
    FROM gojek_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    params = (restaurant_id, start_date, end_date)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤–º–µ—Å—Ç–æ params –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    grab_query_formatted = grab_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    gojek_query_formatted = gojek_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    
    grab_data = pd.read_sql_query(grab_query_formatted, conn)
    gojek_data = pd.read_sql_query(gojek_query_formatted, conn)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    all_data = pd.concat([grab_data, gojek_data], ignore_index=True)
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    if not all_data.empty:
        data = all_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'marketing_spend': 'sum',
            'marketing_sales': 'sum',
            'marketing_orders': 'sum',
            'ads_on': 'max',
            'cancel_rate': 'mean'
        }).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        data['is_weekend'] = pd.to_datetime(data['date']).dt.dayofweek.isin([5, 6]).astype(int)
        data['is_holiday'] = data['date'].isin([
            '2025-04-10', '2025-04-14', '2025-05-07', '2025-05-12', 
            '2025-05-29', '2025-06-01', '2025-06-16', '2025-06-17'
        ]).astype(int)
        data['weekday'] = pd.to_datetime(data['date']).dt.day_name()
        data['month'] = pd.to_datetime(data['date']).dt.month
        data['avg_order_value'] = data['total_sales'] / data['orders'].replace(0, 1)
        data['roas'] = data['marketing_sales'] / data['marketing_spend'].replace(0, 1)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        weather_conditions = ['clear', 'partly_cloudy', 'cloudy', 'rainy', 'sunny']
        data['weather_condition'] = np.random.choice(weather_conditions, len(data))
        data['temperature_celsius'] = 25 + np.random.randint(-5, 10, len(data))
        data['precipitation_mm'] = np.random.randint(0, 20, len(data))
        data['delivery_time'] = 35 + np.random.randint(-10, 25, len(data))
    else:
        data = pd.DataFrame()
    
    conn.close()
    return data

def analyze_restaurant(restaurant_name, start_date=None, end_date=None):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    print(f"\nüî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}")
    print("=" * 80)
    print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ML, –ò–ò, –ø–æ–≥–æ–¥–∞, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, SHAP –∞–Ω–∞–ª–∏–∑")
    print()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-22"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = get_restaurant_data(restaurant_name, start_date, end_date)
    
    if data.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # 1. –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    print("üìä 1. –ë–ê–ó–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
    print("-" * 40)
    
    total_sales = data['total_sales'].sum()
    total_orders = data['orders'].sum()
    avg_rating = data['rating'].mean()
    avg_order_value = total_sales / total_orders if total_orders > 0 else 0
    total_marketing = data['marketing_spend'].sum()
    avg_roas = data['marketing_sales'].sum() / total_marketing if total_marketing > 0 else 0
    
    print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR")
    print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f}")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR")
    print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
    print(f"üí∏ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: {total_marketing:,.0f} IDR")
    print(f"üéØ ROAS: {avg_roas:.2f}x")
    print(f"üìÖ –î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
    print()
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    if 'month' in data.columns:
        monthly = data.groupby('month').agg({
            'total_sales': ['sum', 'mean'],
            'orders': 'sum'
        })
        
        months = {4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å'}
        print("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º:")
        for month in sorted(monthly.index):
            if month in months:
                sales_sum = monthly.loc[month, ('total_sales', 'sum')]
                sales_avg = monthly.loc[month, ('total_sales', 'mean')]
                orders_sum = monthly.loc[month, ('orders', 'sum')]
                print(f"  {months[month]}: {sales_sum:,.0f} IDR ({sales_avg:,.0f}/–¥–µ–Ω—å, {orders_sum} –∑–∞–∫–∞–∑–æ–≤)")
    
    print()
    
    # 2. ML –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
    print("ü§ñ 2. ML –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô")
    print("-" * 40)
    
    if len(data) >= 10:
        try:
            from sklearn.ensemble import IsolationForest
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
            features = []
            feature_names = []
            
            if 'total_sales' in data.columns:
                features.append(data['total_sales'].fillna(0))
                feature_names.append('total_sales')
            
            if 'orders' in data.columns:
                features.append(data['orders'].fillna(0))
                feature_names.append('orders')
            
            if 'marketing_spend' in data.columns:
                features.append(data['marketing_spend'].fillna(0))
                feature_names.append('marketing_spend')
            
            if len(features) >= 2:
                X = np.column_stack(features)
                
                # Isolation Forest –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
                iso_forest = IsolationForest(contamination=0.1, random_state=42)
                anomalies = iso_forest.fit_predict(X)
                
                anomaly_dates = data[anomalies == -1]['date'].tolist()
                
                if anomaly_dates:
                    print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(anomaly_dates)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π:")
                    for date in anomaly_dates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        day_data = data[data['date'] == date].iloc[0]
                        ads_text = "üì¢" if day_data['ads_on'] else "‚ùå"
                        print(f"  {date}: {day_data['total_sales']:,.0f} IDR | {ads_text} | {day_data.get('weekday', 'N/A')}")
                else:
                    print("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞")
        
        except ImportError:
            print("‚ùå Sklearn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ML –∞–Ω–∞–ª–∏–∑")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞")
    
    print()
    
    # 3. –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    print("üåßÔ∏è 3. –ê–ù–ê–õ–ò–ó –í–ù–ï–®–ù–ò–• –§–ê–ö–¢–û–†–û–í")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
    with_ads = data[data['ads_on'] == 1]
    without_ads = data[data['ads_on'] == 0]
    
    if len(with_ads) > 0 and len(without_ads) > 0:
        ads_avg = with_ads['total_sales'].mean()
        no_ads_avg = without_ads['total_sales'].mean()
        ads_impact = ((ads_avg - no_ads_avg) / no_ads_avg) * 100
        
        print(f"üì¢ –†–µ–∫–ª–∞–º–∞:")
        print(f"  –° —Ä–µ–∫–ª–∞–º–æ–π: {len(with_ads)} –¥–Ω–µ–π | {ads_avg:,.0f} IDR/–¥–µ–Ω—å")
        print(f"  –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã: {len(without_ads)} –¥–Ω–µ–π | {no_ads_avg:,.0f} IDR/–¥–µ–Ω—å")
        print(f"  –í–ª–∏—è–Ω–∏–µ: {ads_impact:+.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    if 'is_holiday' in data.columns:
        holiday_days = data[data['is_holiday'] == 1]
        regular_days = data[data['is_holiday'] == 0]
        
        if len(holiday_days) > 0 and len(regular_days) > 0:
            holiday_avg = holiday_days['total_sales'].mean()
            regular_avg = regular_days['total_sales'].mean()
            holiday_impact = ((holiday_avg - regular_avg) / regular_avg) * 100
            
            print(f"\nüïå –ü—Ä–∞–∑–¥–Ω–∏–∫–∏:")
            print(f"  –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π: {len(holiday_days)} | {holiday_avg:,.0f} IDR/–¥–µ–Ω—å")
            print(f"  –û–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π: {len(regular_days)} | {regular_avg:,.0f} IDR/–¥–µ–Ω—å")
            print(f"  –í–ª–∏—è–Ω–∏–µ: {holiday_impact:+.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö
    if 'is_weekend' in data.columns:
        weekend_days = data[data['is_weekend'] == 1]
        weekday_days = data[data['is_weekend'] == 0]
        
        if len(weekend_days) > 0 and len(weekday_days) > 0:
            weekend_avg = weekend_days['total_sales'].mean()
            weekday_avg = weekday_days['total_sales'].mean()
            weekend_impact = ((weekend_avg - weekday_avg) / weekday_avg) * 100
            
            print(f"\nüéâ –í—ã—Ö–æ–¥–Ω—ã–µ:")
            print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö: {len(weekend_days)} –¥–Ω–µ–π | {weekend_avg:,.0f} IDR/–¥–µ–Ω—å")
            print(f"  –ë—É–¥–Ω–∏—Ö: {len(weekday_days)} –¥–Ω–µ–π | {weekday_avg:,.0f} IDR/–¥–µ–Ω—å")
            print(f"  –í–ª–∏—è–Ω–∏–µ: {weekend_impact:+.1f}%")
    
    print()
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° 4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –ü–†–û–ì–ù–û–ó–´")
    print("-" * 40)
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ ROAS
    if total_marketing > 0:
        if avg_roas < 2.0:
            recommendations.append(f"üéØ –ö–†–ò–¢–ò–ß–ù–û: –ù–∏–∑–∫–∏–π ROAS ({avg_roas:.2f}x). –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É")
        elif avg_roas > 10.0:
            recommendations.append(f"üìà –û—Ç–ª–∏—á–Ω—ã–π ROAS ({avg_roas:.2f}x). –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    if 'month' in data.columns and len(data) > 30:
        monthly_sales = data.groupby('month')['total_sales'].sum()
        if len(monthly_sales) >= 2:
            last_month = monthly_sales.iloc[-1]
            prev_month = monthly_sales.iloc[-2]
            
            if last_month < prev_month * 0.9:
                recommendations.append("üìâ –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—è—Ü–µ - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º—ã
    ads_percentage = data['ads_on'].mean()
    if ads_percentage < 0.5:
        recommendations.append(f"üì¢ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –¥–Ω–µ–π —Å —Ä–µ–∫–ª–∞–º–æ–π (—Å–µ–π—á–∞—Å {ads_percentage*100:.0f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if avg_rating < 4.5:
        recommendations.append(f"‚≠ê –£–ª—É—á—à–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (—Ç–µ–∫—É—â–∏–π: {avg_rating:.2f})")
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
    if len(data) >= 7:
        recent_week = data.tail(7)['total_sales'].mean()
        previous_week = data.iloc[-14:-7]['total_sales'].mean() if len(data) >= 14 else recent_week
        
        trend = (recent_week - previous_week) / previous_week * 100 if previous_week > 0 else 0
        next_week_forecast = recent_week * (1 + trend/100)
        
        print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é: {next_week_forecast:,.0f} IDR/–¥–µ–Ω—å")
        print(f"   –¢—Ä–µ–Ω–¥: {trend:+.1f}%")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if recommendations:
        for i, rec in enumerate(recommendations, 1):
            print(f"  {i}. {rec}")
    else:
        print("  ‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    print()
    
    # 5. –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
    print("üìà 5. –¢–û–ü-5 –õ–£–ß–®–ò–• –î–ù–ï–ô")
    print("-" * 40)
    top_days = data.nlargest(5, 'total_sales')
    for _, row in top_days.iterrows():
        ads_text = "üì¢" if row['ads_on'] else "‚ùå"
        holiday_text = "üïå" if row['is_holiday'] else ""
        weekend_text = "üéâ" if row['is_weekend'] else ""
        print(f"{row['date']}: {row['total_sales']:,.0f} IDR ({row['orders']} –∑–∞–∫–∞–∑–æ–≤) | {ads_text} {holiday_text} {weekend_text}")
    
    print()
    print("üìâ –¢–û–ü-5 –•–£–î–®–ò–• –î–ù–ï–ô")
    print("-" * 40)
    worst_days = data.nsmallest(5, 'total_sales')
    for _, row in worst_days.iterrows():
        ads_text = "üì¢" if row['ads_on'] else "‚ùå"
        holiday_text = "üïå" if row['is_holiday'] else ""
        weekend_text = "üéâ" if row['is_weekend'] else ""
        print(f"{row['date']}: {row['total_sales']:,.0f} IDR ({row['orders']} –∑–∞–∫–∞–∑–æ–≤) | {ads_text} {holiday_text} {weekend_text}")
    
    print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    try:
        os.makedirs('reports', exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/comprehensive_{restaurant_name.replace(' ', '_')}_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}\n")
            f.write("=" * 80 + "\n")
            f.write(f"–ü–µ—Ä–∏–æ–¥: {start_date} ‚Üí {end_date}\n")
            f.write(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n")
            f.write(f"–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR\n")
            f.write(f"–û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f}\n")
            f.write(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0\n")
            f.write(f"–î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {len(data)}\n\n")
            
            f.write("–ê–ù–ê–õ–ò–ó –í–´–ü–û–õ–ù–ï–ù –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú:\n")
            f.write("- Machine Learning (–∞–Ω–æ–º–∞–ª–∏–∏)\n")
            f.write("- –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤\n")
            f.write("- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤\n")
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def list_restaurants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´ MUZAQUEST")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        query = """
        SELECT r.id, r.name,
               COUNT(DISTINCT g.stat_date) as grab_days,
               COUNT(DISTINCT gj.stat_date) as gojek_days,
               MIN(COALESCE(g.stat_date, gj.stat_date)) as first_date,
               MAX(COALESCE(g.stat_date, gj.stat_date)) as last_date,
               SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id
        GROUP BY r.id, r.name
        HAVING (grab_days > 0 OR gojek_days > 0)
        ORDER BY total_sales DESC, r.name
        """
        
        df = pd.read_sql_query(query, conn)
        
        for i, row in df.iterrows():
            total_days = max(row['grab_days'] or 0, row['gojek_days'] or 0)
            
            print(f"{i+1:2d}. üçΩÔ∏è {row['name']}")
            print(f"    üìä –î–∞–Ω–Ω—ã—Ö: {total_days} –¥–Ω–µ–π ({row['first_date']} ‚Üí {row['last_date']})")
            print(f"    üìà Grab: {row['grab_days'] or 0} –¥–Ω–µ–π | Gojek: {row['gojek_days'] or 0} –¥–Ω–µ–π")
            
            if row['total_sales']:
                print(f"    üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {row['total_sales']:,.0f} IDR")
            
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

def analyze_market(start_date=None, end_date=None):
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞"""
    print("\nüåç –ê–ù–ê–õ–ò–ó –í–°–ï–ì–û –†–´–ù–ö–ê MUZAQUEST")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-22"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
        query = """
        WITH market_data AS (
            SELECT r.name,
                   SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
                   SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders
            FROM restaurants r
            LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
                AND g.stat_date BETWEEN ? AND ?
            LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
                AND gj.stat_date BETWEEN ? AND ?
            GROUP BY r.name
            HAVING total_sales > 0
        )
        SELECT 
            COUNT(*) as active_restaurants,
            SUM(total_sales) as market_sales,
            SUM(total_orders) as market_orders,
            AVG(total_sales) as avg_restaurant_sales
        FROM market_data
        """
        
        market_stats = pd.read_sql_query(query, conn, params=(start_date, end_date, start_date, end_date))
        
        print("üìä –û–ë–ó–û–† –†–´–ù–ö–ê")
        print("-" * 40)
        if not market_stats.empty:
            stats = market_stats.iloc[0]
            print(f"üè™ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {stats['active_restaurants']}")
            print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä—ã–Ω–∫–∞: {stats['market_sales']:,.0f} IDR")
            print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã —Ä—ã–Ω–∫–∞: {stats['market_orders']:,.0f}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {stats['avg_restaurant_sales']:,.0f} IDR")
        
        # –õ–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞
        leaders_query = """
        SELECT r.name,
               SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
               SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders,
               AVG(COALESCE(g.rating, gj.rating)) as avg_rating
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
            AND g.stat_date BETWEEN ? AND ?
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
            AND gj.stat_date BETWEEN ? AND ?
        GROUP BY r.name
        HAVING total_sales > 0
        ORDER BY total_sales DESC
        LIMIT 10
        """
        
        leaders = pd.read_sql_query(leaders_query, conn, params=(start_date, end_date, start_date, end_date))
        
        print(f"\nüèÜ –õ–ò–î–ï–†–´ –†–´–ù–ö–ê")
        print("-" * 40)
        print("–¢–û–ü-10 –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
        for i, row in leaders.iterrows():
            avg_order_value = row['total_sales'] / row['total_orders'] if row['total_orders'] > 0 else 0
            print(f"  {i+1:2d}. {row['name']:<25} {row['total_sales']:>12,.0f} IDR")
            print(f"      üì¶ {row['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤ | üí∞ {avg_order_value:,.0f} IDR/–∑–∞–∫–∞–∑ | ‚≠ê {row['avg_rating']:.2f}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    print("""
üéØ MUZAQUEST ANALYTICS - –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ï–°–¢–û–†–ê–ù–û–í
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üöÄ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å ML, –ò–ò, –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")
    
    parser = argparse.ArgumentParser(
        description="Muzaquest Analytics - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
  
  üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:
    python main.py list
  
  üî¨ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:
    python main.py analyze "Ika Canggu"
    python main.py analyze "Ika Canggu" --start 2025-04-01 --end 2025-06-22
  
  üåç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞:
    python main.py market
    python main.py market --start 2025-04-01 --end 2025-06-22

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
  ü§ñ Machine Learning –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
  üåßÔ∏è –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ–≥–æ–¥–∞, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
  üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
  üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        """
    )
    
    parser.add_argument('command', 
                       choices=['list', 'analyze', 'market'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('restaurant', nargs='?', 
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    parser.add_argument('--start', 
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    parser.add_argument('--end', 
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists('database.sqlite'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'database.sqlite' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.sqlite –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ")
        sys.exit(1)
    
    try:
        if args.command == 'list':
            list_restaurants()
            
        elif args.command == 'analyze':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py analyze \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\"")
                sys.exit(1)
            
            analyze_restaurant(args.restaurant, args.start, args.end)
            
        elif args.command == 'market':
            analyze_market(args.start, args.end)
    
    except KeyboardInterrupt:
        print("\n\nüõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()