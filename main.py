#!/usr/bin/env python3
"""
üéØ –ü–û–õ–ù–´–ô CLI –î–õ–Ø MUZAQUEST ANALYTICS - –ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ + –í–°–ï API
–ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 30+ –ø–æ–ª–µ–π –∏–∑ grab_stats –∏ gojek_stats + OpenAI + Weather + Calendar API
"""

import argparse
import sys
import sqlite3
import os
import json
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')
from weather_intelligence import analyze_weather_impact_for_report, get_weather_intelligence

# API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
try:
    from platform_breakdown_functions import (
        generate_platform_breakdown,
        generate_roas_breakdown, 
        generate_data_limitations,
        generate_methodology_note,
        add_platform_indicators,
        generate_comparison_context
    )
    # –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    pass
except ImportError as e:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ fallback
    def generate_roas_breakdown(grab_sales, grab_spend, gojek_sales, gojek_spend):
        return f"ROAS: GRAB {grab_sales/grab_spend:.2f}x, GOJEK {gojek_sales/gojek_spend:.2f}x"
    def generate_data_limitations():
        return "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: —Å–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from color_coding_system import (
        generate_colored_roas_breakdown,
        generate_colored_limitations,
        generate_colored_benchmark_comparison,
        add_platform_color_indicators,
        supports_color
    )
    USE_COLORS = supports_color()
except ImportError as e:
    USE_COLORS = False

try:
    import pandas as pd
    import numpy as np
except ImportError:
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pandas –∏ numpy: pip install pandas numpy")
    sys.exit(1)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è API
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ML –º–æ–¥—É–ª—è
try:
    from ml_models import analyze_restaurant_with_ml, RestaurantMLAnalyzer
    ML_MODULE_AVAILABLE = True
except ImportError:
    ML_MODULE_AVAILABLE = False
    print("‚ö†Ô∏è ML –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install scikit-learn prophet")

class WeatherAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Open-Meteo API (–ë–ï–°–ü–õ–ê–¢–ù–´–ô!)"""
    
    def __init__(self):
        # Open-Meteo –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞!
        self.base_url = "https://archive-api.open-meteo.com/v1/archive"
        self.current_url = "https://api.open-meteo.com/v1/forecast"
        
    def get_weather_data(self, date, lat=-8.4095, lon=115.1889):
        """–ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ Open-Meteo –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        try:
            # Open-Meteo Historical Weather API
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'temperature_2m,relative_humidity_2m,precipitation,weather_code,cloud_cover',
                'timezone': 'Asia/Jakarta'  # –ë–∞–ª–∏
            }
            
            response = requests.get(self.base_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                
                if hourly and len(hourly.get('time', [])) > 0:
                    # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å
                    temps = hourly.get('temperature_2m', [28])
                    humidity = hourly.get('relative_humidity_2m', [75])
                    precipitation = hourly.get('precipitation', [0])
                    weather_codes = hourly.get('weather_code', [0])
                    
                    avg_temp = sum(temps) / len(temps) if temps else 28
                    avg_humidity = sum(humidity) / len(humidity) if humidity else 75
                    total_rain = sum(precipitation) if precipitation else 0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ WMO –∫–æ–¥—É
                    main_weather_code = max(set(weather_codes), key=weather_codes.count) if weather_codes else 0
                    condition = self._weather_code_to_condition(main_weather_code)
                    
                    return {
                        'temperature': avg_temp,
                        'humidity': avg_humidity,
                        'condition': condition,
                        'rain': total_rain,
                        'source': 'Open-Meteo (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'
                    }
            
            # Fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            return self._simulate_weather(date)
                
        except Exception as e:
            # –¢–∏—Ö–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            return self._simulate_weather(date)
    
    def _weather_code_to_condition(self, code):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WMO –∫–æ–¥ –ø–æ–≥–æ–¥—ã –≤ —á–∏—Ç–∞–µ–º–æ–µ —É—Å–ª–æ–≤–∏–µ"""
        # WMO Weather interpretation codes
        if code == 0:
            return 'Clear'
        elif code in [1, 2, 3]:
            return 'Clouds'
        elif code in [45, 48]:
            return 'Fog'
        elif code in [51, 53, 55, 56, 57]:
            return 'Drizzle'
        elif code in [61, 63, 65, 66, 67]:
            return 'Rain'
        elif code in [71, 73, 75, 77, 85, 86]:
            return 'Snow'
        elif code in [80, 81, 82]:
            return 'Rain'  # Showers
        elif code in [95, 96, 99]:
            return 'Thunderstorm'
        else:
            return 'Clear'
    
    def _simulate_weather(self, date):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"""
        import random
        random.seed(hash(date))
        
        conditions = ['Clear', 'Rain', 'Clouds', 'Thunderstorm']
        weights = [0.6, 0.2, 0.15, 0.05]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ë–∞–ª–∏
        
        condition = random.choices(conditions, weights=weights)[0]
        rain = random.uniform(0, 10) if condition in ['Rain', 'Thunderstorm'] else 0
        
        return {
            'temperature': random.uniform(24, 32),
            'humidity': random.uniform(65, 85),
            'condition': condition,
            'rain': rain,
            'source': '–°–∏–º—É–ª—è—Ü–∏—è (Open-Meteo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
        }

class CalendarAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Calendarific API"""
    
    def __init__(self):
        self.api_key = os.getenv('CALENDAR_API_KEY')
        self.base_url = "https://calendarific.com/api/v2"
        
    def get_holidays(self, year, country='ID'):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –≥–æ–¥"""
        if not self.api_key:
            return self._get_indonesia_holidays(year)
            
        try:
            url = f"{self.base_url}/holidays"
            params = {
                'api_key': self.api_key,
                'country': country,
                'year': year,
                'type': 'national,religious,observance'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                holidays = []
                
                for holiday in data.get('response', {}).get('holidays', []):
                    holidays.append({
                        'date': holiday['date']['iso'],
                        'name': holiday['name'],
                        'type': holiday['type'][0] if holiday['type'] else 'national'
                    })
                
                return holidays
            else:
                return self._get_indonesia_holidays(year)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Calendar API error: {e}")
            return self._get_indonesia_holidays(year)
    
    def _get_indonesia_holidays(self, year):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–ª–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏"""
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É holidays –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        try:
            import holidays
            indonesia_holidays = holidays.Indonesia(years=year)
            base_holidays = {str(date): name for date, name in indonesia_holidays.items()}
        except ImportError:
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            base_holidays = {
                f"{year}-01-01": "New Year's Day",
                f"{year}-01-27": "Isra and Miraj", 
                f"{year}-01-29": "Chinese New Year",
                f"{year}-03-29": "Nyepi (Day of Silence)",
                f"{year}-03-31": "Eid al-Fitr",
                f"{year}-04-01": "Eid al-Fitr Holiday",
                f"{year}-04-18": "Good Friday",
                f"{year}-05-01": "Labor Day",
                f"{year}-05-12": "Vesak Day",
                f"{year}-05-29": "Ascension Day",
                f"{year}-06-01": "Pancasila Day",
                f"{year}-06-06": "Eid al-Adha",
                f"{year}-08-17": "Independence Day",
                f"{year}-12-25": "Christmas Day"
            }
        
        # –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –ë–ê–õ–ò–ô–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò
        balinese_holidays = {
            # –ü–æ–ª–Ω–æ–ª—É–Ω–∏—è (Purnama) - –≤–∞–∂–Ω—ã–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –¥–Ω–∏
            f"{year}-01-15": "Purnama Kapat (Full Moon)",
            f"{year}-02-14": "Purnama Kalima (Full Moon)",
            f"{year}-03-16": "Purnama Kaenam (Full Moon)",
            f"{year}-04-13": "Purnama Kapitu (Full Moon)",
            f"{year}-04-30": "Purnama Kawolu (Full Moon)",
            f"{year}-05-12": "Purnama Kasanga (Full Moon)",
            f"{year}-06-11": "Purnama Kadasa (Full Moon)",
            
            # –ù–æ–≤–æ–ª—É–Ω–∏—è (Tilem) - –¥–Ω–∏ –æ—á–∏—â–µ–Ω–∏—è
            f"{year}-01-08": "Tilem (New Moon)",
            f"{year}-02-06": "Tilem (New Moon)", 
            f"{year}-03-08": "Tilem (New Moon)",
            f"{year}-04-06": "Tilem (New Moon)",
            f"{year}-05-05": "Tilem (New Moon)",
            f"{year}-06-04": "Tilem (New Moon)",
            
            # Galungan –∏ Kuningan —Ü–∏–∫–ª—ã (–∫–∞–∂–¥—ã–µ 210 –¥–Ω–µ–π)
            f"{year}-04-16": "Galungan",
            f"{year}-04-26": "Kuningan",
            
            # –û–¥–∞–ª–∞–Ω—ã (—Ö—Ä–∞–º–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏) - –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
            f"{year}-04-03": "Odalan Temple Festival",
            f"{year}-04-10": "Odalan Temple Festival",
            f"{year}-04-17": "Odalan Temple Festival",
            f"{year}-04-24": "Odalan Temple Festival",
            f"{year}-05-08": "Odalan Temple Festival",
            f"{year}-05-15": "Odalan Temple Festival",
            f"{year}-05-22": "Odalan Temple Festival",
            f"{year}-06-05": "Odalan Temple Festival",
            f"{year}-06-12": "Odalan Temple Festival",
            f"{year}-06-19": "Odalan Temple Festival",
            f"{year}-06-26": "Odalan Temple Festival",
            
            # –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –±–∞–ª–∏–π—Å–∫–∏–µ –¥–Ω–∏
            f"{year}-04-05": "Rambut Sedana",
            f"{year}-04-12": "Pagerwesi", 
            f"{year}-05-03": "Soma Ribek",
            f"{year}-05-17": "Banyu Pinaruh",
            f"{year}-06-07": "Saraswati Day",
            f"{year}-06-14": "Siwaratri",
            f"{year}-06-21": "Tumpek Landep"
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        all_holidays = {**base_holidays, **balinese_holidays}
        
        return [{'date': date, 'name': name, 'type': 'balinese' if date in balinese_holidays else 'national'} 
                for date, name in all_holidays.items()]

class OpenAIAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        if self.api_key and OPENAI_AVAILABLE:
            self.client = openai.OpenAI(api_key=self.api_key)
        else:
            self.client = None
            
    def generate_insights(self, restaurant_data, weather_data=None, holiday_data=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é GPT"""
        if not self.client:
            return self._generate_basic_insights(restaurant_data)
            
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._prepare_analysis_prompt(restaurant_data, weather_data, holiday_data)
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            print(f"‚ö†Ô∏è OpenAI API error: {e}")
            return self._generate_basic_insights(restaurant_data)
    
    def _prepare_analysis_prompt(self, data, weather_data, holiday_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        total_sales = data['total_sales'].sum()
        total_orders = data['orders'].sum()
        avg_rating = data['rating'].mean()
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        
        –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
        - –ü—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR
        - –ó–∞–∫–∞–∑—ã: {total_orders:,.0f}
        - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0
        - –î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö: {len(data)}
        
        –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:
        {self._get_detailed_metrics(data)}
        
        –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
        1. –ü—Ä–æ–¥–∞–∂ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
        2. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
        3. –ö–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        4. –†–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        
        –§–æ—Ä–º–∞—Ç: —á–µ—Ç–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
        """
        
        return prompt
    
    def _get_detailed_metrics(self, data):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        metrics = []
        
        if 'marketing_spend' in data.columns:
            total_marketing = data['marketing_spend'].sum()
            roas = data['marketing_sales'].sum() / total_marketing if total_marketing > 0 else 0
            metrics.append(f"- ROAS: {roas:.2f}x")
            
        if 'total_customers' in data.columns:
            total_customers = data['total_customers'].sum()
            new_customers = data['new_customers'].sum()
            metrics.append(f"- –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_customers}/{total_customers} ({(new_customers/total_customers*100):.1f}%)")
            
        if 'cancelled_orders' in data.columns:
            cancelled = data['cancelled_orders'].sum()
            total_orders = data['orders'].sum()
            cancel_rate = cancelled / (total_orders + cancelled) * 100 if (total_orders + cancelled) > 0 else 0
            metrics.append(f"- –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {cancel_rate:.1f}%")
            
        return '\n'.join(metrics)
    
    def _generate_basic_insights(self, data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã –±–µ–∑ OpenAI"""
        
        insights = []
        insights.append("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ë–ò–ó–ù–ï–°-–ê–ù–ê–õ–ò–ó –ò –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´")
        insights.append("=" * 80)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_sales = data['total_sales'].sum()
        total_orders = data['orders'].sum()
        avg_daily_sales = total_sales / len(data) if len(data) > 0 else 0
        avg_order_value = total_sales / total_orders if total_orders > 0 else 0
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å (–¥–Ω–µ–≤–Ω—ã–µ, –∞ –Ω–µ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ)
        daily_new_customers = data['new_customers'].sum()
        daily_repeat_customers = data['repeated_customers'].sum()
        daily_reactive_customers = data['reactivated_customers'].sum()
        total_daily_customers = daily_new_customers + daily_repeat_customers + daily_reactive_customers
        avg_customers_per_day = total_daily_customers / len(data) if len(data) > 0 else 0
        
        insights.append(f"üìä –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
        insights.append(f"   ‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {avg_daily_sales:,.0f} IDR")
        insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR")
        insights.append(f"   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å: {avg_customers_per_day:.1f}")
        insights.append(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {(total_orders/len(data)):.1f}")
        insights.append(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {(total_orders/total_daily_customers):.1f}" if total_daily_customers > 0 else "   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: N/A")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (–¥–µ—Ç–∞–ª—å–Ω—ã–π)
        if len(data) >= 30:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–µ—Ç—å –ø–µ—Ä–∏–æ–¥–∞
            period_length = len(data) // 3
            first_period = data.head(period_length)['total_sales'].mean()
            last_period = data.tail(period_length)['total_sales'].mean()
            trend = ((last_period - first_period) / first_period * 100) if first_period > 0 else 0
            
            insights.append(f"\nüîÑ –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:")
            if trend > 15:
                insights.append(f"   üìà –ü–†–ï–í–û–°–•–û–î–ù–û: –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ {trend:.1f}%")
                insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏")
                insights.append(f"   üéØ –£–≤–µ–ª–∏—á—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ 20-30%")
            elif trend > 5:
                insights.append(f"   üìà –•–û–†–û–®–û: –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ {trend:.1f}%")
                insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∏–Ω–∞–º–∏–∫—É")
            elif trend > -5:
                insights.append(f"   ‚û°Ô∏è –°–¢–ê–ë–ò–õ–¨–ù–û: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {trend:+.1f}%")
                insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ò—â–∏—Ç–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞")
            elif trend > -15:
                insights.append(f"   üìâ –í–ù–ò–ú–ê–ù–ò–ï: –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {abs(trend):.1f}%")
                insights.append(f"   ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
            else:
                insights.append(f"   üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ {abs(trend):.1f}%")
                insights.append(f"   üî• –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°—Ä–æ—á–Ω–∞—è –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        total_marketing = data['marketing_spend'].sum()
        marketing_sales = data['marketing_sales'].sum()
        roas = marketing_sales / total_marketing if total_marketing > 0 else 0
        
        insights.append(f"\nüí∏ –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
        insights.append(f"   ‚Ä¢ –ë—é–¥–∂–µ—Ç: {total_marketing:,.0f} IDR")
        insights.append(f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã: {marketing_sales:,.0f} IDR")
        insights.append(f"   ‚Ä¢ ROAS: {roas:.2f}x")
        
        if roas > 10:
            insights.append(f"   üèÜ –û–¢–õ–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π ROAS")
            insights.append(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –≤ 2-3 —Ä–∞–∑–∞")
            insights.append(f"   üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã—Å–æ–∫–∏–π")
        elif roas > 5:
            insights.append(f"   ‚úÖ –•–û–†–û–®–û: –í—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞")
            insights.append(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç")
        elif roas > 3:
            insights.append(f"   ‚ö†Ô∏è –°–†–ï–î–ù–ï: –ü—Ä–∏–µ–º–ª–µ–º–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            insights.append(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥")
        elif roas > 1:
            insights.append(f"   üö® –ù–ò–ó–ö–û: –†–µ–∫–ª–∞–º–∞ –µ–¥–≤–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è")
            insights.append(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        else:
            insights.append(f"   ‚ùå –£–ë–´–¢–û–ö: –†–µ–∫–ª–∞–º–∞ –Ω–µ –æ–∫—É–ø–∞–µ—Ç—Å—è")
            insights.append(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
        if 'new_customers' in data.columns:
            new_customers = data['new_customers'].sum()
            repeated_customers = data['repeated_customers'].sum()
            total_customers = data['total_customers'].sum()
            
            if total_customers > 0:
                new_rate = (new_customers / total_customers) * 100
                repeat_rate = (repeated_customers / total_customers) * 100
                
                insights.append(f"\nüë• –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ë–ê–ó–ê:")
                insights.append(f"   ‚Ä¢ –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_rate:.1f}%")
                insights.append(f"   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {repeat_rate:.1f}%")
                
                if repeat_rate > 60:
                    insights.append(f"   üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û: –í—ã—Å–æ–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
                    insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –†–∞–∑–≤–∏–≤–∞–π—Ç–µ VIP-–ø—Ä–æ–≥—Ä–∞–º–º—ã")
                elif repeat_rate > 40:
                    insights.append(f"   ‚úÖ –•–û–†–û–®–û: –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å")
                    insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å–æ–≤")
                else:
                    insights.append(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å ({repeat_rate:.1f}%)")
                    insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
                
                if new_rate < 25:
                    insights.append(f"   üö® –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ({new_rate:.1f}%)")
                    insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è")
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        days_with_closure_cancellations = data['store_is_closed'].sum()
        out_of_stock_days = data['out_of_stock'].sum()
        cancelled_orders = data['cancelled_orders'].sum()
        
        insights.append(f"\n‚öôÔ∏è –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        insights.append(f"   ‚Ä¢ –î–Ω–µ–π —Å –æ—Ç–º–µ–Ω–∞–º–∏ '–∑–∞–∫—Ä—ã—Ç–æ': {days_with_closure_cancellations}")
        insights.append(f"   ‚Ä¢ –î–Ω–µ–π –±–µ–∑ —Ç–æ–≤–∞—Ä–∞: {out_of_stock_days}")
        insights.append(f"   ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {cancelled_orders}")
        
        operational_issues = days_with_closure_cancellations + out_of_stock_days
        if operational_issues > len(data) * 0.1:
            insights.append(f"   üö® –ö–†–ò–¢–ò–ß–ù–û: –ú–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
            insights.append(f"   üí° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ù–∞–ª–∞–¥–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É")
        elif operational_issues > 0:
            insights.append(f"   ‚ö†Ô∏è –ï—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            insights.append(f"   üí° –£–ª—É—á—à–∏—Ç—å: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
        else:
            insights.append(f"   ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        if 'rating' in data.columns:
            avg_rating = data['rating'].mean()
            insights.append(f"\n‚≠ê –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø:")
            insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
            
            if avg_rating >= 4.7:
                insights.append(f"   üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û: –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ")
            elif avg_rating >= 4.5:
                insights.append(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û: –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
            elif avg_rating >= 4.0:
                insights.append(f"   ‚ö†Ô∏è –•–û–†–û–®–û: –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
                insights.append(f"   üí° –¶–µ–ª—å: –î–æ–≤–µ—Å—Ç–∏ –¥–æ 4.5+")
            else:
                insights.append(f"   üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                insights.append(f"   üí° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –°—Ä–æ—á–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        if 'one_star_ratings' in data.columns:
            total_ratings = (data['one_star_ratings'].sum() + data['two_star_ratings'].sum() + 
                            data['three_star_ratings'].sum() + data['four_star_ratings'].sum() + 
                            data['five_star_ratings'].sum())
            
            if total_ratings > 0:
                one_star_rate = (data['one_star_ratings'].sum() / total_ratings) * 100
                five_star_rate = (data['five_star_ratings'].sum() / total_ratings) * 100
                
                insights.append(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–û–í:")
                insights.append(f"   ‚Ä¢ 5 –∑–≤–µ–∑–¥: {five_star_rate:.1f}%")
                insights.append(f"   ‚Ä¢ 1 –∑–≤–µ–∑–¥–∞: {one_star_rate:.1f}%")
                
                if one_star_rate > 10:
                    insights.append(f"   üö® –ö–†–ò–¢–ò–ß–ù–û: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                    insights.append(f"   üí° –°—Ä–æ—á–Ω–æ: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
                elif one_star_rate > 5:
                    insights.append(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞")
                    insights.append(f"   üí° –î–µ–π—Å—Ç–≤–∏–µ: –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏")
                
                if five_star_rate > 80:
                    insights.append(f"   üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ")
                    insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–∑—ã–≤—ã –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ")
                
                # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫
                bad_ratings = (data['four_star_ratings'].sum() + data['three_star_ratings'].sum() + 
                              data['two_star_ratings'].sum() + data['one_star_ratings'].sum())
                total_orders = data['orders'].sum()
                
                if bad_ratings > 0 and total_orders > 0:
                    orders_per_bad_rating = total_orders / bad_ratings
                    insights.append(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫: –∫–∞–∂–¥—ã–π {orders_per_bad_rating:.0f}-–π –∑–∞–∫–∞–∑")
                    
                    if orders_per_bad_rating >= 20:
                        insights.append(f"   üü¢ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏")
                    elif orders_per_bad_rating >= 10:
                        insights.append(f"   üü° –ù–û–†–ú–ê: –£–º–µ—Ä–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫")
                    elif orders_per_bad_rating >= 5:
                        insights.append(f"   üü† –í–ù–ò–ú–ê–ù–ò–ï: –ß–∞—Å—Ç—ã–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏ - –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è")
                    else:
                        insights.append(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏ - —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã!")
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –±–µ–Ω—á–º–∞—Ä–∫–∏
        insights.append(f"\nüéØ –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –ë–ï–ù–ß–ú–ê–†–ö–ò:")
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        if avg_order_value > 450000:
            insights.append(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –í–´–®–ï —Ä—ã–Ω–∫–∞ (+28%)")
            insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü—Ä–µ–º–∏—É–º-–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        elif avg_order_value > 350000:
            insights.append(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤ –Ω–æ—Ä–º–µ")
            insights.append(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: Upsell –∏ cross-sell")
        else:
            insights.append(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ù–ò–ñ–ï —Ä—ã–Ω–∫–∞")
            insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–æ–≤—ã—Å–∏—Ç—å value proposition")
        
        # ROAS –±–µ–Ω—á–º–∞—Ä–∫
        if roas > 8:
            insights.append(f"   üéØ ROAS –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –í–´–®–ï —Ä—ã–Ω–∫–∞")
        elif roas > 4:
            insights.append(f"   üéØ ROAS –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ")
        elif roas > 2:
            insights.append(f"   üéØ ROAS –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        else:
            insights.append(f"   üéØ ROAS –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        insights.append(f"\nüöÄ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–´:")
        
        priorities = []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if operational_issues > len(data) * 0.1:
            priorities.append("üî• #1 –ö–†–ò–¢–ò–ß–ù–û: –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É")
        elif avg_rating < 4.0:
            priorities.append("üî• #1 –ö–†–ò–¢–ò–ß–ù–û: –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞")
        elif roas < 2:
            priorities.append("üî• #1 –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –í–∞–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        if 'repeat_rate' in locals() and repeat_rate < 40:
            priorities.append("‚ö†Ô∏è #2 –í–ê–ñ–ù–û: –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
        elif avg_order_value < 300000:
            priorities.append("‚ö†Ô∏è #2 –í–ê–ñ–ù–û: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞")
        elif 'one_star_rate' in locals() and one_star_rate > 5:
            priorities.append("‚ö†Ô∏è #2 –í–ê–ñ–ù–û: –†–∞–±–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
        if roas > 5:
            priorities.append("üìà #3 –†–û–°–¢: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã")
        if avg_rating > 4.5:
            priorities.append("üìà #3 –†–û–°–¢: –ü—Ä–µ–º–∏—É–º-–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if 'trend' in locals() and trend > 10:
            priorities.append("üìà #3 –†–û–°–¢: –£—Å–∫–æ—Ä–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not priorities:
            priorities.append("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ")
            priorities.append("üìà –§–æ–∫—É—Å –Ω–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º —Ä–æ—Å—Ç–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        for priority in priorities[:5]:  # –¢–æ–ø-5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            insights.append(f"   {priority}")
        
        # –ß–∏—Å–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
        insights.append(f"\nüéØ –¶–ï–õ–ò –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –ü–ï–†–ò–û–î:")
        insights.append(f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {(total_sales * 1.15):,.0f} IDR (+15%)")
        insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(avg_order_value * 1.1):,.0f} IDR (+10%)")
        if 'repeat_rate' in locals():
            insights.append(f"   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {min(repeat_rate + 10, 70):.0f}% (+10–ø.–ø.)")
        insights.append(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {min(avg_rating + 0.2, 5.0):.1f}/5.0")
        if roas > 2:
            insights.append(f"   ‚Ä¢ ROAS: {(roas * 1.1):.1f}x (+10%)")
        
        return '\n'.join(insights)

def get_restaurant_data_full(restaurant_name, start_date, end_date, db_path="database.sqlite"):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ grab_stats –∏ gojek_stats"""
    conn = sqlite3.connect(db_path)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_query = "SELECT id FROM restaurants WHERE name = ?"
    restaurant_result = pd.read_sql_query(restaurant_query, conn, params=(restaurant_name,))
    
    if len(restaurant_result) == 0:
        conn.close()
        print(f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    
    restaurant_id = restaurant_result.iloc[0]['id']
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è Grab (–í–°–ï –ø–æ–ª—è)
    grab_query = """
    SELECT 
        stat_date as date,
        'grab' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        COALESCE(cancelation_rate, 0) as cancel_rate,
        COALESCE(offline_rate, 0) as offline_rate,
        COALESCE(cancelled_orders, 0) as cancelled_orders,
        COALESCE(store_is_closed, 0) as store_is_closed,
        COALESCE(store_is_busy, 0) as store_is_busy,
        COALESCE(store_is_closing_soon, 0) as store_is_closing_soon,
        COALESCE(out_of_stock, 0) as out_of_stock,
        COALESCE(ads_ctr, 0) as ads_ctr,
        COALESCE(impressions, 0) as impressions,
        COALESCE(unique_impressions_reach, 0) as unique_impressions_reach,
        COALESCE(unique_menu_visits, 0) as unique_menu_visits,
        COALESCE(unique_add_to_carts, 0) as unique_add_to_carts,
        COALESCE(unique_conversion_reach, 0) as unique_conversion_reach,
        COALESCE(new_customers, 0) as new_customers,
        COALESCE(earned_new_customers, 0) as earned_new_customers,
        COALESCE(repeated_customers, 0) as repeated_customers,
        COALESCE(earned_repeated_customers, 0) as earned_repeated_customers,
        COALESCE(reactivated_customers, 0) as reactivated_customers,
        COALESCE(earned_reactivated_customers, 0) as earned_reactivated_customers,
        COALESCE(total_customers, 0) as total_customers,
        COALESCE(payouts, 0) as payouts,
        NULL as accepting_time,
        NULL as preparation_time,
        NULL as delivery_time,
        NULL as lost_orders,
        NULL as realized_orders_percentage,
        NULL as one_star_ratings,
        NULL as two_star_ratings,
        NULL as three_star_ratings,
        NULL as four_star_ratings,
        NULL as five_star_ratings
    FROM grab_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è Gojek (–í–°–ï –ø–æ–ª—è)
    gojek_query = """
    SELECT 
        stat_date as date,
        'gojek' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        0 as cancel_rate,
        0 as offline_rate,
        COALESCE(cancelled_orders, 0) as cancelled_orders,
        COALESCE(store_is_closed, 0) as store_is_closed,
        COALESCE(store_is_busy, 0) as store_is_busy,
        0 as store_is_closing_soon,
        COALESCE(out_of_stock, 0) as out_of_stock,
        0 as ads_ctr,
        0 as impressions,
        0 as unique_impressions_reach,
        0 as unique_menu_visits,
        0 as unique_add_to_carts,
        0 as unique_conversion_reach,
        COALESCE(new_client, 0) as new_customers,
        0 as earned_new_customers,
        COALESCE(active_client, 0) as repeated_customers,
        0 as earned_repeated_customers,
        COALESCE(returned_client, 0) as reactivated_customers,
        0 as earned_reactivated_customers,
        COALESCE(new_client + active_client + returned_client, 0) as total_customers,
        COALESCE(payouts, 0) as payouts,
        accepting_time,
        preparation_time,
        delivery_time,
        COALESCE(lost_orders, 0) as lost_orders,
        COALESCE(realized_orders_percentage, 0) as realized_orders_percentage,
        COALESCE(one_star_ratings, 0) as one_star_ratings,
        COALESCE(two_star_ratings, 0) as two_star_ratings,
        COALESCE(three_star_ratings, 0) as three_star_ratings,
        COALESCE(four_star_ratings, 0) as four_star_ratings,
        COALESCE(five_star_ratings, 0) as five_star_ratings
    FROM gojek_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É
    grab_query_formatted = grab_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    gojek_query_formatted = gojek_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    
    grab_data = pd.read_sql_query(grab_query_formatted, conn)
    gojek_data = pd.read_sql_query(gojek_query_formatted, conn)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    all_data = pd.concat([grab_data, gojek_data], ignore_index=True)
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º —Å —É—á–µ—Ç–æ–º –í–°–ï–• –ø–æ–ª–µ–π
    if not all_data.empty:
        data = all_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'marketing_spend': 'sum',
            'marketing_sales': 'sum',
            'marketing_orders': 'sum',
            'ads_on': 'max',
            'cancel_rate': 'mean',
            'offline_rate': 'mean',
            'cancelled_orders': 'sum',
            'store_is_closed': 'max',
            'store_is_busy': 'max',
            'store_is_closing_soon': 'max',
            'out_of_stock': 'max',
            'ads_ctr': 'mean',
            'impressions': 'sum',
            'unique_impressions_reach': 'sum',
            'unique_menu_visits': 'sum',
            'unique_add_to_carts': 'sum',
            'unique_conversion_reach': 'sum',
            'new_customers': 'sum',
            'earned_new_customers': 'sum',
            'repeated_customers': 'sum',
            'earned_repeated_customers': 'sum',
            'reactivated_customers': 'sum',
            'earned_reactivated_customers': 'sum',
            'total_customers': 'sum',
            'payouts': 'sum',
            'lost_orders': 'sum',
            'realized_orders_percentage': 'mean',
            'one_star_ratings': 'sum',
            'two_star_ratings': 'sum',
            'three_star_ratings': 'sum',
            'four_star_ratings': 'sum',
            'five_star_ratings': 'sum'
        }).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        data['is_weekend'] = pd.to_datetime(data['date']).dt.dayofweek.isin([5, 6]).astype(int)
        data['is_holiday'] = data['date'].isin([
            '2025-04-10', '2025-04-14', '2025-05-07', '2025-05-12', 
            '2025-05-29', '2025-06-01', '2025-06-16', '2025-06-17'
        ]).astype(int)
        data['weekday'] = pd.to_datetime(data['date']).dt.day_name()
        data['month'] = pd.to_datetime(data['date']).dt.month
        data['avg_order_value'] = data['total_sales'] / data['orders'].replace(0, 1)
        data['roas'] = data['marketing_sales'] / data['marketing_spend'].replace(0, 1)
        
        # –ù–æ–≤—ã–µ KPI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        data['conversion_rate'] = data['unique_conversion_reach'] / data['unique_impressions_reach'].replace(0, 1) * 100
        data['add_to_cart_rate'] = data['unique_add_to_carts'] / data['unique_menu_visits'].replace(0, 1) * 100
        data['customer_retention_rate'] = data['repeated_customers'] / data['total_customers'].replace(0, 1) * 100
        data['order_cancellation_rate'] = data['cancelled_orders'] / (data['orders'] + data['cancelled_orders']).replace(0, 1) * 100
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        total_ratings_per_day = (data['one_star_ratings'] + data['two_star_ratings'] + 
                                data['three_star_ratings'] + data['four_star_ratings'] + 
                                data['five_star_ratings'])
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        data['customer_satisfaction_score'] = 0.0
        mask = total_ratings_per_day > 0
        data.loc[mask, 'customer_satisfaction_score'] = (
            (data.loc[mask, 'five_star_ratings'] * 5 + 
             data.loc[mask, 'four_star_ratings'] * 4 + 
             data.loc[mask, 'three_star_ratings'] * 3 + 
             data.loc[mask, 'two_star_ratings'] * 2 + 
             data.loc[mask, 'one_star_ratings'] * 1) / total_ratings_per_day.loc[mask]
        )
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        data['operational_issues'] = (data['store_is_closed'] + data['store_is_busy'] + 
                                    data['store_is_closing_soon'] + data['out_of_stock'])
        
    else:
        data = pd.DataFrame()
    
    conn.close()
    return data, all_data

def calculate_market_benchmark(metric_type):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        if metric_type == 'avg_order_value':
            # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
            query = """
            WITH market_data AS (
                SELECT 
                    r.name,
                    SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
                    SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders
                FROM restaurants r
                LEFT JOIN grab_stats g ON r.id = g.restaurant_id
                LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id AND g.stat_date = gj.stat_date
                WHERE g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL
                GROUP BY r.id, r.name
                HAVING total_orders > 0
            )
            SELECT AVG(total_sales / total_orders) as market_avg_order_value
            FROM market_data
            """
            
        elif metric_type == 'roas':
            # ROAS –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
            query = """
            WITH market_data AS (
                SELECT 
                    r.name,
                    SUM(COALESCE(g.ads_sales, 0)) as total_marketing_sales,
                    SUM(COALESCE(g.ads_spend, 0)) as total_marketing_spend
                FROM restaurants r
                LEFT JOIN grab_stats g ON r.id = g.restaurant_id
                WHERE g.ads_spend > 0
                GROUP BY r.id, r.name
                HAVING total_marketing_spend > 0
            )
            SELECT AVG(total_marketing_sales / total_marketing_spend) as market_avg_roas
            FROM market_data
            """
            
        elif metric_type == 'rating':
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
            query = """
            WITH market_data AS (
                SELECT 
                    r.name,
                    AVG(COALESCE(g.rating, gj.rating)) as avg_rating
                FROM restaurants r
                LEFT JOIN grab_stats g ON r.id = g.restaurant_id
                LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id AND g.stat_date = gj.stat_date
                WHERE (g.rating IS NOT NULL OR gj.rating IS NOT NULL)
                GROUP BY r.id, r.name
            )
            SELECT AVG(avg_rating) as market_avg_rating
            FROM market_data
            """
            
        elif metric_type == 'repeat_rate':
            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
            query = """
            WITH market_data AS (
                SELECT 
                    r.name,
                    SUM(COALESCE(g.repeated_customers, 0) + COALESCE(gj.active_client, 0)) as total_repeat,
                    SUM(COALESCE(g.new_customers, 0) + COALESCE(gj.new_client, 0)) as total_new,
                    SUM(COALESCE(g.reactivated_customers, 0) + COALESCE(gj.returned_client, 0)) as total_reactive
                FROM restaurants r
                LEFT JOIN grab_stats g ON r.id = g.restaurant_id
                LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id AND g.stat_date = gj.stat_date
                WHERE g.stat_date IS NOT NULL OR gj.stat_date IS NOT NULL
                GROUP BY r.id, r.name
                HAVING (total_repeat + total_new + total_reactive) > 0
            )
            SELECT AVG(total_repeat * 100.0 / (total_repeat + total_new + total_reactive)) as market_repeat_rate
            FROM market_data
            """
            
        elif metric_type == 'conversion_rate':
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–∫–ª–∞–º—ã –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
            query = """
            WITH market_data AS (
                SELECT 
                    r.name,
                    SUM(COALESCE(g.ads_orders, 0)) as total_ad_orders,
                    SUM(COALESCE(g.unique_menu_visits, 0)) as total_visits
                FROM restaurants r
                LEFT JOIN grab_stats g ON r.id = g.restaurant_id
                WHERE g.ads_orders > 0 AND g.unique_menu_visits > 0
                GROUP BY r.id, r.name
                HAVING total_visits > 0
            )
            SELECT AVG(total_ad_orders * 100.0 / total_visits) as market_conversion_rate
            FROM market_data
            """
        else:
            return 0
            
        result = pd.read_sql_query(query, conn).iloc[0, 0]
        conn.close()
        
        return result if result and not pd.isna(result) else 0
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ {metric_type}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        defaults = {
            'avg_order_value': 350000, 
            'roas': 4.0, 
            'rating': 4.5,
            'repeat_rate': 30.0,  # –†–µ–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
            'conversion_rate': 16.0  # –†–µ–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        }
        return defaults.get(metric_type, 0)

def analyze_restaurant(restaurant_name, start_date=None, end_date=None):
    """–ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ + –í–°–ï API"""
    print(f"\nüî¨ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–†–ê–ú–ï–¢–†–û–í + API: {restaurant_name.upper()}")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-30"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    # –ö—Ä–∞—Ç–∫–∏–π –±–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–∫–∞–∫ –≤ README)
    print("üö® –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•:")
    print("‚Ä¢ üìä –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂: —Ç–æ–ª—å–∫–æ GRAB (GOJEK API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∫–∞–∑—ã/–∫–ª–∏–∫–∏)")
    print("‚Ä¢ üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: —Ç–æ–ª—å–∫–æ GRAB (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –∏–Ω—Ç–µ—Ä–µ—Å—ã)")
    print("‚Ä¢ üí∞ –í—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: GRAB + GOJEK (–ø—Ä–æ–¥–∞–∂–∏, –±—é–¥–∂–µ—Ç—ã, ROAS)")
    print("‚Ä¢ üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä—ã–Ω–∫–æ–º: 54 –∏–∑ 59 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (—É 5 –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
    print("‚Ä¢ üìà –¢—Ä–µ–Ω–¥—ã: –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
    weather_api = WeatherAPI()
    calendar_api = CalendarAPI()
    openai_analyzer = OpenAIAnalyzer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data, platform_data = get_restaurant_data_full(restaurant_name, start_date, end_date)
    
    if data.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("üìä 1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï")
    print("-" * 40)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_sales = data['total_sales'].sum()
    total_orders = data['orders'].sum()
    avg_rating = data['rating'].mean()
    avg_order_value = total_sales / total_orders if total_orders > 0 else 0
    total_marketing = data['marketing_spend'].sum()
    marketing_sales = data['marketing_sales'].sum()
    avg_roas = marketing_sales / total_marketing if total_marketing > 0 else 0
    total_customers = data['total_customers'].sum()
    
    # –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏)
    working_days_count = len(data[data['total_sales'] > 0])
    daily_avg_sales = total_sales / working_days_count if working_days_count > 0 else 0
    
    print(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_sales:,.0f} IDR (GRAB + GOJEK)")
    print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f} (GRAB + GOJEK)")
    print(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR")
    print(f"üìä –î–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {daily_avg_sales:,.0f} IDR (—Å—Ä–µ–¥–Ω—è—è –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º)")
    print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
    print(f"üë• –û–±—Å–ª—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_customers:,.0f} (GRAB: {data['new_customers'].sum() + data['repeated_customers'].sum():,.0f} + GOJEK: {total_customers - (data['new_customers'].sum() + data['repeated_customers'].sum()):,.0f})")
    print(f"üí∏ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç: {total_marketing:,.0f} IDR (—Ç–æ–ª—å–∫–æ GRAB)")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ROAS –∞–Ω–∞–ª–∏–∑–∞
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        grab_platform_data = platform_data[platform_data['platform'] == 'grab'] if not platform_data.empty else pd.DataFrame()
        gojek_platform_data = platform_data[platform_data['platform'] == 'gojek'] if not platform_data.empty else pd.DataFrame()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        grab_marketing_sales = grab_platform_data['marketing_sales'].sum() if not grab_platform_data.empty else 0
        grab_marketing_spend = grab_platform_data['marketing_spend'].sum() if not grab_platform_data.empty else 0
        gojek_marketing_sales = gojek_platform_data['marketing_sales'].sum() if not gojek_platform_data.empty else 0
        gojek_marketing_spend = gojek_platform_data['marketing_spend'].sum() if not gojek_platform_data.empty else 0
        
        if USE_COLORS:
            roas_breakdown = generate_colored_roas_breakdown(grab_marketing_sales, grab_marketing_spend, 
                                                           gojek_marketing_sales, gojek_marketing_spend)
        else:
            roas_breakdown = generate_roas_breakdown(grab_marketing_sales, grab_marketing_spend, 
                                                   gojek_marketing_sales, gojek_marketing_spend)
        print(roas_breakdown)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º avg_roas –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        total_roas = (grab_marketing_sales + gojek_marketing_sales) / (grab_marketing_spend + gojek_marketing_spend) if (grab_marketing_spend + gojek_marketing_spend) > 0 else avg_roas
        avg_roas = total_roas
        
    except:
        print(f"üéØ ROAS: {avg_roas:.2f}x (—Ç–æ–ª—å–∫–æ GRAB - –¥–∞–Ω–Ω—ã–µ GOJEK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    roi_percentage = ((marketing_sales - total_marketing) / total_marketing * 100) if total_marketing > 0 else 0
    print(f"üìà ROI –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {roi_percentage:+.1f}% (—Ä–∞—Å—á–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–∞–Ω–Ω—ã–º)")
    
    print()
    print("‚ö†Ô∏è –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è GRAB")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {len(data)} –¥–Ω–µ–π")
    print()
    
    # 2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –ò –¢–†–ï–ù–î–û–í
    print("üìà 2. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ –ò –¢–†–ï–ù–î–û–í")
    print("-" * 40)
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
    data_sorted = data.copy()
    data_sorted['date'] = pd.to_datetime(data_sorted['date'])
    data_sorted['week'] = data_sorted['date'].dt.isocalendar().week
    data_sorted['month'] = data_sorted['date'].dt.month
    
    weekly_sales = data_sorted.groupby('week')['total_sales'].sum()
    monthly_sales = data_sorted.groupby('month')['total_sales'].sum()
    
    print("üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    month_names = {4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å"}
    for month, sales in monthly_sales.items():
        month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
        month_data = data_sorted[data_sorted['month'] == month]
        days_in_month = len(month_data)
        daily_avg = sales / days_in_month if days_in_month > 0 else 0
        print(f"  {month_name}: {sales:,.0f} IDR ({days_in_month} –¥–Ω–µ–π, {daily_avg:,.0f} IDR/–¥–µ–Ω—å)")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö vs –±—É–¥–Ω–∏
    weekend_sales = data[data['is_weekend'] == 1]['total_sales']
    weekday_sales = data[data['is_weekend'] == 0]['total_sales']
    
    if not weekend_sales.empty and not weekday_sales.empty:
        weekend_avg = weekend_sales.mean()
        weekday_avg = weekday_sales.mean()
        weekend_effect = ((weekend_avg - weekday_avg) / weekday_avg * 100) if weekday_avg > 0 else 0
        
        print(f"\nüóìÔ∏è –í—ã—Ö–æ–¥–Ω—ã–µ vs –ë—É–¥–Ω–∏:")
        print(f"  üìÖ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ: {weekend_avg:,.0f} IDR")
        print(f"  üìÖ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –±—É–¥–Ω–∏: {weekday_avg:,.0f} IDR")
        print(f"  üìä –≠—Ñ—Ñ–µ–∫—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö: {weekend_effect:+.1f}%")
    
    # –û—Ç–¥–µ–ª—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ (–Ω—É–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏) –æ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    zero_sales_days = data[data['total_sales'] == 0]
    working_days = data[data['total_sales'] > 0]
    
    if len(zero_sales_days) > 0:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ê–ù–û–ú–ê–õ–¨–ù–´–ï –î–ù–ò ({len(zero_sales_days)} –∏–∑ {len(data)}):")
        for _, day in zero_sales_days.iterrows():
            print(f"   üìÖ {day['date']} - 0 IDR (—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π)")
        print(f"   üí° –≠—Ç–∏ –¥–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print()
    
    if len(working_days) > 1:
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        best_day = working_days.loc[working_days['total_sales'].idxmax()]
        worst_day = working_days.loc[working_days['total_sales'].idxmin()]
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–ß–ò–• –î–ù–ï–ô ({len(working_days)} –¥–Ω–µ–π):")
        print(f"üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_day['date']} - {best_day['total_sales']:,.0f} IDR")
        print(f"üìâ –•—É–¥—à–∏–π –¥–µ–Ω—å: {worst_day['date']} - {worst_day['total_sales']:,.0f} IDR")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–±—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        sales_variance = ((best_day['total_sales'] - worst_day['total_sales']) / worst_day['total_sales'] * 100)
        print(f"üìä –†–∞–∑–±—Ä–æ—Å –ø—Ä–æ–¥–∞–∂: {sales_variance:.1f}% (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        avg_working = working_days['total_sales'].mean()
        std_working = working_days['total_sales'].std()
        cv_working = (std_working / avg_working) * 100 if avg_working > 0 else 0
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_working:,.0f} IDR/–¥–µ–Ω—å")
        print(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv_working:.1f}% (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂)")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(working_days)} –¥–Ω–µ–π)")
        if len(data) > 0:
            total_day = data.iloc[0]  # –ë–µ—Ä–µ–º –ª—é–±–æ–π –¥–µ–Ω—å –¥–ª—è –ø–æ–∫–∞–∑–∞
            print(f"üìÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Å –¥–∞–Ω–Ω—ã–º–∏: {total_day['date']} - {total_day['total_sales']:,.0f} IDR")
    print()
    
    # 3. –£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ë–ê–ó–´
    print("üë• 3. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ë–ê–ó–´")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º restaurant_id –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    import sqlite3
    conn_temp = sqlite3.connect("database.sqlite")
    restaurant_query = "SELECT id FROM restaurants WHERE name = ?"
    restaurant_result = pd.read_sql_query(restaurant_query, conn_temp, params=(restaurant_name,))
    restaurant_id = restaurant_result.iloc[0]['id'] if not restaurant_result.empty else None
    
    if restaurant_id is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
        conn_temp.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    grab_customers_query = f"""
    SELECT 
        SUM(new_customers) as grab_new,
        SUM(repeated_customers) as grab_repeat, 
        SUM(reactivated_customers) as grab_reactive,
        SUM(earned_new_customers) as grab_earned_new,
        SUM(earned_repeated_customers) as grab_earned_repeat,
        SUM(earned_reactivated_customers) as grab_earned_reactive
    FROM grab_stats 
    WHERE restaurant_id = {restaurant_id} AND stat_date BETWEEN '{start_date}' AND '{end_date}'
    """
    
    gojek_customers_query = f"""
    SELECT 
        SUM(new_client) as gojek_new,
        SUM(active_client) as gojek_repeat,
        SUM(returned_client) as gojek_reactive
    FROM gojek_stats 
    WHERE restaurant_id = {restaurant_id} AND stat_date BETWEEN '{start_date}' AND '{end_date}'
    """
    
    grab_customers = pd.read_sql_query(grab_customers_query, conn_temp).iloc[0]
    gojek_customers = pd.read_sql_query(gojek_customers_query, conn_temp).iloc[0]
    conn_temp.close()
    
    # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
    new_customers = data['new_customers'].sum()
    repeated_customers = data['repeated_customers'].sum()
    reactivated_customers = data['reactivated_customers'].sum()
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    grab_new = grab_customers['grab_new'] or 0
    grab_repeat = grab_customers['grab_repeat'] or 0
    grab_reactive = grab_customers['grab_reactive'] or 0
    
    gojek_new = gojek_customers['gojek_new'] or 0
    gojek_repeat = gojek_customers['gojek_repeat'] or 0
    gojek_reactive = gojek_customers['gojek_reactive'] or 0
    
    # –î–æ—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ GRAB –∏–º–µ–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ)
    new_customer_revenue = grab_customers['grab_earned_new'] or 0
    repeated_customer_revenue = grab_customers['grab_earned_repeat'] or 0
    reactivated_customer_revenue = grab_customers['grab_earned_reactive'] or 0
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã (GRAB + GOJEK):")
    if total_customers > 0:
        new_rate = (new_customers / total_customers) * 100
        repeat_rate = (repeated_customers / total_customers) * 100
        reactive_rate = (reactivated_customers / total_customers) * 100
        
        print(f"  üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_customers:,.0f} ({new_rate:.1f}%)")
        print(f"    üì± GRAB: {grab_new:,.0f} | üõµ GOJEK: {gojek_new:,.0f}")
        print(f"  üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {repeated_customers:,.0f} ({repeat_rate:.1f}%)")
        print(f"    üì± GRAB: {grab_repeat:,.0f} | üõµ GOJEK: {gojek_repeat:,.0f}")
        print(f"  üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {reactivated_customers:,.0f} ({reactive_rate:.1f}%)")
        print(f"    üì± GRAB: {grab_reactive:,.0f} | üõµ GOJEK: {gojek_reactive:,.0f}")
        
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ GRAB)
        print(f"\nüí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ GRAB):")
        if new_customer_revenue > 0 and grab_new > 0:
            avg_new = new_customer_revenue / grab_new
            avg_repeat = repeated_customer_revenue / grab_repeat if grab_repeat > 0 else 0
            avg_reactive = reactivated_customer_revenue / grab_reactive if grab_reactive > 0 else 0
            
            print(f"  üÜï –ù–æ–≤—ã–µ: {new_customer_revenue:,.0f} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_new:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_new} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            print(f"  üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ: {repeated_customer_revenue:,.0f} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_repeat:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_repeat} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            if reactivated_customer_revenue > 0:
                print(f"  üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {reactivated_customer_revenue:,.0f} IDR (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_reactive:,.0f} IDR) - —Ç–æ–ª—å–∫–æ {grab_reactive} –∫–ª–∏–µ–Ω—Ç–æ–≤ GRAB")
            
            print(f"\n  ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –æ—Ç {gojek_new + gojek_repeat + gojek_reactive} –∫–ª–∏–µ–Ω—Ç–æ–≤ GOJEK –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print(f"  üìä –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π")
            
            # –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ GRAB)
            if avg_repeat > avg_new:
                loyalty_premium = ((avg_repeat - avg_new) / avg_new * 100)
                print(f"  üèÜ –ü—Ä–µ–º–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (GRAB): +{loyalty_premium:.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É")
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    monthly_new_customers = data_sorted.groupby('month')['new_customers'].sum()
    print(f"\nüìà –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    for month, customers in monthly_new_customers.items():
        month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
        print(f"  {month_name}: {customers:,.0f} –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    print()
    
    # 4. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ò –í–û–†–û–ù–ö–ê
    print("üìà 4. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ò –í–û–†–û–ù–ö–ê")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    gojek_marketing_query = f"""
    SELECT 
        SUM(ads_spend) as total_ads_spend,
        SUM(ads_sales) as total_ads_sales,
        SUM(ads_orders) as total_ads_orders
    FROM gojek_stats 
    WHERE restaurant_id = {restaurant_id} AND stat_date BETWEEN '{start_date}' AND '{end_date}'
    """
    
    conn_marketing = sqlite3.connect("database.sqlite")
    gojek_marketing_data = pd.read_sql_query(gojek_marketing_query, conn_marketing).iloc[0]
    conn_marketing.close()
    gojek_marketing_spend = gojek_marketing_data['total_ads_spend'] or 0
    gojek_marketing_sales = gojek_marketing_data['total_ads_sales'] or 0
    gojek_marketing_orders = gojek_marketing_data['total_ads_orders'] or 0
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ GRAB –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    grab_marketing_query = f"""
    SELECT 
        SUM(ads_spend) as grab_spend,
        SUM(ads_sales) as grab_sales,
        SUM(ads_orders) as grab_orders
    FROM grab_stats 
    WHERE restaurant_id = {restaurant_id} AND stat_date BETWEEN '{start_date}' AND '{end_date}'
    """
    
    conn_grab = sqlite3.connect("database.sqlite")
    grab_marketing_raw = pd.read_sql_query(grab_marketing_query, conn_grab).iloc[0]
    conn_grab.close()
    
    # –î–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ GRAB)
    total_impressions = data['impressions'].sum()
    total_menu_visits = data['unique_menu_visits'].sum()
    total_add_to_carts = data['unique_add_to_carts'].sum()
    total_conversions = data['unique_conversion_reach'].sum()
    grab_marketing_orders = grab_marketing_raw['grab_orders'] or 0
    grab_marketing_spend = grab_marketing_raw['grab_spend'] or 0
    grab_marketing_sales = grab_marketing_raw['grab_sales'] or 0
    
    print("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ GRAB - GOJEK –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏):")
    if total_impressions > 0:
        ctr = (total_menu_visits / total_impressions) * 100
        add_to_cart_rate = (total_add_to_carts / total_menu_visits) * 100 if total_menu_visits > 0 else 0
        conversion_rate = (total_conversions / total_menu_visits) * 100 if total_menu_visits > 0 else 0
        
        print(f"  üëÅÔ∏è –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã: {total_impressions:,.0f} (—Ç–æ–ª—å–∫–æ GRAB)")
        print(f"  üîó –ü–æ—Å–µ—â–µ–Ω–∏—è –º–µ–Ω—é: {total_menu_visits:,.0f} (CTR: {ctr:.2f}%) (—Ç–æ–ª—å–∫–æ GRAB)")
        print(f"  üõí –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_add_to_carts:,.0f} (Rate: {add_to_cart_rate:.2f}%) (—Ç–æ–ª—å–∫–æ GRAB)")
        print(f"  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {total_conversions:,.0f} (Rate: {conversion_rate:.2f}%) (—Ç–æ–ª—å–∫–æ GRAB)")
        print(f"  üì¶ –ó–∞–∫–∞–∑—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã: {grab_marketing_orders:,.0f} (—Ç–æ–ª—å–∫–æ GRAB)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏
        funnel_note = generate_methodology_note('conversion')
        print(f"\n‚ö†Ô∏è –ú–ï–¢–û–î–ò–ö–ê: {funnel_note}")
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ GRAB - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ GRAB –±—é–¥–∂–µ—Ç –¥–ª—è GRAB –º–µ—Ç—Ä–∏–∫
        grab_only_spend = grab_marketing_raw['grab_spend'] or 0
        cost_per_click = grab_only_spend / total_menu_visits if total_menu_visits > 0 else 0
        cost_per_conversion = grab_only_spend / total_conversions if total_conversions > 0 else 0
        cost_per_order = grab_only_spend / grab_marketing_orders if grab_marketing_orders > 0 else 0
        
        print(f"\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ GRAB):")
        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞: {cost_per_click:,.0f} IDR")
        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {cost_per_conversion:,.0f} IDR") 
        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cost_per_order:,.0f} IDR")
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        total_marketing_spend = grab_marketing_spend + gojek_marketing_spend
        total_marketing_sales = grab_marketing_sales + gojek_marketing_sales
        total_marketing_orders = grab_marketing_orders + gojek_marketing_orders
        
        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:")
        print(f"  üì± GRAB: {grab_marketing_spend:,.0f} IDR –±—é–¥–∂–µ—Ç ‚Üí {grab_marketing_sales:,.0f} IDR –¥–æ—Ö–æ–¥ ({grab_marketing_orders} –∑–∞–∫–∞–∑–æ–≤)")
        print(f"  üõµ GOJEK: {gojek_marketing_spend:,.0f} IDR –±—é–¥–∂–µ—Ç ‚Üí {gojek_marketing_sales:,.0f} IDR –¥–æ—Ö–æ–¥ ({gojek_marketing_orders} –∑–∞–∫–∞–∑–æ–≤)")
        print(f"  üéØ –ò–¢–û–ì–û: {total_marketing_spend:,.0f} IDR –±—é–¥–∂–µ—Ç ‚Üí {total_marketing_sales:,.0f} IDR –¥–æ—Ö–æ–¥ ({total_marketing_orders} –∑–∞–∫–∞–∑–æ–≤)")
        
        if total_marketing_spend > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ROAS
            roas_breakdown = generate_roas_breakdown(grab_marketing_sales, grab_marketing_spend,
                                                   gojek_marketing_sales, gojek_marketing_spend)
            print(roas_breakdown)
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–æ–ª—å–∫–æ GRAB - –µ—Å—Ç—å –ø–æ–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        monthly_roas = data_sorted.groupby('month').apply(
            lambda x: x['marketing_sales'].sum() / x['marketing_spend'].sum() if x['marketing_spend'].sum() > 0 else 0
        )
        print(f"\nüéØ ROAS –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–æ–ª—å–∫–æ GRAB):")
        for month, roas in monthly_roas.items():
            month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
            print(f"  {month_name}: {roas:.2f}x")
        
        # –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–∂–µ —É–∫–∞–∑–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç—á–µ—Ç–∞
    
    print()
    
    # 5. –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
    print("‚ö†Ô∏è 5. –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    days_with_closure_cancellations = data['store_is_closed'].sum()
    busy_days = data['store_is_busy'].sum()
    closing_soon_days = data['store_is_closing_soon'].sum()
    out_of_stock_days = data['out_of_stock'].sum()
    cancelled_orders = data['cancelled_orders'].sum()
    
    print(f"üè™ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"  üö´ –î–Ω–µ–π —Å –æ—Ç–º–µ–Ω–∞–º–∏ '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç': {days_with_closure_cancellations} ({(days_with_closure_cancellations/len(data)*100):.1f}%)")
    print(f"  üî• –î–Ω–µ–π –∑–∞–Ω—è—Ç: {busy_days} ({(busy_days/len(data)*100):.1f}%)")
    print(f"  ‚è∞ –î–Ω–µ–π '—Å–∫–æ—Ä–æ –∑–∞–∫—Ä—ã—Ç–∏–µ': {closing_soon_days} ({(closing_soon_days/len(data)*100):.1f}%)")
    print(f"  üì¶ –î–Ω–µ–π —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º —Ç–æ–≤–∞—Ä–∞: {out_of_stock_days} ({(out_of_stock_days/len(data)*100):.1f}%)")
    print(f"  ‚ùå –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {cancelled_orders:,.0f}")
    
    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç–º–µ–Ω
    print(f"\nüí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: '–î–Ω–∏ —Å –æ—Ç–º–µ–Ω–∞–º–∏ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é' –æ–∑–Ω–∞—á–∞—é—Ç –¥–Ω–∏, –∫–æ–≥–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    print(f"   –æ—Ç–º–µ–Ω—è–ª–∏ –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç' (–æ–±—ã—á–Ω–æ –ø–æ–∑–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã)")
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    avg_order_value = total_sales / data['orders'].sum() if data['orders'].sum() > 0 else 0
    
    # –ü–æ—Ç–µ—Ä–∏ –æ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    cancelled_orders_losses = cancelled_orders * avg_order_value
    
    # –ü–æ—Ç–µ—Ä–∏ –æ—Ç –¥–Ω–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (—Ç–æ–ª—å–∫–æ busy –∏ out_of_stock - —Ä–µ–∞–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏)
    avg_daily_sales = data['total_sales'].mean()
    operational_losses = (busy_days + out_of_stock_days) * avg_daily_sales * 0.3  # 30% –ø–æ—Ç–µ—Ä–∏ –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
    
    total_operational_losses = cancelled_orders_losses + operational_losses
    
    if total_operational_losses > 0:
        print(f"\nüíî –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
        print(f"  üí∏ –û—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {cancelled_orders_losses:,.0f} IDR ({cancelled_orders} √ó {avg_order_value:,.0f} IDR)")
        print(f"  üí∏ –û—Ç –¥–Ω–µ–π '–∑–∞–Ω—è—Ç/–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞': {operational_losses:,.0f} IDR")
        print(f"  üí∏ –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {total_operational_losses:,.0f} IDR")
        print(f"  üìä % –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏: {(total_operational_losses/total_sales*100):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (Gojek –¥–∞–Ω–Ω—ã–µ)
    if data['realized_orders_percentage'].mean() > 0:
        avg_realization = data['realized_orders_percentage'].mean()
        lost_orders = data['lost_orders'].sum()
        
        print(f"\n‚è±Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (Gojek):")
        print(f"  ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {avg_realization:.1f}%")
        print(f"  ‚ùå –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {lost_orders:,.0f}")
        
        if avg_realization < 95:
            improvement_potential = (95 - avg_realization) / 100 * total_orders * avg_order_value
            print(f"  üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è –¥–æ 95%: +{improvement_potential:,.0f} IDR")
    
    print()
    
    # 6. –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ò –£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ù–û–°–¢–¨
    print("‚≠ê 6. –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ò –£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ù–û–°–¢–¨")
    print("-" * 40)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    total_ratings = (data['one_star_ratings'].sum() + data['two_star_ratings'].sum() + 
                    data['three_star_ratings'].sum() + data['four_star_ratings'].sum() + 
                    data['five_star_ratings'].sum())
    
    if total_ratings > 0:
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ (–≤—Å–µ–≥–æ: {total_ratings:,.0f}):")
        
        ratings_data = [
            (5, data['five_star_ratings'].sum(), "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"),
            (4, data['four_star_ratings'].sum(), "‚≠ê‚≠ê‚≠ê‚≠ê"),
            (3, data['three_star_ratings'].sum(), "‚≠ê‚≠ê‚≠ê"),
            (2, data['two_star_ratings'].sum(), "‚≠ê‚≠ê"),
            (1, data['one_star_ratings'].sum(), "‚≠ê")
        ]
        
        for stars, count, emoji in ratings_data:
            percentage = (count / total_ratings) * 100
            print(f"  {emoji} {stars} –∑–≤–µ–∑–¥: {count:,.0f} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ - –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        total_weighted_score = (data['five_star_ratings'].sum() * 5 + 
                               data['four_star_ratings'].sum() * 4 + 
                               data['three_star_ratings'].sum() * 3 + 
                               data['two_star_ratings'].sum() * 2 + 
                               data['one_star_ratings'].sum() * 1)
        
        if total_ratings > 0:
            satisfaction_score = total_weighted_score / total_ratings
            print(f"\nüìà –ò–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {satisfaction_score:.2f}/5.0")
        else:
            satisfaction_score = 0
            print(f"\nüìà –ò–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        negative_ratings = data['one_star_ratings'].sum() + data['two_star_ratings'].sum()
        negative_rate = (negative_ratings / total_ratings) * 100 if total_ratings > 0 else 0
        if negative_ratings > 0:
            print(f"üö® –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (1-2‚òÖ): {negative_ratings:,.0f} ({negative_rate:.1f}%)")
        
        # –†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫ (–≤—Å–µ –∫—Ä–æ–º–µ 5 –∑–≤–µ–∑–¥)
        bad_ratings = (data['four_star_ratings'].sum() + data['three_star_ratings'].sum() + 
                      data['two_star_ratings'].sum() + data['one_star_ratings'].sum())
        total_orders = data['orders'].sum()
        
        if bad_ratings > 0 and total_orders > 0:
            orders_per_bad_rating = total_orders / bad_ratings
            print(f"\nüìä –ß–∞—Å—Ç–æ—Ç–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫ (–Ω–µ 5‚òÖ):")
            print(f"  üìà –ü–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫ –≤—Å–µ–≥–æ: {bad_ratings:,.0f} –∏–∑ {total_ratings:,.0f} ({(bad_ratings/total_ratings*100):.1f}%)")
            print(f"  üì¶ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ 1 –ø–ª–æ—Ö—É—é –æ—Ü–µ–Ω–∫—É: {orders_per_bad_rating:.1f}")
            print(f"  üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –∫–∞–∂–¥—ã–π {orders_per_bad_rating:.0f}-–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–µ 5‚òÖ")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if orders_per_bad_rating >= 20:
                print(f"  üü¢ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏")
            elif orders_per_bad_rating >= 10:
                print(f"  üü° –•–û–†–û–®–û: –£–º–µ—Ä–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫")
            elif orders_per_bad_rating >= 5:
                print(f"  üü† –í–ù–ò–ú–ê–ù–ò–ï: –ß–∞—Å—Ç—ã–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏")
            else:
                print(f"  üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –ø–ª–æ—Ö–∏–µ –æ—Ü–µ–Ω–∫–∏")
            
            if negative_rate > 10:
                print(f"  ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤!")
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        current_weighted = (
            data['five_star_ratings'].sum() * 5 +
            data['four_star_ratings'].sum() * 4 +
            data['three_star_ratings'].sum() * 3 +
            data['two_star_ratings'].sum() * 2 +
            data['one_star_ratings'].sum() * 1
        ) / total_ratings
        
        target_weighted = 4.5
        if current_weighted < target_weighted:
            improvement_needed = total_ratings * (target_weighted - current_weighted)
            print(f"üìä –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 4.5‚òÖ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ {improvement_needed:.0f} –±–∞–ª–ª–∞")
    
    print()
    
    # 7. –ê–ù–ê–õ–ò–ó –í–ù–ï–®–ù–ò–• –§–ê–ö–¢–û–†–û–í (API)
    print("üåê 7. –ê–ù–ê–õ–ò–ó –í–ù–ï–®–ù–ò–• –§–ê–ö–¢–û–†–û–í")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_location = get_restaurant_location(restaurant_name)
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {restaurant_location['location']}, {restaurant_location['area']} ({restaurant_location['zone']} –∑–æ–Ω–∞)")
    print(f"üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {restaurant_location['latitude']:.4f}, {restaurant_location['longitude']:.4f}")
    
    # –ù–û–í–ê–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–û–ì–û–î–´
    print("üå§Ô∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ (–ù–ê–£–ß–ù–û –û–ë–û–°–ù–û–í–ê–ù–ù–´–ô):")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –¥–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    all_dates = data['date'].unique()
    weather_sales_data = []
    weather_groups = {}  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
    
    print(f"  üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è {len(all_dates)} –¥–Ω–µ–π –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –Ω–∞ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    first_date = all_dates[0]
    test_weather = weather_api.get_weather_data(
        first_date, 
        lat=restaurant_location['latitude'], 
        lon=restaurant_location['longitude']
    )
    
    api_available = test_weather.get('source', '').startswith('Open-Meteo')
    if not api_available:
        print("  ‚ö†Ô∏è Open-Meteo API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–≥–æ–¥—ã...")
    else:
        print("  üß† –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–ª–∏—è–Ω–∏—è...")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π
    for i, date in enumerate(all_dates):
        if api_available or i == 0:  # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            weather = weather_api.get_weather_data(
                date, 
                lat=restaurant_location['latitude'], 
                lon=restaurant_location['longitude']
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            weather = weather_api._simulate_weather(date)
        day_sales = data[data['date'] == date]['total_sales'].sum()
        condition = weather['condition']
        
        weather_sales_data.append({
            'date': date,
            'condition': condition,
            'temperature': weather['temperature'],
            'rain': weather.get('rain', 0),
            'wind': weather.get('wind_speed', 10),
            'sales': day_sales
        })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
        if condition not in weather_groups:
            weather_groups[condition] = []
        weather_groups[condition].append(day_sales)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    print(f"  üß† –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–ª–∏—è–Ω–∏—è...")
    
    total_weather_impact = 0
    impact_details = []
    critical_days = []
    
    for item in weather_sales_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        day_weather = {
            'temperature': item['temperature'],
            'rain': item['rain'],
            'wind': item['wind']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_zone = restaurant_location.get('zone', 'Unknown')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        weather_analysis = analyze_weather_impact_for_report(
            day_weather, 
            zone=restaurant_zone, 
            restaurant_name=restaurant_name
        )
        
        day_impact = weather_analysis['total_impact']
        total_weather_impact += day_impact
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–Ω–µ–π —Å –∑–∞–º–µ—Ç–Ω—ã–º –≤–ª–∏—è–Ω–∏–µ–º
        impact_details.append({
            'date': item['date'],
            'sales': item['sales'],
            'impact': day_impact,
            'primary_factor': weather_analysis['primary_factor'],
            'weather': day_weather
        })
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –≤–ª–∏—è–Ω–∏–µ–º
        if abs(day_impact) > 40:  # –¢–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏
            critical_days.append({
                'date': item['date'],
                'sales': item['sales'],
                'impact': day_impact,
                'primary_factor': weather_analysis['primary_factor'],
                'weather': day_weather
            })
    
    # –°—Ä–µ–¥–Ω–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≥–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    avg_weather_impact = total_weather_impact / len(weather_sales_data) if weather_sales_data else 0
    weather_impact = avg_weather_impact  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    
    print(f"  üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´:")
    print(f"    üí∞ –°—Ä–µ–¥–Ω–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≥–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {avg_weather_impact:+.1f}%")
    
    if abs(avg_weather_impact) > 5:
        impact_assessment = "–ö–†–ò–¢–ò–ß–ù–û!" if abs(avg_weather_impact) > 15 else "–ó–ê–ú–ï–¢–ù–û"
        print(f"    ‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞: {impact_assessment}")
    else:
        print(f"    ‚úÖ –û—Ü–µ–Ω–∫–∞: –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–Ω–µ–π –ø–æ –≤–ª–∏—è–Ω–∏—é –ø–æ–≥–æ–¥—ã
    if impact_details:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –ø–æ –≤–ª–∏—è–Ω–∏—é
        impact_details.sort(key=lambda x: abs(x['impact']), reverse=True)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–Ω–∏
        strong_positive = [d for d in impact_details if d['impact'] > 40]
        moderate_positive = [d for d in impact_details if 15 <= d['impact'] <= 40]
        neutral = [d for d in impact_details if -15 < d['impact'] < 15]
        moderate_negative = [d for d in impact_details if -40 <= d['impact'] <= -15]
        strong_negative = [d for d in impact_details if d['impact'] < -40]
        
        print(f"  üìä –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–ì–û–î–ù–û–ì–û –í–õ–ò–Ø–ù–ò–Ø:")
        print(f"    üìà –°–∏–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ (>+40%): {len(strong_positive)} –¥–Ω–µ–π")
        print(f"    üü¢ –£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ (+15% –¥–æ +40%): {len(moderate_positive)} –¥–Ω–µ–π")
        print(f"    ‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (-15% –¥–æ +15%): {len(neutral)} –¥–Ω–µ–π")
        print(f"    üü† –£–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ (-40% –¥–æ -15%): {len(moderate_negative)} –¥–Ω–µ–π")
        print(f"    üî¥ –°–∏–ª—å–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ (<-40%): {len(strong_negative)} –¥–Ω–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –¥–Ω–µ–π —Å —Å–∞–º—ã–º —Å–∏–ª—å–Ω—ã–º –≤–ª–∏—è–Ω–∏–µ–º
        top_impact_days = impact_details[:5]
        if top_impact_days:
            print(f"  üî• –¢–û–ü-5 –î–ù–ï–ô –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú –ü–û–ì–û–î–ù–´–ú –í–õ–ò–Ø–ù–ò–ï–ú:")
            
            for i, day in enumerate(top_impact_days):
                impact_emoji = "üìà" if day['impact'] > 0 else "üìâ"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if abs(day['impact']) > 40:
                    category = "üö® –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ"
                elif abs(day['impact']) > 15:
                    category = "‚ö†Ô∏è –ó–∞–º–µ—Ç–Ω–æ–µ"
                else:
                    category = "‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ"
                
                print(f"    {i+1}. {day['date']}: {impact_emoji} {day['impact']:+.1f}% ({category})")
                print(f"       üéØ –§–∞–∫—Ç–æ—Ä: {day['primary_factor']}")
                print(f"       üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day['sales']:,.0f} IDR")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ–≥–æ–¥—ã
                w = day['weather']
                print(f"       üå§Ô∏è –ü–æ–≥–æ–¥–∞: {w['temperature']:.1f}¬∞C, –¥–æ–∂–¥—å {w['rain']:.1f}–º–º, –≤–µ—Ç–µ—Ä {w['wind']:.1f}–∫–º/—á")
    
    # –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if critical_days:
        print(f"  üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –ü–û–ì–û–î–ù–´–ï –î–ù–ò (–≤–ª–∏—è–Ω–∏–µ >40%): {len(critical_days)} –∏–∑ {len(weather_sales_data)}")
        for day in critical_days[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö
            impact_emoji = "üìà" if day['impact'] > 0 else "üìâ"
            print(f"    ‚Ä¢ {day['date']}: {impact_emoji} {day['impact']:+.1f}% - {day['primary_factor']}")
    else:
        print(f"  ‚úÖ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –ü–û–ì–û–î–ù–´–• –î–ù–ï–ô –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û (–≤—Å–µ –¥–Ω–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    print(f"  üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–ì–û–î–ï:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    sample_weather = {
        'temperature': sum(item['temperature'] for item in weather_sales_data) / len(weather_sales_data),
        'rain': sum(item['rain'] for item in weather_sales_data) / len(weather_sales_data),
        'wind': sum(item['wind'] for item in weather_sales_data) / len(weather_sales_data)
    }
    
    general_analysis = analyze_weather_impact_for_report(
        sample_weather, 
        zone=restaurant_location.get('zone', 'Unknown')
    )
    
    for i, recommendation in enumerate(general_analysis['recommendations'][:3], 1):
        print(f"    {i}. {recommendation}")
    
    print(f"  üî¨ –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")
    print(f"    üìä –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 800+ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π delivery-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    print(f"    üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    print(f"    üåç –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã: {restaurant_location.get('zone', 'Unknown')}")
    print(f"    üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    print(f"\nüìÖ –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤:")
    year = int(start_date[:4])
    holidays = calendar_api.get_holidays(year)
    holiday_dates = [h['date'] for h in holidays if start_date <= h['date'] <= end_date]
    
    holiday_sales = data[data['date'].isin(holiday_dates)]['total_sales']
    regular_sales = data[~data['date'].isin(holiday_dates)]['total_sales']
    
    if not holiday_sales.empty and not regular_sales.empty:
        holiday_avg = holiday_sales.mean()
        regular_avg = regular_sales.mean()
        holiday_effect = ((holiday_avg - regular_avg) / regular_avg * 100) if regular_avg > 0 else 0
        
        print(f"  üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(holiday_sales)}")
        print(f"  üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {holiday_avg:,.0f} IDR")
        print(f"  üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏: {regular_avg:,.0f} IDR")
        print(f"  üéØ –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {holiday_effect:+.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ —Å –≤–ª–∏—è–Ω–∏–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        period_holidays = [h for h in holidays if h['date'] in holiday_dates]
        if period_holidays:
            print(f"  üìã –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ ({len(period_holidays)} –≤—Å–µ–≥–æ):")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
            holiday_impact_analysis = {}
            
            for holiday in period_holidays:
                h_date = holiday['date']
                h_type = holiday.get('type', 'unknown')
                h_name = holiday['name']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å
                holiday_sales = data[data['date'] == h_date]['total_sales'].sum()
                
                if h_type not in holiday_impact_analysis:
                    holiday_impact_analysis[h_type] = []
                
                holiday_impact_analysis[h_type].append({
                    'date': h_date,
                    'name': h_name,
                    'sales': holiday_sales
                })
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –±–∞–ª–∏–π—Å–∫–∏–µ
            national_holidays = [h for h in period_holidays if h.get('type') == 'national']
            balinese_holidays = [h for h in period_holidays if h.get('type') == 'balinese']
            
            if national_holidays:
                national_avg = sum(h['sales'] for h in holiday_impact_analysis.get('national', [])) / len(holiday_impact_analysis.get('national', [1])) if holiday_impact_analysis.get('national') else 0
                national_impact = ((national_avg - regular_avg) / regular_avg * 100) if regular_avg > 0 and national_avg > 0 else 0
                
                impact_emoji = "üìà" if national_impact > 5 else "üìâ" if national_impact < -5 else "‚û°Ô∏è"
                print(f"    üáÆüá© –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ ({len(national_holidays)}): {impact_emoji} {national_impact:+.1f}% –≤–ª–∏—è–Ω–∏–µ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∑–Ω–∞—á–∏–º—ã–µ
                for holiday in national_holidays[:3]:
                    h_sales = next((h['sales'] for h in holiday_impact_analysis.get('national', []) if h['date'] == holiday['date']), 0)
                    h_impact = ((h_sales - regular_avg) / regular_avg * 100) if regular_avg > 0 and h_sales > 0 else 0
                    impact_text = f" ({h_impact:+.1f}%)" if abs(h_impact) > 10 else ""
                    print(f"      ‚Ä¢ {holiday['date']}: {holiday['name']}{impact_text}")
                if len(national_holidays) > 3:
                    print(f"      ‚Ä¢ ... –∏ –µ—â–µ {len(national_holidays) - 3}")
            
            if balinese_holidays:
                balinese_avg = sum(h['sales'] for h in holiday_impact_analysis.get('balinese', [])) / len(holiday_impact_analysis.get('balinese', [1])) if holiday_impact_analysis.get('balinese') else 0
                balinese_impact = ((balinese_avg - regular_avg) / regular_avg * 100) if regular_avg > 0 and balinese_avg > 0 else 0
                
                impact_emoji = "üìà" if balinese_impact > 5 else "üìâ" if balinese_impact < -5 else "‚û°Ô∏è"
                print(f"    üèùÔ∏è –ë–∞–ª–∏–π—Å–∫–∏–µ ({len(balinese_holidays)}): {impact_emoji} {balinese_impact:+.1f}% –≤–ª–∏—è–Ω–∏–µ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∑–Ω–∞—á–∏–º—ã–µ
                for holiday in balinese_holidays[:5]:
                    h_sales = next((h['sales'] for h in holiday_impact_analysis.get('balinese', []) if h['date'] == holiday['date']), 0)
                    h_impact = ((h_sales - regular_avg) / regular_avg * 100) if regular_avg > 0 and h_sales > 0 else 0
                    if abs(h_impact) > 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ
                        impact_text = f" ({h_impact:+.1f}%)"
                        print(f"      ‚Ä¢ {holiday['date']}: {holiday['name']}{impact_text}")
                
                if len([h for h in balinese_holidays if abs(((next((s['sales'] for s in holiday_impact_analysis.get('balinese', []) if s['date'] == h['date']), 0) - regular_avg) / regular_avg * 100)) > 10]) < len(balinese_holidays):
                    remaining = len(balinese_holidays) - len([h for h in balinese_holidays if abs(((next((s['sales'] for s in holiday_impact_analysis.get('balinese', []) if s['date'] == h['date']), 0) - regular_avg) / regular_avg * 100)) > 10])
                    if remaining > 0:
                        print(f"      ‚Ä¢ ... –∏ –µ—â–µ {remaining} —Å –º–µ–Ω—å—à–∏–º –≤–ª–∏—è–Ω–∏–µ–º")
        else:
            print(f"  üìã –ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–∏–æ–¥–µ")
    
    print()
    
    # 8. AI-–ê–ù–ê–õ–ò–ó –ò –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print("ü§ñ 8. AI-–ê–ù–ê–õ–ò–ó –ò –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 40)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
    weather_data = {"weather_impact": weather_impact if 'weather_impact' in locals() else 0}
    holiday_data = {"holiday_effect": holiday_effect if 'holiday_effect' in locals() else 0}
    
    ai_insights = openai_analyzer.generate_insights(data, weather_data, holiday_data)
    print(ai_insights)
    
    print()
    
    # 8.5. –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ü–ê–î–ï–ù–ò–ô/–†–û–°–¢–ê
    print("üîç 8.5 –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö
    detective_analysis = detect_sales_anomalies_and_causes(data, None, start_date, end_date)
    print(detective_analysis)
    
    # 8.6. ML-–ê–ù–ê–õ–ò–ó –ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï (–ù–û–í–ò–ù–ö–ê!)
    if ML_MODULE_AVAILABLE:
        print("\nü§ñ 8.6 –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï - –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        try:
            ml_insights = analyze_restaurant_with_ml(restaurant_name, start_date, end_date)
            for insight in ml_insights:
                print(insight)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
    else:
        print("\n‚ö†Ô∏è 8.6 ML-–ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–£–ü–ï–ù")
        print("-" * 40)
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install scikit-learn prophet")
    
    # 9. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö–ò–ù–ì
    print(f"\nüìä 9. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò –ë–ï–ù–ß–ú–ê–†–ö–ò")
    print("-" * 40)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    print("üèÜ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ vs —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    market_avg_order_value = calculate_market_benchmark('avg_order_value')
    market_avg_roas = calculate_market_benchmark('roas')
    market_avg_rating = calculate_market_benchmark('rating')
    market_repeat_rate = calculate_market_benchmark('repeat_rate')
    market_conversion_rate = calculate_market_benchmark('conversion_rate')
    
    benchmarks = {
        'avg_order_value': {'current': avg_order_value, 'benchmark': market_avg_order_value, 'unit': 'IDR'},
        'roas': {'current': avg_roas, 'benchmark': market_avg_roas, 'unit': 'x'},
        'customer_satisfaction': {'current': satisfaction_score if 'satisfaction_score' in locals() else avg_rating, 'benchmark': market_avg_rating, 'unit': '/5.0'},
        'repeat_rate': {'current': repeat_rate if 'repeat_rate' in locals() else 0, 'benchmark': market_repeat_rate, 'unit': '%'},
        'conversion_rate': {'current': conversion_rate if 'conversion_rate' in locals() else 0, 'benchmark': market_conversion_rate, 'unit': '%'}
    }
    
    for metric, data_point in benchmarks.items():
        current = data_point['current']
        benchmark = data_point['benchmark']
        unit = data_point['unit']
        
        if current > benchmark:
            status = "üü¢ –í–´–®–ï"
            diff = f"+{((current - benchmark) / benchmark * 100):+.1f}%"
        elif current == benchmark:
            status = "üü° –ù–û–†–ú–ê"
            diff = "¬±0%"
        else:
            status = "üî¥ –ù–ò–ñ–ï"
            diff = f"{((current - benchmark) / benchmark * 100):+.1f}%"
        
        metric_name = {
            'avg_order_value': '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
            'roas': 'ROAS',
            'customer_satisfaction': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
            'repeat_rate': '–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
            'conversion_rate': '–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–∫–ª–∞–º—ã'
        }.get(metric, metric)
        
        print(f"  {metric_name}: {current:.1f}{unit} vs {benchmark:.1f}{unit} - {status} ({diff})")
    
    print()
    
    # 10. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print("üí° 10. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 40)
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    if len(data) > 14:
        recent_period = data.tail(14)['total_sales'].mean()
        earlier_period = data.head(14)['total_sales'].mean()
        trend = ((recent_period - earlier_period) / earlier_period * 100) if earlier_period > 0 else 0
        
        if trend < -10:
            recommendations.append("üìâ –ö–†–ò–¢–ò–ß–ù–û: –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {:.1f}% - —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é".format(abs(trend)))
        elif trend < 0:
            recommendations.append("üìä –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {:.1f}% - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏".format(abs(trend)))
        elif trend > 10:
            recommendations.append("üìà –û–¢–õ–ò–ß–ù–û: –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ {:.1f}% - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏".format(trend))
    
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if avg_roas < 3:
        recommendations.append("üéØ –ù–∏–∑–∫–∏–π ROAS ({:.1f}x) - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥".format(avg_roas))
    elif avg_roas > 5:
        recommendations.append("üöÄ –û—Ç–ª–∏—á–Ω—ã–π ROAS ({:.1f}x) - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è".format(avg_roas))
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞
    if 'new_rate' in locals() and new_rate < 30:
        recommendations.append("üë• –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ({:.1f}%) - —É—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è".format(new_rate))
    if 'repeat_rate' in locals() and repeat_rate < 40:
        recommendations.append("üîÑ –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ({:.1f}%) - –≤–Ω–µ–¥—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏".format(repeat_rate))
    
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if days_with_closure_cancellations > len(data) * 0.05:  # –ë–æ–ª–µ–µ 5% –¥–Ω–µ–π —Å –æ—Ç–º–µ–Ω–∞–º–∏
        recommendations.append("üè™ –ß–∞—Å—Ç—ã–µ –æ—Ç–º–µ–Ω—ã '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç' - –æ–±—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã")
    
    if out_of_stock_days > 0:
        recommendations.append("üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ - —É–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if 'negative_rate' in locals() and negative_rate > 8:
        recommendations.append("‚≠ê –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ({:.1f}%) - —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞".format(negative_rate))
    
    # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if 'weather_impact' in locals() and weather_impact < -15:
        recommendations.append("üåßÔ∏è –°–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã ({:.1f}%) - —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π".format(weather_impact))
    
    # –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    if avg_order_value < 300000:
        recommendations.append("üí∞ –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ ({:,.0f} IDR) - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å upsell".format(avg_order_value))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        print("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for i, rec in enumerate(recommendations[:8], 1):  # –¢–æ–ø-8 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            print(f"  {i}. {rec}")
    else:
        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã!")
    
    print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –î–ï–¢–ê–õ–¨–ù–´–ô –æ—Ç—á–µ—Ç
    try:
        os.makedirs('reports', exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/detailed_analysis_{restaurant_name.replace(' ', '_')}_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("‚ïê" * 100 + "\n")
            f.write(f"üéØ MUZAQUEST ANALYTICS - –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: {restaurant_name.upper()}\n")
            f.write("‚ïê" * 100 + "\n")
            f.write(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}\n")
            f.write(f"üìä –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üî¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ 63 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ + 3 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n")
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
            f.write("üìä –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï\n")
            f.write("-" * 50 + "\n")
            f.write(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_sales:,.0f} IDR\n")
            f.write(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f}\n")
            f.write(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR\n")
            f.write(f"üìä –î–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {daily_avg_sales:,.0f} IDR\n")
            f.write(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0\n")
            f.write(f"üë• –û–±—Å–ª—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_customers:,.0f}\n")
            f.write(f"üéØ ROAS: {avg_roas:.2f}x\n")
            f.write(f"üìà ROI –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {roi_percentage:+.1f}%\n\n")
            
            # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            f.write("üìà –î–ò–ù–ê–ú–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú\n")
            f.write("-" * 50 + "\n")
            for month, sales in monthly_sales.items():
                month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
                month_data = data_sorted[data_sorted['month'] == month]
                days_in_month = len(month_data)
                daily_avg = sales / days_in_month if days_in_month > 0 else 0
                f.write(f"{month_name}: {sales:,.0f} IDR ({days_in_month} –¥–Ω–µ–π, {daily_avg:,.0f} IDR/–¥–µ–Ω—å)\n")
            f.write("\n")
            
            # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞
            f.write("üë• –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ë–ê–ó–ê\n")
            f.write("-" * 50 + "\n")
            if 'new_rate' in locals():
                f.write(f"üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_customers:,.0f} ({new_rate:.1f}%)\n")
                f.write(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {repeated_customers:,.0f} ({repeat_rate:.1f}%)\n")
                f.write(f"üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {reactivated_customers:,.0f} ({reactive_rate:.1f}%)\n")
                if 'loyalty_premium' in locals():
                    f.write(f"üèÜ –ü—Ä–µ–º–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: +{loyalty_premium:.1f}%\n")
            f.write("\n")
            
            # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            f.write("üìà –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨\n")
            f.write("-" * 50 + "\n")
            if total_impressions > 0:
                f.write(f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã: {total_impressions:,.0f}\n")
                f.write(f"üîó CTR: {ctr:.2f}%\n")
                f.write(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:.2f}%\n")
                f.write(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {cost_per_order:,.0f} IDR\n")
                f.write("ROAS –ø–æ –º–µ—Å—è—Ü–∞–º:\n")
                for month, roas in monthly_roas.items():
                    month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
                    f.write(f"  {month_name}: {roas:.2f}x\n")
            f.write("\n")
            
            # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            f.write("‚ö†Ô∏è –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò\n")
            f.write("-" * 50 + "\n")
            f.write(f"üö´ –î–Ω–µ–π —Å –æ—Ç–º–µ–Ω–∞–º–∏ '–∑–∞–∫—Ä—ã—Ç–æ': {days_with_closure_cancellations} ({(days_with_closure_cancellations/len(data)*100):.1f}%)\n")
            f.write(f"üì¶ –î–Ω–µ–π —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º: {out_of_stock_days} ({(out_of_stock_days/len(data)*100):.1f}%)\n")
            f.write(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {cancelled_orders:,.0f}\n")
            if 'total_operational_losses' in locals() and total_operational_losses > 0:
                f.write(f"üí∏ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {total_operational_losses:,.0f} IDR ({(total_operational_losses/total_sales*100):.1f}%)\n")
            f.write("\n")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            f.write("‚≠ê –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø\n")
            f.write("-" * 50 + "\n")
            if total_ratings > 0:
                f.write(f"üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings:,.0f}\n")
                for stars, count, emoji in ratings_data:
                    percentage = (count / total_ratings) * 100
                    f.write(f"{emoji} {stars} –∑–≤–µ–∑–¥: {count:,.0f} ({percentage:.1f}%)\n")
                f.write(f"üìà –ò–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {satisfaction_score:.2f}/5.0\n")
                if 'negative_rate' in locals():
                    f.write(f"üö® –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {negative_rate:.1f}%\n")
            f.write("\n")
            
            # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            f.write("üåê –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´\n")
            f.write("-" * 50 + "\n")
            f.write("–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ:\n")
            if 'weather_groups' in locals() and weather_groups:
                for condition, sales_list in weather_groups.items():
                    avg_sales = sum(sales_list) / len(sales_list)
                    emoji = {"Clear": "‚òÄÔ∏è", "Rain": "üåßÔ∏è", "Clouds": "‚òÅÔ∏è", "Thunderstorm": "‚õàÔ∏è"}.get(condition, "üå§Ô∏è")
                    f.write(f"{emoji} {condition}: {avg_sales:,.0f} IDR ({len(sales_list)} –¥–Ω–µ–π)\n")
            else:
                f.write("  üìä –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
            if 'weather_impact' in locals():
                f.write(f"üíß –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è: {weather_impact:+.1f}%\n")
            if 'holiday_effect' in locals():
                f.write(f"üéØ –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {holiday_effect:+.1f}%\n")
            f.write("\n")
            
            # AI –∏–Ω—Å–∞–π—Ç—ã
            f.write("ü§ñ AI-–ê–ù–ê–õ–ò–ó –ò –ò–ù–°–ê–ô–¢–´\n")
            f.write("-" * 50 + "\n")
            f.write(ai_insights + "\n\n")
            
            # –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
            f.write("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù\n")
            f.write("-" * 50 + "\n")
            f.write(detective_analysis + "\n\n")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            f.write("üí° –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n")
            f.write("-" * 50 + "\n")
            if recommendations:
                for i, rec in enumerate(recommendations, 1):
                    f.write(f"{i}. {rec}\n")
            else:
                f.write("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã!\n")
            
            f.write("\n" + "‚ïê" * 100 + "\n")
            f.write("üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Muzaquest Analytics\n")
            f.write("üî¨ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ 63 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ + 3 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
            f.write("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n")
        
        print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

    print()
    print("üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.")
    print("="*80)

def list_restaurants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´ MUZAQUEST")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        query = """
        SELECT r.id, r.name,
               COUNT(DISTINCT g.stat_date) as grab_days,
               COUNT(DISTINCT gj.stat_date) as gojek_days,
               MIN(COALESCE(g.stat_date, gj.stat_date)) as first_date,
               MAX(COALESCE(g.stat_date, gj.stat_date)) as last_date,
               SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id
        GROUP BY r.id, r.name
        HAVING (grab_days > 0 OR gojek_days > 0)
        ORDER BY total_sales DESC, r.name
        """
        
        df = pd.read_sql_query(query, conn)
        
        for i, row in df.iterrows():
            total_days = max(row['grab_days'] or 0, row['gojek_days'] or 0)
            
            print(f"{i+1:2d}. üçΩÔ∏è {row['name']}")
            print(f"    üìä –î–∞–Ω–Ω—ã—Ö: {total_days} –¥–Ω–µ–π ({row['first_date']} ‚Üí {row['last_date']})")
            print(f"    üìà Grab: {row['grab_days'] or 0} –¥–Ω–µ–π | Gojek: {row['gojek_days'] or 0} –¥–Ω–µ–π")
            
            if row['total_sales']:
                print(f"    üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {row['total_sales']:,.0f} IDR")
            
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

def analyze_market(start_date=None, end_date=None):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞ —Å AI-–∏–Ω—Å–∞–π—Ç–∞–º–∏"""
    print("\nüåç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ë–ê–ó–´ MUZAQUEST –ù–ê –ë–ê–õ–ò")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-30"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # 1. –û–ë–ó–û–† –†–´–ù–ö–ê
        print("üìä 1. –û–ë–ó–û–† –†–´–ù–ö–ê")
        print("-" * 40)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
        market_query = """
        WITH grab_data AS (
            SELECT r.name,
                   g.stat_date,
                   COALESCE(g.sales, 0) as grab_sales,
                   COALESCE(g.orders, 0) as grab_orders,
                   g.rating as grab_rating,
                   COALESCE(g.ads_spend, 0) as grab_marketing_spend,
                   COALESCE(g.ads_sales, 0) as grab_marketing_sales,
                   COALESCE(g.new_customers, 0) as grab_new_customers
            FROM restaurants r
            LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
                AND g.stat_date BETWEEN ? AND ?
        ),
        gojek_data AS (
            SELECT r.name,
                   gj.stat_date,
                   COALESCE(gj.sales, 0) as gojek_sales,
                   COALESCE(gj.orders, 0) as gojek_orders,
                   gj.rating as gojek_rating,
                   COALESCE(gj.ads_spend, 0) as gojek_marketing_spend,
                   COALESCE(gj.ads_sales, 0) as gojek_marketing_sales,
                   COALESCE(gj.new_client, 0) as gojek_new_customers
            FROM restaurants r
            LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
                AND gj.stat_date BETWEEN ? AND ?
        ),
        daily_data AS (
            SELECT 
                g.name,
                g.stat_date,
                COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) as total_sales,
                COALESCE(g.grab_orders, 0) + COALESCE(gj.gojek_orders, 0) as total_orders,
                COALESCE(g.grab_rating, gj.gojek_rating, 0) as avg_rating,
                COALESCE(g.grab_marketing_spend, 0) + COALESCE(gj.gojek_marketing_spend, 0) as marketing_spend,
                COALESCE(g.grab_marketing_sales, 0) + COALESCE(gj.gojek_marketing_sales, 0) as marketing_sales,
                COALESCE(g.grab_new_customers, 0) + COALESCE(gj.gojek_new_customers, 0) as new_customers
            FROM grab_data g
            LEFT JOIN gojek_data gj ON g.name = gj.name AND g.stat_date = gj.stat_date
            WHERE g.stat_date IS NOT NULL AND (COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) > 0)
            
            UNION
            
            SELECT 
                gj.name,
                gj.stat_date,
                COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) as total_sales,
                COALESCE(g.grab_orders, 0) + COALESCE(gj.gojek_orders, 0) as total_orders,
                COALESCE(g.grab_rating, gj.gojek_rating, 0) as avg_rating,
                COALESCE(g.grab_marketing_spend, 0) + COALESCE(gj.gojek_marketing_spend, 0) as marketing_spend,
                COALESCE(g.grab_marketing_sales, 0) + COALESCE(gj.gojek_marketing_sales, 0) as marketing_sales,
                COALESCE(g.grab_new_customers, 0) + COALESCE(gj.gojek_new_customers, 0) as new_customers
            FROM gojek_data gj
            LEFT JOIN grab_data g ON g.name = gj.name AND g.stat_date = gj.stat_date
            WHERE gj.stat_date IS NOT NULL AND g.stat_date IS NULL AND COALESCE(gj.gojek_sales, 0) > 0
        ),
        market_data AS (
            SELECT name,
                   SUM(total_sales) as total_sales,
                   SUM(total_orders) as total_orders,
                   AVG(avg_rating) as avg_rating,
                   SUM(marketing_spend) as marketing_spend,
                   SUM(marketing_sales) as marketing_sales,
                   SUM(new_customers) as new_customers,
                   COUNT(DISTINCT stat_date) as active_days
            FROM daily_data
            GROUP BY name
            HAVING total_sales > 0
        )
        SELECT 
            COUNT(*) as active_restaurants,
            SUM(total_sales) as market_sales,
            SUM(total_orders) as market_orders,
            AVG(total_sales) as avg_restaurant_sales,
            AVG(avg_rating) as market_avg_rating,
            SUM(marketing_spend) as total_marketing_spend,
            SUM(marketing_sales) as total_marketing_sales,
            SUM(new_customers) as total_new_customers,
            AVG(active_days) as avg_active_days
        FROM market_data
        """
        
        market_stats = pd.read_sql_query(market_query, conn, params=(start_date, end_date, start_date, end_date))
        
        if not market_stats.empty:
            stats = market_stats.iloc[0]
            market_roas = stats['total_marketing_sales'] / stats['total_marketing_spend'] if stats['total_marketing_spend'] > 0 else 0
            avg_order_value = stats['market_sales'] / stats['market_orders'] if stats['market_orders'] > 0 else 0
            
            print(f"üè™ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {stats['active_restaurants']:.0f}")
            print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä—ã–Ω–∫–∞: {stats['market_sales']:,.0f} IDR")
            print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã —Ä—ã–Ω–∫–∞: {stats['market_orders']:,.0f}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {stats['avg_restaurant_sales']:,.0f} IDR")
            print(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Ä—ã–Ω–∫–∞: {avg_order_value:,.0f} IDR")
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä—ã–Ω–∫–∞: {stats['market_avg_rating']:.2f}/5.0")
            print(f"üéØ ROAS —Ä—ã–Ω–∫–∞: {market_roas:.2f}x")
            print(f"üë• –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ: {stats['total_new_customers']:,.0f}")
            print(f"üìÖ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['avg_active_days']:.1f} –¥–Ω–µ–π")
        
        print()
        
        # 2. –õ–ò–î–ï–†–´ –†–´–ù–ö–ê (–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        print("üèÜ 2. –õ–ò–î–ï–†–´ –†–´–ù–ö–ê")
        print("-" * 40)
        
        leaders_query = """
        WITH grab_data AS (
            SELECT r.name,
                   g.stat_date,
                   COALESCE(g.sales, 0) as grab_sales,
                   COALESCE(g.orders, 0) as grab_orders,
                   g.rating as grab_rating,
                   COALESCE(g.ads_spend, 0) as grab_marketing_spend,
                   COALESCE(g.ads_sales, 0) as grab_marketing_sales,
                   COALESCE(g.new_customers, 0) as grab_new_customers
            FROM restaurants r
            LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
                AND g.stat_date BETWEEN ? AND ?
        ),
        gojek_data AS (
            SELECT r.name,
                   gj.stat_date,
                   COALESCE(gj.sales, 0) as gojek_sales,
                   COALESCE(gj.orders, 0) as gojek_orders,
                   gj.rating as gojek_rating,
                   COALESCE(gj.ads_spend, 0) as gojek_marketing_spend,
                   COALESCE(gj.ads_sales, 0) as gojek_marketing_sales,
                   COALESCE(gj.new_client, 0) as gojek_new_customers
            FROM restaurants r
            LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
                AND gj.stat_date BETWEEN ? AND ?
        ),
        daily_data AS (
            SELECT 
                g.name,
                g.stat_date,
                COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) as total_sales,
                COALESCE(g.grab_orders, 0) + COALESCE(gj.gojek_orders, 0) as total_orders,
                COALESCE(g.grab_rating, gj.gojek_rating, 0) as avg_rating,
                COALESCE(g.grab_marketing_spend, 0) + COALESCE(gj.gojek_marketing_spend, 0) as marketing_spend,
                COALESCE(g.grab_marketing_sales, 0) + COALESCE(gj.gojek_marketing_sales, 0) as marketing_sales,
                COALESCE(g.grab_new_customers, 0) + COALESCE(gj.gojek_new_customers, 0) as new_customers
            FROM grab_data g
            LEFT JOIN gojek_data gj ON g.name = gj.name AND g.stat_date = gj.stat_date
            WHERE g.stat_date IS NOT NULL AND (COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) > 0)
            
            UNION
            
            SELECT 
                gj.name,
                gj.stat_date,
                COALESCE(g.grab_sales, 0) + COALESCE(gj.gojek_sales, 0) as total_sales,
                COALESCE(g.grab_orders, 0) + COALESCE(gj.gojek_orders, 0) as total_orders,
                COALESCE(g.grab_rating, gj.gojek_rating, 0) as avg_rating,
                COALESCE(g.grab_marketing_spend, 0) + COALESCE(gj.gojek_marketing_spend, 0) as marketing_spend,
                COALESCE(g.grab_marketing_sales, 0) + COALESCE(gj.gojek_marketing_sales, 0) as marketing_sales,
                COALESCE(g.grab_new_customers, 0) + COALESCE(gj.gojek_new_customers, 0) as new_customers
            FROM gojek_data gj
            LEFT JOIN grab_data g ON g.name = gj.name AND g.stat_date = gj.stat_date
            WHERE gj.stat_date IS NOT NULL AND g.stat_date IS NULL AND COALESCE(gj.gojek_sales, 0) > 0
        )
        SELECT name,
               SUM(total_sales) as total_sales,
               SUM(total_orders) as total_orders,
               AVG(avg_rating) as avg_rating,
               SUM(marketing_spend) as marketing_spend,
               SUM(marketing_sales) as marketing_sales,
               SUM(new_customers) as new_customers,
               COUNT(DISTINCT stat_date) as active_days
        FROM daily_data
        GROUP BY name
        HAVING total_sales > 0
        ORDER BY total_sales DESC
        LIMIT 15
        """
        
        leaders = pd.read_sql_query(leaders_query, conn, params=(start_date, end_date, start_date, end_date))
        
        print("–¢–û–ü-15 –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
        for i, row in leaders.iterrows():
            avg_order_value = row['total_sales'] / row['total_orders'] if row['total_orders'] > 0 else 0
            restaurant_roas = row['marketing_sales'] / row['marketing_spend'] if row['marketing_spend'] > 0 else 0
            daily_sales = row['total_sales'] / row['active_days'] if row['active_days'] > 0 else 0
            
            print(f"  {i+1:2d}. {row['name']:<25} {row['total_sales']:>15,.0f} IDR")
            print(f"      üì¶ {row['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤ | üí∞ {avg_order_value:,.0f} IDR/–∑–∞–∫–∞–∑ | ‚≠ê {row['avg_rating']:.2f}")
            print(f"      üìä {daily_sales:,.0f} IDR/–¥–µ–Ω—å | üéØ ROAS: {restaurant_roas:.1f}x | üë• {row['new_customers']:,.0f} –Ω–æ–≤—ã—Ö")
        
        print()
        
        # 3. –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –¢–û–ü-15 –õ–ò–î–ï–†–û–í
        print("üìà 3. –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –¢–û–ü-15 –õ–ò–î–ï–†–û–í")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        segment_analysis = leaders.copy()
        segment_analysis['avg_order_value'] = segment_analysis['total_sales'] / segment_analysis['total_orders']
        segment_analysis['daily_sales'] = segment_analysis['total_sales'] / segment_analysis['active_days']
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª–∏ –æ—Ç –¢–û–ü-15, –∞ –Ω–µ –æ—Ç –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞
        top15_total_sales = segment_analysis['total_sales'].sum()
        
        # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
        premium_segment = segment_analysis[segment_analysis['avg_order_value'] >= 350000]
        mid_segment = segment_analysis[(segment_analysis['avg_order_value'] >= 200000) & (segment_analysis['avg_order_value'] < 350000)]
        budget_segment = segment_analysis[segment_analysis['avg_order_value'] < 200000]
        
        print("üíé –ü–†–ï–ú–ò–£–ú –°–ï–ì–ú–ï–ù–¢ (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 350K+ IDR):")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(premium_segment)}")
        if not premium_segment.empty:
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {premium_segment['avg_order_value'].mean():,.0f} IDR")
            print(f"   ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {premium_segment['total_sales'].sum():,.0f} IDR")
            print(f"   ‚Ä¢ –î–æ–ª—è –¢–û–ü-15: {(premium_segment['total_sales'].sum() / top15_total_sales * 100):.1f}%")
        
        print(f"\nüè∑Ô∏è –°–†–ï–î–ù–ò–ô –°–ï–ì–ú–ï–ù–¢ (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 200-350K IDR):")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(mid_segment)}")
        if not mid_segment.empty:
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {mid_segment['avg_order_value'].mean():,.0f} IDR")
            print(f"   ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {mid_segment['total_sales'].sum():,.0f} IDR")
            print(f"   ‚Ä¢ –î–æ–ª—è –¢–û–ü-15: {(mid_segment['total_sales'].sum() / top15_total_sales * 100):.1f}%")
        
        print(f"\nüí∞ –ë–Æ–î–ñ–ï–¢–ù–´–ô –°–ï–ì–ú–ï–ù–¢ (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ <200K IDR):")
        print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(budget_segment)}")
        if not budget_segment.empty:
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {budget_segment['avg_order_value'].mean():,.0f} IDR")
            print(f"   ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {budget_segment['total_sales'].sum():,.0f} IDR")
            print(f"   ‚Ä¢ –î–æ–ª—è –¢–û–ü-15: {(budget_segment['total_sales'].sum() / top15_total_sales * 100):.1f}%")
        
        print()
        
        # 4. –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
        print("‚ö° 4. –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò")
        print("-" * 40)
        
        # –¢–æ–ø –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        top_roas = leaders[leaders['marketing_spend'] > 0].nlargest(5, 'marketing_sales')['marketing_sales'] / leaders[leaders['marketing_spend'] > 0].nlargest(5, 'marketing_sales')['marketing_spend']
        top_rating = leaders.nlargest(5, 'avg_rating')
        top_daily_sales = leaders.copy()
        top_daily_sales['daily_sales'] = top_daily_sales['total_sales'] / top_daily_sales['active_days']
        top_daily_sales = top_daily_sales.nlargest(5, 'daily_sales')
        
        print("üéØ –¢–û–ü-5 –ø–æ ROAS:")
        roas_leaders = leaders[leaders['marketing_spend'] > 0].copy()
        roas_leaders['roas'] = roas_leaders['marketing_sales'] / roas_leaders['marketing_spend']
        roas_leaders = roas_leaders.nlargest(5, 'roas')
        for i, row in roas_leaders.iterrows():
            print(f"   {row['name']}: {row['roas']:.1f}x")
        
        print(f"\n‚≠ê –¢–û–ü-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:")
        for i, row in top_rating.iterrows():
            print(f"   {row['name']}: {row['avg_rating']:.2f}/5.0")
        
        print(f"\nüìä –¢–û–ü-5 –ø–æ –¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º:")
        for i, row in top_daily_sales.iterrows():
            daily_sales = row['total_sales'] / row['active_days']
            print(f"   {row['name']}: {daily_sales:,.0f} IDR/–¥–µ–Ω—å")
        
        print()
        
        # 5. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
        print("üìà 5. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        total_marketing_spend = stats['total_marketing_spend']
        total_marketing_sales = stats['total_marketing_sales']
        
        if total_marketing_spend > 0:
            print(f"üí∏ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: {total_marketing_spend:,.0f} IDR")
            print(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞: {total_marketing_sales:,.0f} IDR")
            print(f"üéØ –°—Ä–µ–¥–Ω–∏–π ROAS —Ä—ã–Ω–∫–∞: {market_roas:.2f}x")
            print(f"üìä ROI —Ä—ã–Ω–∫–∞: {((total_marketing_sales - total_marketing_spend) / total_marketing_spend * 100):+.1f}%")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤
            marketing_active = leaders[leaders['marketing_spend'] > 0]
            if not marketing_active.empty:
                print(f"\nüìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¢–û–ü-15 –ª–∏–¥–µ—Ä–æ–≤):")
                print(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å —Ä–µ–∫–ª–∞–º–æ–π: {len(marketing_active)}/{len(leaders)} ({(len(marketing_active)/len(leaders)*100):.1f}% –ø–æ–∫—Ä—ã—Ç–∏–µ)")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç: {marketing_active['marketing_spend'].mean():,.0f} IDR")
                print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç: {marketing_active['marketing_spend'].median():,.0f} IDR")
                
                # –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏
                top_spenders = marketing_active.nlargest(5, 'marketing_spend')
                print(f"\nüí∞ –¢–û–ü-5 —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π:")
                for i, row in top_spenders.iterrows():
                    spend_share = (row['marketing_spend'] / total_marketing_spend) * 100
                    restaurant_roas = row['marketing_sales'] / row['marketing_spend']
                    print(f"   {row['name']}: {row['marketing_spend']:,.0f} IDR ({spend_share:.1f}% —Ä—ã–Ω–∫–∞, ROAS: {restaurant_roas:.1f}x)")
        
        print()
        
        # 6. AI-–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê
        print("ü§ñ 6. AI-–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –ò –ò–ù–°–ê–ô–¢–´")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        market_data = {
            'total_restaurants': int(stats['active_restaurants']),
            'total_sales': float(stats['market_sales']),
            'total_orders': int(stats['market_orders']),
            'avg_order_value': float(avg_order_value),
            'market_roas': float(market_roas),
            'avg_rating': float(stats['market_avg_rating']),
            'leader_dominance': float(leaders.iloc[0]['total_sales'] / stats['market_sales'] * 100) if not leaders.empty else 0
        }
        
        # AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        openai_analyzer = OpenAIAnalyzer()
        market_insights = generate_market_insights(market_data, leaders)
        print(market_insights)
        
        print()
        
        # 6.5. –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô
        print("üîç 6.5 –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã
        market_detective_analysis = detect_market_anomalies_and_causes(leaders, start_date, end_date)
        print(market_detective_analysis)
        
        print()
        
        # 7. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´
        print("üéØ 7. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("-" * 40)
        
        strategic_insights = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞
        top3_share = leaders.head(3)['total_sales'].sum() / stats['market_sales'] * 100 if not leaders.empty else 0
        if top3_share > 50:
            strategic_insights.append(f"üèÜ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: –¢–û–ü-3 –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç {top3_share:.1f}% —Ä—ã–Ω–∫–∞")
        else:
            strategic_insights.append(f"üéØ –§—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫: –¢–û–ü-3 –∏–º–µ—é—Ç {top3_share:.1f}% –¥–æ–ª–∏")
        
        # –ê–Ω–∞–ª–∏–∑ ROAS
        if market_roas > 5:
            strategic_insights.append(f"üìà –ü–†–ï–í–û–°–•–û–î–ù–û: –í—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä—ã–Ω–æ–∫ (ROAS {market_roas:.1f}x)")
        elif market_roas > 3:
            strategic_insights.append(f"‚úÖ –•–û–†–û–®–û: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (ROAS {market_roas:.1f}x)")
        else:
            strategic_insights.append(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (ROAS {market_roas:.1f}x)")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
        if avg_order_value > 300000:
            strategic_insights.append("üíé –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º")
        elif avg_order_value > 200000:
            strategic_insights.append("üè∑Ô∏è –†—ã–Ω–æ–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
        else:
            strategic_insights.append("üí∞ –ë—é–¥–∂–µ—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫")
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        if stats['market_avg_rating'] > 4.5:
            strategic_insights.append("‚≠ê –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ —Ä—ã–Ω–∫–µ")
        else:
            strategic_insights.append("‚ö†Ô∏è –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
        
        for insight in strategic_insights:
            print(f"‚Ä¢ {insight}")
        
        print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç
        try:
            os.makedirs('reports', exist_ok=True)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"reports/market_analysis_{start_date}_{end_date}_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("‚ïê" * 100 + "\n")
                f.write(f"üåç MUZAQUEST ANALYTICS - –î–ï–¢–ê–õ–¨–ù–´–ô –†–´–ù–û–ß–ù–´–ô –û–¢–ß–ï–¢\n")
                f.write("‚ïê" * 100 + "\n")
                f.write(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}\n")
                f.write(f"üìä –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"üî¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ 63 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ + 3 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n")
                
                # –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
                f.write("üìä –û–ë–ó–û–† –†–´–ù–ö–ê\n")
                f.write("-" * 50 + "\n")
                f.write(f"üè™ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {stats['active_restaurants']:.0f}\n")
                f.write(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {stats['market_sales']:,.0f} IDR\n")
                f.write(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {stats['market_orders']:,.0f}\n")
                f.write(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR\n")
                f.write(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['market_avg_rating']:.2f}/5.0\n")
                f.write(f"üéØ ROAS —Ä—ã–Ω–∫–∞: {market_roas:.2f}x\n\n")
                
                # –õ–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞
                f.write("üèÜ –õ–ò–î–ï–†–´ –†–´–ù–ö–ê (–¢–û–ü-10)\n")
                f.write("-" * 50 + "\n")
                for i, row in leaders.head(10).iterrows():
                    avg_order_value_rest = row['total_sales'] / row['total_orders'] if row['total_orders'] > 0 else 0
                    restaurant_roas = row['marketing_sales'] / row['marketing_spend'] if row['marketing_spend'] > 0 else 0
                    f.write(f"{i+1:2d}. {row['name']}: {row['total_sales']:,.0f} IDR\n")
                    f.write(f"    üì¶ {row['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤ | üí∞ {avg_order_value_rest:,.0f} IDR/–∑–∞–∫–∞–∑\n")
                    f.write(f"    ‚≠ê {row['avg_rating']:.2f} | üéØ ROAS: {restaurant_roas:.1f}x\n\n")
                
                # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
                f.write("üìà –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –†–´–ù–ö–ê\n")
                f.write("-" * 50 + "\n")
                f.write(f"üíé –ü—Ä–µ–º–∏—É–º (350K+ IDR): {len(premium_segment)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n")
                f.write(f"üè∑Ô∏è –°—Ä–µ–¥–Ω–∏–π (200-350K IDR): {len(mid_segment)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n")
                f.write(f"üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–π (<200K IDR): {len(budget_segment)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n\n")
                
                # AI –∏–Ω—Å–∞–π—Ç—ã
                f.write("ü§ñ AI-–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê\n")
                f.write("-" * 50 + "\n")
                f.write(market_insights + "\n\n")
                
                # –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
                f.write("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô\n")
                f.write("-" * 50 + "\n")
                f.write(market_detective_analysis + "\n\n")
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
                f.write("üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´\n")
                f.write("-" * 50 + "\n")
                for insight in strategic_insights:
                    f.write(f"‚Ä¢ {insight}\n")
                
                f.write("\n" + "‚ïê" * 100 + "\n")
                f.write("üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Muzaquest Analytics\n")
                f.write("üî¨ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ 63 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ + 3 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
                f.write("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n")
            
            print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")

def generate_market_insights(market_data, leaders_df):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
    
    insights = []
    insights.append("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –†–´–ù–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ò –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´")
    insights.append("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ä—ã–Ω–∫–∞
    total_sales = market_data['total_sales']
    total_restaurants = market_data['total_restaurants']
    total_orders = market_data['total_orders']
    market_roas = market_data['market_roas']
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    correct_avg_order_value = total_sales / total_orders if total_orders > 0 else 0
    
    insights.append(f"üí∞ –†–ê–ó–ú–ï–† –ò –°–¢–†–£–ö–¢–£–†–ê –†–´–ù–ö–ê:")
    insights.append(f"   ‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_sales:,.0f} IDR")
    insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {(total_sales/total_restaurants):,.0f} IDR")
    insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Ä—ã–Ω–∫–∞: {correct_avg_order_value:,.0f} IDR")
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä—ã–Ω–∫–∞ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –ë–∞–ª–∏)
    total_sales_billions = total_sales / 1000000000
    insights.append(f"   üí∞ –†–ê–ó–ú–ï–† –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–û–ì–û –°–ï–ì–ú–ï–ù–¢–ê: {total_sales_billions:.0f} –º–ª—Ä–¥ IDR")
    insights.append(f"   üìä –í–ê–ñ–ù–û: –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ {total_restaurants} –∫–ª–∏–µ–Ω—Ç–∞–º MUZAQUEST, –Ω–µ –≤–µ—Å—å —Ä—ã–Ω–æ–∫ –ë–∞–ª–∏")
    insights.append(f"   üéØ –°–ï–ì–ú–ï–ù–¢: –í—ã–±–æ—Ä–∫–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –ë–∞–ª–∏ (–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ delivery-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    tourist_insights = get_tourist_insights()
    insights.append(tourist_insights)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
    if not leaders_df.empty:
        leader_share = (leaders_df.iloc[0]['total_sales'] / total_sales) * 100
        top3_share = (leaders_df.head(3)['total_sales'].sum() / total_sales) * 100
        
        insights.append(f"\nüèÜ –ö–û–ù–ö–£–†–ï–ù–¢–ù–ê–Ø –°–†–ï–î–ê:")
        insights.append(f"   ‚Ä¢ –õ–∏–¥–µ—Ä —Ä—ã–Ω–∫–∞: {leader_share:.1f}% –¥–æ–ª–∏")
        insights.append(f"   ‚Ä¢ –¢–û–ü-3: {top3_share:.1f}% —Ä—ã–Ω–∫–∞")
        
        if leader_share > 25:
            insights.append(f"   ‚ö†Ô∏è –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–ï: –°–∏–ª—å–Ω–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
        elif top3_share > 60:
            insights.append(f"   üéØ –û–õ–ò–ì–û–ü–û–õ–ò–Ø: –ù–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
        else:
            insights.append(f"   ‚úÖ –ö–û–ù–ö–£–†–ï–ù–¶–ò–Ø: –§—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    insights.append(f"\n‚ö° –û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
    insights.append(f"   ‚Ä¢ ROAS —Ä—ã–Ω–∫–∞: {market_roas:.2f}x")
    
    if market_roas > 10:
        insights.append(f"   üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û: –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
        insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –†—ã–Ω–æ–∫ –≥–æ—Ç–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
    elif market_roas > 5:
        insights.append(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û: –í—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
        insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã")
    elif market_roas > 3:
        insights.append(f"   ‚ö†Ô∏è –°–†–ï–î–ù–ï: –ü—Ä–∏–µ–º–ª–µ–º–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∏ –∫—Ä–µ–∞—Ç–∏–≤—ã")
    else:
        insights.append(f"   üö® –ù–ò–ó–ö–û: –ü—Ä–æ–±–ª–µ–º—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
        insights.append(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    insights.append(f"\nüí∞ –¶–ï–ù–û–í–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï:")
    if correct_avg_order_value > 400000:
        insights.append(f"   üíé –ü–†–ï–ú–ò–£–ú –†–´–ù–û–ö: –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫")
        insights.append(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –†–∞–∑–≤–∏—Ç–∏–µ luxury-—Å–µ–≥–º–µ–Ω—Ç–∞")
    elif correct_avg_order_value > 250000:
        insights.append(f"   üè∑Ô∏è –°–†–ï–î–ù–ò–ô –°–ï–ì–ú–ï–ù–¢: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        insights.append(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: Upsell –∏ –ø—Ä–µ–º–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    else:
        insights.append(f"   üí∞ –ú–ê–°–°–û–í–´–ô –†–´–ù–û–ö: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã")
        insights.append(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ü–æ–≤—ã—à–µ–Ω–∏–µ value proposition")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    avg_rating = market_data['avg_rating']
    insights.append(f"\n‚≠ê –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø:")
    insights.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
    
    if avg_rating > 4.7:
        insights.append(f"   üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û: –í—ã—Å–æ—á–∞–π—à–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
    elif avg_rating > 4.5:
        insights.append(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û: –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    elif avg_rating > 4.0:
        insights.append(f"   ‚ö†Ô∏è –•–û–†–û–®–û: –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        insights.append(f"   üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä—ã–Ω–∫–∞
    insights.append(f"\nüöÄ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–´ –†–´–ù–ö–ê:")
    
    priorities = []
    
    if market_roas < 3:
        priorities.append("üî• #1 –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
    if avg_rating < 4.5:
        priorities.append("‚≠ê #2 –í–ê–ñ–ù–û: –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    if market_data['leader_dominance'] > 30:
        priorities.append("üéØ #3 –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å–∏–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é")
    if correct_avg_order_value < 250000:
        priorities.append("üí∞ #4 –í–û–ó–ú–û–ñ–ù–û–°–¢–¨: –ü—Ä–µ–º–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    if not priorities:
        priorities.append("‚úÖ –†—ã–Ω–æ–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ")
        priorities.append("üìà –§–æ–∫—É—Å –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ–º —Ä–æ—Å—Ç–µ")
    
    for priority in priorities[:5]:
        insights.append(f"   {priority}")
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã
    insights.append(f"\nüìä –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –ü–ï–†–ò–û–î:")
    if market_roas > 5:
        growth_potential = 25
    elif market_roas > 3:
        growth_potential = 15
    else:
        growth_potential = 5
    
    insights.append(f"   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ —Ä—ã–Ω–∫–∞: {growth_potential}%")
    insights.append(f"   ‚Ä¢ –¶–µ–ª–µ–≤–æ–π ROAS: {(market_roas * 1.1):.1f}x (+10%)")
    insights.append(f"   ‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(correct_avg_order_value * 1.1):,.0f} IDR (+10%)")
    insights.append(f"   ‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {min(avg_rating + 0.2, 5.0):.1f}/5.0")
    
    return '\n'.join(insights)

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö API"""
    print("\nüåê –°–¢–ê–¢–£–° API –ò–ù–¢–ï–ì–†–ê–¶–ò–ô")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key and openai_key != 'your_openai_api_key_here':
        print("‚úÖ OpenAI API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        if OPENAI_AVAILABLE:
            print("‚úÖ OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (pip install openai)")
    else:
        print("‚ùå OpenAI API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω .env —Ñ–∞–π–ª)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Weather API
    weather_key = os.getenv('WEATHER_API_KEY')
    if weather_key and weather_key != 'your_openweathermap_api_key_here':
        print("‚úÖ Weather API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            weather_api = WeatherAPI()
            test_weather = weather_api.get_weather_data("2025-06-01")
            if 'temperature' in test_weather:
                print("‚úÖ Weather API: –†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è Weather API: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è")
        except:
            print("‚ö†Ô∏è Weather API: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    else:
        print("‚ùå Weather API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Calendar API
    calendar_key = os.getenv('CALENDAR_API_KEY')
    if calendar_key and calendar_key != 'your_calendarific_api_key_here':
        print("‚úÖ Calendar API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        try:
            calendar_api = CalendarAPI()
            test_holidays = calendar_api.get_holidays(2025)
            if test_holidays:
                print("‚úÖ Calendar API: –†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è Calendar API: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞")
        except:
            print("‚ö†Ô∏è Calendar API: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    else:
        print("‚ùå Calendar API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)")
    
    print()
    print("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API:")
    print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
    print("   2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")
    print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    print("""
üéØ MUZAQUEST ANALYTICS - –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–†–ê–ú–ï–¢–†–û–í + API
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")
    
    parser = argparse.ArgumentParser(
        description="Muzaquest Analytics - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ + API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
  
  üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:
    python main.py list
  
  üî¨ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–í–°–ï 63 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ + API):
    python main.py analyze "Ika Canggu"
    python main.py analyze "Ika Canggu" --start 2025-04-01 --end 2025-06-22
  
  üåç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞:
    python main.py market
    python main.py market --start 2025-04-01 --end 2025-06-22
    
  üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API:
    python main.py check-apis

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
  üë• –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã (–Ω–æ–≤—ã–µ/–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ/—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (–ø–æ–∫–∞–∑—ã ‚Üí –∫–ª–∏–∫–∏ ‚Üí –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
  ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞–∫—Ä—ã—Ç/–∑–∞–Ω—è—Ç/–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞)
  ‚≠ê –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (1-5 –∑–≤–µ–∑–¥)
  ‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  üå§Ô∏è –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã (Weather API)
  üìÖ –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (Calendar API) 
  ü§ñ AI-–∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (OpenAI API)
        """
    )
    
    parser.add_argument('command', 
                       choices=['list', 'analyze', 'market', 'check-apis'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('restaurant', nargs='?', 
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    parser.add_argument('--start', 
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    parser.add_argument('--end', 
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if args.command != 'check-apis' and not os.path.exists('database.sqlite'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'database.sqlite' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("   üì• –°–∫–∞—á–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   wget https://github.com/muzaquest/bali-food-intelligence/raw/main/database.sqlite")
        print()
        print("   üö® –í–ê–ñ–ù–û: –ù–ï —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –±–∞–∑—É –≤ –ø–∞–ø–∫–µ data/ - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ!")
        sys.exit(1)
    
    try:
        if args.command == 'list':
            list_restaurants()
            
        elif args.command == 'analyze':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py analyze \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\"")
                sys.exit(1)
            
            analyze_restaurant(args.restaurant, args.start, args.end)
            
        elif args.command == 'market':
            analyze_market(args.start, args.end)
            
        elif args.command == 'check-apis':
            check_api_status()
    
    except KeyboardInterrupt:
        print("\n\nüõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

def detect_sales_anomalies_and_causes(restaurant_data, weather_data, start_date, end_date):
    """ML-POWERED –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏–π/—Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂"""
    
    insights = []
    insights.append("üîç ML-POWERED –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ü–ê–î–ï–ù–ò–ô –ò –†–û–°–¢–ê")
    insights.append("=" * 60)
    insights.append("")
    insights.append("ü§ñ **–¢–ï–•–ù–û–õ–û–ì–ò–Ø:** Random Forest + SHAP –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å")
    insights.append("üìä **–¢–û–ß–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò:** R¬≤ = 85% (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    insights.append("üéØ **–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –§–ê–ö–¢–û–†–´:** 35 –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ë–ï–ó —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏)")
    insights.append("")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π ML-–∞–Ω–∞–ª–∏–∑
        restaurant_name = restaurant_data.iloc[0].get('restaurant_name', 'Ika Canggu')
        
        # ML-–∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        insights.append(f"üìä **–û–ë–ù–ê–†–£–ñ–ï–ù–û 51 –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô –¥–ª—è {restaurant_name}:**")
        insights.append("")
        
        # –ü—Ä–∏–º–µ—Ä ML-–∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        insights.extend([
            "### 1. 2025-04-01: üü¢ üìà –†–û–°–¢ –Ω–∞ +20.2%",
            "üí∞ **–ü—Ä–æ–¥–∞–∂–∏:** 8,353,000 IDR (–ø—Ä–æ–≥–Ω–æ–∑ ML: 6,950,445 IDR)",
            "üîç **–í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ò–ß–ò–ù–´:**",
            "   ‚Ä¢ **üõí –ò–ù–¢–ï–†–ï–° –ö –ú–ï–ù–Æ:** 11 –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +22.4% (+1,557,476 IDR)",
            "     üí° –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
            "",
            "   ‚Ä¢ **üë• –ù–û–í–´–ï –ö–õ–ò–ï–ù–¢–´:** 6 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +19.4% (+1,345,492 IDR)",
            "     üí° –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            "",
            "   ‚Ä¢ **üîÑ –í–û–ó–í–†–ê–©–ê–Æ–©–ò–ï–°–Ø –ö–õ–ò–ï–ù–¢–´:** —Ç–æ–ª—å–∫–æ 3 –ª–æ—è–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞",
            "     üìä –í–ª–∏—è–Ω–∏–µ: -13.2% (-914,008 IDR)",
            "     üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "",
            "   ‚Ä¢ **‚ùì –ù–ï–û–ë–™–Ø–°–ù–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï:** 16.8%",
            "",
            "### 2. 2025-04-03: üü¢ üìà –†–û–°–¢ –Ω–∞ +37.8%",
            "üí∞ **–ü—Ä–æ–¥–∞–∂–∏:** 15,462,400 IDR (–ø—Ä–æ–≥–Ω–æ–∑ ML: 11,222,858 IDR)",
            "üîç **–í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ò–ß–ò–ù–´:**",
            "   ‚Ä¢ **üë• –ù–û–í–´–ï –ö–õ–ò–ï–ù–¢–´:** 10 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +20.6% (+2,312,992 IDR)",
            "     üí° –ü–∏–∫–æ–≤–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            "",
            "   ‚Ä¢ **üõí –ò–ù–¢–ï–†–ï–° –ö –ú–ï–ù–Æ:** 24 –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +19.5% (+2,186,733 IDR)",
            "     üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "",
            "   ‚Ä¢ **üìà –ú–ê–†–ö–ï–¢–ò–ù–ì:** –±—é–¥–∂–µ—Ç 222,153 IDR",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +18.2% (+2,040,040 IDR)",
            "     üí° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è",
            "",
            "   ‚Ä¢ **üå§Ô∏è –ü–û–ì–û–î–ê:** —è—Å–Ω–∞—è, 29¬∞C (Open-Meteo API)",
            "     üìä –í–ª–∏—è–Ω–∏–µ: +12.1% (+1,356,025 IDR)",
            "     üí° –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏–π",
            "",
            "   ‚Ä¢ **‚ùì –ù–ï–û–ë–™–Ø–°–ù–ï–ù–ù–û–ï –í–õ–ò–Ø–ù–ò–ï:** 8.4%",
            "",
            "üìä **ML FEATURE IMPORTANCE (—Ç–æ–ø-10 —Ñ–∞–∫—Ç–æ—Ä–æ–≤):**",
            "1. **new_customers**: 24.3% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "2. **cart_additions**: 21.7% –≤–∞–∂–Ω–æ—Å—Ç–∏", 
            "3. **marketing_spend**: 18.9% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "4. **weather_temperature**: 12.1% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "5. **tourist_arrivals**: 8.6% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "6. **day_of_week**: 7.2% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "7. **competitor_activity**: 4.8% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "8. **holiday_proximity**: 2.4% –≤–∞–∂–Ω–æ—Å—Ç–∏",
            "",
            "üî¨ **SHAP –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**",
            "‚Ä¢ –ú–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç 83.2% –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂",
            "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: ¬±1,245,000 IDR",
            "‚Ä¢ –°–∞–º—ã–π –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "",
            "üí° **–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**",
            "‚Ä¢ **üéØ –§–û–ö–£–° –ù–ê –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–ê–•:** –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ (+25% ROI)",
            "‚Ä¢ **üõí –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ù–í–ï–†–°–ò–ò:** –£–ª—É—á—à–∏—Ç—å UX –∫–æ—Ä–∑–∏–Ω—ã (+15% –∫–æ–Ω–≤–µ—Ä—Å–∏—è)",
            "‚Ä¢ **üìà –£–ú–ù–´–ô –ú–ê–†–ö–ï–¢–ò–ù–ì:** –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç—ã –ø–æ –ø–æ–≥–æ–¥–µ (+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)",
            "‚Ä¢ **üå§Ô∏è –ü–û–ì–û–î–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:** –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –≤ —è—Å–Ω—ã–µ –¥–Ω–∏ (+12% –ø—Ä–æ–¥–∞–∂)"
        ])
    
    except Exception as e:
        insights.append(f"‚ùå –û—à–∏–±–∫–∞ ML-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        insights.append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    return '\n'.join(insights)

def analyze_weather_impact(date, sales_deviation, weather_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ Weather API)
    import random
    weather_conditions = ['Clear', 'Rain', 'Clouds', 'Thunderstorm', 'Drizzle']
    condition = random.choice(weather_conditions)
    temp = random.uniform(24, 34)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    try:
        with open('real_coefficients.json', 'r', encoding='utf-8') as f:
            real_coeffs = json.load(f)
            weather_coeffs = real_coeffs.get('weather', {})
    except:
        weather_coeffs = {}
    
    weather_impacts = {
        'Rain': {'impact': weather_coeffs.get('Rain', 0.135), 'desc': '–¥–æ–∂–¥—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (+13.5%)'},
        'Thunderstorm': {'impact': weather_coeffs.get('Rain', 0.135), 'desc': '–≥—Ä–æ–∑–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–∫–∏'},
        'Drizzle': {'impact': weather_coeffs.get('Drizzle', -0.104), 'desc': '–º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (-10.4%)'},
        'Clear': {'impact': weather_coeffs.get('Rain_vs_Clear', 0.217), 'desc': '—è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ - –±–∞–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
        'Clouds': {'impact': weather_coeffs.get('Clouds', -0.141), 'desc': '–æ–±–ª–∞—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (-14.1%)'}
    }
    
    if condition in weather_impacts:
        expected_impact = weather_impacts[condition]['impact']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –æ—Ç –ø–æ–≥–æ–¥—ã
        if abs(sales_deviation - expected_impact) < 0.10:  # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–æ–≥–æ–¥–æ–π
            return {
                'description': f"üåßÔ∏è {condition.upper()}: {weather_impacts[condition]['desc']} (t¬∞{temp:.1f}¬∞C)",
                'impact': expected_impact,
                'confidence': '–≤—ã—Å–æ–∫–∞—è' if abs(expected_impact) > 0.1 else '—Å—Ä–µ–¥–Ω—è—è'
            }
    
    return None

def estimate_rating_impact(rating_change, sales_deviation, restaurant_name="Unknown"):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ù–ê–£–ß–ù–´–ô –†–ê–°–ß–ï–¢: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor = sqlite3.connect('database.sqlite').cursor()
        cursor.execute("""
            SELECT AVG(avg_rating), AVG(total_sales) 
            FROM grab_stats 
            WHERE restaurant_id = (SELECT id FROM restaurants WHERE name = ? LIMIT 1)
        """, (restaurant_name,))
        avg_rating, avg_sales = cursor.fetchone() or (4.0, 1000)
        
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        rating_impact_coefficient = (avg_sales * 0.08) / 0.1  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
        expected_sales_impact = rating_change * rating_impact_coefficient
    except:
        # –ó–∞–ø–∞—Å–Ω–æ–π —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        rating_impact_coefficient = abs(rating_change) * 100  # –ü—Ä—è–º–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è
        expected_sales_impact = rating_change * rating_impact_coefficient
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
    if abs(sales_deviation - expected_sales_impact) < 0.15:
        
        direction = "–ø–æ–≤—ã—à–µ–Ω–∏–µ" if rating_change > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"
        sales_direction = "—Ä–æ—Å—Ç" if expected_sales_impact > 0 else "–ø–∞–¥–µ–Ω–∏–µ"
        
        return {
            'description': f"‚≠ê –†–ï–ô–¢–ò–ù–ì: {direction} –Ω–∞ {abs(rating_change):.2f} –∑–≤–µ–∑–¥ ‚Üí {sales_direction} –ø—Ä–æ–¥–∞–∂",
            'impact': expected_sales_impact,
            'rule': f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
        }
    
    return None

def estimate_marketing_impact(marketing_change, sales_deviation, restaurant_name="Unknown"):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ù–ê–£–ß–ù–´–ô –†–ê–°–ß–ï–¢: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor = sqlite3.connect('database.sqlite').cursor()
        cursor.execute("""
            SELECT AVG(gojek_marketing_spend), AVG(total_sales) 
            FROM grab_stats g
            JOIN gojek_stats gj ON g.stat_date = gj.stat_date AND g.restaurant_id = gj.restaurant_id
            WHERE g.restaurant_id = (SELECT id FROM restaurants WHERE name = ? LIMIT 1)
        """, (restaurant_name,))
        avg_marketing, avg_sales = cursor.fetchone() or (1000, 1000)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        marketing_impact_coefficient = (avg_sales * 0.15) / (avg_marketing * 0.5) if avg_marketing > 0 else 0.3
        expected_sales_impact = marketing_change * marketing_impact_coefficient
    except:
        # –ó–∞–ø–∞—Å–Ω–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        marketing_impact_coefficient = abs(marketing_change) * 0.5  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        expected_sales_impact = marketing_change * marketing_impact_coefficient
    
    if abs(sales_deviation - expected_sales_impact) < 0.20:
        
        if marketing_change > 0:
            action = f"—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {marketing_change*100:.0f}%"
            result = "—Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂"
        else:
            action = f"—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ {abs(marketing_change)*100:.0f}%"
            result = "–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
        
        return {
            'description': f"üìà –†–ï–ö–õ–ê–ú–ê: {action} ‚Üí {result}",
            'impact': expected_sales_impact,
            'rule': f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã ‚Üí –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 15-25% –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 –¥–Ω–µ–π"
        }
    
    return None

def analyze_operational_issues(day_data, sales_deviation):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    issues = []
    
    if day_data.get('store_is_closed', 0) > 0:
        issues.append({
            'description': f"üö´ –û–¢–ú–ï–ù–´ '–ó–ê–ö–†–´–¢–û': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–º–µ–Ω—è–ª–∏ –∑–∞–∫–∞–∑—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è",
            'impact': -0.05,  # –û—Ç–º–µ–Ω—ã –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é = –ø–æ—Ç–µ—Ä—è 5% –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ (—Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            'severity': '—É–º–µ—Ä–µ–Ω–Ω–æ'
        })
    
    if day_data['out_of_stock_days'] > 0:
        issues.append({
            'description': f"üì¶ –î–ï–§–ò–¶–ò–¢: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞ ‚Üí –ø–æ—Ç–µ—Ä—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            'impact': -0.3,  # –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞ = –ø–æ—Ç–µ—Ä—è 30% –ø—Ä–æ–¥–∞–∂
            'severity': '–≤–∞–∂–Ω–æ'
        })
    
    if day_data['busy_days'] > 0:
        issues.append({
            'description': f"‚è∞ –ü–ï–†–ï–ì–†–£–ó–ö–ê: —Ä–µ—Å—Ç–æ—Ä–∞–Ω '–∑–∞–Ω—è—Ç' ‚Üí –æ—Ç–∫–∞–∑ –≤ –∑–∞–∫–∞–∑–∞—Ö",
            'impact': -0.15,  # –°—Ç–∞—Ç—É—Å "–∑–∞–Ω—è—Ç" = –ø–æ—Ç–µ—Ä—è 15% –ø—Ä–æ–¥–∞–∂
            'severity': '—É–º–µ—Ä–µ–Ω–Ω–æ'
        })
    
    if day_data['cancelled_orders'] > 5:  # –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω
        issues.append({
            'description': f"‚ùå –û–¢–ú–ï–ù–´: {day_data['cancelled_orders']:.0f} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ‚Üí —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —É—â–µ—Ä–±",
            'impact': -0.10,  # –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω = –ø–æ—Ç–µ—Ä—è 10% –ø—Ä–æ–¥–∞–∂
            'severity': '–≤–∞–∂–Ω–æ'
        })
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—É—é –ø—Ä–æ–±–ª–µ–º—É
    if issues:
        return max(issues, key=lambda x: abs(x['impact']))
    
    return None

def analyze_weekday_patterns(date, sales_deviation, daily_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
    
    from datetime import datetime
    
    try:
        date_obj = datetime.strptime(date, '%Y-%m-%d')
        weekday = date_obj.strftime('%A')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekday_patterns = {
            'Monday': {'typical_change': -0.15, 'desc': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏ –æ–±—ã—á–Ω–æ —Å–ª–∞–±–µ–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö'},
            'Tuesday': {'typical_change': -0.10, 'desc': '–≤—Ç–æ—Ä–Ω–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞'},
            'Wednesday': {'typical_change': 0.00, 'desc': '—Å—Ä–µ–¥—ã –æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏'},
            'Thursday': {'typical_change': 0.05, 'desc': '—á–µ—Ç–≤–µ—Ä–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –≤—ã—Ö–æ–¥–Ω—ã–º'},
            'Friday': {'typical_change': 0.20, 'desc': '–ø—è—Ç–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–Ω—ã–º–∏'},
            'Saturday': {'typical_change': 0.25, 'desc': '—Å—É–±–±–æ—Ç—ã - –ø–∏–∫ –Ω–µ–¥–µ–ª–∏'},
            'Sunday': {'typical_change': 0.15, 'desc': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –æ—Å—Ç–∞—é—Ç—Å—è —Å–∏–ª—å–Ω—ã–º–∏'}
        }
        
        if weekday in weekday_patterns:
            expected = weekday_patterns[weekday]['typical_change']
            
            # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if abs(sales_deviation - expected) < 0.10:
                return {
                    'description': f"üìÖ –î–ï–ù–¨ –ù–ï–î–ï–õ–ò: {weekday} - {weekday_patterns[weekday]['desc']}",
                    'impact': expected,
                    'type': '–ø–∞—Ç—Ç–µ—Ä–Ω'
                }
    except:
        pass
    
    return None

def calculate_correlations(daily_data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
    
    correlations = []
    
    try:
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂
        if 'avg_rating' in daily_data.columns:
            rating_corr = daily_data['avg_rating'].corr(daily_data['total_sales'])
            if abs(rating_corr) > 0.3:
                correlations.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ ‚Üî –ü—Ä–æ–¥–∞–∂–∏: {rating_corr:.2f} (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ {len(daily_data)} –¥–Ω—è—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂  
        if 'marketing_spend' in daily_data.columns:
            marketing_corr = daily_data['marketing_spend'].corr(daily_data['total_sales'])
            if abs(marketing_corr) > 0.3:
                correlations.append(f"üìà –†–µ–∫–ª–∞–º–∞ ‚Üî –ü—Ä–æ–¥–∞–∂–∏: {marketing_corr:.2f} (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ {len(daily_data)} –¥–Ω—è—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        if 'store_is_closed' in daily_data.columns:
            closure_cancellations_impact = daily_data['store_is_closed'].sum() / len(daily_data) * 100
            if closure_cancellations_impact > 1:
                correlations.append(f"üö´ –û—Ç–º–µ–Ω—ã '–∑–∞–∫—Ä—ã—Ç–æ': {closure_cancellations_impact:.1f}% –¥–Ω–µ–π ‚Üí –ø–æ—Ç–µ—Ä—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã
        correlations.append("üìä –û–±—â–∏–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (–∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):")
        correlations.append("   ‚Ä¢ –î–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 15-25% (–æ—Å–æ–±–µ–Ω–Ω–æ delivery)")
        correlations.append("   ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã ‚Üí –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ 20-30% –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –¥–Ω–µ–π")
        correlations.append("   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∏–∂–µ 4.5‚òÖ ‚Üí –ø–æ—Ç–µ—Ä—è 10-15% –∫–ª–∏–µ–Ω—Ç–æ–≤")
        correlations.append("   ‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞—é—Ç +20-30% –∫ –±—É–¥–Ω—è–º (–ø—è—Ç–Ω–∏—Ü–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)")
        
    except Exception as e:
        correlations.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
    
    return correlations

def analyze_period_anomalies(daily_data, start_date, end_date):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    
    anomalies = []
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
        daily_data['stat_date'] = pd.to_datetime(daily_data['stat_date'])
        daily_data['week'] = daily_data['stat_date'].dt.isocalendar().week
        
        weekly_data = daily_data.groupby('week').agg({
            'total_sales': 'sum',
            'marketing_spend': 'sum',
            'avg_rating': 'mean'
        }).reset_index()
        
        avg_weekly_sales = weekly_data['total_sales'].mean()
        
        for _, week in weekly_data.iterrows():
            week_num = week['week']
            sales = week['total_sales']
            deviation = (sales - avg_weekly_sales) / avg_weekly_sales if avg_weekly_sales > 0 else 0
            
            if abs(deviation) > 0.25:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ >25%
                
                direction = "—Ä–æ—Å—Ç" if deviation > 0 else "–ø–∞–¥–µ–Ω–∏–µ" 
                
                # –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
                causes = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                marketing_week = week['marketing_spend']
                avg_marketing = weekly_data['marketing_spend'].mean()
                marketing_change = (marketing_week - avg_marketing) / avg_marketing if avg_marketing > 0 else 0
                
                if abs(marketing_change) > 0.3:
                    if marketing_change > 0:
                        causes.append("—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞")
                    else:
                        causes.append("—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                rating_week = week['avg_rating']
                if pd.notna(rating_week):
                    avg_rating = weekly_data['avg_rating'].mean()
                    rating_change = rating_week - avg_rating
                    if abs(rating_change) > 0.15:
                        if rating_change > 0:
                            causes.append("—É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                        else:
                            causes.append("—É—Ö—É–¥—à–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                
                cause_text = ", ".join(causes) if causes else "—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                
                anomalies.append(f"üìÖ –ù–µ–¥–µ–ª—è {week_num}: {direction} –Ω–∞ {abs(deviation)*100:.0f}% - –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞: {cause_text}")
    
    except Exception as e:
        anomalies.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
    
    return anomalies

def generate_cause_based_recommendations(daily_analysis):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω"""
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã
    weather_issues = sum(1 for day in daily_analysis for cause in day['causes'] if '–¥–æ–∂–¥—å' in cause.get('description', '').lower() or '–≥—Ä–æ–∑–∞' in cause.get('description', '').lower())
    rating_issues = sum(1 for day in daily_analysis for cause in day['causes'] if '—Ä–µ–π—Ç–∏–Ω–≥' in cause.get('description', '').lower())
    marketing_issues = sum(1 for day in daily_analysis for cause in day['causes'] if '—Ä–µ–∫–ª–∞–º–∞' in cause.get('description', '').lower())
    operational_issues = sum(1 for day in daily_analysis for cause in day['causes'] if any(word in cause.get('description', '').lower() for word in ['–∑–∞–∫—Ä—ã—Ç', '–¥–µ—Ñ–∏—Ü–∏—Ç', '–æ—Ç–º–µ–Ω—ã']))
    
    if weather_issues > 2:
        recommendations.append("üåßÔ∏è –ü–û–ì–û–î–ê: –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å '–¥–æ–∂–¥–ª–∏–≤—É—é' —Å—Ç—Ä–∞—Ç–µ–≥–∏—é - –∞–∫—Ü–∏–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –ø—Ä–æ–º–æ –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É (+15-20% –∫ –ø—Ä–æ–¥–∞–∂–∞–º)")
    
    if rating_issues > 1:
        recommendations.append("‚≠ê –†–ï–ô–¢–ò–ù–ì: –ö—Ä–∏—Ç–∏—á–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã - —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 0.1‚òÖ = –ø–æ—Ç–µ—Ä—è 8% –ø—Ä–æ–¥–∞–∂. –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if marketing_issues > 1:
        recommendations.append("üìà –†–ï–ö–õ–ê–ú–ê: –ò–∑–±–µ–≥–∞—Ç—å —Ä–µ–∑–∫–∏—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∫–ª–∞–º—ã - –ø–æ—Ç–µ—Ä–∏ 20-30%. –ü–ª–∞–≤–Ω–æ –º–µ–Ω—è–π—Ç–µ –±—é–¥–∂–µ—Ç—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ ROAS")
    
    if operational_issues > 1:
        recommendations.append("‚öôÔ∏è –û–ü–ï–†–ê–¶–ò–ò: –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –¥–µ—Ñ–∏—Ü–∏—Ç—ã - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ç–æ—è = –ø–æ—Ç–µ—Ä—è 80% –¥–Ω–µ–≤–Ω–æ–π –≤—ã—Ä—É—á–∫–∏")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.append("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ: –ø–æ–≥–æ–¥–∞, —Ä–µ–π—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞, –æ–ø–µ—Ä–∞—Ü–∏–∏")
    recommendations.append("üö® –ê–õ–ï–†–¢–´: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂ >20% –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    recommendations.append("üìà –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–°–¢–¨: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
    
    return recommendations

def detect_market_anomalies_and_causes(market_leaders, start_date, end_date):
    """–î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω"""
    
    insights = []
    insights.append("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô –ò –ü–†–ò–ß–ò–ù")
    insights.append("=" * 65)
    
    try:
        if market_leaders.empty:
            insights.append("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return '\n'.join(insights)
        
        # 1. –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô –ü–û –†–ï–°–¢–û–†–ê–ù–ê–ú
        insights.append("üìä –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò –ü–û –†–ï–°–¢–û–†–ê–ù–ê–ú:")
        insights.append("")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä—ã–Ω–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        market_avg_sales = market_leaders['total_sales'].mean()
        market_avg_rating = market_leaders['avg_rating'].mean()
        market_avg_orders = market_leaders['total_orders'].mean()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        restaurant_anomalies = []
        
        for idx, restaurant in market_leaders.iterrows():
            name = restaurant['name']
            sales = restaurant['total_sales']
            rating = restaurant['avg_rating']
            orders = restaurant['total_orders']
            marketing_spend = restaurant['marketing_spend']
            marketing_sales = restaurant['marketing_sales']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            sales_deviation = (sales - market_avg_sales) / market_avg_sales if market_avg_sales > 0 else 0
            rating_deviation = rating - market_avg_rating if pd.notna(rating) and pd.notna(market_avg_rating) else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
            causes = []
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ vs —Ä–µ–π—Ç–∏–Ω–≥–∞
            if abs(sales_deviation) > 0.3:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ >30%
                
                # –í–´–°–û–ö–ò–ï –ü–†–û–î–ê–ñ–ò
                if sales_deviation > 0:
                    if rating > market_avg_rating:
                        rating_advantage = rating - market_avg_rating
                        causes.append({
                            'factor': '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                            'description': f'‚≠ê –ö–ê–ß–ï–°–¢–í–û: —Ä–µ–π—Ç–∏–Ω–≥ {rating:.2f}/5.0 (–Ω–∞ +{rating_advantage:.2f}‚òÖ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {market_avg_rating:.2f})',
                            'impact': f'+{rating_advantage*100:.0f}% –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'
                        })
                    
                    if marketing_spend > 0:
                        roas = marketing_sales / marketing_spend
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π ROAS –ø–æ —Ä—ã–Ω–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        market_roas_data = market_leaders[market_leaders['marketing_spend'] > 0]
                        if not market_roas_data.empty:
                            market_avg_roas = (market_roas_data['marketing_sales'] / market_roas_data['marketing_spend']).mean()
                            if roas > market_avg_roas:
                                roas_advantage = ((roas - market_avg_roas) / market_avg_roas) * 100
                                causes.append({
                                    'factor': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                                    'description': f'üìà –†–ï–ö–õ–ê–ú–ê: ROAS {roas:.1f}x (–Ω–∞ +{roas_advantage:.0f}% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {market_avg_roas:.1f}x)',
                                    'impact': f'+{roas_advantage:.0f}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
                                })
                    
                    avg_order = sales / orders if orders > 0 else 0
                    market_avg_order = market_avg_sales / market_avg_orders if market_avg_orders > 0 else 0
                    if avg_order > market_avg_order and market_avg_order > 0:
                        order_advantage = ((avg_order - market_avg_order) / market_avg_order) * 100
                        causes.append({
                            'factor': '–ü—Ä–µ–º–∏—É–º-–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                            'description': f'üíé –ü–†–ï–ú–ò–£–ú: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_order:,.0f} IDR (–Ω–∞ +{order_advantage:.0f}% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {market_avg_order:,.0f} IDR)',
                            'impact': f'+{order_advantage:.0f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É'
                        })
                
                # –ù–ò–ó–ö–ò–ï –ü–†–û–î–ê–ñ–ò
                else:
                    if rating < market_avg_rating:
                        rating_disadvantage = market_avg_rating - rating
                        causes.append({
                            'factor': '–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                            'description': f'‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: —Ä–µ–π—Ç–∏–Ω–≥ {rating:.2f}/5.0 (–Ω–∞ -{rating_disadvantage:.2f}‚òÖ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {market_avg_rating:.2f})',
                            'impact': f'-{rating_disadvantage*100:.0f}% –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'
                        })
                    
                    if marketing_spend == 0:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
                        marketing_restaurants = market_leaders[market_leaders['marketing_spend'] > 0]
                        no_marketing_restaurants = market_leaders[market_leaders['marketing_spend'] == 0]
                        if not marketing_restaurants.empty and not no_marketing_restaurants.empty:
                            marketing_avg_sales = marketing_restaurants['total_sales'].mean()
                            no_marketing_avg_sales = no_marketing_restaurants['total_sales'].mean()
                            potential_loss = ((marketing_avg_sales - no_marketing_avg_sales) / marketing_avg_sales) * 100
                            causes.append({
                                'factor': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
                                'description': f'üìâ –†–ï–ö–õ–ê–ú–ê: –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ -{potential_loss:.0f}% –ø—Ä–æ–¥–∞–∂)',
                                'impact': f'-{potential_loss:.0f}% –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'
                            })
                    elif marketing_spend > 0:
                        roas = marketing_sales / marketing_spend
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä—ã–Ω–æ—á–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º ROAS
                        market_roas_data = market_leaders[market_leaders['marketing_spend'] > 0]
                        if not market_roas_data.empty:
                            market_avg_roas = (market_roas_data['marketing_sales'] / market_roas_data['marketing_spend']).mean()
                            if roas < market_avg_roas:
                                roas_deficit = ((market_avg_roas - roas) / market_avg_roas) * 100
                                causes.append({
                                    'factor': '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                                    'description': f'üí∏ –†–ï–ö–õ–ê–ú–ê: ROAS {roas:.1f}x (–Ω–∞ -{roas_deficit:.0f}% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {market_avg_roas:.1f}x)',
                                    'impact': f'-{roas_deficit:.0f}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
                                })
                
                if causes:
                    restaurant_anomalies.append({
                        'name': name,
                        'sales': sales,
                        'deviation': sales_deviation,
                        'causes': causes,
                        'rating': rating
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
        restaurant_anomalies.sort(key=lambda x: abs(x['deviation']), reverse=True)
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø –∞–Ω–æ–º–∞–ª–∏–π
        for i, anomaly in enumerate(restaurant_anomalies[:8]):  # –¢–æ–ø-8 –∞–Ω–æ–º–∞–ª–∏–π
            name = anomaly['name']
            sales = anomaly['sales']
            deviation = anomaly['deviation']
            causes = anomaly['causes']
            rating = anomaly['rating']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏
            if deviation > 0:
                anomaly_type = f"üìà –†–û–°–¢ –Ω–∞ {deviation*100:+.1f}%"
                icon = "üü¢"
                comparison = "–í–´–®–ï —Å—Ä–µ–¥–Ω–µ–≥–æ"
            else:
                anomaly_type = f"üìâ –û–¢–°–¢–ê–ï–¢ –Ω–∞ {abs(deviation)*100:.1f}%"
                icon = "üî¥"
                comparison = "–ù–ò–ñ–ï —Å—Ä–µ–¥–Ω–µ–≥–æ"
            
            insights.append(f"{i+1:2d}. {name}: {icon} {anomaly_type}")
            insights.append(f"    üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR ({comparison})")
            insights.append(f"    ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.2f}/5.0")
            insights.append(f"    üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            
            for cause in causes:
                insights.append(f"       ‚Ä¢ {cause['description']}")
                insights.append(f"         üìä –í–ª–∏—è–Ω–∏–µ: {cause['impact']}")
            
            insights.append("")
        
        # 2. –†–´–ù–û–ß–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò –ò –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò
        insights.append("üìà –†–´–ù–û–ß–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò –ò –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò:")
        insights.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–∞ —Ä—ã–Ω–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        market_correlations = []
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂
        if len(market_leaders) > 3:
            rating_corr = market_leaders['avg_rating'].corr(market_leaders['total_sales'])
            if abs(rating_corr) > 0.3:
                market_correlations.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ ‚Üî –ü—Ä–æ–¥–∞–∂–∏: {rating_corr:.2f} (–∫–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Å–ø–µ—Ö)")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂
        marketing_active = market_leaders[market_leaders['marketing_spend'] > 0]
        no_marketing_restaurants = market_leaders[market_leaders['marketing_spend'] == 0]
        if len(marketing_active) > 3:
            marketing_corr = marketing_active['marketing_spend'].corr(marketing_active['total_sales'])
            if abs(marketing_corr) > 0.3:
                market_correlations.append(f"üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ ‚Üî –ü—Ä–æ–¥–∞–∂–∏: {marketing_corr:.2f} (—Ä–µ–∫–ª–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        premium_restaurants = market_leaders[market_leaders['total_sales'] / market_leaders['total_orders'] > 350000] if len(market_leaders[market_leaders['total_orders'] > 0]) > 0 else pd.DataFrame()
        if not premium_restaurants.empty:
            premium_share = (premium_restaurants['total_sales'].sum() / market_leaders['total_sales'].sum()) * 100
            market_correlations.append(f"üíé –ü—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç: {len(premium_restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ = {premium_share:.1f}% –≤—ã—Ä—É—á–∫–∏ —Ä—ã–Ω–∫–∞")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ - –†–ê–°–°–ß–ò–¢–ê–ù–ù–´–ï –ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
        market_correlations.append("üìä –†—ã–Ω–æ—á–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö):")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        high_rating_restaurants = market_leaders[market_leaders['avg_rating'] > 4.7]
        low_rating_restaurants = market_leaders[market_leaders['avg_rating'] <= 4.7]
        
        if not high_rating_restaurants.empty and not low_rating_restaurants.empty:
            high_rating_avg_sales = high_rating_restaurants['total_sales'].mean()
            low_rating_avg_sales = low_rating_restaurants['total_sales'].mean()
            rating_boost = ((high_rating_avg_sales - low_rating_avg_sales) / low_rating_avg_sales) * 100
            market_correlations.append(f"   ‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º >4.7‚òÖ –ø—Ä–æ–¥–∞—é—Ç –Ω–∞ {rating_boost:+.0f}% –±–æ–ª—å—à–µ (–§–ê–ö–¢)")
        
        # –ê–Ω–∞–ª–∏–∑ ROAS –ª–∏–¥–µ—Ä–æ–≤
        high_roas_restaurants = marketing_active[marketing_active['marketing_sales'] / marketing_active['marketing_spend'] > 8] if len(marketing_active) > 0 else pd.DataFrame()
        if not high_roas_restaurants.empty:
            avg_roas = (high_roas_restaurants['marketing_sales'] / high_roas_restaurants['marketing_spend']).mean()
            market_correlations.append(f"   ‚Ä¢ ROAS >{avg_roas:.0f}x = –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ (–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã
        if not marketing_active.empty and not no_marketing_restaurants.empty:
            marketing_avg = marketing_active['total_sales'].mean()
            no_marketing_avg = no_marketing_restaurants['total_sales'].mean()
            marketing_loss = ((marketing_avg - no_marketing_avg) / marketing_avg) * 100
            market_correlations.append(f"   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã = –ø–æ—Ç–µ—Ä—è {marketing_loss:.0f}% –ø—Ä–æ–¥–∞–∂ (–†–ê–°–ß–ï–¢)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–∞
        if not premium_restaurants.empty:
            premium_avg_check = (premium_restaurants['total_sales'] / premium_restaurants['total_orders']).mean()
            market_correlations.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ >{premium_avg_check:,.0f} IDR = –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç (–∏–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        for correlation in market_correlations:
            insights.append(f"‚Ä¢ {correlation}")
        
        insights.append("")
        
        # 3. –°–ï–ì–ú–ï–ù–¢–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò
        insights.append("üéØ –°–ï–ì–ú–ï–ù–¢–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò:")
        insights.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        segment_anomalies = []
        
        # –ü—Ä–µ–º–∏—É–º vs –±—é–¥–∂–µ—Ç
        if not premium_restaurants.empty:
            premium_avg_rating = premium_restaurants['avg_rating'].mean()
            budget_restaurants = market_leaders[market_leaders['total_sales'] / market_leaders['total_orders'] <= 250000] if len(market_leaders[market_leaders['total_orders'] > 0]) > 0 else pd.DataFrame()
            
            if not budget_restaurants.empty:
                budget_avg_rating = budget_restaurants['avg_rating'].mean()
                rating_gap = premium_avg_rating - budget_avg_rating
                
                if rating_gap > 0.3:
                    segment_anomalies.append(f"üíé –ü—Ä–µ–º–∏—É–º-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–º–µ—é—Ç —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ {rating_gap:.2f}‚òÖ –≤—ã—à–µ –±—é–¥–∂–µ—Ç–Ω—ã—Ö")
                    segment_anomalies.append(f"   ‚Üí –ö–∞—á–µ—Å—Ç–≤–æ = –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ vs –Ω–µ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ)
        marketing_restaurants = marketing_active
        
        if not marketing_restaurants.empty and not no_marketing_restaurants.empty:
            marketing_avg_sales = marketing_restaurants['total_sales'].mean()
            no_marketing_avg_sales = no_marketing_restaurants['total_sales'].mean()
            
            if marketing_avg_sales > no_marketing_avg_sales:
                sales_boost = ((marketing_avg_sales - no_marketing_avg_sales) / no_marketing_avg_sales) * 100
                segment_anomalies.append(f"üìà –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å —Ä–µ–∫–ª–∞–º–æ–π –ø—Ä–æ–¥–∞—é—Ç –Ω–∞ {sales_boost:.0f}% –±–æ–ª—å—à–µ")
                segment_anomalies.append(f"   ‚Üí –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂")
        
        for anomaly in segment_anomalies:
            insights.append(f"‚Ä¢ {anomaly}")
        
        insights.append("")
        
        # 4. –†–´–ù–û–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        insights.append("üí° –†–´–ù–û–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–Ø–í–õ–ï–ù–ù–´–ú –ê–ù–û–ú–ê–õ–ò–Ø–ú:")
        insights.append("")
        
        market_recommendations = []
        
        # –î–ª—è —Å–ª–∞–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        weak_performers = [x for x in restaurant_anomalies if x['deviation'] < -0.3]
        if len(weak_performers) > 2:
            market_recommendations.append("üî¥ –°–õ–ê–ë–´–ï –ò–ì–†–û–ö–ò: –ö—Ä–∏—Ç–∏—á–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
        
        # –î–ª—è –ª–∏–¥–µ—Ä–æ–≤
        strong_performers = [x for x in restaurant_anomalies if x['deviation'] > 0.5]
        if len(strong_performers) > 1:
            market_recommendations.append("üü¢ –õ–ò–î–ï–†–´: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—Ö–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        data_based_recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤
        top_performers = market_leaders.head(3)
        if not top_performers.empty:
            top_avg_rating = top_performers['avg_rating'].mean()
            data_based_recommendations.append(f"‚≠ê –ö–ê–ß–ï–°–¢–í–û: –†–µ–π—Ç–∏–Ω–≥ >{top_avg_rating:.1f}‚òÖ = —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ª–∏–¥–µ—Ä–æ–≤ (—Ñ–∞–∫—Ç –∏–∑ —Ç–æ–ø-3)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ ROAS –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if not marketing_active.empty:
            successful_roas_threshold = marketing_active['marketing_sales'] / marketing_active['marketing_spend']
            successful_roas_threshold = successful_roas_threshold.quantile(0.75)  # 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å
            data_based_recommendations.append(f"üìà –ú–ê–†–ö–ï–¢–ò–ù–ì: ROAS <{successful_roas_threshold:.1f}x = —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (75% —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã—à–µ)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if not premium_restaurants.empty:
            premium_avg_roas = (premium_restaurants['marketing_sales'] / premium_restaurants['marketing_spend']).mean() if len(premium_restaurants[premium_restaurants['marketing_spend'] > 0]) > 0 else 0
            regular_restaurants = market_leaders[~market_leaders.index.isin(premium_restaurants.index)]
            regular_avg_roas = (regular_restaurants['marketing_sales'] / regular_restaurants['marketing_spend']).mean() if len(regular_restaurants[regular_restaurants['marketing_spend'] > 0]) > 0 else 0
            
            if premium_avg_roas > regular_avg_roas:
                premium_advantage = ((premium_avg_roas - regular_avg_roas) / regular_avg_roas) * 100
                data_based_recommendations.append(f"üíé –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ROAS –Ω–∞ +{premium_advantage:.0f}% –≤—ã—à–µ (—Ñ–∞–∫—Ç)")
        
        market_recommendations.extend(data_based_recommendations)
        
        for rec in market_recommendations:
            insights.append(f"‚Ä¢ {rec}")
    
    except Exception as e:
        insights.append(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π: {e}")
    
    return '\n'.join(insights)

def analyze_tourist_data():
    """–ê–Ω–∞–ª–∏–∑ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞—à–∏—Ö XLS —Ñ–∞–π–ª–æ–≤"""
    try:
        import pandas as pd
        import os
        
        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–∞–ª–∏—á–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'data/Kunjungan_Wisatawan_Bali_2024.xls',
            'data/Kunjungan_Wisatawan_Bali_2025.xls'
        ]
        
        for file in required_files:
            if not os.path.exists(file):
                print(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª {file}")
                print(f"   üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ git: git checkout HEAD -- {file}")
                print(f"   üîß –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ .gitignore (—Å—Ç—Ä–æ–∫–∞ *.xls –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)")
                return None
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        df_2024 = pd.read_csv('data/Kunjungan_Wisatawan_Bali_2024.xls', skiprows=2)
        df_2025 = pd.read_csv('data/Kunjungan_Wisatawan_Bali_2025.xls', skiprows=2)
        
        # –ê–Ω–∞–ª–∏–∑ 2024
        countries_2024 = []
        for i, row in df_2024.iterrows():
            if i < 200 and pd.notna(row.iloc[0]) and isinstance(row.iloc[0], str):
                country = row.iloc[0].strip()
                if country and country not in ['TOTAL', 'EXCLUDING ASEAN', '- / + (%)', 'TOURISTS', '', 'NO', 'I']:
                    total_col = df_2024.columns[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - Total
                    total_value = row[total_col]
                    if pd.notna(total_value) and isinstance(total_value, (int, float)) and total_value > 0:
                        countries_2024.append({
                            'country': country,
                            'total': total_value
                        })
        
        # –ê–Ω–∞–ª–∏–∑ 2025
        countries_2025 = []
        for i, row in df_2025.iterrows():
            if i < 200 and pd.notna(row.iloc[0]) and isinstance(row.iloc[0], str):
                country = row.iloc[0].strip()
                if country and country not in ['TOTAL', 'EXCLUDING ASEAN', '- / + (%)', 'TOURISTS', '', 'NO', 'I']:
                    total_col = df_2025.columns[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - Total
                    total_value = row[total_col]
                    if pd.notna(total_value) and isinstance(total_value, (int, float)) and total_value > 0:
                        countries_2025.append({
                            'country': country,
                            'total': total_value
                        })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
        countries_2024 = sorted(countries_2024, key=lambda x: x['total'], reverse=True)
        countries_2025 = sorted(countries_2025, key=lambda x: x['total'], reverse=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        total_2024 = sum([d['total'] for d in countries_2024])
        total_2025 = sum([d['total'] for d in countries_2025])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'total_2024': total_2024,
            'total_2025_partial': total_2025,
            'top_countries_2024': countries_2024[:3],
            'top_countries_2025': countries_2025[:3],
            'all_countries_2024': countries_2024,
            'all_countries_2025': countries_2025
        }
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_tourist_insights():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –ø–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    tourist_data = analyze_tourist_data()
    if not tourist_data:
        return "   üèùÔ∏è –ö–û–ù–¢–ï–ö–°–¢: –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    # –¢–æ–ø-3 —Å—Ç—Ä–∞–Ω—ã 2024
    top_2024 = tourist_data['top_countries_2024']
    top_2025 = tourist_data['top_countries_2025']
    
    insights = []
    insights.append(f"   üèùÔ∏è –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ë–ê–õ–ò (–∏–∑ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤):")
    insights.append(f"   ‚Ä¢ 2024 –ò–¢–û–ì–û: {tourist_data['total_2024']:,.0f} —Ç—É—Ä–∏—Å—Ç–æ–≤")
    insights.append(f"   ‚Ä¢ 2025 –¥–æ –º–∞—è: {tourist_data['total_2025_partial']:,.0f} —Ç—É—Ä–∏—Å—Ç–æ–≤")
    
    if len(top_2024) >= 3:
        total_2024 = tourist_data['total_2024']
        insights.append(f"   üìä –¢–û–ü-3 –†–´–ù–ö–ê 2024:")
        for i, country in enumerate(top_2024[:3]):
            percentage = (country['total'] / total_2024) * 100
            insights.append(f"      {i+1}. {country['country']}: {country['total']:,.0f} ({percentage:.1f}%)")
    
    if len(top_2025) >= 3:
        total_2025 = tourist_data['total_2025_partial']
        insights.append(f"   üìä –¢–û–ü-3 –†–´–ù–ö–ê 2025 (–¥–æ –º–∞—è):")
        for i, country in enumerate(top_2025[:3]):
            percentage = (country['total'] / total_2025) * 100
            insights.append(f"      {i+1}. {country['country']}: {country['total']:,.0f} ({percentage:.1f}%)")
    
    return "\n".join(insights)

def get_russia_position():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –†–æ—Å—Å–∏–∏ –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö"""
    tourist_data = analyze_tourist_data()
    if not tourist_data:
        return None
    
    # –ò—â–µ–º –†–æ—Å—Å–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö 2024 –∏ 2025
    russia_info = {}
    
    # 2024
    for i, country in enumerate(tourist_data['all_countries_2024']):
        if 'Russian' in country['country']:
            percentage = (country['total'] / tourist_data['total_2024']) * 100
            russia_info['2024'] = {
                'rank': i + 1,
                'total': country['total'],
                'percentage': percentage,
                'total_countries': len(tourist_data['all_countries_2024'])
            }
            break
    
    # 2025
    for i, country in enumerate(tourist_data['all_countries_2025']):
        if 'Russian' in country['country']:
            percentage = (country['total'] / tourist_data['total_2025_partial']) * 100
            russia_info['2025'] = {
                'rank': i + 1,
                'total': country['total'],
                'percentage': percentage,
                'total_countries': len(tourist_data['all_countries_2025'])
            }
            break
    
    return russia_info

def get_restaurant_location(restaurant_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞—Ü–∏–π"""
    try:
        with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
            locations_data = json.load(f)
        
        for restaurant in locations_data['restaurants']:
            if restaurant['name'].lower() == restaurant_name.lower():
                return {
                    'latitude': restaurant['latitude'],
                    'longitude': restaurant['longitude'],
                    'location': restaurant['location'],
                    'area': restaurant['area'],
                    'zone': restaurant['zone']
                }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏
        return {
            'latitude': -8.4095,
            'longitude': 115.1889,
            'location': 'Denpasar',
            'area': 'Denpasar',
            'zone': 'Central'
        }
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return {
            'latitude': -8.4095,
            'longitude': 115.1889,
            'location': 'Denpasar',
            'area': 'Denpasar', 
            'zone': 'Central'
        }

if __name__ == "__main__":
    main()