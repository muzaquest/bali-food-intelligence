#!/usr/bin/env python3
"""
üéØ –ü–û–õ–ù–´–ô CLI –î–õ–Ø MUZAQUEST ANALYTICS - –ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´
–ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 30+ –ø–æ–ª–µ–π –∏–∑ grab_stats –∏ gojek_stats
"""

import argparse
import sys
import sqlite3
import os
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

try:
    import pandas as pd
    import numpy as np
except ImportError:
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pandas –∏ numpy: pip install pandas numpy")
    sys.exit(1)

def get_restaurant_data_full(restaurant_name, start_date, end_date, db_path="database.sqlite"):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ grab_stats –∏ gojek_stats"""
    conn = sqlite3.connect(db_path)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_query = "SELECT id FROM restaurants WHERE name = ?"
    restaurant_result = pd.read_sql_query(restaurant_query, conn, params=(restaurant_name,))
    
    if len(restaurant_result) == 0:
        conn.close()
        print(f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    
    restaurant_id = restaurant_result.iloc[0]['id']
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è Grab (–í–°–ï –ø–æ–ª—è)
    grab_query = """
    SELECT 
        stat_date as date,
        'grab' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        COALESCE(cancelation_rate, 0) as cancel_rate,
        COALESCE(offline_rate, 0) as offline_rate,
        COALESCE(cancelled_orders, 0) as cancelled_orders,
        COALESCE(store_is_closed, 0) as store_is_closed,
        COALESCE(store_is_busy, 0) as store_is_busy,
        COALESCE(store_is_closing_soon, 0) as store_is_closing_soon,
        COALESCE(out_of_stock, 0) as out_of_stock,
        COALESCE(ads_ctr, 0) as ads_ctr,
        COALESCE(impressions, 0) as impressions,
        COALESCE(unique_impressions_reach, 0) as unique_impressions_reach,
        COALESCE(unique_menu_visits, 0) as unique_menu_visits,
        COALESCE(unique_add_to_carts, 0) as unique_add_to_carts,
        COALESCE(unique_conversion_reach, 0) as unique_conversion_reach,
        COALESCE(new_customers, 0) as new_customers,
        COALESCE(earned_new_customers, 0) as earned_new_customers,
        COALESCE(repeated_customers, 0) as repeated_customers,
        COALESCE(earned_repeated_customers, 0) as earned_repeated_customers,
        COALESCE(reactivated_customers, 0) as reactivated_customers,
        COALESCE(earned_reactivated_customers, 0) as earned_reactivated_customers,
        COALESCE(total_customers, 0) as total_customers,
        COALESCE(payouts, 0) as payouts,
        NULL as accepting_time,
        NULL as preparation_time,
        NULL as delivery_time,
        NULL as lost_orders,
        NULL as realized_orders_percentage,
        NULL as one_star_ratings,
        NULL as two_star_ratings,
        NULL as three_star_ratings,
        NULL as four_star_ratings,
        NULL as five_star_ratings
    FROM grab_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è Gojek (–í–°–ï –ø–æ–ª—è)
    gojek_query = """
    SELECT 
        stat_date as date,
        'gojek' as platform,
        sales as total_sales,
        orders,
        rating,
        COALESCE(ads_spend, 0) as marketing_spend,
        COALESCE(ads_sales, 0) as marketing_sales,
        COALESCE(ads_orders, 0) as marketing_orders,
        CASE WHEN ads_spend > 0 THEN 1 ELSE 0 END as ads_on,
        0 as cancel_rate,
        0 as offline_rate,
        COALESCE(cancelled_orders, 0) as cancelled_orders,
        COALESCE(store_is_closed, 0) as store_is_closed,
        COALESCE(store_is_busy, 0) as store_is_busy,
        0 as store_is_closing_soon,
        COALESCE(out_of_stock, 0) as out_of_stock,
        0 as ads_ctr,
        0 as impressions,
        0 as unique_impressions_reach,
        0 as unique_menu_visits,
        0 as unique_add_to_carts,
        0 as unique_conversion_reach,
        COALESCE(new_client, 0) as new_customers,
        0 as earned_new_customers,
        COALESCE(active_client, 0) as repeated_customers,
        0 as earned_repeated_customers,
        COALESCE(returned_client, 0) as reactivated_customers,
        0 as earned_reactivated_customers,
        COALESCE(new_client + active_client + returned_client, 0) as total_customers,
        COALESCE(payouts, 0) as payouts,
        accepting_time,
        preparation_time,
        delivery_time,
        COALESCE(lost_orders, 0) as lost_orders,
        COALESCE(realized_orders_percentage, 0) as realized_orders_percentage,
        COALESCE(one_star_ratings, 0) as one_star_ratings,
        COALESCE(two_star_ratings, 0) as two_star_ratings,
        COALESCE(three_star_ratings, 0) as three_star_ratings,
        COALESCE(four_star_ratings, 0) as four_star_ratings,
        COALESCE(five_star_ratings, 0) as five_star_ratings
    FROM gojek_stats 
    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ?
    ORDER BY stat_date
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É
    grab_query_formatted = grab_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    gojek_query_formatted = gojek_query.replace('?', f'{restaurant_id}', 1).replace('?', f"'{start_date}'", 1).replace('?', f"'{end_date}'", 1)
    
    grab_data = pd.read_sql_query(grab_query_formatted, conn)
    gojek_data = pd.read_sql_query(gojek_query_formatted, conn)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    all_data = pd.concat([grab_data, gojek_data], ignore_index=True)
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º —Å —É—á–µ—Ç–æ–º –í–°–ï–• –ø–æ–ª–µ–π
    if not all_data.empty:
        data = all_data.groupby('date').agg({
            'total_sales': 'sum',
            'orders': 'sum',
            'rating': 'mean',
            'marketing_spend': 'sum',
            'marketing_sales': 'sum',
            'marketing_orders': 'sum',
            'ads_on': 'max',
            'cancel_rate': 'mean',
            'offline_rate': 'mean',
            'cancelled_orders': 'sum',
            'store_is_closed': 'max',
            'store_is_busy': 'max',
            'store_is_closing_soon': 'max',
            'out_of_stock': 'max',
            'ads_ctr': 'mean',
            'impressions': 'sum',
            'unique_impressions_reach': 'sum',
            'unique_menu_visits': 'sum',
            'unique_add_to_carts': 'sum',
            'unique_conversion_reach': 'sum',
            'new_customers': 'sum',
            'earned_new_customers': 'sum',
            'repeated_customers': 'sum',
            'earned_repeated_customers': 'sum',
            'reactivated_customers': 'sum',
            'earned_reactivated_customers': 'sum',
            'total_customers': 'sum',
            'payouts': 'sum',
            'lost_orders': 'sum',
            'realized_orders_percentage': 'mean',
            'one_star_ratings': 'sum',
            'two_star_ratings': 'sum',
            'three_star_ratings': 'sum',
            'four_star_ratings': 'sum',
            'five_star_ratings': 'sum'
        }).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        data['is_weekend'] = pd.to_datetime(data['date']).dt.dayofweek.isin([5, 6]).astype(int)
        data['is_holiday'] = data['date'].isin([
            '2025-04-10', '2025-04-14', '2025-05-07', '2025-05-12', 
            '2025-05-29', '2025-06-01', '2025-06-16', '2025-06-17'
        ]).astype(int)
        data['weekday'] = pd.to_datetime(data['date']).dt.day_name()
        data['month'] = pd.to_datetime(data['date']).dt.month
        data['avg_order_value'] = data['total_sales'] / data['orders'].replace(0, 1)
        data['roas'] = data['marketing_sales'] / data['marketing_spend'].replace(0, 1)
        
        # –ù–æ–≤—ã–µ KPI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        data['conversion_rate'] = data['unique_conversion_reach'] / data['unique_impressions_reach'].replace(0, 1) * 100
        data['add_to_cart_rate'] = data['unique_add_to_carts'] / data['unique_menu_visits'].replace(0, 1) * 100
        data['customer_retention_rate'] = data['repeated_customers'] / data['total_customers'].replace(0, 1) * 100
        data['order_cancellation_rate'] = data['cancelled_orders'] / (data['orders'] + data['cancelled_orders']).replace(0, 1) * 100
        data['customer_satisfaction_score'] = (data['five_star_ratings'] * 5 + data['four_star_ratings'] * 4 + 
                                              data['three_star_ratings'] * 3 + data['two_star_ratings'] * 2 + 
                                              data['one_star_ratings'] * 1) / (data['one_star_ratings'] + 
                                              data['two_star_ratings'] + data['three_star_ratings'] + 
                                              data['four_star_ratings'] + data['five_star_ratings']).replace(0, 1)
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        data['operational_issues'] = (data['store_is_closed'] + data['store_is_busy'] + 
                                    data['store_is_closing_soon'] + data['out_of_stock'])
        
    else:
        data = pd.DataFrame()
    
    conn.close()
    return data

def analyze_restaurant(restaurant_name, start_date=None, end_date=None):
    """–ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print(f"\nüî¨ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–†–ê–ú–ï–¢–†–û–í: {restaurant_name.upper()}")
    print("=" * 80)
    print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï 30+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ grab_stats –∏ gojek_stats!")
    print()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-22"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = get_restaurant_data_full(restaurant_name, start_date, end_date)
    
    if data.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # 1. –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    print("üìä 1. –ë–ê–ó–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
    print("-" * 40)
    
    total_sales = data['total_sales'].sum()
    total_orders = data['orders'].sum()
    avg_rating = data['rating'].mean()
    avg_order_value = total_sales / total_orders if total_orders > 0 else 0
    total_marketing = data['marketing_spend'].sum()
    avg_roas = data['marketing_sales'].sum() / total_marketing if total_marketing > 0 else 0
    
    print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR")
    print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f}")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR")
    print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
    print(f"üí∏ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: {total_marketing:,.0f} IDR")
    print(f"üéØ ROAS: {avg_roas:.2f}x")
    print(f"üìÖ –î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
    print()
    
    # 2. –ù–û–í–´–ô! –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
    print("üë• 2. –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ë–ê–ó–´")
    print("-" * 40)
    
    total_customers = data['total_customers'].sum()
    new_customers = data['new_customers'].sum()
    repeated_customers = data['repeated_customers'].sum()
    reactivated_customers = data['reactivated_customers'].sum()
    
    if total_customers > 0:
        new_customer_rate = (new_customers / total_customers) * 100
        retention_rate = (repeated_customers / total_customers) * 100
        reactivation_rate = (reactivated_customers / total_customers) * 100
        
        print(f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_customers:,.0f}")
        print(f"üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_customers:,.0f} ({new_customer_rate:.1f}%)")
        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {repeated_customers:,.0f} ({retention_rate:.1f}%)")
        print(f"üì≤ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {reactivated_customers:,.0f} ({reactivation_rate:.1f}%)")
        
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        if data['earned_new_customers'].sum() > 0:
            print(f"üí∞ –î–æ—Ö–æ–¥ –æ—Ç –Ω–æ–≤—ã—Ö: {data['earned_new_customers'].sum():,.0f} IDR")
            print(f"üí∞ –î–æ—Ö–æ–¥ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö: {data['earned_repeated_customers'].sum():,.0f} IDR")
            print(f"üí∞ –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {data['earned_reactivated_customers'].sum():,.0f} IDR")
    
    print()
    
    # 3. –ù–û–í–´–ô! –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    print("üìà 3. –ê–ù–ê–õ–ò–ó –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–û–ô –í–û–†–û–ù–ö–ò")
    print("-" * 40)
    
    total_impressions = data['impressions'].sum()
    total_menu_visits = data['unique_menu_visits'].sum()
    total_add_to_carts = data['unique_add_to_carts'].sum()
    total_conversions = data['unique_conversion_reach'].sum()
    
    if total_impressions > 0:
        ctr = (total_menu_visits / total_impressions) * 100
        add_to_cart_rate = (total_add_to_carts / total_menu_visits) * 100 if total_menu_visits > 0 else 0
        conversion_rate = (total_conversions / total_menu_visits) * 100 if total_menu_visits > 0 else 0
        
        print(f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã: {total_impressions:,.0f}")
        print(f"üîó –ü–æ—Å–µ—â–µ–Ω–∏—è –º–µ–Ω—é: {total_menu_visits:,.0f} (CTR: {ctr:.2f}%)")
        print(f"üõí –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_add_to_carts:,.0f} (Rate: {add_to_cart_rate:.2f}%)")
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {total_conversions:,.0f} (Rate: {conversion_rate:.2f}%)")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π CTR —Ä–µ–∫–ª–∞–º—ã: {data['ads_ctr'].mean():.2f}%")
    
    print()
    
    # 4. –ù–û–í–´–ô! –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    print("‚ö†Ô∏è 4. –ê–ù–ê–õ–ò–ó –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–• –ü–†–û–ë–õ–ï–ú")
    print("-" * 40)
    
    closed_days = data['store_is_closed'].sum()
    busy_days = data['store_is_busy'].sum()
    closing_soon_days = data['store_is_closing_soon'].sum()
    out_of_stock_days = data['out_of_stock'].sum()
    avg_cancellation_rate = data['order_cancellation_rate'].mean()
    
    total_operational_issues = data['operational_issues'].sum()
    
    print(f"üè™ –î–Ω–µ–π –∫–æ–≥–¥–∞ –º–∞–≥–∞–∑–∏–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç: {closed_days}")
    print(f"üî• –î–Ω–µ–π –∫–æ–≥–¥–∞ –º–∞–≥–∞–∑–∏–Ω –±—ã–ª –∑–∞–Ω—è—Ç: {busy_days}")
    print(f"‚è∞ –î–Ω–µ–π '—Å–∫–æ—Ä–æ –∑–∞–∫—Ä—ã—Ç–∏–µ': {closing_soon_days}")
    print(f"üì¶ –î–Ω–µ–π —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Ç–æ–≤–∞—Ä–∞: {out_of_stock_days}")
    print(f"‚ùå –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω –∑–∞–∫–∞–∑–æ–≤: {avg_cancellation_rate:.1f}%")
    print(f"‚ö†Ô∏è –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {total_operational_issues} —Å–ª—É—á–∞–µ–≤")
    
    if total_operational_issues > len(data) * 0.1:
        print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º!")
    
    print()
    
    # 5. –ù–û–í–´–ô! –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    print("‚≠ê 5. –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    total_ratings = (data['one_star_ratings'].sum() + data['two_star_ratings'].sum() + 
                    data['three_star_ratings'].sum() + data['four_star_ratings'].sum() + 
                    data['five_star_ratings'].sum())
    
    if total_ratings > 0:
        five_star_rate = (data['five_star_ratings'].sum() / total_ratings) * 100
        four_star_rate = (data['four_star_ratings'].sum() / total_ratings) * 100
        three_star_rate = (data['three_star_ratings'].sum() / total_ratings) * 100
        two_star_rate = (data['two_star_ratings'].sum() / total_ratings) * 100
        one_star_rate = (data['one_star_ratings'].sum() / total_ratings) * 100
        
        print(f"‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑–≤–µ–∑–¥: {data['five_star_ratings'].sum():,.0f} ({five_star_rate:.1f}%)")
        print(f"‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑–≤–µ–∑–¥—ã: {data['four_star_ratings'].sum():,.0f} ({four_star_rate:.1f}%)")
        print(f"‚≠ê‚≠ê‚≠ê 3 –∑–≤–µ–∑–¥—ã: {data['three_star_ratings'].sum():,.0f} ({three_star_rate:.1f}%)")
        print(f"‚≠ê‚≠ê 2 –∑–≤–µ–∑–¥—ã: {data['two_star_ratings'].sum():,.0f} ({two_star_rate:.1f}%)")
        print(f"‚≠ê 1 –∑–≤–µ–∑–¥–∞: {data['one_star_ratings'].sum():,.0f} ({one_star_rate:.1f}%)")
        
        satisfaction_score = data['customer_satisfaction_score'].mean()
        print(f"üìä –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {satisfaction_score:.2f}/5.0")
        
        if one_star_rate > 10:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç 1-–∑–≤–µ–∑–¥–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤!")
    
    print()
    
    # 6. –ù–û–í–´–ô! –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (Gojek)
    print("‚è±Ô∏è 6. –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    if data['realized_orders_percentage'].mean() > 0:
        avg_realization = data['realized_orders_percentage'].mean()
        lost_orders = data['lost_orders'].sum()
        print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {avg_realization:.1f}%")
        print(f"‚ùå –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {lost_orders:,.0f}")
        
        if avg_realization < 90:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!")
    
    print()
    
    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö
    print("üí° 7. –£–ú–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –í–°–ï–• –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
    if total_customers > 0:
        new_customer_rate = (new_customers / total_customers) * 100
        if new_customer_rate < 30:
            recommendations.append("üë• –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Å–µ–π—á–∞—Å {:.1f}%)".format(new_customer_rate))
        
        retention_rate = (repeated_customers / total_customers) * 100
        if retention_rate < 40:
            recommendations.append("üîÑ –£–ª—É—á—à–∏—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Å–µ–π—á–∞—Å {:.1f}%)".format(retention_rate))
    
    # –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    if total_impressions > 0:
        ctr = (total_menu_visits / total_impressions) * 100
        if ctr < 2:
            recommendations.append("üìà –£–ª—É—á—à–∏—Ç—å CTR —Ä–µ–∫–ª–∞–º—ã (—Å–µ–π—á–∞—Å {:.2f}%)".format(ctr))
        
        if total_menu_visits > 0:
            conversion_rate = (total_conversions / total_menu_visits) * 100
            if conversion_rate < 10:
                recommendations.append("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é (—Å–µ–π—á–∞—Å {:.2f}%)".format(conversion_rate))
    
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if total_operational_issues > len(data) * 0.1:
        recommendations.append("‚ö†Ô∏è –°–†–û–ß–ù–û: –†–µ—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if total_ratings > 0:
        one_star_rate = (data['one_star_ratings'].sum() / total_ratings) * 100
        if one_star_rate > 5:
            recommendations.append("‚≠ê –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1-–∑–≤–µ–∑–¥–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ({:.1f}%)".format(one_star_rate))
    
    # –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if data['realized_orders_percentage'].mean() > 0:
        avg_realization = data['realized_orders_percentage'].mean()
        if avg_realization < 90:
            recommendations.append("‚è±Ô∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ ({:.1f}%)".format(avg_realization))
    
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if recommendations:
        for i, rec in enumerate(recommendations, 1):
            print(f"  {i}. {rec}")
    else:
        print("  ‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ!")
    
    print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    try:
        os.makedirs('reports', exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"reports/full_analysis_{restaurant_name.replace(' ', '_')}_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–†–ê–ú–ï–¢–†–û–í: {restaurant_name.upper()}\n")
            f.write("=" * 80 + "\n")
            f.write(f"–ü–µ—Ä–∏–æ–¥: {start_date} ‚Üí {end_date}\n")
            f.write(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–´ –í–°–ï 30+ –ü–ê–†–ê–ú–ï–¢–†–û–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•\n\n")
            
            f.write("–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n")
            f.write(f"–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} IDR\n")
            f.write(f"–û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,.0f}\n")
            f.write(f"–û–±—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã: {total_customers:,.0f}\n")
            f.write(f"–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_customers:,.0f}\n")
            f.write(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {total_operational_issues}\n")
        
        print(f"üíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def list_restaurants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´ MUZAQUEST")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        query = """
        SELECT r.id, r.name,
               COUNT(DISTINCT g.stat_date) as grab_days,
               COUNT(DISTINCT gj.stat_date) as gojek_days,
               MIN(COALESCE(g.stat_date, gj.stat_date)) as first_date,
               MAX(COALESCE(g.stat_date, gj.stat_date)) as last_date,
               SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id
        GROUP BY r.id, r.name
        HAVING (grab_days > 0 OR gojek_days > 0)
        ORDER BY total_sales DESC, r.name
        """
        
        df = pd.read_sql_query(query, conn)
        
        for i, row in df.iterrows():
            total_days = max(row['grab_days'] or 0, row['gojek_days'] or 0)
            
            print(f"{i+1:2d}. üçΩÔ∏è {row['name']}")
            print(f"    üìä –î–∞–Ω–Ω—ã—Ö: {total_days} –¥–Ω–µ–π ({row['first_date']} ‚Üí {row['last_date']})")
            print(f"    üìà Grab: {row['grab_days'] or 0} –¥–Ω–µ–π | Gojek: {row['gojek_days'] or 0} –¥–Ω–µ–π")
            
            if row['total_sales']:
                print(f"    üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {row['total_sales']:,.0f} IDR")
            
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

def analyze_market(start_date=None, end_date=None):
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞"""
    print("\nüåç –ê–ù–ê–õ–ò–ó –í–°–ï–ì–û –†–´–ù–ö–ê MUZAQUEST")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not start_date or not end_date:
        start_date = "2025-04-01"
        end_date = "2025-06-22"
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} ‚Üí {end_date}")
    print()
    
    try:
        conn = sqlite3.connect("database.sqlite")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
        query = """
        WITH market_data AS (
            SELECT r.name,
                   SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
                   SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders
            FROM restaurants r
            LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
                AND g.stat_date BETWEEN ? AND ?
            LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
                AND gj.stat_date BETWEEN ? AND ?
            GROUP BY r.name
            HAVING total_sales > 0
        )
        SELECT 
            COUNT(*) as active_restaurants,
            SUM(total_sales) as market_sales,
            SUM(total_orders) as market_orders,
            AVG(total_sales) as avg_restaurant_sales
        FROM market_data
        """
        
        market_stats = pd.read_sql_query(query, conn, params=(start_date, end_date, start_date, end_date))
        
        print("üìä –û–ë–ó–û–† –†–´–ù–ö–ê")
        print("-" * 40)
        if not market_stats.empty:
            stats = market_stats.iloc[0]
            print(f"üè™ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {stats['active_restaurants']}")
            print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä—ã–Ω–∫–∞: {stats['market_sales']:,.0f} IDR")
            print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã —Ä—ã–Ω–∫–∞: {stats['market_orders']:,.0f}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {stats['avg_restaurant_sales']:,.0f} IDR")
        
        # –õ–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞
        leaders_query = """
        SELECT r.name,
               SUM(COALESCE(g.sales, 0) + COALESCE(gj.sales, 0)) as total_sales,
               SUM(COALESCE(g.orders, 0) + COALESCE(gj.orders, 0)) as total_orders,
               AVG(COALESCE(g.rating, gj.rating)) as avg_rating
        FROM restaurants r
        LEFT JOIN grab_stats g ON r.id = g.restaurant_id 
            AND g.stat_date BETWEEN ? AND ?
        LEFT JOIN gojek_stats gj ON r.id = gj.restaurant_id 
            AND gj.stat_date BETWEEN ? AND ?
        GROUP BY r.name
        HAVING total_sales > 0
        ORDER BY total_sales DESC
        LIMIT 10
        """
        
        leaders = pd.read_sql_query(leaders_query, conn, params=(start_date, end_date, start_date, end_date))
        
        print(f"\nüèÜ –õ–ò–î–ï–†–´ –†–´–ù–ö–ê")
        print("-" * 40)
        print("–¢–û–ü-10 –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
        for i, row in leaders.iterrows():
            avg_order_value = row['total_sales'] / row['total_orders'] if row['total_orders'] > 0 else 0
            print(f"  {i+1:2d}. {row['name']:<25} {row['total_sales']:>12,.0f} IDR")
            print(f"      üì¶ {row['total_orders']:,} –∑–∞–∫–∞–∑–æ–≤ | üí∞ {avg_order_value:,.0f} IDR/–∑–∞–∫–∞–∑ | ‚≠ê {row['avg_rating']:.2f}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    print("""
üéØ MUZAQUEST ANALYTICS - –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–†–ê–ú–ï–¢–†–û–í
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï 30+ –ø–æ–ª–µ–π –∏–∑ grab_stats –∏ gojek_stats!
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")
    
    parser = argparse.ArgumentParser(
        description="Muzaquest Analytics - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
  
  üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:
    python main.py list
  
  üî¨ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–í–°–ï 30+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):
    python main.py analyze "Ika Canggu"
    python main.py analyze "Ika Canggu" --start 2025-04-01 --end 2025-06-22
  
  üåç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞:
    python main.py market
    python main.py market --start 2025-04-01 --end 2025-06-22

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
  üë• –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã (–Ω–æ–≤—ã–µ/–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ/—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (–ø–æ–∫–∞–∑—ã ‚Üí –∫–ª–∏–∫–∏ ‚Üí –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
  ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞–∫—Ä—ã—Ç/–∑–∞–Ω—è—Ç/–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞)
  ‚≠ê –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (1-5 –∑–≤–µ–∑–¥)
  ‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        """
    )
    
    parser.add_argument('command', 
                       choices=['list', 'analyze', 'market'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('restaurant', nargs='?', 
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    parser.add_argument('--start', 
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    parser.add_argument('--end', 
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists('database.sqlite'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'database.sqlite' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.sqlite –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ")
        sys.exit(1)
    
    try:
        if args.command == 'list':
            list_restaurants()
            
        elif args.command == 'analyze':
            if not args.restaurant:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py analyze \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\"")
                sys.exit(1)
            
            analyze_restaurant(args.restaurant, args.start, args.end)
            
        elif args.command == 'market':
            analyze_market(args.start, args.end)
    
    except KeyboardInterrupt:
        print("\n\nüõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()