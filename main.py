#!/usr/bin/env python3
"""
üöÄ –ì–õ–ê–í–ù–´–ô –ú–û–î–£–õ–¨ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
"""

import sys
import os
import argparse
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é main –≤ path
sys.path.append(os.path.join(os.path.dirname(__file__), 'main'))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    parser = argparse.ArgumentParser(
        description='üöÄ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:
  python3 main_fixed.py analyze --restaurant "Ika Canggu" --start-date "2025-04-01" --end-date "2025-06-30"

üìã –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç:
  python3 main_fixed.py quick --restaurant "Ika Canggu"

üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:
  python3 main_fixed.py validate --restaurant "Ika Canggu"

üìä –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:
  python3 main_fixed.py list
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    analyze_parser.add_argument('--restaurant', '-r', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    analyze_parser.add_argument('--start-date', '-s', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)')
    analyze_parser.add_argument('--end-date', '-e', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    quick_parser = subparsers.add_parser('quick', help='üìã –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç')
    quick_parser.add_argument('--restaurant', '-r', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validate_parser = subparsers.add_parser('validate', help='üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')
    validate_parser.add_argument('--restaurant', '-r', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    list_parser = subparsers.add_parser('list', help='üìä –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_parser = subparsers.add_parser('test', help='üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'analyze':
            run_full_analysis(args.restaurant, args.start_date, args.end_date)
        elif args.command == 'quick':
            run_quick_analysis(args.restaurant)
        elif args.command == 'validate':
            run_validation(args.restaurant)
        elif args.command == 'list':
            list_restaurants()
        elif args.command == 'test':
            run_system_test()
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def run_full_analysis(restaurant_name: str, start_date: str = None, end_date: str = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {restaurant_name}")
    
    try:
        from main.integrated_system import run_analysis
        run_analysis(restaurant_name, start_date, end_date)
    except ImportError:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
        try:
            sys.path.append('main')
            from integrated_system import run_analysis
            run_analysis(restaurant_name, start_date, end_date)
        except Exception as e:
            logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            run_minimal_analysis(restaurant_name, start_date, end_date)

def run_quick_analysis(restaurant_name: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    logger.info(f"üìã –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {restaurant_name}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    from datetime import datetime, timedelta
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    
    run_full_analysis(restaurant_name, start_date, end_date)

def run_validation(restaurant_name: str = None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {restaurant_name or '–≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤'}")
    
    try:
        from main.data_loader import get_restaurant_data, validate_features
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = get_restaurant_data(restaurant_name)
        
        if df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {len(df.columns)}")
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã: {df['restaurant_name'].nunique()}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['date'].min()} - {df['date'].max()}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        validate_features(df)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

def list_restaurants():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    try:
        from main.data_loader import get_restaurant_data
        
        df = get_restaurant_data()
        
        if df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö")
            return
        
        restaurants = df['restaurant_name'].unique()
        
        print("üè™ –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´:")
        print("=" * 40)
        
        for i, restaurant in enumerate(restaurants, 1):
            restaurant_data = df[df['restaurant_name'] == restaurant]
            record_count = len(restaurant_data)
            date_range = f"{restaurant_data['date'].min().strftime('%Y-%m-%d')} - {restaurant_data['date'].max().strftime('%Y-%m-%d')}"
            
            print(f"{i:2d}. {restaurant}")
            print(f"    üìä –ó–∞–ø–∏—Å–µ–π: {record_count}")
            print(f"    üìÖ –ü–µ—Ä–∏–æ–¥: {date_range}")
            print()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

def run_system_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        from main.data_loader import get_restaurant_data
        
        print("üìä –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        df = get_restaurant_data("Ika Canggu")
        
        if not df.empty:
            print(f"‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 2: Feature Engineering
    try:
        from main.feature_engineering_fixed import prepare_features_fixed
        
        print("üîß –¢–µ—Å—Ç 2: Feature Engineering...")
        
        if not df.empty:
            df_featured = prepare_features_fixed(df.head(100))  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: {len(df.columns)} ‚Üí {len(df_featured.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç 2 –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    try:
        print("üöÄ –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞...")
        run_minimal_analysis("Ika Canggu", "2025-04-01", "2025-04-30")
        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def run_minimal_analysis(restaurant_name: str, start_date: str = None, end_date: str = None):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    try:
        from main.data_loader import get_restaurant_data
        
        print(f"üìä –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó '{restaurant_name.upper()}'")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = get_restaurant_data()
        
        if df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        restaurant_data = df[df['restaurant_name'] == restaurant_name].copy()
        
        if start_date and end_date:
            mask = (restaurant_data['date'] >= start_date) & (restaurant_data['date'] <= end_date)
            restaurant_data = restaurant_data[mask]
        
        if restaurant_data.empty:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant_name} –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_sales = restaurant_data['total_sales'].sum()
        total_orders = restaurant_data['orders'].sum()
        avg_rating = restaurant_data['rating'].mean()
        days_count = len(restaurant_data)
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {restaurant_data['date'].min().strftime('%Y-%m-%d')} - {restaurant_data['date'].max().strftime('%Y-%m-%d')}")
        print(f"üìä –î–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞: {days_count}")
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {total_sales/days_count:,.0f}")
        print(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {total_orders:,}")
        print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/5.0")
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
        avg_daily_sales = restaurant_data['total_sales'].mean()
        
        best_day = restaurant_data.loc[restaurant_data['total_sales'].idxmax()]
        worst_day = restaurant_data.loc[restaurant_data['total_sales'].idxmin()]
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ô –î–ï–ù–¨:")
        print(f"   {best_day['date'].strftime('%Y-%m-%d')}: {best_day['total_sales']:,.0f} (+{((best_day['total_sales']/avg_daily_sales-1)*100):+.1f}%)")
        
        print(f"üìâ –•–£–î–®–ò–ô –î–ï–ù–¨:")
        print(f"   {worst_day['date'].strftime('%Y-%m-%d')}: {worst_day['total_sales']:,.0f} ({((worst_day['total_sales']/avg_daily_sales-1)*100):+.1f}%)")
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
        all_restaurants = df.groupby('restaurant_name')['total_sales'].sum().sort_values(ascending=False)
        position = list(all_restaurants.index).index(restaurant_name) + 1
        
        print(f"\nüè™ –†–´–ù–û–ß–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: {position} –º–µ—Å—Ç–æ –∏–∑ {len(all_restaurants)}")
        
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    main()