#!/usr/bin/env python3
"""
üå§Ô∏è GOOGLE WEATHER API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
–ó–∞–º–µ–Ω–∞ Open-Meteo –Ω–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π Google Weather API
"""

import requests
import json
from datetime import datetime, timedelta
import sqlite3
import pandas as pd
from typing import Dict, List, Optional, Tuple

class GoogleWeatherAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Weather API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://weather.googleapis.com/v1"
        
    def get_current_conditions(self, latitude: float, longitude: float) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        
        url = f"{self.base_url}/currentConditions:lookup"
        
        params = {
            'key': self.api_key,
            'location.latitude': latitude,
            'location.longitude': longitude,
            'languageCode': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {e}")
            return {}
    
    def get_forecast(self, latitude: float, longitude: float, days: int = 10) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"""
        
        url = f"{self.base_url}/forecast:lookup"
        
        params = {
            'key': self.api_key,
            'location.latitude': latitude,
            'location.longitude': longitude,
            'languageCode': 'ru'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return {}
    
    def get_historical_weather(self, latitude: float, longitude: float, hours: int = 24) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        
        url = f"{self.base_url}/history:lookup"
        
        params = {
            'key': self.api_key,
            'location.latitude': latitude,
            'location.longitude': longitude,
            'hours': min(hours, 24)  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

class GoogleWeatherAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Weather API"""
    
    def __init__(self, api_key: str):
        self.weather_api = GoogleWeatherAPI(api_key)
        
    def analyze_weather_impact_on_sales(self, restaurant_locations: List[Dict], days_back: int = 30) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        
        print("üå§Ô∏è –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ü–û–ì–û–î–´ –ù–ê –ü–†–û–î–ê–ñ–ò (GOOGLE WEATHER API)")
        print("=" * 70)
        
        weather_sales_data = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        conn = sqlite3.connect('database.sqlite')
        
        for location in restaurant_locations:
            restaurant_name = location['name']
            latitude = location['latitude']
            longitude = location['longitude']
            
            print(f"üìç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {restaurant_name} ({latitude}, {longitude})")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            query = """
            SELECT stat_date, sales 
            FROM grab_stats 
            WHERE restaurant_name = ? 
            AND stat_date >= date('now', '-{} days')
            UNION ALL
            SELECT stat_date, sales 
            FROM gojek_stats 
            WHERE restaurant_name = ? 
            AND stat_date >= date('now', '-{} days')
            ORDER BY stat_date
            """.format(days_back, days_back)
            
            sales_df = pd.read_sql_query(query, conn, params=[restaurant_name, restaurant_name])
            
            if sales_df.empty:
                continue
                
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_sales = sales_df.groupby('stat_date')['sales'].sum().reset_index()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            for _, row in daily_sales.iterrows():
                date = row['stat_date']
                sales = row['sales']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –Ω–∞ —ç—Ç—É –¥–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é)
                weather_data = self.weather_api.get_current_conditions(latitude, longitude)
                
                if weather_data:
                    weather_condition = weather_data.get('weatherCondition', {}).get('type', 'UNKNOWN')
                    temperature = weather_data.get('temperature', {}).get('degrees', 0)
                    precipitation_prob = weather_data.get('precipitation', {}).get('probability', {}).get('percent', 0)
                    
                    weather_sales_data.append({
                        'restaurant': restaurant_name,
                        'date': date,
                        'sales': sales,
                        'weather_condition': weather_condition,
                        'temperature': temperature,
                        'precipitation_probability': precipitation_prob
                    })
        
        conn.close()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if weather_sales_data:
            df = pd.DataFrame(weather_sales_data)
            correlations = self._calculate_weather_correlations(df)
            return correlations
        else:
            return {}
    
    def _calculate_weather_correlations(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–≥–æ–¥–æ–π –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø–æ–≥–æ–¥—ã
        weather_impact = {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø–æ–≥–æ–¥—ã
        weather_groups = df.groupby('weather_condition')['sales'].agg(['mean', 'count']).reset_index()
        overall_mean = df['sales'].mean()
        
        for _, row in weather_groups.iterrows():
            condition = row['weather_condition']
            mean_sales = row['mean']
            count = row['count']
            
            if count >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                impact = (mean_sales - overall_mean) / overall_mean
                weather_impact[condition] = {
                    'impact': impact,
                    'mean_sales': mean_sales,
                    'count': count,
                    'description': self._get_weather_description(condition, impact)
                }
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        temp_correlation = df['temperature'].corr(df['sales']) if len(df) > 5 else 0
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Å–∞–¥–∫–æ–≤
        precip_correlation = df['precipitation_probability'].corr(df['sales']) if len(df) > 5 else 0
        
        return {
            'weather_conditions': weather_impact,
            'temperature_correlation': temp_correlation,
            'precipitation_correlation': precip_correlation,
            'total_observations': len(df),
            'analysis_date': datetime.now().isoformat()
        }
    
    def _get_weather_description(self, condition: str, impact: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        
        impact_percent = impact * 100
        direction = "—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç" if impact > 0 else "—Å–Ω–∏–∂–∞–µ—Ç"
        
        condition_names = {
            'CLEAR': '—è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞',
            'PARTLY_CLOUDY': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
            'CLOUDY': '–æ–±–ª–∞—á–Ω–æ',
            'OVERCAST': '–ø–∞—Å–º—É—Ä–Ω–æ',
            'RAIN': '–¥–æ–∂–¥—å',
            'DRIZZLE': '–º–æ—Ä–æ—Å—å',
            'THUNDERSTORM': '–≥—Ä–æ–∑–∞',
            'SNOW': '—Å–Ω–µ–≥'
        }
        
        condition_name = condition_names.get(condition, condition.lower())
        
        return f"{condition_name} {direction} –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {abs(impact_percent):.1f}%"

def integrate_google_weather_into_system():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Google Weather API –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    print("üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø GOOGLE WEATHER API –í –°–ò–°–¢–ï–ú–£")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    try:
        with open('.env', 'r') as f:
            env_content = f.read()
            if 'GOOGLE_MAPS_API_KEY' not in env_content:
                print("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ GOOGLE_MAPS_API_KEY –≤ —Ñ–∞–π–ª .env")
                return False
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–∞–ª–∏)
    restaurant_locations = [
        {'name': 'Seminyak Restaurant', 'latitude': -8.6905, 'longitude': 115.1729},
        {'name': 'Ubud Restaurant', 'latitude': -8.5069, 'longitude': 115.2625},
        {'name': 'Canggu Restaurant', 'latitude': -8.6482, 'longitude': 115.1342},
        {'name': 'Sanur Restaurant', 'latitude': -8.6878, 'longitude': 115.2613}
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    
    if not api_key:
        print("‚ùå Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = GoogleWeatherAnalyzer(api_key)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏...")
    correlations = analyzer.analyze_weather_impact_on_sales(restaurant_locations)
    
    if correlations:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('google_weather_correlations.json', 'w', encoding='utf-8') as f:
            json.dump(correlations, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ Google Weather —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ google_weather_correlations.json")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        try:
            with open('real_coefficients.json', 'r', encoding='utf-8') as f:
                real_coeffs = json.load(f)
        except:
            real_coeffs = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º Google Weather –¥–∞–Ω–Ω—ã–µ
        real_coeffs['google_weather'] = correlations['weather_conditions']
        real_coeffs['google_temperature_correlation'] = correlations['temperature_correlation']
        real_coeffs['google_precipitation_correlation'] = correlations['precipitation_correlation']
        
        with open('real_coefficients.json', 'w', encoding='utf-8') as f:
            json.dump(real_coeffs, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª real_coefficients.json —Å Google Weather –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê GOOGLE WEATHER:")
        print("-" * 50)
        
        for condition, data in correlations['weather_conditions'].items():
            impact = data['impact'] * 100
            print(f"   {condition}: {impact:+.1f}% ({data['description']})")
        
        print(f"\nüå°Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π: {correlations['temperature_correlation']:.3f}")
        print(f"üåßÔ∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –æ—Å–∞–¥–∫–∞–º–∏: {correlations['precipitation_correlation']:.3f}")
        print(f"üìà –í—Å–µ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {correlations['total_observations']}")
        
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Weather")
        return False

def test_google_weather_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Google Weather API"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE WEATHER API")
    print("=" * 40)
    
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    
    if not api_key:
        print("‚ùå Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    weather_api = GoogleWeatherAPI(api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –°–µ–º–∏–Ω—å—è–∫–∞, –ë–∞–ª–∏
    latitude = -8.6905
    longitude = 115.1729
    
    print(f"üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: {latitude}, {longitude} (–°–µ–º–∏–Ω—å—è–∫, –ë–∞–ª–∏)")
    
    # –¢–µ—Å—Ç —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
    print("\nüå§Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è...")
    current = weather_api.get_current_conditions(latitude, longitude)
    
    if current:
        print("‚úÖ –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω—ã:")
        weather_condition = current.get('weatherCondition', {})
        temperature = current.get('temperature', {})
        
        print(f"   –ü–æ–≥–æ–¥–∞: {weather_condition.get('description', {}).get('text', 'N/A')}")
        print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature.get('degrees', 'N/A')}¬∞{temperature.get('unit', '')}")
        print(f"   –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current.get('relativeHumidity', 'N/A')}%")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è")
        return False
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑...")
    forecast = weather_api.get_forecast(latitude, longitude)
    
    if forecast:
        print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω")
        daily_forecasts = forecast.get('dailyForecasts', [])
        print(f"   –î–Ω–µ–π –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {len(daily_forecasts)}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Weather API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if test_google_weather_api():
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º—É
        integrate_google_weather_into_system()
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")