#!/usr/bin/env python3
"""
üèñÔ∏è –ì–ò–ë–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import sqlite3

def flexible_tourist_extraction():
    """–ì–∏–±–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ì–ò–ë–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', header=2)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ú–µ—Å—è—á–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        month_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JULY', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        valid_rows = []
        
        for idx, row in df.iterrows():
            monthly_values = {}
            valid_months = 0
            
            for month_idx, month_col in enumerate(month_columns):
                try:
                    val = pd.to_numeric(row[month_col], errors='coerce')
                    if pd.notna(val) and val >= 0:  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–∂–µ –Ω—É–ª–∏
                        monthly_values[month_idx + 1] = int(val)
                        if val > 0:
                            valid_months += 1
                except:
                    continue
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 –º–µ—Å—è—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ > 0
            if valid_months >= 3:
                nationality = str(row.get('NATIONALITY', 'Unknown')).strip()
                total_tourists = sum(v for v in monthly_values.values() if v > 0)
                
                if total_tourists > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                    valid_rows.append({
                        'row_index': idx,
                        'nationality': nationality,
                        'monthly_values': monthly_values,
                        'total_tourists': total_tourists,
                        'valid_months': valid_months
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(valid_rows)} —Å—Ç—Ä–æ–∫ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        if valid_rows:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
            valid_rows.sort(key=lambda x: x['total_tourists'], reverse=True)
            
            print("\nüìä –¢–û–ü-15 –°–¢–†–ê–ù –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –¢–£–†–ò–°–¢–û–í:")
            print("-" * 80)
            
            for i, row_data in enumerate(valid_rows[:15]):
                nationality = row_data['nationality'][:25]
                total = row_data['total_tourists']
                valid = row_data['valid_months']
                print(f"{i+1:2d}. {nationality:25} | {total:>10,} | {valid:2d} –º–µ—Å—è—Ü–µ–≤")
        
        return valid_rows, month_columns
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return [], []

def aggregate_monthly_totals(valid_rows, month_columns):
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    
    print(f"\nüîÑ –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–û –ú–ï–°–Ø–¶–ê–ú")
    print("=" * 50)
    
    if not valid_rows:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        return None
    
    try:
        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_totals = {}
        
        for month_num in range(1, 13):
            total_tourists = 0
            countries_with_data = 0
            
            for row in valid_rows:
                if month_num in row['monthly_values']:
                    tourists = row['monthly_values'][month_num]
                    if tourists > 0:
                        total_tourists += tourists
                        countries_with_data += 1
            
            if total_tourists > 0:
                monthly_totals[month_num] = {
                    'tourists': total_tourists,
                    'countries_count': countries_with_data,
                    'month_name': month_columns[month_num - 1]
                }
        
        print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(monthly_totals)} –º–µ—Å—è—Ü–∞–º")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ü–û –ú–ï–°–Ø–¶–ê–ú:")
        print("-" * 70)
        
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        total_all_months = sum(data['tourists'] for data in monthly_totals.values())
        
        for month_num in sorted(monthly_totals.keys()):
            data = monthly_totals[month_num]
            month_name = month_names[month_num - 1]
            tourists = data['tourists']
            countries = data['countries_count']
            percentage = (tourists / total_all_months) * 100 if total_all_months > 0 else 0
            
            print(f"{month_num:2d}. {month_name:10} | {tourists:>10,} | {percentage:5.1f}% | {countries:3d} —Å—Ç—Ä–∞–Ω")
        
        print(f"\nüìà –ò–¢–û–ì–û: {total_all_months:,} —Ç—É—Ä–∏—Å—Ç–æ–≤ –∑–∞ {len(monthly_totals)} –º–µ—Å—è—Ü–µ–≤")
        
        return monthly_totals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
        return None

def create_final_tourist_correlations(monthly_totals):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
    
    print(f"\nüîó –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 60)
    
    if not monthly_totals:
        print("‚ùå –ù–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
        conn = sqlite3.connect('database.sqlite')
        
        query = """
        SELECT 
            stat_date as date,
            sales
        FROM (
            SELECT stat_date, sales FROM grab_stats WHERE sales > 0
            UNION ALL
            SELECT stat_date, sales FROM gojek_stats WHERE sales > 0
        )
        ORDER BY date
        """
        
        sales_df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sales_df['sales'] = pd.to_numeric(sales_df['sales'], errors='coerce')
        sales_df = sales_df.dropna(subset=['sales'])
        sales_df['date'] = pd.to_datetime(sales_df['date'])
        sales_df['month'] = sales_df['date'].dt.month
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = sales_df.groupby('month')['sales'].mean().reset_index()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –ø–æ {len(monthly_sales)} –º–µ—Å—è—Ü–∞–º")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        correlation_data = []
        
        for month_num, tourist_data in monthly_totals.items():
            tourists = tourist_data['tourists']
            sales_data = monthly_sales[monthly_sales['month'] == month_num]
            avg_sales = sales_data['sales'].iloc[0] if len(sales_data) > 0 else 0
            
            if tourists > 0 and avg_sales > 0:
                correlation_data.append({
                    'month': month_num,
                    'tourists': tourists,
                    'avg_sales': avg_sales,
                    'countries_count': tourist_data['countries_count']
                })
        
        if len(correlation_data) >= 3:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            df_corr = pd.DataFrame(correlation_data)
            correlation = df_corr['tourists'].corr(df_corr['avg_sales'])
            
            print(f"üîó –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –¢–£–†–ò–°–¢–´ ‚Üî –ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            total_tourists = sum(item['tourists'] for item in correlation_data)
            avg_tourists = total_tourists / len(correlation_data)
            
            tourist_coefficients = {}
            
            for item in correlation_data:
                month_num = item['month']
                tourists = item['tourists']
                coefficient = tourists / avg_tourists
                
                tourist_coefficients[month_num] = {
                    'coefficient': coefficient,
                    'tourists': tourists,
                    'avg_sales': item['avg_sales'],
                    'countries_count': item['countries_count']
                }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω—ã
            coefficients = [data['coefficient'] for data in tourist_coefficients.values()]
            mean_coeff = np.mean(coefficients)
            std_coeff = np.std(coefficients)
            
            high_threshold = mean_coeff + 0.4 * std_coeff
            low_threshold = mean_coeff - 0.4 * std_coeff
            
            seasons = {
                '–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω': {
                    '–º–µ—Å—è—Ü—ã': [], 
                    '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                    '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ü–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏)',
                    '–∏—Å—Ç–æ—á–Ω–∏–∫': 'Kunjungan_Wisatawan_Bali_2025.xls'
                },
                '—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω': {
                    '–º–µ—Å—è—Ü—ã': [], 
                    '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                    '–æ–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏)',
                    '–∏—Å—Ç–æ—á–Ω–∏–∫': 'Kunjungan_Wisatawan_Bali_2025.xls'
                },
                '–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω': {
                    '–º–µ—Å—è—Ü—ã': [], 
                    '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                    '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏)',
                    '–∏—Å—Ç–æ—á–Ω–∏–∫': 'Kunjungan_Wisatawan_Bali_2025.xls'
                }
            }
            
            for month_num, data in tourist_coefficients.items():
                coeff = data['coefficient']
                
                if coeff >= high_threshold:
                    seasons['–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                elif coeff <= low_threshold:
                    seasons['–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
                else:
                    seasons['—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            
            # –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
            for season_name, season_data in seasons.items():
                if season_data['–º–µ—Å—è—Ü—ã']:
                    season_coeffs = [tourist_coefficients[month]['coefficient'] for month in season_data['–º–µ—Å—è—Ü—ã']]
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = float(np.mean(season_coeffs))
                else:
                    season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = 1.0
            
            print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–ó–û–ù–û–í (–†–ï–ê–õ–¨–ù–´–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ë–ê–õ–ò):")
            print("-" * 80)
            
            month_names = [
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
            ]
            
            for season_name, season_data in seasons.items():
                months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã'] if month <= 12]
                coeff = season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']
                change = (coeff - 1) * 100
                print(f"{season_name.upper():15} | {coeff:5.2f} ({change:+.0f}%) | {', '.join(months_names)}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
            print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú–ò:")
            print("-" * 60)
            print("–ë–´–õ–û (–∏–∑ –ø—Ä–æ–¥–∞–∂):")
            print("   –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω: 1.15 (+15%) | –Ø–Ω–≤–∞—Ä—å, –§–µ–≤—Ä–∞–ª—å, –ò—é–ª—å, –ê–≤–≥—É—Å—Ç")
            print("   –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω: 0.96 (-4%)  | –ú–∞—Ä—Ç, –û–∫—Ç—è–±—Ä—å, –ù–æ—è–±—Ä—å, –î–µ–∫–∞–±—Ä—å")
            print("   –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω:  0.89 (-11%) | –ê–ø—Ä–µ–ª—å, –ú–∞–π, –ò—é–Ω—å, –°–µ–Ω—Ç—è–±—Ä—å")
            
            print("\n–°–¢–ê–õ–û (–∏–∑ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö):")
            for season_name, season_data in seasons.items():
                months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã'] if month <= 12]
                coeff = season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']
                change = (coeff - 1) * 100
                print(f"   {season_name.replace('_', ' ').title()}: {coeff:.2f} ({change:+.0f}%) | {', '.join(months_names)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {
                'seasonal_patterns': seasons,
                'monthly_coefficients': tourist_coefficients,
                'correlation_tourists_sales': float(correlation),
                'analysis_metadata': {
                    'source': 'Real tourist arrivals data (Kunjungan_Wisatawan_Bali_2025.xls)',
                    'total_tourists': total_tourists,
                    'months_analyzed': len(correlation_data),
                    'correlation_strength': 'Strong' if abs(correlation) > 0.7 else 'Moderate' if abs(correlation) > 0.4 else 'Weak',
                    'countries_included': sum(item['countries_count'] for item in correlation_data) // len(correlation_data),
                    'data_quality': 'High' if len(correlation_data) >= 10 else 'Medium' if len(correlation_data) >= 6 else 'Low',
                    'created_at': datetime.now().isoformat()
                }
            }
            
            with open('real_tourist_correlations.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_tourist_correlations.json")
            
            return result
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèñÔ∏è –ì–ò–ë–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò")
    print("=" * 70)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    valid_rows, month_columns = flexible_tourist_extraction()
    
    if valid_rows:
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_totals = aggregate_monthly_totals(valid_rows, month_columns)
        
        if monthly_totals:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            result = create_final_tourist_correlations(monthly_totals)
            
            if result:
                print("\nüéâ –ì–ò–ë–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û!")
                print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ë–∞–ª–∏")
                print("‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º")
                print("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç—É—Ä–∏—Å—Ç—ã ‚Üî –ø—Ä–æ–¥–∞–∂–∏")
                print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—É—á–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
                
                print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                print(f"   üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {result['correlation_tourists_sales']:.3f}")
                print(f"   üéØ –°–∏–ª–∞ —Å–≤—è–∑–∏: {result['analysis_metadata']['correlation_strength']}")
                print(f"   üèñÔ∏è –¢—É—Ä–∏—Å—Ç–æ–≤: {result['analysis_metadata']['total_tourists']:,}")
                print(f"   üìÖ –ú–µ—Å—è—Ü–µ–≤: {result['analysis_metadata']['months_analyzed']}")
                print(f"   üåç –°—Ç—Ä–∞–Ω: ~{result['analysis_metadata']['countries_included']}")
                print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {result['analysis_metadata']['data_quality']}")
                
                return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    return False

if __name__ == "__main__":
    main()