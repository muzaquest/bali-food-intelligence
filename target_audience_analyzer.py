#!/usr/bin/env python3
"""
üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò –ü–û –°–¢–†–ê–ù–ê–ú
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω –ø—Ä–∏–µ–∑–∂–∞—é—Ç –∫–ª–∏–µ–Ω—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
–ø—Ä–æ–¥–∞–∂ —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
"""

import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime
import json
from scipy.stats import pearsonr
import warnings
warnings.filterwarnings('ignore')

class TargetAudienceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.tourist_data_2024 = None
        self.tourist_data_2025 = None
        self.country_mapping = {
            'AUSTRALIAN': 'Australia',
            'CHINA': 'China', 
            'INDIA': 'India',
            'JAPAN': 'Japan',
            'KOREAN SOUTH': 'South Korea',
            'MALAYSIAN': 'Malaysia',
            'SINGAPORE': 'Singapore',
            'THAILAND': 'Thailand',
            'VIETNAM': 'Vietnam',
            'RUSSIAN': 'Russia',
            'AMERICAN': 'USA',
            'GERMAN': 'Germany',
            'FRENCH': 'France',
            'BRITISH': 'United Kingdom',
            'DUTCH': 'Netherlands'
        }
        
    def load_tourist_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ XLS —Ñ–∞–π–ª–æ–≤"""
        
        print("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º 2024
            df_2024 = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', engine='xlrd', header=None)
            self.tourist_data_2024 = self._parse_tourist_data(df_2024, 2024)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º 2025  
            df_2025 = pd.read_excel('Kunjungan_Wisatawan_Bali_2025.xls', engine='xlrd', header=None)
            self.tourist_data_2025 = self._parse_tourist_data(df_2025, 2025)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö 2024: {len(self.tourist_data_2024)} —Å—Ç—Ä–∞–Ω")
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö 2025: {len(self.tourist_data_2025)} —Å—Ç—Ä–∞–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _parse_tourist_data(self, df, year):
        """–ü–∞—Ä—Å–∏—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame"""
        
        tourist_data = {}
        
        # –ò—â–µ–º —Å—Ç—Ä–∞–Ω—ã –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
        for i, row in df.iterrows():
            for j, cell in enumerate(row):
                if pd.notna(cell):
                    cell_str = str(cell).upper()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                    for country_key, country_name in self.country_mapping.items():
                        if country_key in cell_str and len(cell_str) < 50:
                            
                            # –°–æ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
                            monthly_data = []
                            for k in range(j + 1, min(len(row), j + 13)):  # –ú–∞–∫—Å–∏–º—É–º 12 –º–µ—Å—è—Ü–µ–≤
                                val = row.iloc[k] if hasattr(row, 'iloc') else row[k]
                                if pd.notna(val) and str(val).replace('.', '').replace(',', '').replace('-', '').isdigit():
                                    monthly_data.append(int(float(val)))
                            
                            if len(monthly_data) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –º–µ—Å—è—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
                                tourist_data[country_name] = {
                                    'monthly_data': monthly_data,
                                    'total': sum(monthly_data),
                                    'average_monthly': sum(monthly_data) / len(monthly_data),
                                    'raw_name': cell_str,
                                    'year': year
                                }
                            break
        
        return tourist_data
    
    def analyze_restaurant_target_audience(self, restaurant_name, start_date=None, end_date=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        if not self.tourist_data_2024 and not self.load_tourist_data():
            return None
            
        print(f"üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant_name}")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_sales = self._get_restaurant_monthly_sales(restaurant_name, start_date, end_date)
        
        if restaurant_sales is None or len(restaurant_sales) < 3:
            return {
                'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
                'restaurant': restaurant_name
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
        correlations = self._calculate_country_correlations(restaurant_sales)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        target_audience = self._determine_target_audience(correlations, restaurant_sales)
        
        return target_audience
    
    def _get_restaurant_monthly_sales(self, restaurant_name, start_date=None, end_date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurant_query = "SELECT id FROM restaurants WHERE LOWER(name) LIKE ?"
            restaurant_result = pd.read_sql_query(restaurant_query, conn, params=[f'%{restaurant_name.lower()}%'])
            
            if restaurant_result.empty:
                print(f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
                
                                      restaurant_id = int(restaurant_result.iloc[0]['id'])
             
             # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–æ–±—ä–µ–¥–∏–Ω—è–µ–º Grab + Gojek)
             sales_query = """
                 SELECT 
                     strftime('%Y-%m', stat_date) as month,
                     SUM(COALESCE(grab_sales, 0) + COALESCE(gojek_sales, 0)) as total_sales
                 FROM (
                     SELECT stat_date, sales as grab_sales, 0 as gojek_sales
                     FROM grab_stats 
                     WHERE restaurant_id = ?
                     UNION ALL
                     SELECT stat_date, 0 as grab_sales, sales as gojek_sales
                     FROM gojek_stats 
                     WHERE restaurant_id = ?
                 ) combined_data
                 GROUP BY strftime('%Y-%m', stat_date)
                 HAVING SUM(COALESCE(grab_sales, 0) + COALESCE(gojek_sales, 0)) > 0
                 ORDER BY month
             """
            
            sales_data = pd.read_sql_query(sales_query, conn, params=[restaurant_id, restaurant_id])
            conn.close()
            
            if sales_data.empty:
                return None
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            monthly_sales = {}
            for _, row in sales_data.iterrows():
                year_month = row['month']
                year, month = year_month.split('-')
                month_key = f"{year}-{int(month):02d}"
                monthly_sales[month_key] = float(row['total_sales'])
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {len(monthly_sales)} –º–µ—Å—è—Ü–µ–≤")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min(monthly_sales.keys())} - {max(monthly_sales.keys())}")
            
            return monthly_sales
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
            return None
    
    def _calculate_country_correlations(self, restaurant_sales):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
        
        correlations = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ 2024 –∏ 2025
        all_tourist_data = {}
        if self.tourist_data_2024:
            all_tourist_data.update(self.tourist_data_2024)
        if self.tourist_data_2025:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ 2024
            for country, data_2025 in self.tourist_data_2025.items():
                if country in all_tourist_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ 2025 –∫ –¥–∞–Ω–Ω—ã–º 2024
                    all_tourist_data[country]['monthly_data'].extend(data_2025['monthly_data'])
                    all_tourist_data[country]['total'] += data_2025['total']
                else:
                    all_tourist_data[country] = data_2025
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        for country, tourist_data in all_tourist_data.items():
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            tourist_monthly = tourist_data['monthly_data']
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            sales_values = []
            tourist_values = []
            
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª—É—á–∞–π - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
            if len(tourist_monthly) >= len(restaurant_sales):
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                tourist_subset = tourist_monthly[-len(restaurant_sales):]
                sales_subset = list(restaurant_sales.values())
            else:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–¥–∞–∂
                sales_subset = list(restaurant_sales.values())[:len(tourist_monthly)]
                tourist_subset = tourist_monthly
            
            if len(sales_subset) >= 3 and len(tourist_subset) >= 3 and len(sales_subset) == len(tourist_subset):
                try:
                    correlation, p_value = pearsonr(sales_subset, tourist_subset)
                    
                    correlations[country] = {
                        'correlation': correlation,
                        'p_value': p_value,
                        'significance': '–≤—ã—Å–æ–∫–∞—è' if p_value < 0.05 else '—Å—Ä–µ–¥–Ω—è—è' if p_value < 0.1 else '–Ω–∏–∑–∫–∞—è',
                        'strength': '—Å–∏–ª—å–Ω–∞—è' if abs(correlation) > 0.7 else '—É–º–µ—Ä–µ–Ω–Ω–∞—è' if abs(correlation) > 0.4 else '—Å–ª–∞–±–∞—è',
                        'total_tourists': tourist_data['total'],
                        'direction': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è' if correlation > 0 else '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è'
                    }
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è {country}: {e}")
        
        return correlations
    
    def _determine_target_audience(self, correlations, restaurant_sales):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —Å–∏–ª–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        sorted_countries = sorted(
            correlations.items(), 
            key=lambda x: abs(x[1]['correlation']), 
            reverse=True
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        target_countries = []
        for country, data in sorted_countries:
            if (data['correlation'] > 0.3 and  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                data['p_value'] < 0.15):       # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º–∞—è
                target_countries.append((country, data))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –ø—Ä–æ–¥–∞–∂
        total_sales = sum(restaurant_sales.values())
        avg_monthly_sales = total_sales / len(restaurant_sales)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'restaurant': list(restaurant_sales.keys())[0].split('-')[0] if restaurant_sales else 'Unknown',
            'analysis_period': f"{min(restaurant_sales.keys())} - {max(restaurant_sales.keys())}",
            'total_sales': total_sales,
            'avg_monthly_sales': avg_monthly_sales,
            'target_audience': [],
            'all_correlations': correlations,
            'summary': {}
        }
        
        if target_countries:
            # –¢–û–ü-3 —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç—Ä–∞–Ω
            for i, (country, data) in enumerate(target_countries[:3]):
                result['target_audience'].append({
                    'rank': i + 1,
                    'country': country,
                    'correlation': round(data['correlation'], 3),
                    'strength': data['strength'],
                    'significance': data['significance'],
                    'total_tourists': data['total_tourists'],
                    'market_share_estimate': self._estimate_market_share(data, total_sales)
                })
            
            # –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            primary_target = target_countries[0]
            result['summary'] = {
                'primary_target': primary_target[0],
                'confidence': '–≤—ã—Å–æ–∫–∞—è' if primary_target[1]['correlation'] > 0.7 else '—Å—Ä–µ–¥–Ω—è—è',
                'total_target_countries': len(target_countries),
                'recommendation': self._generate_recommendation(target_countries, avg_monthly_sales)
            }
        else:
            result['summary'] = {
                'primary_target': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
                'confidence': '–Ω–∏–∑–∫–∞—è',
                'total_target_countries': 0,
                'recommendation': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏'
            }
        
        return result
    
    def _estimate_market_share(self, correlation_data, total_sales):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ–ª—é —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –æ–±—ä–µ–º–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –æ–±—ä–µ–º–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤
        correlation_factor = abs(correlation_data['correlation'])
        tourist_volume = correlation_data['total_tourists']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–º —Ç—É—Ä–∏—Å—Ç–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ 100,000+ —ç—Ç–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º)
        volume_factor = min(tourist_volume / 100000, 2.0)
        
        # –û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–æ–ª—è —Ä—ã–Ω–∫–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        estimated_share = correlation_factor * volume_factor * 30  # –ú–∞–∫—Å–∏–º—É–º ~60%
        
        return round(min(estimated_share, 60), 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 60%
    
    def _generate_recommendation(self, target_countries, avg_sales):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"""
        
        if not target_countries:
            return "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
        
        primary = target_countries[0]
        country = primary[0]
        correlation = primary[1]['correlation']
        
        if correlation > 0.7:
            return f"–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –Ω–∞ —Ç—É—Ä–∏—Å—Ç–∞—Ö –∏–∑ {country}. –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω—É—é —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏."
        elif correlation > 0.5:
            return f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ {country} –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        else:
            return f"–°–ª–∞–±–∞—è —Å–≤—è–∑—å —Å {country}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏."

def analyze_restaurant_target_audience(restaurant_name):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    
    analyzer = TargetAudienceAnalyzer()
    result = analyzer.analyze_restaurant_target_audience(restaurant_name)
    
    if result and 'error' not in result:
        print("\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò")
        print("=" * 50)
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['analysis_period']}")
        print(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {result['total_sales']:,.0f} IDR")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ: {result['avg_monthly_sales']:,.0f} IDR")
        print()
        
        if result['target_audience']:
            print("üåç –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:")
            for target in result['target_audience']:
                print(f"  {target['rank']}. {target['country']}")
                print(f"     –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {target['correlation']:.3f} ({target['strength']})")
                print(f"     –¢—É—Ä–∏—Å—Ç–æ–≤: {target['total_tourists']:,}")
                print(f"     –û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–æ–ª—è: {target['market_share_estimate']}%")
                print()
        
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print(f"   {result['summary']['recommendation']}")
        
        return result
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è {restaurant_name}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    result = analyze_restaurant_target_audience("Ika Kero")