#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–î–ï–ù–ò–Ø –ü–†–û–î–ê–ñ - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –í–°–ï –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚úÖ –ë–∞–∑–∞ SQLite —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ Grab/Gojek
‚úÖ 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏–∑ comprehensive_holiday_analysis.json
‚úÖ –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ bali_restaurant_locations.json
‚úÖ –†–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚úÖ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
‚úÖ –ß–µ—Å—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±–µ–∑ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import pandas as pd
import numpy as np
import requests
import json
import os
from datetime import datetime, timedelta
from statistics import mean, median
import warnings
warnings.filterwarnings('ignore')

class RealDataSalesAnalyzer:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        self.holidays_data = {}
        self.restaurant_locations = {}
        self.tourist_data = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._load_real_holidays_data()
        self._load_real_restaurant_locations()
        
    def analyze_sales_drop_real(self, restaurant_name, date_from=None, date_to=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"üéØ –ê–ù–ê–õ–ò–ó –ü–ê–î–ï–ù–ò–Ø –ü–†–û–î–ê–ñ: {restaurant_name}")
        print("‚ïê" * 80)
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("   ‚úÖ SQLite –±–∞–∑–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
        print("   ‚úÖ 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–±–∞–ª–∏–π—Å–∫–∏–µ, –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)")
        print("   ‚úÖ –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        print("   ‚úÖ –†–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ Open-Meteo API")
        print("‚ïê" * 80)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
        sales_data = self._load_real_sales_data(restaurant_name, date_from, date_to)
        
        if sales_data.empty:
            return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant_name}'"
            
        # 2. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
        bad_days = self._find_real_bad_days(sales_data)
        
        if bad_days.empty:
            return f"‚úÖ –£ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}' –Ω–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂"
            
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–µ–Ω—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        detailed_analysis = []
        
        for _, day in bad_days.iterrows():
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {day['stat_date']}...")
            analysis = self._analyze_single_day_real(day, sales_data, restaurant_name)
            detailed_analysis.append(analysis)
            
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Å—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
        return self._generate_honest_report(detailed_analysis, restaurant_name)
        
    def _load_real_holidays_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        
        holidays_file = 'data/comprehensive_holiday_analysis.json'
        
        if os.path.exists(holidays_file):
            with open(holidays_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.holidays_data = data.get('results', {})
                
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.holidays_data)} –†–ï–ê–õ–¨–ù–´–• –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
            types = {}
            for holiday in self.holidays_data.values():
                holiday_type = holiday.get('type', 'unknown')
                types[holiday_type] = types.get(holiday_type, 0) + 1
                
            print("üìã –¢–∏–ø—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤:")
            for htype, count in types.items():
                print(f"   ‚Ä¢ {htype}: {count} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
        else:
            print("‚ùå –§–∞–π–ª —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    def _load_real_restaurant_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        
        locations_file = 'data/bali_restaurant_locations.json'
        
        if os.path.exists(locations_file):
            with open(locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            for restaurant in data.get('restaurants', []):
                name = restaurant['name']
                self.restaurant_locations[name] = {
                    'lat': restaurant['latitude'],
                    'lon': restaurant['longitude'],
                    'location': restaurant['location'],
                    'zone': restaurant['zone']
                }
                
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.restaurant_locations)} –†–ï–ê–õ–¨–ù–´–• –ª–æ–∫–∞—Ü–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        else:
            print("‚ùå –§–∞–π–ª —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    def _load_real_sales_data(self, restaurant_name, date_from, date_to):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏–∑ SQLite"""
        
        conn = sqlite3.connect(self.db_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        if not date_from:
            date_from = (datetime.now() - timedelta(days=60)).strftime('%Y-%m-%d')
        if not date_to:
            date_to = datetime.now().strftime('%Y-%m-%d')
            
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            
            -- –ü–†–û–î–ê–ñ–ò –ò –ó–ê–ö–ê–ó–´ (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï)
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–†–ï–ê–õ–¨–ù–´–ï –ö–û–õ–û–ù–ö–ò)
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.store_is_busy, 0) as grab_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_busy,
            
            -- –û–¢–ú–ï–ù–´ –ò –ö–ê–ß–ï–°–¢–í–û
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as total_ads_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as total_ads_sales,
            
            -- –í–†–ï–ú–Ø (—Ç–æ–ª—å–∫–æ —É Gojek)
            COALESCE(gj.preparation_time, '00:00:00') as preparation_time,
            COALESCE(gj.delivery_time, '00:00:00') as delivery_time,
            
            -- –ö–ê–õ–ï–ù–î–ê–†–ù–´–ï –î–ê–ù–ù–´–ï
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%d', g.stat_date) AS INTEGER) as day_of_month,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date >= '{date_from}'
        AND g.stat_date <= '{date_to}'
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        df['avg_check'] = df['total_sales'] / df['total_orders'].replace(0, 1)
        df['cancel_rate'] = (df['grab_cancelled'] + df['gojek_cancelled']) / df['total_orders'].replace(0, 1) * 100
        df['roas'] = df['total_ads_sales'] / df['total_ads_spend'].replace(0, 1)
        df['operational_issues'] = (df['grab_closed'] + df['gojek_closed'] + 
                                   df['grab_out_of_stock'] + df['gojek_out_of_stock'] + 
                                   df['grab_busy'] + df['gojek_busy'])
        
        return df
        
    def _find_real_bad_days(self, data):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        mean_sales = data['total_sales'].mean()
        std_sales = data['total_sales'].std()
        
        # –ü–ª–æ—Ö–∏–µ –¥–Ω–∏ = –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ 1.5 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        threshold = mean_sales - (1.5 * std_sales)
        
        bad_days = data[data['total_sales'] < threshold].copy()
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï):")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mean_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_sales:,.0f} IDR")
        print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –¥–Ω—è: {threshold:,.0f} IDR")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {len(bad_days)}")
        
        return bad_days.sort_values('stat_date', ascending=False)
        
    def _analyze_single_day_real(self, day_data, all_data, restaurant_name):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏"""
        
        date = day_data['stat_date']
        sales = day_data['total_sales']
        baseline = all_data['total_sales'].mean()
        
        analysis = {
            'date': date,
            'sales': sales,
            'baseline': baseline,
            'drop_percent': ((sales - baseline) / baseline) * 100,
            'factors': [],
            'recommendations': []
        }
        
        print(f"   üìÖ –î–∞—Ç–∞: {date}")
        print(f"   üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (–ø–∞–¥–µ–Ω–∏–µ {abs(analysis['drop_percent']):.1f}%)")
        
        # –§–ê–ö–¢–û–† 1: –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï)
        operational_score = 0
        
        if day_data['grab_closed'] > 0:
            analysis['factors'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Grab")
            analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Grab")
            operational_score += 30
            
        if day_data['gojek_closed'] > 0:
            analysis['factors'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Gojek")
            analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Gojek")
            operational_score += 30
            
        if day_data['grab_out_of_stock'] > 0:
            analysis['factors'].append("üì¶ –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Grab")
            analysis['recommendations'].append("üì¶ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
            operational_score += 20
            
        if day_data['gojek_out_of_stock'] > 0:
            analysis['factors'].append("üì¶ –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Gojek")
            analysis['recommendations'].append("üì¶ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
            operational_score += 20
            
        if day_data['grab_busy'] > 0:
            analysis['factors'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Grab")
            analysis['recommendations'].append("üë®‚Äçüç≥ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª")
            operational_score += 15
            
        if day_data['gojek_busy'] > 0:
            analysis['factors'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Gojek")
            analysis['recommendations'].append("üë®‚Äçüç≥ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª")
            operational_score += 15
            
        # –§–ê–ö–¢–û–† 2: –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï)
        holiday_impact = self._check_real_holiday(date)
        if holiday_impact:
            analysis['factors'].append(holiday_impact['description'])
            operational_score += holiday_impact['impact_score']
            
        # –§–ê–ö–¢–û–† 3: –ü–æ–≥–æ–¥–∞ (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï Open-Meteo)
        weather_impact = self._get_real_weather_impact(date, restaurant_name)
        if weather_impact:
            analysis['factors'].append(weather_impact['description'])
            operational_score += weather_impact['impact_score']
            
        # –§–ê–ö–¢–û–† 4: –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
        avg_ads = all_data['total_ads_spend'].mean()
        if day_data['total_ads_spend'] < avg_ads * 0.5:
            analysis['factors'].append("üì± –ù–∏–∑–∫–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
            analysis['recommendations'].append("üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
            operational_score += 10
            
        # –§–ê–ö–¢–û–† 5: –ö–∞—á–µ—Å—Ç–≤–æ
        if day_data['rating'] < 4.0:
            analysis['factors'].append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {day_data['rating']:.1f}")
            analysis['recommendations'].append("‚≠ê –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ")
            operational_score += 15
            
        # –§–ê–ö–¢–û–† 6: –û—Ç–º–µ–Ω—ã
        if day_data['cancel_rate'] > 15:
            analysis['factors'].append(f"‚ùå –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω: {day_data['cancel_rate']:.1f}%")
            analysis['recommendations'].append("‚ö° –£—Å–∫–æ—Ä–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            operational_score += 10
            
        analysis['total_impact_score'] = operational_score
        
        if not analysis['factors']:
            analysis['factors'].append("‚ùì –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, —Å–æ–±—ã—Ç–∏—è)")
            
        return analysis
        
    def _check_real_holiday(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã"""
        
        if date in self.holidays_data:
            holiday = self.holidays_data[date]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ —Ç–∏–ø—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
            impact_scores = {
                'balinese': 25,     # –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç
                'muslim': 20,       # –ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
                'indonesian': 15,   # –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ
                'international': 10, # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
                'chinese': 5        # –ö–∏—Ç–∞–π—Å–∫–∏–µ –º–µ–Ω–µ–µ –≤–ª–∏—è—é—Ç
            }
            
            holiday_type = holiday.get('type', 'unknown')
            impact_score = impact_scores.get(holiday_type, 10)
            
            return {
                'description': f"üéâ {holiday['name']} ({holiday.get('category', holiday_type)})",
                'impact_score': impact_score,
                'type': holiday_type
            }
            
        return None
        
    def _get_real_weather_impact(self, date, restaurant_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ Open-Meteo API"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        if restaurant_name not in self.restaurant_locations:
            return None
            
        location = self.restaurant_locations[restaurant_name]
        lat, lon = location['lat'], location['lon']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{date}_{lat}_{lon}"
        if cache_key in self.weather_cache:
            weather_data = self.weather_cache[cache_key]
        else:
            weather_data = self._fetch_real_weather_data(date, lat, lon)
            self.weather_cache[cache_key] = weather_data
            
        if not weather_data:
            return None
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        precipitation = weather_data.get('precipitation', 0)
        temperature = weather_data.get('temperature', 25)
        
        impact_score = 0
        descriptions = []
        
        # –î–æ–∂–¥—å
        if precipitation > 10:
            descriptions.append(f"üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ({precipitation:.1f}–º–º)")
            impact_score += 25
        elif precipitation > 5:
            descriptions.append(f"üå¶Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å ({precipitation:.1f}–º–º)")
            impact_score += 15
        elif precipitation > 1:
            descriptions.append(f"‚òî –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å ({precipitation:.1f}–º–º)")
            impact_score += 5
            
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        if temperature > 35:
            descriptions.append(f"üî• –û—á–µ–Ω—å –∂–∞—Ä–∫–æ ({temperature:.1f}¬∞C)")
            impact_score += 10
        elif temperature < 20:
            descriptions.append(f"‚ùÑÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ ({temperature:.1f}¬∞C)")
            impact_score += 5
            
        if descriptions:
            return {
                'description': " + ".join(descriptions),
                'impact_score': impact_score,
                'precipitation': precipitation,
                'temperature': temperature
            }
            
        return None
        
    def _fetch_real_weather_data(self, date, lat, lon):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏–∑ Open-Meteo API"""
        
        try:
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'daily': 'precipitation_sum,temperature_2m_mean',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                daily = data.get('daily', {})
                
                if daily.get('precipitation_sum') and daily.get('temperature_2m_mean'):
                    return {
                        'precipitation': daily['precipitation_sum'][0],
                        'temperature': daily['temperature_2m_mean'][0],
                        'source': 'Open-Meteo API'
                    }
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            
        return None
        
    def _generate_honest_report(self, analyzed_days, restaurant_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Å—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        if not analyzed_days:
            return f"‚úÖ –£ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}' –Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏!"
            
        report = []
        report.append(f"üìã –ê–ù–ê–õ–ò–ó –ü–ê–î–ï–ù–ò–Ø –ü–†–û–î–ê–ñ: '{restaurant_name}'")
        report.append("‚ïê" * 80)
        report.append("üéØ –û–°–ù–û–í–ê–ù–û –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
        report.append("   ‚úÖ SQLite –±–∞–∑–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ Grab/Gojek")
        report.append("   ‚úÖ 164 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–±–∞–ª–∏–π—Å–∫–∏–µ, –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)")
        report.append("   ‚úÖ –†–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ Open-Meteo API")
        report.append("   ‚úÖ –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_loss = sum(day['baseline'] - day['sales'] for day in analyzed_days)
        avg_drop = mean([abs(day['drop_percent']) for day in analyzed_days])
        
        report.append(f"üí∞ –§–ò–ù–ê–ù–°–û–í–û–ï –í–õ–ò–Ø–ù–ò–ï:")
        report.append(f"   ‚Ä¢ –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {total_loss:,.0f} IDR –∑–∞ {len(analyzed_days)} –¥–Ω–µ–π")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ: {avg_drop:.1f}%")
        report.append("")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        all_factors = []
        all_recommendations = []
        
        for day in analyzed_days:
            all_factors.extend(day['factors'])
            all_recommendations.extend(day['recommendations'])
            
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factor_counts = {}
        for factor in all_factors:
            factor_counts[factor] = factor_counts.get(factor, 0) + 1
            
        report.append("üîç –ì–õ–ê–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–ê–î–ï–ù–ò–Ø (–ø–æ —á–∞—Å—Ç–æ—Ç–µ):")
        for factor, count in sorted(factor_counts.items(), key=lambda x: x[1], reverse=True)[:8]:
            percentage = (count / len(analyzed_days)) * 100
            report.append(f"   ‚Ä¢ {factor} ({count} –¥–Ω–µ–π, {percentage:.0f}%)")
        report.append("")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        unique_recommendations = list(set(all_recommendations))
        
        report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        for i, rec in enumerate(unique_recommendations[:10], 1):
            report.append(f"   {i}. {rec}")
        report.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ö—É–¥—à–∏–º –¥–Ω—è–º
        report.append("üìÖ –î–ï–¢–ê–õ–ò –ü–û –•–£–î–®–ò–ú –î–ù–Ø–ú:")
        
        worst_days = sorted(analyzed_days, key=lambda x: x['sales'])[:5]
        
        for day in worst_days:
            report.append(f"\n   {day['date']} - {day['sales']:,.0f} IDR ({day['drop_percent']:+.1f}%)")
            for factor in day['factors'][:3]:  # –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞
                report.append(f"     ‚Ä¢ {factor}")
                
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        controllable_factors = [f for f in all_factors if not any(x in f for x in ['–¥–æ–∂–¥—å', '–ø—Ä–∞–∑–¥–Ω–∏–∫', 'üåßÔ∏è', 'üéâ'])]
        controllable_pct = (len(controllable_factors) / len(all_factors)) * 100 if all_factors else 0
        
        report.append(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        report.append(f"   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º: {controllable_pct:.0f}%")
        
        if controllable_pct > 70:
            report.append("   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: –í–´–°–û–ö–ò–ô ‚úÖ")
            report.append("   ‚Ä¢ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å")
        elif controllable_pct > 40:
            report.append("   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: –°–†–ï–î–ù–ò–ô üü°")
            report.append("   ‚Ä¢ –ï—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∞—Ç—å –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
        else:
            report.append("   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: –ù–ò–ó–ö–ò–ô üü†")
            report.append("   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ - –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
            
        report.append("")
        report.append("‚ïê" * 80)
        report.append("üìä –û–¢–ß–ï–¢ –û–°–ù–û–í–ê–ù –ù–ê 100% –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        report.append("   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–π")
        report.append("   ‚Ä¢ –í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
        report.append("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")
        
        return "\n".join(report)

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    analyzer = RealDataSalesAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    restaurant = "Ika Canggu"  # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
    
    result = analyzer.analyze_sales_drop_real(restaurant, 
                                            date_from="2024-06-01", 
                                            date_to="2024-08-31")
    
    print("\n" + "="*100)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ (–¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï):")
    print("="*100)
    print(result)
    print("="*100)
    
    print("\nüéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ")
    print("   ‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    print("   ‚úÖ –ß–µ—Å—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")

if __name__ == "__main__":
    main()