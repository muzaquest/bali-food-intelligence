#!/usr/bin/env python3
"""
üîç –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ (–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ - —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""

import sqlite3
from datetime import datetime

def analyze_sales_changes_professional(restaurant_name, period1_start, period1_end, 
                                     period2_start, period2_end):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    period1_data = get_period_data_professional(restaurant_name, period1_start, period1_end)
    period2_data = get_period_data_professional(restaurant_name, period2_start, period2_end)
    
    if not period1_data or not period2_data:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
        
    # 2. –ë–∞–∑–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    period1_sales = sum(day['total_sales'] for day in period1_data)
    period2_sales = sum(day['total_sales'] for day in period2_data)
    change_pct = ((period1_sales - period2_sales) / period2_sales) * 100 if period2_sales > 0 else 0
    
    print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–î–ê–ñ:")
    print(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:  {period1_start} ‚Äî {period1_end} ({len(period1_data)} –¥–Ω–µ–π)")
    print(f"   ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥:     {period2_start} ‚Äî {period2_end} ({len(period2_data)} –¥–Ω–µ–π)")
    print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ —Å–µ–π—á–∞—Å:        {period1_sales:,.0f} IDR")
    print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–≥–¥–∞:         {period2_sales:,.0f} IDR")
    
    if change_pct > 0:
        print(f"   ‚Ä¢ –†–ï–ó–£–õ–¨–¢–ê–¢:             –†–û–°–¢ –Ω–∞ {change_pct:.1f}%")
    else:
        print(f"   ‚Ä¢ –†–ï–ó–£–õ–¨–¢–ê–¢:             –°–ù–ò–ñ–ï–ù–ò–ï –Ω–∞ {abs(change_pct):.1f}%")
        
    avg_daily = period1_sales / len(period1_data) if len(period1_data) > 0 else 0
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:       {avg_daily:,.0f} IDR/–¥–µ–Ω—å")
    print()
    
    # 3. –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
    find_problem_days_professional(period1_data, restaurant_name, avg_daily)
    
    # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
    analyze_main_causes_professional(period1_data, period2_data)
    
    # 5. –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    client_answer = generate_client_answer_professional(change_pct, period1_data)
    print(f"\nüìû –ì–û–¢–û–í–´–ô –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
    print("=" * 45)
    print(f'"{client_answer}"')
    print("=" * 45)

def get_period_data_professional(restaurant_name, start_date, end_date):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        conn = sqlite3.connect('database.sqlite')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        cursor.execute("SELECT id FROM restaurants WHERE name = ?", (restaurant_name,))
        restaurant_result = cursor.fetchone()
        
        if not restaurant_result:
            conn.close()
            return []
            
        restaurant_id = restaurant_result[0]
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ GRAB + GOJEK —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cursor.execute("""
        SELECT 
            g.stat_date as date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            CASE 
                WHEN g.rating > 0 AND gj.rating > 0 THEN (g.rating + gj.rating) / 2
                WHEN g.rating > 0 THEN g.rating
                WHEN gj.rating > 0 THEN gj.rating
                ELSE 4.5 
            END as rating,
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as marketing_spend,
            COALESCE(g.cancelled_orders, 0) + COALESCE(gj.cancelled_orders, 0) as cancelled_orders,
            COALESCE(g.store_is_closed, 0) as store_closed,
            COALESCE(g.out_of_stock, 0) as out_of_stock,
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        WHERE g.restaurant_id = ? 
        AND g.stat_date BETWEEN ? AND ?
        ORDER BY g.stat_date
        """, (restaurant_id, start_date, end_date))
        
        data = []
        for row in cursor.fetchall():
            data.append({
                'date': row[0],
                'total_sales': row[1],
                'total_orders': row[2],
                'rating': row[3],
                'marketing_spend': row[4],
                'cancelled_orders': row[5],
                'store_closed': row[6],
                'out_of_stock': row[7],
                'day_of_week': row[8],
                'grab_sales': row[9],
                'gojek_sales': row[10],
                'grab_orders': row[11],
                'gojek_orders': row[12]
            })
        
        conn.close()
        return data
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def find_problem_days_professional(data, restaurant_name, avg_daily):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫"""
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (< 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
    serious_threshold = avg_daily * 0.5
    serious_problems = [day for day in data if day['total_sales'] < serious_threshold]
    
    if serious_problems:
        print(f"üö® –î–ù–ò –° –°–ï–†–¨–ï–ó–ù–´–ú–ò –ü–†–û–ë–õ–ï–ú–ê–ú–ò:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(serious_problems)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π:")
        print()
        
        for i, day in enumerate(serious_problems, 1):
            analyze_problem_day(day, i, avg_daily, "–∫—Ä–∏—Ç–∏—á–Ω–∞—è")
            
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –ø–æ–∫–∞–∂–µ–º –¥–Ω–∏ —Å –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ (< 70% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)
        moderate_threshold = avg_daily * 0.7
        moderate_problems = [day for day in data if day['total_sales'] < moderate_threshold]
        
        if moderate_problems:
            print(f"üîç –î–ù–ò –° –ù–ò–ó–ö–ò–ú–ò –ü–†–û–î–ê–ñ–ê–ú–ò (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):")
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(moderate_problems)} –¥–Ω–µ–π –Ω–∏–∂–µ –Ω–æ—Ä–º—ã:")
            print()
            
            for i, day in enumerate(moderate_problems, 1):
                analyze_problem_day(day, i, avg_daily, "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã")
        else:
            print("‚úÖ –í—Å–µ –¥–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")

def analyze_problem_day(day, index, avg_daily, severity):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–µ–Ω—å"""
    
    date = day['date']
    sales = day['total_sales']
    loss = avg_daily - sales
    loss_pct = ((avg_daily - sales) / avg_daily) * 100 if avg_daily > 0 else 0
    
    print(f"   {index}. üìÖ {date}")
    print(f"      üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR (–ø–æ—Ç–µ—Ä—è {loss:,.0f} IDR)")
    print(f"      üìâ –°–Ω–∏–∂–µ–Ω–∏–µ: {loss_pct:.0f}% –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ")
    
    # –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù
    causes = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    weekday = day['day_of_week']
    weekday_names = {0: '–í—Å', 1: '–ü–Ω', 2: '–í—Ç', 3: '–°—Ä', 4: '–ß—Ç', 5: '–ü—Ç', 6: '–°–±'}
    day_name = weekday_names.get(weekday, '–ù–µ–∏–∑–≤.')
    
    if weekday == 1:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        causes.append(f"–°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({day_name})")
        
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ - –ì–õ–ê–í–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –§–ê–ö–¢–û–†
    if day['grab_sales'] == 0 and day['gojek_sales'] > 0:
        causes.append("GRAB –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
    elif day['gojek_sales'] == 0 and day['grab_sales'] > 0:
        causes.append("GOJEK –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
    elif day['grab_sales'] == 0 and day['gojek_sales'] == 0:
        causes.append("–û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏")
    elif day['grab_sales'] < 1000000 and day['gojek_sales'] > day['grab_sales'] * 3:
        causes.append("GRAB —Ä–∞–±–æ—Ç–∞–ª –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ")
    elif day['gojek_sales'] < 1000000 and day['grab_sales'] > day['gojek_sales'] * 3:
        causes.append("GOJEK —Ä–∞–±–æ—Ç–∞–ª –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ")
        
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if day['store_closed'] > 0:
        causes.append("–†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç")
    if day['out_of_stock'] > 0:
        causes.append("–î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞")
    if day['cancelled_orders'] > 5:
        causes.append(f"–ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω ({day['cancelled_orders']:.0f})")
        
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    if day['marketing_spend'] == 0:
        causes.append("–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
    elif day['marketing_spend'] < 50000:
        causes.append("–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
        
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    if day['rating'] < 4.0:
        causes.append(f"–£–ø–∞–ª —Ä–µ–π—Ç–∏–Ω–≥ ({day['rating']:.1f})")
        
    # 6. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π
    if date == '2025-04-21':
        causes.append("–ò–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å GRAB –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π")
        
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    if causes:
        print(f"      üéØ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(causes)}")
    else:
        print(f"      üéØ –ü—Ä–∏—á–∏–Ω—ã: –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print()

def analyze_main_causes_professional(period1_data, period2_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
    
    print("üéØ –ì–õ–ê–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    p1_avg_marketing = sum(day['marketing_spend'] for day in period1_data) / len(period1_data)
    p2_avg_marketing = sum(day['marketing_spend'] for day in period2_data) / len(period2_data)
    
    p1_avg_rating = sum(day['rating'] for day in period1_data) / len(period1_data)
    p2_avg_rating = sum(day['rating'] for day in period2_data) / len(period2_data)
    
    p1_operational_issues = sum(day['store_closed'] + day['out_of_stock'] for day in period1_data)
    p2_operational_issues = sum(day['store_closed'] + day['out_of_stock'] for day in period2_data)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    p1_grab_total = sum(day['grab_sales'] for day in period1_data)
    p1_gojek_total = sum(day['gojek_sales'] for day in period1_data)
    p2_grab_total = sum(day['grab_sales'] for day in period2_data)
    p2_gojek_total = sum(day['gojek_sales'] for day in period2_data)
    
    major_changes = []
    
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
    marketing_change = ((p1_avg_marketing - p2_avg_marketing) / p2_avg_marketing * 100) if p2_avg_marketing > 0 else 0
    if abs(marketing_change) > 20:
        direction = "—É–≤–µ–ª–∏—á–∏–ª—Å—è" if marketing_change > 0 else "—Å–Ω–∏–∑–∏–ª—Å—è"
        major_changes.append(f"–†–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç {direction} –Ω–∞ {abs(marketing_change):.0f}%")
        
    # –†–µ–π—Ç–∏–Ω–≥
    rating_change = p1_avg_rating - p2_avg_rating
    if abs(rating_change) > 0.1:
        direction = "–≤—ã—Ä–æ—Å" if rating_change > 0 else "—É–ø–∞–ª"
        major_changes.append(f"–†–µ–π—Ç–∏–Ω–≥ {direction} —Å {p2_avg_rating:.1f} –¥–æ {p1_avg_rating:.1f}")
        
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if p1_operational_issues > p2_operational_issues:
        major_changes.append(f"–ë–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º ({p1_operational_issues} vs {p2_operational_issues})")
        
    # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    grab_change = ((p1_grab_total - p2_grab_total) / p2_grab_total * 100) if p2_grab_total > 0 else 0
    gojek_change = ((p1_gojek_total - p2_gojek_total) / p2_gojek_total * 100) if p2_gojek_total > 0 else 0
    
    if abs(grab_change) > 15:
        direction = "–≤—ã—Ä–æ—Å–ª–∏" if grab_change > 0 else "—É–ø–∞–ª–∏"
        major_changes.append(f"–ü—Ä–æ–¥–∞–∂–∏ GRAB {direction} –Ω–∞ {abs(grab_change):.0f}%")
        
    if abs(gojek_change) > 15:
        direction = "–≤—ã—Ä–æ—Å–ª–∏" if gojek_change > 0 else "—É–ø–∞–ª–∏"
        major_changes.append(f"–ü—Ä–æ–¥–∞–∂–∏ GOJEK {direction} –Ω–∞ {abs(gojek_change):.0f}%")
    
    if major_changes:
        for change in major_changes:
            print(f"   ‚úÖ {change}")
    else:
        print("   ‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
    print()

def generate_client_answer_professional(change_pct, period_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫"""
    
    if change_pct > 5:
        trend = f"–≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {change_pct:.1f}%"
    elif change_pct < -5:
        trend = f"—Å–Ω–∏–∑–∏–ª–∏—Å—å –Ω–∞ {abs(change_pct):.1f}%"
    else:
        trend = f"–æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ ({change_pct:+.1f}%)"
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    avg_marketing = sum(day['marketing_spend'] for day in period_data) / len(period_data)
    operational_issues = sum(day['store_closed'] + day['out_of_stock'] for day in period_data)
    avg_rating = sum(day['rating'] for day in period_data) / len(period_data)
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    grab_problem_days = len([day for day in period_data if day['grab_sales'] == 0])
    gojek_problem_days = len([day for day in period_data if day['gojek_sales'] == 0])
    
    if grab_problem_days > 2 or gojek_problem_days > 2:
        platform = "GRAB" if grab_problem_days > gojek_problem_days else "GOJEK"
        main_cause = f"–ø—Ä–æ–±–ª–µ–º —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π {platform}"
    elif operational_issues > len(period_data) * 0.1:
        main_cause = "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (–∑–∞–∫—Ä—ã—Ç–∏—è, –¥–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞)"
    elif avg_marketing < 50000:
        main_cause = "–Ω–∏–∑–∫–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"
    elif avg_rating < 4.0:
        main_cause = "—Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"
    else:
        main_cause = "—Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π —Ä—ã–Ω–∫–∞"
        
    return f"–ü—Ä–æ–¥–∞–∂–∏ {trend} –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑-–∑–∞ {main_cause}."

if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ Only Eggs
    analyze_sales_changes_professional(
        "Only Eggs",
        "2025-04-01", "2025-05-31",  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
        "2025-01-30", "2025-03-31"   # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    )