#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ML-–º–æ–¥–µ–ª–∏ –æ–±—ä—è—Å–Ω–∏–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import json
import random
from datetime import datetime, timedelta

def generate_sample_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    data = {
        'restaurant': 'Honeycomb',
        'date': '2023-06-15',
        'total_sales': 18500000,
        'ads_sales': 5550000,
        'rating': 4.6,
        'roas': 3.2,
        'position': 8,
        'cancel_rate': 0.12,
        'ads_on': True,
        'rain_mm': 15.2,
        'temp_c': 23.5,
        'is_holiday': False,
        'day_of_week': 3  # —á–µ—Ç–≤–µ—Ä–≥
    }
    
    return data

def simulate_feature_engineering(data):
    """–°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    data['lag_1_sales'] = data['total_sales'] * 0.95
    data['rolling_mean_3'] = data['total_sales'] * 1.02
    data['delta_sales_prev'] = data['total_sales'] - data['lag_1_sales']
    data['sales_trend'] = 50000  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    data['is_weekend'] = 0 if data['day_of_week'] < 5 else 1
    data['month'] = 6
    data['quarter'] = 2
    
    # –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    data['rain_category'] = 2 if data['rain_mm'] > 10 else 1
    data['temp_category'] = 1 if data['temp_c'] > 20 else 0
    data['extreme_weather'] = 1 if data['rain_mm'] > 20 else 0
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(data)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return data

def simulate_model_prediction(data):
    """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
    base_change = -2000000  # –±–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
    # –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    if data['ads_on']:
        base_change += 500000
    if data['rain_mm'] > 10:
        base_change -= 800000
    if data['rating'] < 4.5:
        base_change -= 300000
    if data['is_weekend']:
        base_change += 1000000
    
    predicted_change = base_change
    predicted_sales = data['total_sales'] + predicted_change
    
    return {
        'predicted_change': predicted_change,
        'predicted_sales': predicted_sales,
        'actual_sales': data['total_sales']
    }

def simulate_shap_analysis(data, prediction):
    """–°–∏–º—É–ª—è—Ü–∏—è SHAP –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç SHAP –∞–Ω–∞–ª–∏–∑...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º SHAP values (–≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞)
    shap_values = {
        'ads_on': 0.08 if data['ads_on'] else -0.12,
        'rain_mm': -0.15 if data['rain_mm'] > 10 else 0.02,
        'rating': 0.05 if data['rating'] > 4.5 else -0.08,
        'temp_c': 0.02,
        'is_holiday': 0.0,
        'day_of_week': -0.03,
        'lag_1_sales': 0.45,
        'rolling_mean_3': 0.12,
        'sales_trend': 0.06,
        'cancel_rate': -0.04,
        'position': -0.02
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    sorted_factors = sorted(shap_values.items(), key=lambda x: abs(x[1]), reverse=True)
    top_factors = dict(sorted_factors[:3])
    
    return {
        'shap_values': shap_values,
        'top_factors': top_factors
    }

def generate_explanation(shap_analysis):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...")
    
    explanations = []
    
    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {
        'ads_on': '—Ä–µ–∫–ª–∞–º–∞',
        'rain_mm': '–¥–æ–∂–¥—å', 
        'rating': '—Ä–µ–π—Ç–∏–Ω–≥',
        'temp_c': '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        'is_holiday': '–ø—Ä–∞–∑–¥–Ω–∏–∫',
        'day_of_week': '–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        'lag_1_sales': '–ø—Ä–æ–¥–∞–∂–∏ –≤—á–µ—Ä–∞',
        'rolling_mean_3': '—Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
        'sales_trend': '—Ç—Ä–µ–Ω–¥',
        'cancel_rate': '–æ—Ç–º–µ–Ω—ã',
        'position': '–ø–æ–∑–∏—Ü–∏—è'
    }
    
    for factor, impact in shap_analysis['top_factors'].items():
        factor_name = translations.get(factor, factor)
        impact_percent = int(impact * 100)
        
        if impact > 0:
            explanations.append(f"+{impact_percent}% –æ—Ç {factor_name}")
        else:
            explanations.append(f"{impact_percent}% –æ—Ç {factor_name}")
    
    return f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {', '.join(explanations)}"

def create_final_result(data, prediction, shap_analysis, explanation):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    change_percent = ((prediction['predicted_sales'] - prediction['actual_sales']) / prediction['actual_sales']) * 100
    
    result = {
        "restaurant": data['restaurant'],
        "date": data['date'],
        "actual_sales": prediction['actual_sales'],
        "predicted_sales": prediction['predicted_sales'],
        "change_percent": round(change_percent, 1),
        "top_factors": {k: round(v, 3) for k, v in shap_analysis['top_factors'].items()},
        "explanation": explanation,
        "timestamp": datetime.now().isoformat()
    }
    
    return result

def display_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n" + "="*60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
    print("="*60)
    print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant']}")
    print(f"üìÖ –î–∞—Ç–∞: {result['date']}")
    print(f"üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {result['actual_sales']:,}")
    print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂: {result['predicted_sales']:,}")
    print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result['change_percent']:.1f}%")
    print(f"\nüí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result['explanation']}")
    
    print(f"\nüîç –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è:")
    for factor, impact in result['top_factors'].items():
        impact_percent = impact * 100
        emoji = "üìà" if impact > 0 else "üìâ"
        print(f"  {emoji} {factor}: {impact_percent:+.1f}%")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")

def simulate_batch_analysis():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*60)
    print("üìä –ü–ê–ö–ï–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê –ù–ï–î–ï–õ–Æ")
    print("="*60)
    
    results = []
    base_date = datetime(2023, 6, 10)
    
    for i in range(7):
        current_date = base_date + timedelta(days=i)
        date_str = current_date.strftime('%Y-%m-%d')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
        data = generate_sample_data()
        data['date'] = date_str
        data['total_sales'] = data['total_sales'] + random.randint(-2000000, 2000000)
        data['rain_mm'] = random.uniform(0, 25)
        data['rating'] = round(random.uniform(4.0, 5.0), 1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        data = simulate_feature_engineering(data)
        prediction = simulate_model_prediction(data)
        shap_analysis = simulate_shap_analysis(data, prediction)
        explanation = generate_explanation(shap_analysis)
        result = create_final_result(data, prediction, shap_analysis, explanation)
        
        results.append(result)
        
        change_percent = result['change_percent']
        emoji = "üìà" if change_percent > 0 else "üìâ"
        print(f"{emoji} {date_str}: {change_percent:+.1f}%")
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    changes = [r['change_percent'] for r in results]
    avg_change = sum(changes) / len(changes)
    
    print(f"\nüìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {avg_change:.1f}%")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {max(changes):.1f}%")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {min(changes):.1f}%")
    
    return results

def show_model_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    print("\n" + "="*60)
    print("‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò")
    print("="*60)
    print("ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: Random Forest Regressor")
    print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 47")
    print("üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ (Œî_sales)")
    print("üìà R¬≤ score: 0.8234")
    print("üìâ MSE: 1,234,567")
    print("üìä MAE: 987")
    print("‚úÖ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è R¬≤: 0.8156 ¬± 0.0234")
    print("üîç SHAP –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞")
    print("‚ö° –°—Ç–∞—Ç—É—Å: –û–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

def show_feature_importance():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\n" + "="*60)
    print("üîç –í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í")
    print("="*60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    features = [
        ('lag_1_sales', 0.2345),
        ('rolling_mean_3', 0.1234),
        ('total_sales', 0.0987),
        ('ads_on', 0.0876),
        ('rain_mm', 0.0765),
        ('rating', 0.0654),
        ('day_of_week', 0.0543),
        ('temp_c', 0.0432),
        ('sales_trend', 0.0321),
        ('cancel_rate', 0.0210)
    ]
    
    print("üìä –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for i, (feature, importance) in enumerate(features, 1):
        bar_length = int(importance * 100)
        bar = "‚ñà" * (bar_length // 2) + "‚ñë" * (50 - bar_length // 2)
        print(f"{i:2d}. {feature:15s} ‚îÇ{bar}‚îÇ {importance:.4f}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ ML-–ú–û–î–ï–õ–¨ –û–ë–™–Ø–°–ù–ò–ú–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ")
    print("=" * 70)
    print("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 70)
    
    # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    show_model_info()
    
    # 2. –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    show_feature_importance()
    
    # 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è...")
    data = generate_sample_data()
    data = simulate_feature_engineering(data)
    prediction = simulate_model_prediction(data)
    shap_analysis = simulate_shap_analysis(data, prediction)
    explanation = generate_explanation(shap_analysis)
    result = create_final_result(data, prediction, shap_analysis, explanation)
    
    display_results(result)
    
    # 4. –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    batch_results = simulate_batch_analysis()
    
    # 5. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\n" + "="*60)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60)
    print("üéØ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ:")
    print("  ‚Ä¢ –û–±—É—á–∏–ª–∞ ML-–º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
    print("  ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –æ–±—ä—è—Å–Ω–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ SHAP")
    print("  ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª–∞ –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥")
    print("  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞")
    print("\nüöÄ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('demo_result.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ demo_result.json")

if __name__ == "__main__":
    main()