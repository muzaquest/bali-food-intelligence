#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• API –ò–ù–¢–ï–ì–†–ê–¶–ò–ô
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Open-Meteo, OpenAI –∏ Calendarific API
"""

import os
import sys
import requests
from datetime import datetime
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('..')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('../.env')

def test_open_meteo_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Open-Meteo API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)"""
    print("üå§Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPEN-METEO API")
    print("-" * 40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–∞–ª–∏
        params = {
            'latitude': -8.4095,
            'longitude': 115.1889,
            'start_date': '2025-01-01',
            'end_date': '2025-01-01',
            'daily': 'temperature_2m_mean,precipitation_sum,weather_code',
            'timezone': 'Asia/Jakarta'
        }
        
        response = requests.get('https://archive-api.open-meteo.com/v1/archive', params=params)
        
        if response.status_code == 200:
            data = response.json()
            daily = data.get('daily', {})
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data.get('latitude')}, {data.get('longitude')}")
            print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {daily.get('temperature_2m_mean', [None])[0]}¬∞C")
            print(f"üåßÔ∏è –û—Å–∞–¥–∫–∏: {daily.get('precipitation_sum', [None])[0]}mm")
            print(f"‚òÅÔ∏è –ö–æ–¥ –ø–æ–≥–æ–¥—ã: {daily.get('weather_code', [None])[0]}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI API"""
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI API")
    print("-" * 40)
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"üîë API –∫–ª—é—á: {api_key[:20]}...{api_key[-10:]}")
    
    try:
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': 'gpt-3.5-turbo',
            'messages': [
                {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API.'}
            ],
            'max_tokens': 50
        }
        
        response = requests.post('https://api.openai.com/v1/chat/completions', 
                               headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            message = result['choices'][0]['message']['content']
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {message}")
            print(f"üí∞ –¢–æ–∫–µ–Ω—ã: {result['usage']['total_tokens']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_calendarific_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Calendarific API"""
    print("\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CALENDARIFIC API")
    print("-" * 40)
    
    api_key = os.getenv('CALENDARIFIC_API_KEY')
    if not api_key:
        print("‚ùå CALENDARIFIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"üîë API –∫–ª—é—á: {api_key[:10]}...{api_key[-5:]}")
    
    try:
        params = {
            'api_key': api_key,
            'country': 'ID',
            'year': 2025,
            'type': 'national'
        }
        
        response = requests.get('https://calendarific.com/api/v2/holidays', params=params)
        
        if response.status_code == 200:
            data = response.json()
            holidays = data.get('response', {}).get('holidays', [])
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üèùÔ∏è –°—Ç—Ä–∞–Ω–∞: Indonesia")
            print(f"üìÖ –ì–æ–¥: 2025")
            print(f"üéâ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {len(holidays)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
            for holiday in holidays[:3]:
                name = holiday.get('name', 'N/A')
                date = holiday.get('date', {}).get('iso', 'N/A')
                print(f"  ‚Ä¢ {date}: {name}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_google_maps_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Google Maps API"""
    print("\nüó∫Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE MAPS API")
    print("-" * 40)
    
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    if not api_key:
        print("‚ùå GOOGLE_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"üîë API –∫–ª—é—á: {api_key[:20]}...{api_key[-10:]}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        params = {
            'address': 'Canggu, Bali, Indonesia',
            'key': api_key
        }
        
        response = requests.get('https://maps.googleapis.com/maps/api/geocode/json', params=params)
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', [])
            
            if results:
                location = results[0]['geometry']['location']
                formatted_address = results[0]['formatted_address']
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìç –ê–¥—Ä–µ—Å: {formatted_address}")
                print(f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location['lat']}, {location['lng']}")
                return True
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã API"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò–ù–¢–ï–ì–†–ê–¶–ò–ô")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API
    results['open_meteo'] = test_open_meteo_api()
    results['openai'] = test_openai_api()
    results['calendarific'] = test_calendarific_api()
    results['google_maps'] = test_google_maps_api()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for api_name, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {api_name.upper()}: {'–†–ê–ë–û–¢–ê–ï–¢' if status else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    print()
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    main()