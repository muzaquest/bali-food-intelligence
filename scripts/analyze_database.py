#!/usr/bin/env python3
"""
üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import pandas as pd
import json
from datetime import datetime, timedelta

def analyze_database_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('../database.sqlite')
        cursor = conn.cursor()
        
        print("üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for table_name in tables:
            table = table_name[0]
            print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table})")
            columns = cursor.fetchall()
            
            for col in columns:
                print(f"  - {col[1]} ({col[2]})")
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def analyze_restaurant_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    try:
        conn = sqlite3.connect('../database.sqlite')
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        df = pd.read_sql_query("SELECT * FROM restaurants", conn)
        
        print("\nüçΩÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–°–¢–û–†–ê–ù–û–í")
        print("=" * 50)
        print(f"–í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(df)}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        if 'city' in df.columns:
            city_stats = df['city'].value_counts()
            print(f"\nüèôÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
            for city, count in city_stats.head(10).items():
                print(f"  - {city}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        if 'platform' in df.columns:
            platform_stats = df['platform'].value_counts()
            print(f"\nüì± –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:")
            for platform, count in platform_stats.items():
                print(f"  - {platform}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        if 'rating' in df.columns:
            print(f"\n‚≠ê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
            print(f"  - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {df['rating'].mean():.2f}")
            print(f"  - –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {df['rating'].median():.2f}")
            print(f"  - –ú–∏–Ω/–ú–∞–∫—Å: {df['rating'].min():.1f} / {df['rating'].max():.1f}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")
        return False

def analyze_sales_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"""
    try:
        conn = sqlite3.connect('../database.sqlite')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥–∞–∂
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%sales%'")
        sales_tables = cursor.fetchall()
        
        if not sales_tables:
            print("\nüí∞ –î–ê–ù–ù–´–ï –ü–†–û–î–ê–ñ: –ù–µ –Ω–∞–π–¥–µ–Ω—ã")
            conn.close()
            return True
        
        print("\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ")
        print("=" * 50)
        
        for table_name in sales_tables:
            table = table_name[0]
            df = pd.read_sql_query(f"SELECT * FROM {table}", conn)
            
            print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞: {table}")
            print(f"  - –ó–∞–ø–∏—Å–µ–π: {len(df)}")
            
            if 'sales' in df.columns:
                print(f"  - –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: ${df['sales'].sum():,.2f}")
                print(f"  - –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: ${df['sales'].mean():,.2f}")
            
            if 'orders' in df.columns:
                print(f"  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {df['orders'].sum():,}")
                print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {df['orders'].mean():.1f}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂: {e}")
        return False

def generate_data_quality_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('../database.sqlite')
        
        print("\nüîç –û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        df = pd.read_sql_query("SELECT * FROM restaurants", conn)
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"  - –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        missing_data = df.isnull().sum()
        if missing_data.sum() > 0:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            for col, missing in missing_data.items():
                if missing > 0:
                    percentage = (missing / len(df)) * 100
                    print(f"  - {col}: {missing} ({percentage:.1f}%)")
        else:
            print(f"\n‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if 'name' in df.columns:
            duplicates = df['name'].duplicated().sum()
            print(f"\nüîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {duplicates}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

def export_summary():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –≤ JSON"""
    try:
        conn = sqlite3.connect('../database.sqlite')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = {
            "timestamp": datetime.now().isoformat(),
            "database_info": {},
            "data_quality": {},
            "statistics": {}
        }
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        summary["database_info"]["tables"] = len(tables)
        summary["database_info"]["table_names"] = [t[0] for t in tables]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        df = pd.read_sql_query("SELECT * FROM restaurants", conn)
        summary["statistics"]["total_restaurants"] = len(df)
        
        if 'city' in df.columns:
            summary["statistics"]["cities"] = df['city'].nunique()
        
        if 'platform' in df.columns:
            summary["statistics"]["platforms"] = df['platform'].value_counts().to_dict()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('../data/database_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –°–≤–æ–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ data/database_analysis.json")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ë–ê–ó–´ –î–ê–ù–ù–´–• –†–ï–°–¢–û–†–ê–ù–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    import os
    if not os.path.exists('../database.sqlite'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_database.py")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
    analyze_database_structure()
    analyze_restaurant_data()
    analyze_sales_data()
    generate_data_quality_report()
    export_summary()
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()