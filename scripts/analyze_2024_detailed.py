#!/usr/bin/env python3
"""
üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• 2024
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏ –∑–∞ 2024 –≥–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º
"""

import pandas as pd
import json
from datetime import datetime

def analyze_tourist_data_2024():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥–æ–¥"""
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=2)
        
        print("üèùÔ∏è –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò 2024")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape}")
        print(f"üìÖ –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = {}
        total_tourists = 0
        
        months = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 
                 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
        
        for i, month in enumerate(months, 1):
            if month in df.columns:
                month_total = df[month].sum()
                monthly_data[f"{i:02d}"] = int(month_total) if pd.notna(month_total) else 0
                total_tourists += monthly_data[f"{i:02d}"]
                print(f"üìÖ {month}: {monthly_data[f'{i:02d}']:,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
        
        print()
        print(f"üéØ –ò–¢–û–ì–û –∑–∞ 2024: {total_tourists:,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        print("\nüåç –¢–û–ü-10 –°–¢–†–ê–ù:")
        country_totals = {}
        
        for month in months:
            if month in df.columns:
                for idx, row in df.iterrows():
                    if pd.notna(row.get('Negara', '')) and pd.notna(row.get(month, 0)):
                        country = str(row['Negara']).strip()
                        if country not in country_totals:
                            country_totals[country] = 0
                        country_totals[country] += int(row[month]) if pd.notna(row[month]) else 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
        top_countries = sorted(country_totals.items(), key=lambda x: x[1], reverse=True)[:10]
        
        for i, (country, total) in enumerate(top_countries, 1):
            percentage = (total / total_tourists * 100) if total_tourists > 0 else 0
            print(f"{i:2}. {country}: {total:,} ({percentage:.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'year': 2024,
            'total_tourists': total_tourists,
            'monthly_breakdown': monthly_data,
            'top_countries': dict(top_countries),
            'analysis_date': datetime.now().isoformat()
        }
        
        with open('data/tourist_analysis_2024.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/tourist_analysis_2024.json")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return None

if __name__ == "__main__":
    analyze_tourist_data_2024()