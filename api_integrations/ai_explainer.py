#!/usr/bin/env python3
"""
AI Explainer API Integration –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import openai
import json
from datetime import datetime
from typing import Dict, List, Optional

class AIExplainer:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é OpenAI API"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        self.client = openai.OpenAI(api_key=api_key)
        self.model = model
        
        # –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.prompts = {
            'sales_analysis': """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ë–∞–ª–∏. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.

–î–ê–ù–ù–´–ï:
- –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name} ({region})
- –î–∞—Ç–∞: {date}
- –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {actual_sales:,.0f} IDR
- –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏: {predicted_sales:,.0f} IDR
- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {difference_percent:+.1f}%

–§–ê–ö–¢–û–†–´:
- –ü–æ–≥–æ–¥–∞: {weather_summary}
- –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_impact:+.1f}%
- –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {holidays}
- –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {holiday_impact:+.1f}%
- –ó–∞–∫–∞–∑–æ–≤: {orders}
- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:,.0f} IDR
- –†–µ–∫–ª–∞–º–∞: {ads_status}
- –†–µ–π—Ç–∏–Ω–≥: {rating}
- –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time} –º–∏–Ω

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
2. –£–∫–∞–∂–∏ –≥–ª–∞–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è
3. –î–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
5. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìä –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ
[–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω]

üéØ –ì–õ–ê–í–ù–´–ï –§–ê–ö–¢–û–†–´
[–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤]

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
""",
            
            'weekly_summary': """
–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –°–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–º.

–î–ê–ù–ù–´–ï –ó–ê –ù–ï–î–ï–õ–Æ:
{weekly_data}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–∞–∂
2. –í—ã–¥–µ–ª–∏ –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏
3. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏–π
4. –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
5. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìà –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
[–û–±—â–∏–π —Ç—Ä–µ–Ω–¥]

üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
[–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏]

üîÆ –ü–†–û–ì–ù–û–ó –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ
[–û–∂–∏–¥–∞–Ω–∏—è]

üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
[–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
""",
            
            'emergency_alert': """
–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–∂. –°–æ–∑–¥–∞–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}
- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {difference_percent:+.1f}%
- –ü—Ä–∏—á–∏–Ω–∞: {main_reason}
- –í—Ä–µ–º—è: {timestamp}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ–±–ª–µ–º—É
2. –£–∫–∞–∂–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å (1-5)
3. –î–∞–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
[–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]

‚ö° –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
[–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å]

üîß –ü–õ–ê–ù –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
[–®–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è]
"""
        }
    
    def generate_sales_analysis(self, data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            prompt_data = self._prepare_sales_data(data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –ë–∞–ª–∏."},
                    {"role": "user", "content": self.prompts['sales_analysis'].format(**prompt_data)}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            explanation = response.choices[0].message.content
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._extract_recommendations(explanation)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            criticality = self._calculate_criticality(data)
            
            return {
                'explanation': explanation,
                'recommendations': recommendations,
                'criticality': criticality,
                'confidence': self._calculate_confidence(data),
                'generated_at': datetime.now().isoformat(),
                'tokens_used': response.usage.total_tokens
            }
            
        except Exception as e:
            return self._generate_fallback_analysis(data, str(e))
    
    def generate_weekly_summary(self, weekly_data: List[Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            summary_data = self._prepare_weekly_data(weekly_data)
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."},
                    {"role": "user", "content": self.prompts['weekly_summary'].format(
                        weekly_data=json.dumps(summary_data, ensure_ascii=False, indent=2)
                    )}
                ],
                temperature=0.6,
                max_tokens=1500
            )
            
            summary = response.choices[0].message.content
            
            return {
                'summary': summary,
                'key_insights': self._extract_key_insights(summary),
                'action_items': self._extract_action_items(summary),
                'generated_at': datetime.now().isoformat(),
                'tokens_used': response.usage.total_tokens
            }
            
        except Exception as e:
            return self._generate_fallback_summary(weekly_data, str(e))
    
    def generate_emergency_alert(self, data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã
            main_reason = self._identify_main_issue(data)
            
            prompt_data = {
                'restaurant_name': data.get('restaurant_name', 'Unknown'),
                'difference_percent': data.get('sales_difference_percent', 0),
                'main_reason': main_reason,
                'timestamp': datetime.now().strftime('%H:%M %d.%m.%Y')
            }
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–∂."},
                    {"role": "user", "content": self.prompts['emergency_alert'].format(**prompt_data)}
                ],
                temperature=0.3,  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
                max_tokens=500
            )
            
            alert = response.choices[0].message.content
            
            return {
                'alert': alert,
                'urgency': self._calculate_urgency(data),
                'immediate_actions': self._extract_immediate_actions(alert),
                'generated_at': datetime.now().isoformat(),
                'tokens_used': response.usage.total_tokens
            }
            
        except Exception as e:
            return self._generate_fallback_alert(data, str(e))
    
    def generate_custom_analysis(self, data: Dict, custom_prompt: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É"""
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞."},
                    {"role": "user", "content": f"{custom_prompt}\n\n–î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}"}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            return {
                'analysis': response.choices[0].message.content,
                'generated_at': datetime.now().isoformat(),
                'tokens_used': response.usage.total_tokens
            }
            
        except Exception as e:
            return {'error': str(e), 'analysis': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞'}
    
    def _prepare_sales_data(self, data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂"""
        return {
            'restaurant_name': data.get('restaurant_name', 'Unknown'),
            'region': data.get('region', 'Unknown'),
            'date': data.get('date', datetime.now().strftime('%Y-%m-%d')),
            'actual_sales': data.get('actual_sales', 0),
            'predicted_sales': data.get('predicted_sales', 0),
            'difference_percent': data.get('sales_difference_percent', 0),
            'weather_summary': data.get('weather', {}).get('summary', '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'),
            'weather_impact': data.get('weather', {}).get('impact_percent', 0),
            'holidays': ', '.join(data.get('holidays', {}).get('current_holidays', ['–ù–µ—Ç'])),
            'holiday_impact': data.get('holidays', {}).get('impact_percent', 0),
            'orders': data.get('analysis', {}).get('orders', 0),
            'avg_order_value': data.get('analysis', {}).get('avg_order_value', 0),
            'ads_status': '–í–∫–ª—é—á–µ–Ω–∞' if data.get('analysis', {}).get('ads_enabled', False) else '–í—ã–∫–ª—é—á–µ–Ω–∞',
            'rating': data.get('analysis', {}).get('rating', 0),
            'delivery_time': data.get('analysis', {}).get('delivery_time', 0)
        }
    
    def _prepare_weekly_data(self, weekly_data: List[Dict]) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        total_sales = sum(day.get('actual_sales', 0) for day in weekly_data)
        avg_sales = total_sales / len(weekly_data) if weekly_data else 0
        
        best_day = max(weekly_data, key=lambda x: x.get('actual_sales', 0)) if weekly_data else {}
        worst_day = min(weekly_data, key=lambda x: x.get('actual_sales', 0)) if weekly_data else {}
        
        return {
            'total_sales': total_sales,
            'avg_daily_sales': avg_sales,
            'best_day': {
                'date': best_day.get('date', ''),
                'sales': best_day.get('actual_sales', 0)
            },
            'worst_day': {
                'date': worst_day.get('date', ''),
                'sales': worst_day.get('actual_sales', 0)
            },
            'daily_breakdown': [
                {
                    'date': day.get('date', ''),
                    'sales': day.get('actual_sales', 0),
                    'deviation': day.get('sales_difference_percent', 0)
                }
                for day in weekly_data
            ]
        }
    
    def _extract_recommendations(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        recommendations = []
        lines = text.split('\n')
        
        in_recommendations = False
        for line in lines:
            line = line.strip()
            if 'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò' in line or '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò' in line:
                in_recommendations = True
                continue
            
            if in_recommendations and line and not line.startswith('üìä') and not line.startswith('üéØ'):
                if line.startswith('-') or line.startswith('‚Ä¢') or line.startswith('1.'):
                    recommendations.append(line.lstrip('- ‚Ä¢123456789.').strip())
                elif len(line) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                    recommendations.append(line)
        
        return recommendations[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def _extract_key_insights(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        insights = []
        lines = text.split('\n')
        
        for line in lines:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['—Ç—Ä–µ–Ω–¥', '—Ä–æ—Å—Ç', '–ø–∞–¥–µ–Ω–∏–µ', '–ø—Ä–∏—á–∏–Ω–∞']):
                if len(line) > 20:
                    insights.append(line)
        
        return insights[:3]
    
    def _extract_action_items(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π"""
        actions = []
        lines = text.split('\n')
        
        for line in lines:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å–ª–µ–¥—É–µ—Ç', '–Ω—É–∂–Ω–æ', '—Å—Ç–æ–∏—Ç']):
                if len(line) > 15:
                    actions.append(line)
        
        return actions[:4]
    
    def _extract_immediate_actions(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        actions = []
        lines = text.split('\n')
        
        in_immediate = False
        for line in lines:
            line = line.strip()
            if '‚ö° –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø' in line:
                in_immediate = True
                continue
            
            if in_immediate and line and not line.startswith('üîß'):
                if line.startswith('-') or line.startswith('‚Ä¢'):
                    actions.append(line.lstrip('- ‚Ä¢').strip())
                elif len(line) > 10:
                    actions.append(line)
        
        return actions[:3]
    
    def _identify_main_issue(self, data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É"""
        difference = abs(data.get('sales_difference_percent', 0))
        
        if difference > 30:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
        elif difference > 20:
            return "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
        elif difference > 10:
            return "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
        else:
            return "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
    
    def _calculate_criticality(self, data: Dict) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (1-5)"""
        difference = abs(data.get('sales_difference_percent', 0))
        
        if difference > 40:
            return 5  # –ö—Ä–∏—Ç–∏—á–Ω–æ
        elif difference > 25:
            return 4  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        elif difference > 15:
            return 3  # –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
        elif difference > 5:
            return 2  # –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        else:
            return 1  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ
    
    def _calculate_urgency(self, data: Dict) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å (1-5)"""
        difference = abs(data.get('sales_difference_percent', 0))
        
        if difference > 35:
            return 5  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        elif difference > 25:
            return 4  # –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
        elif difference > 15:
            return 3  # –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        elif difference > 10:
            return 2  # –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
        else:
            return 1  # –ü–ª–∞–Ω–æ–≤–æ–µ
    
    def _calculate_confidence(self, data: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        base_confidence = 0.8
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if data.get('weather'):
            base_confidence += 0.1
        if data.get('holidays'):
            base_confidence += 0.1
        if data.get('analysis', {}).get('orders', 0) > 0:
            base_confidence += 0.05
        
        return min(base_confidence, 1.0)
    
    def _generate_fallback_analysis(self, data: Dict, error: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
        difference = data.get('sales_difference_percent', 0)
        
        if difference > 10:
            explanation = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {difference:.1f}%. –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            recommendations = ["–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å–ø–µ—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"]
        elif difference < -10:
            explanation = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –Ω–∏–∂–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {abs(difference):.1f}%. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω."
            recommendations = ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"]
        else:
            explanation = f"üìä –ü—Ä–æ–¥–∞–∂–∏ –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {difference:+.1f}%)."
            recommendations = ["–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"]
        
        return {
            'explanation': explanation,
            'recommendations': recommendations,
            'criticality': self._calculate_criticality(data),
            'confidence': 0.5,
            'generated_at': datetime.now().isoformat(),
            'error': f"–û—à–∏–±–∫–∞ AI: {error}"
        }
    
    def _generate_fallback_summary(self, weekly_data: List[Dict], error: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        total_sales = sum(day.get('actual_sales', 0) for day in weekly_data)
        
        return {
            'summary': f"üìà –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_sales:,.0f} IDR",
            'key_insights': ["–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"],
            'action_items': ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"],
            'generated_at': datetime.now().isoformat(),
            'error': f"–û—à–∏–±–∫–∞ AI: {error}"
        }
    
    def _generate_fallback_alert(self, data: Dict, error: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'alert': f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {data.get('sales_difference_percent', 0):+.1f}%",
            'urgency': self._calculate_urgency(data),
            'immediate_actions': ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"],
            'generated_at': datetime.now().isoformat(),
            'error': f"–û—à–∏–±–∫–∞ AI: {error}"
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á –æ—Ç OpenAI
    api_key = "YOUR_OPENAI_API_KEY"
    
    ai_explainer = AIExplainer(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'restaurant_name': 'Warung Bali Asli',
        'region': 'Seminyak',
        'date': '2024-01-15',
        'actual_sales': 5500000,
        'predicted_sales': 5000000,
        'sales_difference_percent': 10.0,
        'weather': {
            'summary': '–Ø—Å–Ω–æ, 28¬∞C',
            'impact_percent': 5.0
        },
        'holidays': {
            'current_holidays': [],
            'impact_percent': 0
        },
        'analysis': {
            'orders': 95,
            'avg_order_value': 57895,
            'ads_enabled': True,
            'rating': 4.2,
            'delivery_time': 28
        }
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    result = ai_explainer.generate_sales_analysis(test_data)
    print("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ:")
    print(result['explanation'])
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(result['recommendations'])}")
    for i, rec in enumerate(result['recommendations'], 1):
        print(f"{i}. {rec}")

if __name__ == "__main__":
    main()