#!/usr/bin/env python3
"""
API Integrations Package –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ë–∞–ª–∏

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã (OpenWeatherMap)
- –ê–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (Calendarific)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ–±—ä—è—Å–Ω–µ–Ω–∏–π (OpenAI)
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
- –ú–∞—Å—Ç–µ—Ä-–∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

__version__ = "1.0.0"
__author__ = "Restaurant Analytics Team"
__email__ = "support@analytics.com"

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from .weather_service import WeatherService
from .holiday_service import HolidayService
from .ai_explainer import AIExplainer
from .client_database_api import ClientDatabaseAPI
from .master_integrator import MasterIntegrator

# –ü—É–±–ª–∏—á–Ω—ã–π API –ø–∞–∫–µ—Ç–∞
__all__ = [
    'WeatherService',
    'HolidayService',
    'AIExplainer',
    'ClientDatabaseAPI',
    'MasterIntegrator'
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    'weather_api_key': None,
    'holiday_api_key': None,
    'openai_api_key': None,
    'openai_model': 'gpt-4',
    'database_config': {
        'type': 'sqlite',
        'file_path': 'client_data.db'
    }
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –ë–∞–ª–∏
BALI_REGIONS = [
    'Seminyak',
    'Ubud', 
    'Canggu',
    'Denpasar',
    'Sanur',
    'Nusa Dua',
    'Jimbaran',
    'Kuta'
]

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
SUPPORTED_DB_TYPES = [
    'sqlite',
    'mysql',
    'postgresql',
    'api'
]

def create_integrator(config=None):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MasterIntegrator
    
    Args:
        config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π
        
    Returns:
        MasterIntegrator: –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    """
    if config is None:
        config = DEFAULT_CONFIG.copy()
    
    return MasterIntegrator(config)

def validate_config(config):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
    
    Args:
        config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        
    Raises:
        ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    """
    required_keys = ['weather_api_key', 'holiday_api_key', 'openai_api_key']
    
    for key in required_keys:
        if key not in config or not config[key]:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á: {key}")
    
    if 'database_config' not in config:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    db_config = config['database_config']
    if 'type' not in db_config:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    if db_config['type'] not in SUPPORTED_DB_TYPES:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {db_config['type']}")
    
    return True

def get_version_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    """
    return {
        'version': __version__,
        'author': __author__,
        'email': __email__,
        'supported_regions': BALI_REGIONS,
        'supported_databases': SUPPORTED_DB_TYPES,
        'dependencies': {
            'requests': '>=2.31.0',
            'openai': '>=1.3.0',
            'pandas': '>=2.0.0',
            'numpy': '>=1.24.0',
            'scikit-learn': '>=1.3.0'
        }
    }

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
USAGE_EXAMPLES = {
    'basic_analysis': '''
from api_integrations import create_integrator

config = {
    'weather_api_key': 'YOUR_WEATHER_KEY',
    'holiday_api_key': 'YOUR_HOLIDAY_KEY',
    'openai_api_key': 'YOUR_OPENAI_KEY',
    'database_config': {
        'type': 'sqlite',
        'file_path': 'client_data.db'
    }
}

integrator = create_integrator(config)
analysis = integrator.analyze_restaurant_performance(1, '2024-01-15')
print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {analysis['sales_analysis']['difference_percent']:+.1f}%")
''',
    
    'batch_analysis': '''
from api_integrations import MasterIntegrator

integrator = MasterIntegrator(config)
restaurant_ids = [1, 2, 3, 4, 5]
results = integrator.batch_analyze_restaurants(restaurant_ids, '2024-01-15')
print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['successful_analyses']} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
''',
    
    'health_check': '''
from api_integrations import create_integrator

integrator = create_integrator(config)
health = integrator.get_system_health()
print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health['overall_status']}")
'''
}

def print_usage_example(example_name='basic_analysis'):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    Args:
        example_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
    """
    if example_name in USAGE_EXAMPLES:
        print(f"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - {example_name}:")
        print(USAGE_EXAMPLES[example_name])
    else:
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: {list(USAGE_EXAMPLES.keys())}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
def debug_info():
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ"""
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ api_integrations:")
    print(f"–í–µ—Ä—Å–∏—è: {__version__}")
    print(f"–ê–≤—Ç–æ—Ä: {__author__}")
    print(f"Email: {__email__}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(BALI_REGIONS)}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ë–î: {', '.join(SUPPORTED_DB_TYPES)}")
    print("‚úÖ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    debug_info()
    print("\n" + "="*50)
    print_usage_example('basic_analysis')