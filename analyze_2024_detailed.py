#!/usr/bin/env python3
"""
üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• 2024
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ 2024 –≥–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np

def analyze_2024_file_structure():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ 2024"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê 2024")
    print("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        print("üìÇ –ü–æ–ø—ã—Ç–∫–∞ 1: –ß—Ç–µ–Ω–∏–µ —Å header=2")
        df = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=2)
        print(f"   –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"   –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüìä –ü–ï–†–í–´–ï 10 –°–¢–†–û–ö:")
        print("-" * 40)
        for i in range(min(10, len(df))):
            row = df.iloc[i]
            nationality = str(row.get('NATIONALITY', 'N/A'))[:20]
            jan_val = str(row.get('JAN', 'N/A'))[:10]
            total_val = str(row.get('TOTAL', 'N/A'))[:10]
            print(f"{i:2d}. {nationality:20} | JAN: {jan_val:10} | TOTAL: {total_val:10}")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("\nüîç –ü–û–ò–°–ö –°–¢–†–û–ö –° –ß–ò–°–õ–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        print("-" * 50)
        
        month_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JULY', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
        
        numeric_rows = []
        
        for idx, row in df.iterrows():
            numeric_count = 0
            total_value = 0
            monthly_data = {}
            
            for month_col in month_columns:
                if month_col in df.columns:
                    try:
                        val = pd.to_numeric(row[month_col], errors='coerce')
                        if pd.notna(val) and val > 0:
                            numeric_count += 1
                            total_value += val
                            monthly_data[month_col] = val
                    except:
                        continue
            
            if numeric_count >= 6:  # –ú–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
                nationality = str(row.get('NATIONALITY', 'Unknown')).strip()
                numeric_rows.append({
                    'index': idx,
                    'nationality': nationality,
                    'numeric_months': numeric_count,
                    'total_tourists': total_value,
                    'monthly_data': monthly_data
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(numeric_rows)} —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        if numeric_rows:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—É—Ä–∏—Å—Ç–æ–≤
            numeric_rows.sort(key=lambda x: x['total_tourists'], reverse=True)
            
            print("\nüìä –¢–û–ü-15 –°–¢–†–û–ö –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú–ò –ß–ò–°–õ–ê–ú–ò:")
            print("-" * 70)
            
            for i, row_data in enumerate(numeric_rows[:15]):
                nationality = row_data['nationality'][:25]
                total = row_data['total_tourists']
                months = row_data['numeric_months']
                print(f"{i+1:2d}. {nationality:25} | {total:>12,.0f} | {months:2d} –º–µ—Å—è—Ü–µ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–æ–∫—É
            best_row = numeric_rows[0]
            print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ï–ô –°–¢–†–û–ö–ò ({best_row['nationality']}):")
            print("-" * 60)
            
            month_names = {
                'JAN': '–Ø–Ω–≤–∞—Ä—å', 'FEB': '–§–µ–≤—Ä–∞–ª—å', 'MAR': '–ú–∞—Ä—Ç', 'APR': '–ê–ø—Ä–µ–ª—å',
                'MAY': '–ú–∞–π', 'JUNE': '–ò—é–Ω—å', 'JULY': '–ò—é–ª—å', 'AUG': '–ê–≤–≥—É—Å—Ç',
                'SEP': '–°–µ–Ω—Ç—è–±—Ä—å', 'OCT': '–û–∫—Ç—è–±—Ä—å', 'NOV': '–ù–æ—è–±—Ä—å', 'DEC': '–î–µ–∫–∞–±—Ä—å'
            }
            
            for month_col, value in best_row['monthly_data'].items():
                month_name = month_names.get(month_col, month_col)
                print(f"   {month_name:10}: {value:>10,.0f}")
            
            return numeric_rows
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            print("\nüîÑ –ü–†–û–ë–£–ï–ú –î–†–£–ì–ò–ï –í–ê–†–ò–ê–ù–¢–´ –ó–ê–ì–û–õ–û–í–ö–û–í:")
            for header_row in [0, 1, 3, 4, 5]:
                try:
                    df_alt = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=header_row)
                    print(f"   Header={header_row}: {df_alt.shape[0]} —Å—Ç—Ä–æ–∫, {df_alt.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                    print(f"   –°—Ç–æ–ª–±—Ü—ã: {list(df_alt.columns)[:5]}...")
                except Exception as e:
                    print(f"   Header={header_row}: –û—à–∏–±–∫–∞ - {e}")
            
            return []
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 2024: {e}")
        return []

def try_alternative_reading():
    """–ü—Ä–æ–±—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    
    print("\nüîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –°–ü–û–°–û–ë–´ –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê 2024")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_no_header = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=None)
        print(f"‚úÖ –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {df_no_header.shape[0]} —Å—Ç—Ä–æ–∫, {df_no_header.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Å—è—Ü–∞–º–∏
        month_patterns = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
        
        for idx, row in df_no_header.iterrows():
            if idx > 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                break
                
            row_text = ' '.join([str(cell).lower() for cell in row if pd.notna(cell)])
            month_count = sum(1 for pattern in month_patterns if pattern in row_text)
            
            if month_count >= 6:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Å—è—Ü–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: {month_count} –º–µ—Å—è—Ü–µ–≤")
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {list(row)[:10]}...")
                
                # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å —Å —ç—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                df_with_header = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=idx)
                print(f"   –° –∑–∞–≥–æ–ª–æ–≤–∫–æ–º {idx}: {df_with_header.shape[0]} —Å—Ç—Ä–æ–∫, {df_with_header.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                print(f"   –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df_with_header.columns)}")
                
                return df_with_header, idx
        
        print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Å—è—Ü–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö")
        return None, None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è: {e}")
        return None, None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –§–ê–ô–õ–ê 2024")
    print("=" * 70)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    numeric_rows = analyze_2024_file_structure()
    
    if not numeric_rows:
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
        df_alt, header_idx = try_alternative_reading()
        
        if df_alt is not None:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Å header={header_idx}")
            # –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º DataFrame
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ 2024")
    else:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(numeric_rows)} —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏")

if __name__ == "__main__":
    main()