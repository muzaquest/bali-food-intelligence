#!/usr/bin/env python3
"""
üéØ –ü–†–û–î–ê–ö–®–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–û–î–ê–ñ –î–õ–Ø REPLIT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ main.py

‚úÖ –í–ö–õ–Æ–ß–ê–ï–¢ –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:
- –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã—Ö
- ROAS –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã
- Driver Waiting Time, Preparation Time, Delivery Time
- Close Time (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
- –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
"""

import sqlite3
import pandas as pd
import json
import requests
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class ProductionSalesAnalyzer:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self):
        self.holidays_data = self._load_holidays()
        self.locations_data = self._load_locations()
        
    def _load_holidays(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        try:
            with open('data/comprehensive_holiday_analysis.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get('results', {})
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {e}")
            return {}
    
    def _load_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        try:
            with open('data/bali_restaurant_locations.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return {}
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å main.py
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
            bad_days = self._find_bad_days(restaurant_name, start_date, end_date)
            
            if not bad_days:
                return [
                    f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –£ {restaurant_name} –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂",
                    f"üìä –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} - {end_date}",
                    f"üéØ –í—Å–µ –¥–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É"
                ]
            
            results = []
            results.append(f"üîç –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name}")
            results.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            results.append(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(bad_days)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π")
            results.append("")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–µ–Ω—å
            for i, (date, drop_percent) in enumerate(bad_days[:3], 1):  # –¢–æ–ø-3 —Ö—É–¥—à–∏—Ö –¥–Ω—è
                day_analysis = self._analyze_specific_day(restaurant_name, date)
                
                results.append(f"üìâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨ #{i}: {date}")
                results.append(f"   üíî –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {drop_percent:.1f}%")
                results.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                for line in day_analysis:
                    results.append(f"   {line}")
                results.append("")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            results.extend(self._generate_general_recommendations(bad_days))
            
            return results
            
        except Exception as e:
            return [
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {restaurant_name}: {e}",
                "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑..."
            ]
    
    def _find_bad_days(self, restaurant_name, start_date, end_date):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂"""
        query = f"""
        SELECT 
            g.stat_date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date BETWEEN '{start_date}' AND '{end_date}'
        ORDER BY g.stat_date
        """
        
        with sqlite3.connect('database.sqlite') as conn:
            df = pd.read_sql_query(query, conn)
        
        if len(df) < 7:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        df['sales_7day_avg'] = df['total_sales'].rolling(window=7, center=True).mean()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –ø–∞–¥–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ 30%
        bad_days = []
        for _, row in df.iterrows():
            if pd.isna(row['sales_7day_avg']) or row['sales_7day_avg'] == 0:
                continue
                
            drop_percent = ((row['sales_7day_avg'] - row['total_sales']) / row['sales_7day_avg']) * 100
            if drop_percent >= 30:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 30%
                bad_days.append((row['stat_date'], drop_percent))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –ø–∞–¥–µ–Ω–∏—è
        bad_days.sort(key=lambda x: x[1], reverse=True)
        return bad_days
    
    def _analyze_specific_day(self, restaurant_name, target_date):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
        day_data = self._get_day_data(restaurant_name, target_date)
        if not day_data:
            return ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        monthly_averages = self._get_monthly_averages(restaurant_name, target_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_data = self._get_weather_data(restaurant_name, target_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_info = self.holidays_data.get(target_date)
        
        results = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        results.append(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {day_data['total_sales']:,.0f} IDR ({day_data['total_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü¢ Grab: {day_data['grab_sales']:,.0f} IDR ({day_data['grab_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        results.append(f"üü† Gojek: {day_data['gojek_sales']:,.0f} IDR ({day_data['gojek_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors = []
        impact_score = 0
        critical_issues = []
        
        # 1. –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if day_data.get('gojek_close_time', '00:00:00') != '00:00:00':
            outage_seconds = self._parse_time_string(day_data['gojek_close_time'])
            if outage_seconds >= 18000:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Gojek")
            elif outage_seconds >= 3600:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Gojek –≤—ã–∫–ª—é—á–µ–Ω {self._format_duration(outage_seconds)}")
                impact_score += 30
        
        if day_data.get('grab_offline_rate', 0) > 0:
            offline_rate = day_data['grab_offline_rate']
            if offline_rate >= 300:  # > 5 —á–∞—Å–æ–≤
                factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Grab offline {offline_rate:.1f}%")
                impact_score += 50
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ Grab")
            elif offline_rate >= 60:  # > 1 —á–∞—Å–∞
                factors.append(f"‚ö†Ô∏è Grab offline {offline_rate:.1f}%")
                impact_score += 30
        
        # 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
        self._analyze_time_factors(day_data, monthly_averages, factors, impact_score, critical_issues)
        
        # 3. –†–µ–∫–ª–∞–º–∞ –∏ ROAS
        self._analyze_advertising(day_data, factors, impact_score, critical_issues)
        
        # 4. –ü–æ–≥–æ–¥–∞
        if weather_data:
            if weather_data['precipitation'] > 10:
                factors.append(f"üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 25
            elif weather_data['precipitation'] > 5:
                factors.append(f"üå¶Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å ({weather_data['precipitation']:.1f}–º–º)")
                impact_score += 15
        
        # 5. –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if holiday_info:
            factors.append(f"üéâ {holiday_info.get('name', '–ü—Ä–∞–∑–¥–Ω–∏–∫')}")
            impact_score += 25
        
        # 6. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = pd.to_datetime(target_date).strftime('%A')
        if weekday in ['Sunday', 'Monday']:
            factors.append(f"üìÖ –°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({weekday})")
            impact_score += 5
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã
        if factors:
            results.append("")
            results.append("üîç –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:")
            for i, factor in enumerate(factors[:5], 1):  # –¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                results.append(f"   {i}. {factor}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if critical_issues:
            results.append("")
            results.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in critical_issues:
                results.append(f"   ‚Ä¢ {issue}")
        
        # –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è
        results.append("")
        if impact_score >= 70:
            results.append("üìä –û–¶–ï–ù–ö–ê: üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        elif impact_score >= 40:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü° –í–´–°–û–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ") 
        elif impact_score >= 20:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü† –°–†–ï–î–ù–ï–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        else:
            results.append("üìä –û–¶–ï–ù–ö–ê: üü¢ –ù–ò–ó–ö–û–ï –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
        
        return results
    
    def _get_day_data(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        query = f"""
        SELECT 
            g.stat_date,
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            COALESCE(g.sales, 0) as grab_sales,
            COALESCE(gj.sales, 0) as gojek_sales,
            COALESCE(g.orders, 0) as grab_orders,
            COALESCE(gj.orders, 0) as gojek_orders,
            COALESCE(gj.close_time, '00:00:00') as gojek_close_time,
            COALESCE(g.offline_rate, 0) as grab_offline_rate,
            COALESCE(gj.preparation_time, '00:00:00') as gojek_preparation_time,
            COALESCE(gj.delivery_time, '00:00:00') as gojek_delivery_time,
            COALESCE(gj.driver_waiting, 0) as gojek_driver_waiting_min,
            COALESCE(g.driver_waiting_time, 0) / 60.0 as grab_driver_waiting_min,
            COALESCE(g.ads_spend, 0) as grab_ads_spend,
            COALESCE(g.ads_sales, 0) as grab_ads_sales,
            COALESCE(gj.ads_spend, 0) as gojek_ads_spend,
            COALESCE(gj.ads_sales, 0) as gojek_ads_sales
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}' AND g.stat_date = '{target_date}'
        """
        
        with sqlite3.connect('database.sqlite') as conn:
            df = pd.read_sql_query(query, conn)
        
        if len(df) > 0:
            return df.iloc[0].to_dict()
        return None
    
    def _get_monthly_averages(self, restaurant_name, target_date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        target_month = target_date[:7]  # YYYY-MM
        
        query = f"""
        SELECT 
            AVG(CASE WHEN gj.preparation_time IS NOT NULL AND gj.preparation_time != '00:00:00' 
                THEN (CAST(substr(gj.preparation_time, 1, 2) AS INTEGER) * 60 + 
                      CAST(substr(gj.preparation_time, 4, 2) AS INTEGER) + 
                      CAST(substr(gj.preparation_time, 7, 2) AS INTEGER) / 60.0) 
                ELSE NULL END) as avg_prep_time,
            AVG(CASE WHEN gj.delivery_time IS NOT NULL AND gj.delivery_time != '00:00:00' 
                THEN (CAST(substr(gj.delivery_time, 1, 2) AS INTEGER) * 60 + 
                      CAST(substr(gj.delivery_time, 4, 2) AS INTEGER) + 
                      CAST(substr(gj.delivery_time, 7, 2) AS INTEGER) / 60.0) 
                ELSE NULL END) as avg_delivery_time,
            AVG(CASE WHEN gj.driver_waiting > 0 THEN gj.driver_waiting ELSE NULL END) as avg_gojek_waiting,
            AVG(CASE WHEN g.driver_waiting_time > 0 THEN g.driver_waiting_time / 60.0 ELSE NULL END) as avg_grab_waiting
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}' AND g.stat_date LIKE '{target_month}%'
        """
        
        with sqlite3.connect('database.sqlite') as conn:
            df = pd.read_sql_query(query, conn)
            
        if len(df) > 0:
            return {
                'avg_prep_time': df['avg_prep_time'].iloc[0] or 0,
                'avg_delivery_time': df['avg_delivery_time'].iloc[0] or 0,
                'avg_gojek_waiting': df['avg_gojek_waiting'].iloc[0] or 0,
                'avg_grab_waiting': df['avg_grab_waiting'].iloc[0] or 0
            }
        return {'avg_prep_time': 0, 'avg_delivery_time': 0, 'avg_gojek_waiting': 0, 'avg_grab_waiting': 0}
    
    def _get_weather_data(self, restaurant_name, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        location = self.locations_data.get(restaurant_name)
        if not location:
            return None
            
        try:
            url = f"https://archive-api.open-meteo.com/v1/era5"
            params = {
                'latitude': location['latitude'],
                'longitude': location['longitude'],
                'start_date': date,
                'end_date': date,
                'daily': ['precipitation_sum', 'temperature_2m_mean'],
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'daily' in data:
                    return {
                        'precipitation': data['daily']['precipitation_sum'][0] or 0,
                        'temperature': data['daily']['temperature_2m_mean'][0] or 27
                    }
        except:
            pass
        
        return None
    
    def _analyze_time_factors(self, day_data, monthly_averages, factors, impact_score, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏"""
        # Preparation Time
        prep_time_str = day_data.get('gojek_preparation_time', '00:00:00')
        if prep_time_str and prep_time_str != '00:00:00':
            prep_minutes = self._parse_time_to_minutes(prep_time_str)
            avg_prep = monthly_averages['avg_prep_time']
            
            if avg_prep > 0:
                prep_deviation = ((prep_minutes - avg_prep) / avg_prep) * 100
                if prep_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ Gojek")
                elif prep_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Preparation {prep_minutes:.1f}–º–∏–Ω (+{prep_deviation:.0f}% –≤—ã—à–µ)")
        
        # Delivery Time
        delivery_time_str = day_data.get('gojek_delivery_time', '00:00:00')
        if delivery_time_str and delivery_time_str != '00:00:00':
            delivery_minutes = self._parse_time_to_minutes(delivery_time_str)
            avg_delivery = monthly_averages['avg_delivery_time']
            
            if avg_delivery > 0:
                delivery_deviation = ((delivery_minutes - avg_delivery) / avg_delivery) * 100
                if delivery_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ Gojek")
                elif delivery_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Delivery {delivery_minutes:.1f}–º–∏–Ω (+{delivery_deviation:.0f}% –≤—ã—à–µ)")
        
        # Driver Waiting Time
        gojek_waiting = day_data.get('gojek_driver_waiting_min', 0)
        if gojek_waiting > 0:
            avg_gojek_waiting = monthly_averages['avg_gojek_waiting']
            if avg_gojek_waiting > 0:
                waiting_deviation = ((gojek_waiting - avg_gojek_waiting) / avg_gojek_waiting) * 100
                if waiting_deviation >= 50:
                    factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}%)")
                    critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Gojek")
                elif waiting_deviation >= 30:
                    factors.append(f"‚ö†Ô∏è Gojek Driver Waiting {gojek_waiting}–º–∏–Ω (+{waiting_deviation:.0f}% –≤—ã—à–µ)")
    
    def _analyze_advertising(self, day_data, factors, impact_score, critical_issues):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        grab_ads_spend = day_data.get('grab_ads_spend', 0)
        grab_ads_sales = day_data.get('grab_ads_sales', 0)
        gojek_ads_spend = day_data.get('gojek_ads_spend', 0)
        gojek_ads_sales = day_data.get('gojek_ads_sales', 0)
        
        ads_working = False
        
        if grab_ads_spend > 0:
            grab_roas = grab_ads_sales / grab_ads_spend
            ads_working = True
            if grab_roas >= 10:
                factors.append(f"‚úÖ Grab ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {grab_roas:.1f}")
            elif grab_roas >= 3:
                factors.append(f"üü¢ Grab ROAS —Ö–æ—Ä–æ—à–∏–π: {grab_roas:.1f}")
            elif grab_roas < 1:
                factors.append(f"üö® Grab ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {grab_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Grab")
                
        if gojek_ads_spend > 0:
            gojek_roas = gojek_ads_sales / gojek_ads_spend
            ads_working = True
            if gojek_roas >= 10:
                factors.append(f"‚úÖ Gojek ROAS –æ—Ç–ª–∏—á–Ω—ã–π: {gojek_roas:.1f}")
            elif gojek_roas >= 3:
                factors.append(f"üü¢ Gojek ROAS —Ö–æ—Ä–æ—à–∏–π: {gojek_roas:.1f}")
            elif gojek_roas < 1:
                factors.append(f"üö® Gojek ROAS –∫—Ä–∏—Ç–∏—á–Ω—ã–π: {gojek_roas:.1f}")
                critical_issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π ROAS Gojek")
        
        if not ads_working:
            factors.append("‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞")
    
    def _generate_general_recommendations(self, bad_days):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        results = []
        results.append("üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        results.append("")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        weekend_issues = sum(1 for date, _ in bad_days if pd.to_datetime(date).strftime('%A') in ['Sunday', 'Monday'])
        
        if weekend_issues > len(bad_days) * 0.5:
            results.append("üìÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏:")
            results.append("   ‚Ä¢ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º")
            results.append("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        
        results.append("üîß –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        results.append("   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        results.append("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        results.append("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã:")
        results.append("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ROAS")
        results.append("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        results.append("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è")
        
        return results
    
    def _parse_time_string(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2])
        except:
            pass
        return 0
    
    def _parse_time_to_minutes(self, time_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""
        if not time_str or time_str == '00:00:00':
            return 0
        try:
            parts = time_str.split(':')
            if len(parts) >= 3:
                return int(parts[0]) * 60 + int(parts[1]) + int(parts[2]) / 60.0
        except:
            pass
        return 0
    
    def _format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 3600:
            minutes = seconds // 60
            return f"{minutes}–º"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{hours}—á"

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å main.py
class ProperMLDetectiveAnalysis:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py"""
    
    def __init__(self):
        self.analyzer = ProductionSalesAnalyzer()
    
    def analyze_restaurant_performance(self, restaurant_name, start_date, end_date):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ main.py"""
        return self.analyzer.analyze_restaurant_performance(restaurant_name, start_date, end_date)

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analyzer = ProductionSalesAnalyzer()
    results = analyzer.analyze_restaurant_performance("Ika Canggu", "2025-04-01", "2025-04-30")
    for result in results:
        print(result)