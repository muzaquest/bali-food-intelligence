#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ì–ï–û–õ–û–ö–ê–¢–û–† –†–ï–°–¢–û–†–ê–ù–û–í
===================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
–∏—Å–ø–æ–ª—å–∑—É—è Google Maps API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ bali_restaurant_locations.json
"""

import sqlite3
import requests
import json
import os
import time
from datetime import datetime

class AutoGeolocator:
    def __init__(self):
        self.db_path = 'database.sqlite'
        self.google_api_key = os.getenv('GOOGLE_MAPS_API_KEY', 'YOUR_API_KEY_HERE')
        self.locations_file = 'data/bali_restaurant_locations.json'
        self.backup_file = 'data/bali_restaurant_locations_backup.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.existing_locations = self.load_existing_locations()
        
    def load_existing_locations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return {r['name']: r for r in data['restaurants']}
        except:
            return {}
    
    def get_all_restaurants(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ –±–∞–∑—ã"""
        conn = sqlite3.connect(self.db_path)
        query = "SELECT DISTINCT name FROM restaurants ORDER BY name"
        restaurants = [row[0] for row in conn.execute(query).fetchall()]
        conn.close()
        return restaurants
    
    def search_restaurant_location(self, restaurant_name):
        """–ò—â–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Google Maps API"""
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if restaurant_name in self.existing_locations:
            return self.existing_locations[restaurant_name]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = f"{restaurant_name} restaurant Bali Indonesia"
        
        try:
            url = "https://maps.googleapis.com/maps/api/geocoding/json"
            params = {
                'address': search_query,
                'key': self.google_api_key,
                'region': 'id',  # Indonesia
                'components': 'country:ID'  # Only Indonesia
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data['status'] == 'OK' and len(data['results']) > 0:
                    result = data['results'][0]
                    location = result['geometry']['location']
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
                    address_components = result.get('address_components', [])
                    formatted_address = result.get('formatted_address', '')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –∏ —Ä–∞–π–æ–Ω
                    area = self.extract_area(address_components, formatted_address)
                    zone = self.determine_zone(location['lat'], location['lng'], area)
                    
                    restaurant_data = {
                        'name': restaurant_name,
                        'latitude': location['lat'],
                        'longitude': location['lng'],
                        'location': area,
                        'area': area,
                        'zone': zone,
                        'formatted_address': formatted_address,
                        'found_automatically': True,
                        'search_query': search_query,
                        'timestamp': datetime.now().isoformat()
                    }
                    
                    return restaurant_data
                    
                else:
                    print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {restaurant_name} (—Å—Ç–∞—Ç—É—Å: {data.get('status', 'UNKNOWN')})")
                    return None
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è {restaurant_name}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {restaurant_name}: {e}")
            return None
    
    def extract_area(self, address_components, formatted_address):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–π–æ–Ω –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: sublocality > locality > administrative_area_level_2
        for component in address_components:
            types = component.get('types', [])
            if 'sublocality' in types or 'sublocality_level_1' in types:
                return component['long_name']
        
        for component in address_components:
            types = component.get('types', [])
            if 'locality' in types:
                return component['long_name']
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ formatted_address
        if 'Canggu' in formatted_address:
            return 'Canggu'
        elif 'Seminyak' in formatted_address:
            return 'Seminyak'
        elif 'Ubud' in formatted_address:
            return 'Ubud'
        elif 'Uluwatu' in formatted_address:
            return 'Uluwatu'
        elif 'Kerobokan' in formatted_address:
            return 'Kerobokan'
        elif 'Jimbaran' in formatted_address:
            return 'Jimbaran'
        elif 'Sanur' in formatted_address:
            return 'Sanur'
        elif 'Denpasar' in formatted_address:
            return 'Denpasar'
        else:
            return 'Unknown'
    
    def determine_zone(self, lat, lng, area):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–π–æ–Ω–∞"""
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω –ë–∞–ª–∏
        if area.lower() in ['canggu', 'berawa', 'echo beach']:
            return 'Beach'
        elif area.lower() in ['uluwatu', 'pecatu', 'bingin']:
            return 'Cliff'
        elif area.lower() in ['ubud', 'tegallalang', 'payangan']:
            return 'Mountain'
        elif area.lower() in ['seminyak', 'kerobokan', 'legian', 'kuta']:
            return 'Central'
        elif area.lower() in ['jimbaran', 'nusa dua']:
            return 'South'
        elif area.lower() in ['sanur', 'denpasar']:
            return 'East'
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            if lat < -8.7:  # –Æ–∂–Ω–∞—è —á–∞—Å—Ç—å
                if lng < 115.1:
                    return 'Cliff'  # Uluwatu area
                else:
                    return 'South'  # Jimbaran area
            elif lat > -8.5:  # –°–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å
                return 'Mountain'  # Ubud area
            elif lng < 115.15:  # –ó–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å
                return 'Beach'  # Canggu area
            else:
                return 'Central'  # Seminyak/Kerobokan area
    
    def run_geolocation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        print("üåç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö GPS –ö–û–û–†–î–ò–ù–ê–¢")
        print("=" * 45)
        
        restaurants = self.get_all_restaurants()
        print(f"üìä –í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(restaurants)}")
        print(f"üìç –£–∂–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(self.existing_locations)}")
        
        new_restaurants = [r for r in restaurants if r not in self.existing_locations]
        print(f"üîç –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏: {len(new_restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        if not new_restaurants:
            print("‚úÖ –í—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
            return self.existing_locations
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(self.locations_file):
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                backup_data = f.read()
            with open(self.backup_file, 'w', encoding='utf-8') as f:
                f.write(backup_data)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_file}")
        
        print(f"\nüîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ Google Maps API...")
        
        all_locations = dict(self.existing_locations)
        found_count = 0
        failed_count = 0
        
        for i, restaurant in enumerate(new_restaurants, 1):
            print(f"\n{i:2d}/{len(new_restaurants)} –ü–æ–∏—Å–∫: {restaurant}")
            
            location_data = self.search_restaurant_location(restaurant)
            
            if location_data:
                all_locations[restaurant] = location_data
                found_count += 1
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {location_data['area']}, {location_data['zone']} –∑–æ–Ω–∞")
                print(f"      üìç {location_data['latitude']:.4f}, {location_data['longitude']:.4f}")
            else:
                failed_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(new_restaurants):
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_locations(all_locations)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {found_count}")
        print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {failed_count}")
        print(f"   üìç –í—Å–µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(all_locations)}")
        
        return all_locations
    
    def save_locations(self, locations):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs('data', exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            restaurants_list = []
            for name, data in locations.items():
                restaurants_list.append(data)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
            restaurants_list.sort(key=lambda x: x['name'])
            
            output_data = {
                'restaurants': restaurants_list,
                'total_count': len(restaurants_list),
                'last_updated': datetime.now().isoformat(),
                'auto_generated': True
            }
            
            with open(self.locations_file, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.locations_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–æ–Ω–∞–º"""
        try:
            with open(self.locations_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            restaurants = data['restaurants']
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–û–ù–ê–ú:")
            print("=" * 25)
            
            zones = {}
            areas = {}
            
            for restaurant in restaurants:
                zone = restaurant.get('zone', 'Unknown')
                area = restaurant.get('area', 'Unknown')
                
                if zone not in zones:
                    zones[zone] = 0
                zones[zone] += 1
                
                if area not in areas:
                    areas[area] = 0
                areas[area] += 1
            
            print("üåç –ü–æ –∑–æ–Ω–∞–º:")
            for zone, count in sorted(zones.items()):
                print(f"   üìç {zone}: {count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            
            print(f"\nüèòÔ∏è –ü–æ —Ä–∞–π–æ–Ω–∞–º:")
            for area, count in sorted(areas.items()):
                print(f"   üìç {area}: {count} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    geolocator = AutoGeolocator()
    
    print("üó∫Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ì–ï–û–õ–û–ö–ê–¢–û–† –†–ï–°–¢–û–†–ê–ù–û–í")
    print("–ü–æ–∏—Å–∫ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ Google Maps API")
    print("=" * 65)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    locations = geolocator.run_geolocation()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    geolocator.show_statistics()
    
    print(f"\nüéâ –ì–ï–û–õ–û–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìç –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤!")

if __name__ == "__main__":
    main()