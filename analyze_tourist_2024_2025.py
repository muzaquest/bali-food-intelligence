#!/usr/bin/env python3
"""
üèñÔ∏è –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò 2024-2025
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–≤–∞ –≥–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import sqlite3

def analyze_tourist_file_2024():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2024 –≥–æ–¥"""
    
    print("üèñÔ∏è –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò 2024")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞ 2024 –≥–æ–¥
        df_2024 = pd.read_excel('Kunjungan_Wisatawan_Bali_2024.xls', header=2)
        
        print(f"‚úÖ –§–∞–π–ª 2024 –∑–∞–≥—Ä—É–∂–µ–Ω: {df_2024.shape[0]} —Å—Ç—Ä–æ–∫, {df_2024.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìä –°—Ç–æ–ª–±—Ü—ã: {list(df_2024.columns)}")
        
        # –ú–µ—Å—è—á–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        month_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUNE', 'JULY', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
        available_months = [col for col in month_columns if col in df_2024.columns]
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—è—á–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ 2024: {len(available_months)}")
        print(f"   –ú–µ—Å—è—Ü—ã: {available_months}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024
        valid_rows_2024 = []
        
        for idx, row in df_2024.iterrows():
            monthly_values = {}
            valid_months = 0
            
            for month_idx, month_col in enumerate(available_months):
                try:
                    val = pd.to_numeric(row[month_col], errors='coerce')
                    if pd.notna(val) and val >= 0:
                        monthly_values[month_idx + 1] = int(val)
                        if val > 0:
                            valid_months += 1
                except:
                    continue
            
            if valid_months >= 6:  # –î–ª—è 2024 —Ç—Ä–µ–±—É–µ–º –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–µ–≤
                nationality = str(row.get('NATIONALITY', 'Unknown')).strip()
                total_tourists = sum(v for v in monthly_values.values() if v > 0)
                
                if total_tourists > 1000:
                    valid_rows_2024.append({
                        'nationality': nationality,
                        'monthly_values': monthly_values,
                        'total_tourists': total_tourists,
                        'valid_months': valid_months,
                        'year': 2024
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(valid_rows_2024)} —Å—Ç—Ä–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2024")
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ 2024
        monthly_totals_2024 = {}
        
        for month_num in range(1, 13):
            total_tourists = 0
            countries_with_data = 0
            
            for row in valid_rows_2024:
                if month_num in row['monthly_values']:
                    tourists = row['monthly_values'][month_num]
                    if tourists > 0:
                        total_tourists += tourists
                        countries_with_data += 1
            
            if total_tourists > 0:
                monthly_totals_2024[month_num] = {
                    'tourists': total_tourists,
                    'countries_count': countries_with_data,
                    'year': 2024
                }
        
        print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ 2024 –ø–æ {len(monthly_totals_2024)} –º–µ—Å—è—Ü–∞–º")
        
        return monthly_totals_2024, valid_rows_2024
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 2024: {e}")
        return {}, []

def load_2025_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ 2025 –≥–æ–¥ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
    
    print("\nüèñÔ∏è –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• 2025 –ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    try:
        with open('real_tourist_correlations.json', 'r', encoding='utf-8') as f:
            data_2025 = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 2025
        monthly_coeffs_2025 = data_2025['monthly_coefficients']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç monthly_totals
        monthly_totals_2025 = {}
        
        for month_num, data in monthly_coeffs_2025.items():
            monthly_totals_2025[int(month_num)] = {
                'tourists': data['tourists'],
                'countries_count': data.get('countries_count', 96),
                'year': 2025
            }
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ 2025 –ø–æ {len(monthly_totals_2025)} –º–µ—Å—è—Ü–∞–º")
        print(f"   –û–±—â–∏–π –æ–±—ä–µ–º 2025: {sum(data['tourists'] for data in monthly_totals_2025.values()):,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
        
        return monthly_totals_2025
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö 2025: {e}")
        return {}

def create_combined_analysis(monthly_2024, monthly_2025):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ 2024-2025"""
    
    print("\nüîó –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê 2024-2025")
    print("=" * 60)
    
    if not monthly_2024 or not monthly_2025:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –ü–û–¢–û–ö–û–í 2024 vs 2025:")
        print("-" * 80)
        
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        comparison_data = []
        
        for month_num in range(1, 13):
            tourists_2024 = monthly_2024.get(month_num, {}).get('tourists', 0)
            tourists_2025 = monthly_2025.get(month_num, {}).get('tourists', 0)
            
            if tourists_2024 > 0 or tourists_2025 > 0:
                change = 0
                if tourists_2024 > 0 and tourists_2025 > 0:
                    change = ((tourists_2025 - tourists_2024) / tourists_2024) * 100
                
                comparison_data.append({
                    'month': month_num,
                    'month_name': month_names[month_num - 1],
                    'tourists_2024': tourists_2024,
                    'tourists_2025': tourists_2025,
                    'change_percent': change
                })
                
                status = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
                print(f"{month_num:2d}. {month_names[month_num-1]:10} | 2024: {tourists_2024:>10,} | 2025: {tourists_2025:>10,} | {status} {change:+5.1f}%")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_2024 = sum(item['tourists_2024'] for item in comparison_data)
        total_2025 = sum(item['tourists_2025'] for item in comparison_data)
        total_change = ((total_2025 - total_2024) / total_2024) * 100 if total_2024 > 0 else 0
        
        print(f"\nüìà –ò–¢–û–ì–û:")
        print(f"   2024: {total_2024:,} —Ç—É—Ä–∏—Å—Ç–æ–≤")
        print(f"   2025: {total_2025:,} —Ç—É—Ä–∏—Å—Ç–æ–≤ (–∑–∞ {len(monthly_2025)} –º–µ—Å—è—Ü–µ–≤)")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {total_change:+.1f}%")
        
        # –°–æ–∑–¥–∞–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤—É—Ö –ª–µ—Ç
        print("\nüîÑ –°–û–ó–î–ê–ù–ò–ï –£–°–†–ï–î–ù–ï–ù–ù–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
        print("-" * 50)
        
        # –î–ª—è –º–µ—Å—è—Ü–µ–≤, –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–±–∞ –≥–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        # –î–ª—è –º–µ—Å—è—Ü–µ–≤ —Ç–æ–ª—å–∫–æ 2025 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ 2025
        combined_monthly_data = {}
        
        for month_num in range(1, 13):
            tourists_2024 = monthly_2024.get(month_num, {}).get('tourists', 0)
            tourists_2025 = monthly_2025.get(month_num, {}).get('tourists', 0)
            
            if tourists_2024 > 0 and tourists_2025 > 0:
                # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–±–∞ –≥–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ
                avg_tourists = (tourists_2024 + tourists_2025) / 2
                source = "–°—Ä–µ–¥–Ω–µ–µ 2024-2025"
            elif tourists_2025 > 0:
                # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ 2025
                avg_tourists = tourists_2025
                source = "–î–∞–Ω–Ω—ã–µ 2025"
            elif tourists_2024 > 0:
                # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ 2024
                avg_tourists = tourists_2024
                source = "–î–∞–Ω–Ω—ã–µ 2024"
            else:
                continue
            
            combined_monthly_data[month_num] = {
                'tourists': int(avg_tourists),
                'source': source,
                'has_2024': tourists_2024 > 0,
                'has_2025': tourists_2025 > 0
            }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        total_combined = sum(data['tourists'] for data in combined_monthly_data.values())
        avg_monthly = total_combined / len(combined_monthly_data)
        
        combined_coefficients = {}
        
        for month_num, data in combined_monthly_data.items():
            coefficient = data['tourists'] / avg_monthly
            combined_coefficients[month_num] = {
                'coefficient': coefficient,
                'tourists': data['tourists'],
                'source': data['source']
            }
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        coefficients = [data['coefficient'] for data in combined_coefficients.values()]
        mean_coeff = np.mean(coefficients)
        std_coeff = np.std(coefficients)
        
        high_threshold = mean_coeff + 0.4 * std_coeff
        low_threshold = mean_coeff - 0.4 * std_coeff
        
        combined_seasons = {
            '–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω': {
                '–º–µ—Å—è—Ü—ã': [], 
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ü–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ (–¥–∞–Ω–Ω—ã–µ 2024-2025)',
                '–∏—Å—Ç–æ—á–Ω–∏–∫': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏ 2024-2025'
            },
            '—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω': {
                '–º–µ—Å—è—Ü—ã': [], 
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                '–æ–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (–¥–∞–Ω–Ω—ã–µ 2024-2025)',
                '–∏—Å—Ç–æ—á–Ω–∏–∫': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏ 2024-2025'
            },
            '–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω': {
                '–º–µ—Å—è—Ü—ã': [], 
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': 0, 
                '–æ–ø–∏—Å–∞–Ω–∏–µ': '–ù–∏–∑–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω (–¥–∞–Ω–Ω—ã–µ 2024-2025)',
                '–∏—Å—Ç–æ—á–Ω–∏–∫': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–∞–ª–∏ 2024-2025'
            }
        }
        
        for month_num, data in combined_coefficients.items():
            coeff = data['coefficient']
            
            if coeff >= high_threshold:
                combined_seasons['–≤—ã—Å–æ–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            elif coeff <= low_threshold:
                combined_seasons['–Ω–∏–∑–∫–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
            else:
                combined_seasons['—Å—Ä–µ–¥–Ω–∏–π_—Å–µ–∑–æ–Ω']['–º–µ—Å—è—Ü—ã'].append(month_num)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
        for season_name, season_data in combined_seasons.items():
            if season_data['–º–µ—Å—è—Ü—ã']:
                season_coeffs = [combined_coefficients[month]['coefficient'] for month in season_data['–º–µ—Å—è—Ü—ã']]
                season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = float(np.mean(season_coeffs))
            else:
                season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'] = 1.0
        
        print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–ó–û–ù–û–í (–û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï 2024-2025):")
        print("-" * 80)
        
        for season_name, season_data in combined_seasons.items():
            months_names = [month_names[month-1] for month in season_data['–º–µ—Å—è—Ü—ã'] if month <= 12]
            coeff = season_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']
            change = (coeff - 1) * 100
            print(f"{season_name.upper():15} | {coeff:5.2f} ({change:+.0f}%) | {', '.join(months_names)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        conn = sqlite3.connect('database.sqlite')
        
        query = """
        SELECT 
            stat_date as date,
            sales
        FROM (
            SELECT stat_date, sales FROM grab_stats WHERE sales > 0
            UNION ALL
            SELECT stat_date, sales FROM gojek_stats WHERE sales > 0
        )
        ORDER BY date
        """
        
        sales_df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sales_df['sales'] = pd.to_numeric(sales_df['sales'], errors='coerce')
        sales_df = sales_df.dropna(subset=['sales'])
        sales_df['date'] = pd.to_datetime(sales_df['date'])
        sales_df['month'] = sales_df['date'].dt.month
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = sales_df.groupby('month')['sales'].mean().reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        correlation_data = []
        
        for month_num, coeff_data in combined_coefficients.items():
            tourists = coeff_data['tourists']
            sales_data = monthly_sales[monthly_sales['month'] == month_num]
            avg_sales = sales_data['sales'].iloc[0] if len(sales_data) > 0 else 0
            
            if tourists > 0 and avg_sales > 0:
                correlation_data.append({
                    'month': month_num,
                    'tourists': tourists,
                    'avg_sales': avg_sales
                })
        
        correlation = 0
        if len(correlation_data) >= 3:
            df_corr = pd.DataFrame(correlation_data)
            correlation = df_corr['tourists'].corr(df_corr['avg_sales'])
        
        print(f"\nüîó –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–• –î–ê–ù–ù–´–• –¢–£–†–ò–°–¢–´ ‚Üî –ü–†–û–î–ê–ñ–ò: {correlation:.3f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_result = {
            'seasonal_patterns': combined_seasons,
            'monthly_coefficients': combined_coefficients,
            'correlation_tourists_sales': float(correlation),
            'comparison_2024_2025': comparison_data,
            'analysis_metadata': {
                'source': 'Combined tourist data 2024-2025 (Kunjungan_Wisatawan_Bali)',
                'total_tourists_2024': total_2024,
                'total_tourists_2025': total_2025,
                'months_2024': len(monthly_2024),
                'months_2025': len(monthly_2025),
                'total_months_analyzed': len(combined_coefficients),
                'correlation_strength': 'Strong' if abs(correlation) > 0.7 else 'Moderate' if abs(correlation) > 0.4 else 'Weak',
                'data_quality': 'High',
                'created_at': datetime.now().isoformat()
            }
        }
        
        with open('combined_tourist_correlations_2024_2025.json', 'w', encoding='utf-8') as f:
            json.dump(combined_result, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ combined_tourist_correlations_2024_2025.json")
        
        return combined_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèñÔ∏è –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ë–ê–õ–ò 2024-2025")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ 2024
    monthly_2024, rows_2024 = analyze_tourist_file_2024()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ 2025
    monthly_2025 = load_2025_data()
    
    if monthly_2024 or monthly_2025:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        result = create_combined_analysis(monthly_2024, monthly_2025)
        
        if result:
            print("\nüéâ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
            print("‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –∏ 2025 –≥–æ–¥—ã")
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
            print("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
            
            print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {result['correlation_tourists_sales']:.3f}")
            print(f"   üèñÔ∏è –¢—É—Ä–∏—Å—Ç–æ–≤ 2024: {result['analysis_metadata']['total_tourists_2024']:,}")
            print(f"   üèñÔ∏è –¢—É—Ä–∏—Å—Ç–æ–≤ 2025: {result['analysis_metadata']['total_tourists_2025']:,}")
            print(f"   üìÖ –ú–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['analysis_metadata']['total_months_analyzed']}")
            print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {result['analysis_metadata']['data_quality']}")
            
            return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    return False

if __name__ == "__main__":
    main()