#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ë–∞–ª–∏
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import random
from datetime import datetime, timedelta

class BaliSalesAnalyzerDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ë–∞–ª–∏"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ë–∞–ª–∏
        self.bali_regions = {
            'seminyak': {'tourist_ratio': 0.9, 'type': 'beach_luxury'},
            'ubud': {'tourist_ratio': 0.8, 'type': 'cultural'},
            'canggu': {'tourist_ratio': 0.8, 'type': 'beach_surf'},
            'denpasar': {'tourist_ratio': 0.3, 'type': 'city'},
            'sanur': {'tourist_ratio': 0.7, 'type': 'beach_family'}
        }
        
        self.weather_impact = {
            'light_rain': -3,
            'moderate_rain': -8,
            'heavy_rain': -15,
            'extreme_rain': -25
        }
        
        self.holiday_impact = {
            'muslim_holiday': -8,
            'hindu_holiday': -12,
            'national_holiday': -10
        }
    
    def simulate_external_data(self, location: str, date: str) -> dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        random.seed(hash(date + location))  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = datetime.strptime(date, '%Y-%m-%d')
        month = date_obj.month
        day_of_week = date_obj.weekday()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É
        if month in [12, 1, 2, 3]:  # –°–µ–∑–æ–Ω –¥–æ–∂–¥–µ–π
            rain_mm = random.uniform(5, 30)
        else:
            rain_mm = random.uniform(0, 15)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∂–¥—è
        if rain_mm > 25:
            rain_category = 'extreme_rain'
        elif rain_mm > 15:
            rain_category = 'heavy_rain'
        elif rain_mm > 8:
            rain_category = 'moderate_rain'
        else:
            rain_category = 'light_rain'
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        is_friday = day_of_week == 4
        is_special_date = date_obj.day in [1, 15, 17, 25]
        
        is_muslim_holiday = is_friday or random.random() < 0.05
        is_hindu_holiday = is_special_date or random.random() < 0.03
        is_national_holiday = random.random() < 0.02
        
        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π
        driver_availability = 1.0
        
        if is_muslim_holiday:
            driver_availability *= 0.7
        if is_hindu_holiday:
            driver_availability *= 0.6
        if rain_mm > 15:
            driver_availability *= 0.5
        
        # –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω
        region_data = self.bali_regions.get(location, {'tourist_ratio': 0.5})
        
        if month in [6, 7, 8, 12, 1]:  # –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω
            tourist_multiplier = 1.3
            season_type = 'high'
        elif month in [4, 5, 9, 10]:  # –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω
            tourist_multiplier = 1.0
            season_type = 'shoulder'
        else:  # –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω
            tourist_multiplier = 0.7
            season_type = 'low'
        
        tourist_density = region_data['tourist_ratio'] * tourist_multiplier
        
        return {
            'date': date,
            'location': location,
            'temperature': round(28 + random.uniform(-3, 3), 1),
            'humidity': round(75 + random.uniform(-10, 15), 1),
            'rain_mm': round(rain_mm, 1),
            'rain_category': rain_category,
            'is_muslim_holiday': is_muslim_holiday,
            'is_hindu_holiday': is_hindu_holiday,
            'is_national_holiday': is_national_holiday,
            'driver_availability': round(driver_availability, 2),
            'tourist_density': round(tourist_density, 2),
            'tourist_season': season_type,
            'region_type': region_data.get('type', 'unknown'),
            'day_of_week': day_of_week,
            'is_weekend': day_of_week >= 5
        }
    
    def analyze_sales_change(self, restaurant_name: str, location: str, date: str,
                           actual_sales: float, previous_sales: float) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂"""
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change_percent = ((actual_sales - previous_sales) / previous_sales) * 100
        change_absolute = actual_sales - previous_sales
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        external_data = self.simulate_external_data(location, date)
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors = self._analyze_factors(external_data)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = self._generate_recommendations(external_data, factors)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        explanation = self._generate_explanation(factors, change_percent)
        
        result = {
            'restaurant': restaurant_name,
            'location': location,
            'date': date,
            'actual_sales': int(actual_sales),
            'previous_sales': int(previous_sales),
            'change_percent': round(change_percent, 1),
            'change_absolute': int(change_absolute),
            'external_data': external_data,
            'factors': factors,
            'recommendations': recommendations,
            'explanation': explanation,
            'timestamp': datetime.now().isoformat()
        }
        
        return result
    
    def _analyze_factors(self, external_data: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è"""
        factors = {
            'weather_impact': 0,
            'holiday_impact': 0,
            'driver_impact': 0,
            'tourist_impact': 0,
            'total_external_impact': 0
        }
        
        # –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        rain_category = external_data['rain_category']
        factors['weather_impact'] = self.weather_impact.get(rain_category, 0)
        
        # –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        if external_data['is_hindu_holiday']:
            factors['holiday_impact'] = self.holiday_impact['hindu_holiday']
        elif external_data['is_muslim_holiday']:
            factors['holiday_impact'] = self.holiday_impact['muslim_holiday']
        elif external_data['is_national_holiday']:
            factors['holiday_impact'] = self.holiday_impact['national_holiday']
        
        # –í–ª–∏—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        driver_availability = external_data['driver_availability']
        if driver_availability < 0.6:
            factors['driver_impact'] = -20
        elif driver_availability < 0.8:
            factors['driver_impact'] = -10
        elif driver_availability > 1.0:
            factors['driver_impact'] = 5
        
        # –í–ª–∏—è–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        tourist_density = external_data['tourist_density']
        if tourist_density > 1.0:
            factors['tourist_impact'] = 10
        elif tourist_density < 0.6:
            factors['tourist_impact'] = -5
        
        # –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ
        factors['total_external_impact'] = sum([
            factors['weather_impact'],
            factors['holiday_impact'],
            factors['driver_impact'],
            factors['tourist_impact']
        ])
        
        return factors
    
    def _generate_recommendations(self, external_data: dict, factors: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ
        if external_data['rain_mm'] > 15:
            recommendations.extend([
                "üåßÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –¥–æ–∂–¥—å –Ω–∞ 15-20%",
                "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ '–î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å' —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π",
                "üí∞ –ü–æ–≤—ã—Å–∏—Ç—å –±–æ–Ω—É—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è–º –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –¥–æ–∂–¥—å",
                "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–∫–∞—Ö"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º
        if external_data['is_muslim_holiday']:
            recommendations.extend([
                "üïå –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞—Ç—å —Å–≤–∏–Ω–∏–Ω—É –∏–∑ –º–µ–Ω—é",
                "ü•ò –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞–ª—è–ª—å–Ω—ã—Ö –±–ª—é–¥",
                "‚è∞ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥ –º–æ–ª–∏—Ç–≤—ã",
                "üë• –ü—Ä–∏–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π-–Ω–µ–º—É—Å—É–ª—å–º–∞–Ω"
            ])
        
        if external_data['is_hindu_holiday']:
            recommendations.extend([
                "üõï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –º–µ–Ω—é",
                "üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ –∫ –∏–Ω–¥—É–∏—Å—Ç—Å–∫–æ–º—É –ø—Ä–∞–∑–¥–Ω–∏–∫—É",
                "üìÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
                "üéØ –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–∏—Å—Ç–∞—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        if external_data['driver_availability'] < 0.7:
            recommendations.extend([
                "üöó –£–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–∞ 20-30%",
                "‚ö° –ü–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
                "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π",
                "‚è±Ô∏è –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É —Å–µ–∑–æ–Ω—É
        if external_data['tourist_density'] > 1.0:
            recommendations.extend([
                "üåç –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥",
                "üéØ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω–∞—Ö",
                "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ 24:00",
                "üí≥ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã"
            ])
        elif external_data['tourist_density'] < 0.6:
            recommendations.extend([
                "üè† –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª—è—Ö",
                "üçõ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –±–ª—é–¥–∞",
                "üí∞ –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—Ç–Ω—ã—Ö",
                "üì± –†–µ–∫–ª–∞–º–∞ –Ω–∞ –º–µ—Å—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (Instagram, TikTok)"
            ])
        
        return recommendations[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def _generate_explanation(self, factors: dict, change_percent: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        explanations = []
        
        if factors['weather_impact'] < -5:
            explanations.append(f"–¥–æ–∂–¥—å ({factors['weather_impact']:+.0f}%)")
        elif factors['weather_impact'] < -2:
            explanations.append(f"–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å ({factors['weather_impact']:+.0f}%)")
        
        if factors['holiday_impact'] < -5:
            explanations.append(f"–ø—Ä–∞–∑–¥–Ω–∏–∫ ({factors['holiday_impact']:+.0f}%)")
        
        if factors['driver_impact'] < -5:
            explanations.append(f"–Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π ({factors['driver_impact']:+.0f}%)")
        elif factors['driver_impact'] > 2:
            explanations.append(f"–±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π ({factors['driver_impact']:+.0f}%)")
        
        if factors['tourist_impact'] > 5:
            explanations.append(f"—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω ({factors['tourist_impact']:+.0f}%)")
        elif factors['tourist_impact'] < -3:
            explanations.append(f"–Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω ({factors['tourist_impact']:+.0f}%)")
        
        if explanations:
            return f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {', '.join(explanations)}"
        else:
            return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–≤—è–∑–∞–Ω—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    
    def print_analysis(self, result: dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*70)
        print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ –ù–ê –ë–ê–õ–ò")
        print("="*70)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {result['restaurant']}")
        print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {result['location']}")
        print(f"üìÖ –î–∞—Ç–∞: {result['date']}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {result['actual_sales']:,} IDR (–±—ã–ª–æ: {result['previous_sales']:,} IDR)")
        
        change = result['change_percent']
        emoji = "üìà" if change > 0 else "üìâ"
        print(f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}% ({result['change_absolute']:+,} IDR)")
        
        # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        print(f"\nüåç –í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´:")
        ext_data = result['external_data']
        
        print(f"üåßÔ∏è –ü–æ–≥–æ–¥–∞: {ext_data['rain_mm']}–º–º –¥–æ–∂–¥—è, {ext_data['temperature']}¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {ext_data['humidity']}%")
        print(f"üöó –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π: {ext_data['driver_availability']:.0%}")
        print(f"üèñÔ∏è –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω: {ext_data['tourist_season']} ({ext_data['tourist_density']:.0%} –ø–ª–æ—Ç–Ω–æ—Å—Ç—å)")
        print(f"üèõÔ∏è –¢–∏–ø —Ä–∞–π–æ–Ω–∞: {ext_data['region_type']}")
        
        # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        holidays = []
        if ext_data['is_muslim_holiday']:
            holidays.append("–º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π")
        if ext_data['is_hindu_holiday']:
            holidays.append("–∏–Ω–¥—É–∏—Å—Ç—Å–∫–∏–π")
        if ext_data['is_national_holiday']:
            holidays.append("–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
        
        if holidays:
            print(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {', '.join(holidays)}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è
        print(f"\nüìä –í–õ–ò–Ø–ù–ò–ï –§–ê–ö–¢–û–†–û–í:")
        factors = result['factors']
        
        if factors['weather_impact'] != 0:
            print(f"üåßÔ∏è –ü–æ–≥–æ–¥–∞: {factors['weather_impact']:+.0f}%")
        if factors['holiday_impact'] != 0:
            print(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {factors['holiday_impact']:+.0f}%")
        if factors['driver_impact'] != 0:
            print(f"üöó –í–æ–¥–∏—Ç–µ–ª–∏: {factors['driver_impact']:+.0f}%")
        if factors['tourist_impact'] != 0:
            print(f"üèñÔ∏è –¢—É—Ä–∏—Å—Ç—ã: {factors['tourist_impact']:+.0f}%")
        
        total_impact = factors['total_external_impact']
        print(f"üìà –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {total_impact:+.0f}%")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
        print(f"\nüí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:")
        print(f"   {result['explanation']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['recommendations']:
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(result['recommendations'], 1):
                print(f"{i:2d}. {rec}")
        
        print("="*70)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–û–î–ê–ñ –î–õ–Ø –ë–ê–õ–ò")
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ò–Ω–¥–æ–Ω–µ–∑–∏–∏")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = BaliSalesAnalyzerDemo()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            'name': 'Warung Bali Asli',
            'location': 'seminyak',
            'date': '2024-01-15',  # –°–µ–∑–æ–Ω –¥–æ–∂–¥–µ–π
            'actual_sales': 2500000,
            'previous_sales': 3200000,
            'scenario': '–ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –≤ –¥–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å'
        },
        {
            'name': 'Ubud Organic Cafe',
            'location': 'ubud',
            'date': '2024-07-20',  # –í—ã—Å–æ–∫–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω
            'actual_sales': 4200000,
            'previous_sales': 3800000,
            'scenario': '–†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∑–æ–Ω'
        },
        {
            'name': 'Canggu Surf Cafe',
            'location': 'canggu',
            'date': '2024-03-17',  # –ò–Ω–¥—É–∏—Å—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫
            'actual_sales': 1800000,
            'previous_sales': 2600000,
            'scenario': '–ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫'
        }
    ]
    
    results = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}Ô∏è‚É£ –°–¶–ï–ù–ê–†–ò–ô: {case['scenario']}")
        print("-" * 50)
        
        result = analyzer.analyze_sales_change(
            restaurant_name=case['name'],
            location=case['location'],
            date=case['date'],
            actual_sales=case['actual_sales'],
            previous_sales=case['previous_sales']
        )
        
        analyzer.print_analysis(result)
        results.append(result)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('bali_analysis_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bali_analysis_results.json")
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    changes = [r['change_percent'] for r in results]
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {sum(changes)/len(changes):.1f}%")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π: –æ—Ç {min(changes):.1f}% –¥–æ {max(changes):.1f}%")
    
    # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    all_recommendations = []
    for r in results:
        all_recommendations.extend(r['recommendations'])
    
    from collections import Counter
    common_recs = Counter(all_recommendations).most_common(5)
    
    print(f"\nüî• –ß–ê–°–¢–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for rec, count in common_recs:
        print(f"{count}x {rec}")
    
    print(f"\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

if __name__ == "__main__":
    main()