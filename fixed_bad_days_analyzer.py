#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–õ–û–•–ò–• –î–ù–ï–ô –ü–†–û–î–ê–ñ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚úÖ –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
‚úÖ –î–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
"""

import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta
import json

class FixedBadDaysAnalyzer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
    
    def __init__(self, db_path='database.sqlite'):
        self.db_path = db_path
        self.weather_cache = {}
        
    def analyze_restaurant_problems(self, restaurant_name, days=30):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
        
        print(f"üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –†–ï–°–¢–û–†–ê–ù–ê '{restaurant_name}'")
        print("=" * 60)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        data = self._load_real_data(restaurant_name, days)
        
        if data.empty:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
        # 2. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
        bad_days = self._find_bad_days(data)
        
        if bad_days.empty:
            return "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
            
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å
        detailed_analysis = []
        
        for _, day in bad_days.iterrows():
            analysis = self._analyze_single_day(day, data)
            detailed_analysis.append(analysis)
            
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        return self._generate_client_report(detailed_analysis, restaurant_name)
        
    def _load_real_data(self, restaurant_name, days):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        
        conn = sqlite3.connect(self.db_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        query = f"""
        SELECT 
            g.stat_date,
            r.name as restaurant_name,
            
            -- –ü–†–û–î–ê–ñ–ò –ò –ó–ê–ö–ê–ó–´
            COALESCE(g.sales, 0) + COALESCE(gj.sales, 0) as total_sales,
            COALESCE(g.orders, 0) + COALESCE(gj.orders, 0) as total_orders,
            
            -- –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (—Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏!)
            COALESCE(g.store_is_closed, 0) as grab_closed,
            COALESCE(gj.store_is_closed, 0) as gojek_closed,
            COALESCE(g.out_of_stock, 0) as grab_out_of_stock,
            COALESCE(gj.out_of_stock, 0) as gojek_out_of_stock,
            COALESCE(g.store_is_busy, 0) as grab_busy,
            COALESCE(gj.store_is_busy, 0) as gojek_busy,
            
            -- –û–¢–ú–ï–ù–´
            COALESCE(g.cancelled_orders, 0) as grab_cancelled,
            COALESCE(gj.cancelled_orders, 0) as gojek_cancelled,
            
            -- –í–†–ï–ú–Ø (—Ç–æ–ª—å–∫–æ —É Gojek!)
            COALESCE(gj.accepting_time, '00:00:00') as accepting_time,
            COALESCE(gj.preparation_time, '00:00:00') as preparation_time,
            COALESCE(gj.delivery_time, '00:00:00') as delivery_time,
            COALESCE(gj.close_time, 0) as close_time_minutes,
            
            -- –ú–ê–†–ö–ï–¢–ò–ù–ì
            COALESCE(g.ads_spend, 0) + COALESCE(gj.ads_spend, 0) as total_ad_spend,
            COALESCE(g.ads_sales, 0) + COALESCE(gj.ads_sales, 0) as ads_sales,
            
            -- –†–ï–ô–¢–ò–ù–ì
            COALESCE(g.rating, gj.rating, 4.0) as rating,
            
            -- –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
            CAST(strftime('%w', g.stat_date) AS INTEGER) as day_of_week,
            CAST(strftime('%m', g.stat_date) AS INTEGER) as month
            
        FROM grab_stats g
        LEFT JOIN gojek_stats gj ON g.restaurant_id = gj.restaurant_id 
                                 AND g.stat_date = gj.stat_date
        LEFT JOIN restaurants r ON g.restaurant_id = r.id
        WHERE r.name = '{restaurant_name}'
        AND g.stat_date >= date('now', '-{days} days')
        AND (g.sales > 0 OR gj.sales > 0)
        ORDER BY g.stat_date DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
        return df
        
    def _find_bad_days(self, data):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ —Å –ø–ª–æ—Ö–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏
        mean_sales = data['total_sales'].mean()
        p10 = data['total_sales'].quantile(0.10)
        p5 = data['total_sales'].quantile(0.05)
        
        print(f"üìä –ü–û–†–û–ì–ò –ü–†–û–î–ê–ñ:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mean_sales:,.0f} IDR")
        print(f"   ‚Ä¢ 10% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p10:,.0f} IDR")
        print(f"   ‚Ä¢ 5% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p5:,.0f} IDR")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
        bad_days = data[data['total_sales'] < p10].copy()
        
        print(f"\nüî¥ –ù–ê–ô–î–ï–ù–û –ü–õ–û–•–ò–• –î–ù–ï–ô: {len(bad_days)}")
        
        return bad_days.sort_values('stat_date', ascending=False)
        
    def _analyze_single_day(self, day_data, all_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å"""
        
        date = day_data['stat_date']
        sales = day_data['total_sales']
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó: {date}")
        print(f"üí∞ –ü—Ä–æ–¥–∞–∂–∏: {sales:,.0f} IDR")
        
        analysis = {
            'date': date,
            'sales': sales,
            'problems': [],
            'recommendations': []
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é
        baseline = all_data['total_sales'].mean()
        drop_percent = ((sales - baseline) / baseline) * 100
        analysis['baseline'] = baseline
        analysis['drop_percent'] = drop_percent
        
        print(f"üìâ –ü–∞–¥–µ–Ω–∏–µ: {drop_percent:.1f}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ")
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        
        # 1. –†–ï–°–¢–û–†–ê–ù –ó–ê–ö–†–´–¢
        if day_data['grab_closed'] > 0:
            analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Grab")
            analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Grab")
            print("   üö® –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç –Ω–∞ Grab")
            
        if day_data['gojek_closed'] > 0:
            analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –Ω–∞ Gojek")
            analysis['recommendations'].append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Gojek")
            print("   üö® –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç –Ω–∞ Gojek")
            
        # 2. –ù–ï–¢ –¢–û–í–ê–†–ê
        if day_data['grab_out_of_stock'] > 0:
            analysis['problems'].append("üì¶ –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Grab")
            analysis['recommendations'].append("üì¶ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
            print("   üì¶ –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Grab")
            
        if day_data['gojek_out_of_stock'] > 0:
            analysis['problems'].append("üì¶ –î–µ—Ñ–∏—Ü–∏—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Gojek")
            analysis['recommendations'].append("üì¶ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
            print("   üì¶ –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Gojek")
            
        # 3. –†–ï–°–¢–û–†–ê–ù –ó–ê–ù–Ø–¢
        if day_data['grab_busy'] > 0:
            analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Grab")
            analysis['recommendations'].append("üë®‚Äçüç≥ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã")
            print("   üö® –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Grab")
            
        if day_data['gojek_busy'] > 0:
            analysis['problems'].append("üö® –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Gojek")
            analysis['recommendations'].append("üë®‚Äçüç≥ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã")
            print("   üö® –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Å—Ç–æ—Ä–∞–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –Ω–∞ Gojek")
            
        # 4. –ú–ù–û–ì–û –û–¢–ú–ï–ù
        total_cancelled = day_data['grab_cancelled'] + day_data['gojek_cancelled']
        total_orders = day_data['total_orders']
        
        if total_orders > 0:
            cancel_rate = (total_cancelled / total_orders) * 100
            if cancel_rate > 15:  # –ë–æ–ª—å—à–µ 15% –æ—Ç–º–µ–Ω
                analysis['problems'].append(f"‚ùå –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {cancel_rate:.1f}%")
                analysis['recommendations'].append("‚ö° –£–ª—É—á—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω ({cancel_rate:.1f}%)")
                
        # 5. –î–û–õ–ì–û–ï –í–†–ï–ú–Ø –ì–û–¢–û–í–ö–ò
        prep_time = day_data['preparation_time']
        if prep_time and prep_time != '00:00:00':
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
            time_parts = prep_time.split(':')
            if len(time_parts) >= 2:
                prep_minutes = int(time_parts[0]) * 60 + int(time_parts[1])
                if prep_minutes > 30:
                    analysis['problems'].append(f"‚è±Ô∏è –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {prep_minutes} –º–∏–Ω")
                    analysis['recommendations'].append("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∫—É—Ö–Ω–µ")
                    print(f"   ‚è±Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ ({prep_minutes} –º–∏–Ω)")
                    
        # 6. –ù–ò–ó–ö–ò–ô –ú–ê–†–ö–ï–¢–ò–ù–ì
        avg_ad_spend = all_data['total_ad_spend'].mean()
        if day_data['total_ad_spend'] < avg_ad_spend * 0.5:  # –ú–µ–Ω—å—à–µ 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            analysis['problems'].append("üì± –ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã")
            analysis['recommendations'].append("üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç")
            print("   üì± –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã")
            
        # 7. –ù–ò–ó–ö–ò–ô –†–ï–ô–¢–ò–ù–ì
        if day_data['rating'] < 4.0:
            analysis['problems'].append(f"‚≠ê –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {day_data['rating']:.1f}")
            analysis['recommendations'].append("‚≠ê –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ —Å–µ—Ä–≤–∏—Å–∞")
            print(f"   ‚≠ê –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ({day_data['rating']:.1f})")
            
        # 8. –ü–õ–û–•–û–ô –î–ï–ù–¨ –ù–ï–î–ï–õ–ò
        weekdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        day_name = weekdays[day_data['day_of_week']]
        
        if day_data['day_of_week'] in [0, 1]:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            analysis['problems'].append(f"üìÖ –°–ª–∞–±—ã–π –¥–µ–Ω—å: {day_name}")
            print(f"   üìÖ –§–ê–ö–¢–û–†: –°–ª–∞–±—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({day_name})")
            
        # 9. –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–ì–û–î–£
        weather_impact = self._check_weather(date)
        if weather_impact:
            analysis['problems'].append(weather_impact)
            print(f"   üåßÔ∏è –§–ê–ö–¢–û–†: {weather_impact}")
            
        if not analysis['problems']:
            analysis['problems'].append("‚ùì –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            analysis['recommendations'].append("üîç –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π")
            print("   ‚ùì –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
            
        return analysis
        
    def _check_weather(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        
        try:
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏
            lat, lon = -8.6705, 115.2126
            
            url = "https://archive-api.open-meteo.com/v1/archive"
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': date,
                'end_date': date,
                'hourly': 'precipitation',
                'timezone': 'Asia/Jakarta'
            }
            
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                hourly = data.get('hourly', {})
                precipitation = hourly.get('precipitation', [])
                
                if precipitation:
                    total_rain = sum(precipitation)
                    if total_rain > 20:
                        return f"–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å: {total_rain:.1f}–º–º"
                    elif total_rain > 10:
                        return f"–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å: {total_rain:.1f}–º–º"
                        
        except Exception:
            pass
            
        return None
        
    def _generate_client_report(self, analyzed_days, restaurant_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        
        if not analyzed_days:
            return f"‚úÖ –£ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}' –Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏!"
            
        report = []
        report.append(f"üìã –û–¢–ß–ï–¢ –ü–û –†–ï–°–¢–û–†–ê–ù–£ '{restaurant_name}'")
        report.append("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_loss = sum(day['baseline'] - day['sales'] for day in analyzed_days)
        report.append(f"üí∞ –û–ë–©–ò–ï –ü–û–¢–ï–†–ò: {total_loss:,.0f} IDR –∑–∞ {len(analyzed_days)} –¥–Ω–µ–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        all_problems = []
        all_recommendations = []
        
        for day in analyzed_days:
            all_problems.extend(day['problems'])
            all_recommendations.extend(day['recommendations'])
            
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–±–ª–µ–º
        problem_counts = {}
        for problem in all_problems:
            problem_counts[problem] = problem_counts.get(problem, 0) + 1
            
        report.append(f"\nüîç –ì–õ–ê–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú:")
        for problem, count in sorted(problem_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            percentage = (count / len(analyzed_days)) * 100
            report.append(f"   ‚Ä¢ {problem} ({count} –¥–Ω–µ–π, {percentage:.0f}%)")
            
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        unique_recommendations = list(set(all_recommendations))
        
        report.append(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        for i, rec in enumerate(unique_recommendations[:8], 1):
            report.append(f"{i}. {rec}")
            
        # –î–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º
        report.append(f"\nüìÖ –î–ï–¢–ê–õ–ò –ü–û –ü–†–û–ë–õ–ï–ú–ù–´–ú –î–ù–Ø–ú:")
        
        for day in analyzed_days[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ö—É–¥—à–∏—Ö –¥–Ω–µ–π
            report.append(f"\n{day['date']} - –ü—Ä–æ–¥–∞–∂–∏: {day['sales']:,.0f} IDR ({day['drop_percent']:+.1f}%)")
            for problem in day['problems'][:3]:  # –¢–æ–ø-3 –ø—Ä–æ–±–ª–µ–º—ã –¥–Ω—è
                report.append(f"  ‚Ä¢ {problem}")
                
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        controllable_problems = [p for p in all_problems if not any(x in p for x in ['–¥–µ–Ω—å', '–¥–æ–∂–¥—å', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'])]
        controllable_pct = (len(controllable_problems) / len(all_problems)) * 100 if all_problems else 0
        
        report.append(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        report.append(f"   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º: {controllable_pct:.0f}%")
        report.append(f"   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: –í–´–°–û–ö–ò–ô" if controllable_pct > 60 else "   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: –°–†–ï–î–ù–ò–ô")
        
        return "\n".join(report)

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = FixedBadDaysAnalyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ Only Eggs
    result = analyzer.analyze_restaurant_problems("Only Eggs", 60)
    
    print("\n" + "="*80)
    print("üìã –ì–û–¢–û–í–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:")
    print("="*80)
    print(result)
    print("="*80)

if __name__ == "__main__":
    main()