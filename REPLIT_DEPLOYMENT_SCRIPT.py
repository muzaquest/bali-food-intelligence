#!/usr/bin/env python3
"""
üöÄ REPLIT DEPLOYMENT SCRIPT
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ProfessionalDetectiveAnalyzer
2. –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º
4. –û—Ç—á–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
"""

import sys
import os
import sqlite3
import traceback

def test_critical_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üîç –¢–ï–°–¢ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("-" * 50)
    
    try:
        from src.analyzers import ProfessionalDetectiveAnalyzer
        
        analyzer = ProfessionalDetectiveAnalyzer()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            ('2025-04-21', 1793000, "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: Replit –ø–æ–∫–∞–∑—ã–≤–∞–ª 0 IDR"),
            ('2025-05-15', 5446000, "Grab —Ç–æ–ª—å–∫–æ"),
            ('2025-05-18', 5930800, "Grab + Gojek"),
            ('2025-04-27', 9606500, "–í—ã—Å–æ–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏"),
            ('2025-04-02', 5145100, "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
        ]
        
        all_passed = True
        
        for date, expected_sales, description in test_cases:
            day_data = analyzer._get_day_detailed_data('Only Eggs', date)
            
            if not day_data:
                print(f"‚ùå {date}: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                all_passed = False
                continue
                
            total_sales = day_data.get('total_sales', 0) or 0
            grab_sales = day_data.get('grab_sales', 0) or 0
            gojek_sales = day_data.get('gojek_sales', 0) or 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ total_sales —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            calculated_total = grab_sales + gojek_sales
            
            if total_sales == expected_sales and total_sales == calculated_total:
                print(f"‚úÖ {date}: {total_sales:>12,.0f} IDR - {description}")
            else:
                print(f"‚ùå {date}: {total_sales:>12,.0f} IDR (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_sales:,.0f}) - {description}")
                print(f"   grab: {grab_sales:,.0f} + gojek: {gojek_sales:,.0f} = {calculated_total:,.0f}")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return False

def test_full_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    print("\nüîç –¢–ï–°–¢ 2: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    print("-" * 50)
    
    try:
        from src.analyzers import ProfessionalDetectiveAnalyzer
        
        analyzer = ProfessionalDetectiveAnalyzer()
        results = analyzer.analyze_sales_performance('Only Eggs', '2025-04-01', '2025-05-31')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
        if not results:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–µ–∫—Ü–∏–∏
        results_text = "\n".join(results)
        
        required_sections = [
            "üìä –û–ë–ó–û–† –ü–ï–†–ò–û–î–ê",
            "üìâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –î–ï–ù–¨",
            "üìã –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê"
        ]
        
        missing_sections = []
        for section in required_sections:
            if section not in results_text:
                missing_sections.append(section)
        
        if missing_sections:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 2025-04-21 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if "2025-04-21" in results_text and "1,793,000" in results_text:
            print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ 2025-04-21 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ 1,793,000 IDR")
            return True
        else:
            print("‚ùå 2025-04-21 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return False

def diagnose_replit_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã Replit"""
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("-" * 50)
    
    issues_found = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
    if os.path.exists('main.py'):
        with open('main.py', 'r', encoding='utf-8') as f:
            main_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–π –∫–æ–¥
        old_patterns = [
            'ProductionSalesAnalyzer',
            'professional_detective_analysis',
            'compare_periods',
            '7-8. –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–ê–ñ'
        ]
        
        for pattern in old_patterns:
            if pattern in main_content:
                issues_found.append(f"‚ùå –í main.py –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–æ–¥: {pattern}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥
        if 'ProfessionalDetectiveAnalyzer' not in main_content:
            issues_found.append("‚ùå –í main.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ProfessionalDetectiveAnalyzer")
    else:
        issues_found.append("‚ùå main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer_file = 'src/analyzers/professional_detective_analyzer.py'
    if os.path.exists(analyzer_file):
        with open(analyzer_file, 'r', encoding='utf-8') as f:
            analyzer_content = f.read()
            
        if "result['total_sales']" not in analyzer_content:
            issues_found.append("‚ùå –í –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—á–µ—Ç total_sales")
        else:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—á–µ—Ç total_sales")
    else:
        issues_found.append("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if issues_found:
        print("\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues_found:
            print(issue)
        return False
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True

def generate_fix_commands():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 60)
    
    print("""
1. –£–î–ê–õ–ò–¢–¨ —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –∏–∑ main.py:
   - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å ProductionSalesAnalyzer
   - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å professional_detective_analysis
   - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å compare_periods
   - –í–µ—Å—å —Ä–∞–∑–¥–µ–ª "7-8. –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù"

2. –î–û–ë–ê–í–ò–¢–¨ –≤ main.py:
   from src.analyzers import ProfessionalDetectiveAnalyzer
   detective_analyzer = ProfessionalDetectiveAnalyzer()
   detective_results = detective_analyzer.analyze_sales_performance(
       restaurant_name, start_date, end_date
   )

3. –ü–†–û–í–ï–†–ò–¢–¨ src/analyzers/professional_detective_analyzer.py:
   –°—Ç—Ä–æ–∫–∞ ~398 –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
   result['total_sales'] = (result['grab_sales'] or 0) + (result['gojek_sales'] or 0)

4. –¢–ï–°–¢ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
   test_data = analyzer._get_day_detailed_data('Only Eggs', '2025-04-21')
   print(test_data['total_sales'])  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 1793000
""")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ REPLIT DEPLOYMENT CHECKER")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É\n")
    
    # –¢–µ—Å—Ç—ã
    test1_passed = test_critical_data()
    test2_passed = test_full_analysis()
    diagnosis_clean = diagnose_replit_issues()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    if test1_passed and test2_passed and diagnosis_clean:
        print("üéØ –°–¢–ê–¢–£–°: ‚úÖ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£")
        print("üìà –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üíé –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ")
        print("üöÄ –ú–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –≤ Replit")
        return 0
    else:
        print("üö® –°–¢–ê–¢–£–°: ‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üîß –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        
        if not test1_passed:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
        if not test2_passed:
            print("‚ùå –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if not diagnosis_clean:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ")
            
        generate_fix_commands()
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)